<?xml version="1.0" encoding="UTF-8"?>
<Export generator="IRIS" version="26" zv="IRIS for Windows (x86-64) 2020.1 (Build 215U)" ts="2021-03-30 15:29:44">
<Class name="User.ALLUPDATE">
<Super>Ens.BusinessOperation</Super>
<TimeChanged>65833,51047.498422</TimeChanged>
<TimeCreated>65826,56929.467835</TimeCreated>

<Parameter name="INVOCATION">
<Default>Queue</Default>
</Parameter>

<Method name="UPDATED">
<FormalSpec>pRequest:User.Request,*pResponse:User.selectResponse</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tsc = $$$OK
	
	set pResponse = ##class(User.selectResponse).%New()
	
	try{
		if ($LENGTH(pRequest.Name) > 0)
		{
			set sql = "SELECT * FROM SQLUser.Peters WHERE Name = ?"
			set statement = ##class(%SQL.Statement).%New()
			set tsc = statement.%Prepare(sql)
			set result = statement.%Execute(pRequest.Name)
			
			while (result.%Next() '= 0){
			
				if ($LENGTH(pRequest.Age) > 0){set Age = pRequest.Age 
					}else { set Age = result.Age}
				if ($LENGTH(pRequest.DOB) > 0){set DOB = pRequest.DOB
					}else { set DOB = result.DOB}
				if ($LENGTH(pRequest.Gender) > 0) {set Gender = pRequest.Gender
					}else {set Gender = result.Gender}
				if ($LENGTH(pRequest.Race) > 0) {set Race =  pRequest.Race
					}else {set Race = result.Race}
				if ($LENGTH(pRequest.Surname) > 0) {set Surname = pRequest.Surname
					}else {set Surname = result.Surname}
			}
				
			set sql1 = "UPDATE SQLUser.Peters SET Age = ?, DOB = ?,Gender = ?, Race = ?, Surname = ? WHERE Name = ?"
			set state = ##class(%SQL.Statement).%New()
			set sc = state.%Prepare(sql1)
			set res = state.%Execute(Age,DOB,Gender,Race,Surname,pRequest.Name)
			
			set pResponse.Age = Age
			set pResponse.DOB = DOB
			set pResponse.Gender = Gender
			set pResponse.Race = Race
			set pResponse.Surname = Surname
			set pResponse.Name = pRequest.Name	
			return sc
		}
		
	}
	catch ex{
		set tsc = ex.AsStatus()
		set pResponse.Status = "Error"
	}
	set pResponse.Status = "Successfull"
	return tsc
]]></Implementation>
</Method>

<XData name="MessageMap">
<Data><![CDATA[
<MapItems>
	<MapItem MessageType="User.Request"> 
		<Method>UPDATED</Method>
	</MapItem>
</MapItems>
]]></Data>
</XData>
</Class>


<Class name="User.DeleteOperation">
<Super>Ens.BusinessOperation</Super>
<TimeChanged>65833,50912.003982</TimeChanged>
<TimeCreated>65826,50683.465414</TimeCreated>

<Parameter name="INVOCATION">
<Default>Queue</Default>
</Parameter>

<Method name="Delete">
<FormalSpec>pRequest:User.Request,*pResponse:User.selectResponse</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[

	set Data = ##class(User.Peter).%New()
	
	set tsc = $$$OK
	
	set pResponse = ##class(User.selectResponse).%New()
	
	try{
		set sql = "DELETE FROM SQLUser.Peters WHERE Name = ?"
		set statement = ##class(%SQL.Statement).%New()
		set tsc = statement.%Prepare(sql)
		set result = statement.%Execute(pRequest.Name)
		set pResponse.Status = "Successfully Deleted"
		return tsc
		
	}catch{
		set tsc = ex.AsStatus()
	}
	return tsc
]]></Implementation>
</Method>

<XData name="MessageMap">
<Data><![CDATA[
<MapItems>
	<MapItem MessageType="User.Request"> 
		<Method>Delete</Method>
	</MapItem>
</MapItems>
]]></Data>
</XData>
</Class>


<Class name="User.NewProduction">
<Super>Ens.Production</Super>
<TimeChanged>65833,52879.218408</TimeChanged>
<TimeCreated>65822,30969.059258</TimeCreated>

<XData name="ProductionDefinition">
<Data><![CDATA[
<Production Name="User.NewProduction" TestingEnabled="true" LogGeneralTraceEvents="false">
  <Description></Description>
  <ActorPoolSize>2</ActorPoolSize>
  <Item Name="User.Operation" Category="" ClassName="User.Operation" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="false" Schedule="">
  </Item>
  <Item Name="User.Select" Category="" ClassName="User.Select" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="false" Schedule="">
  </Item>
  <Item Name="Update" Category="" ClassName="User.UpdateOperation" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="false" Schedule="">
  </Item>
  <Item Name="Delete" Category="" ClassName="User.DeleteOperation" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="false" Schedule="">
  </Item>
  <Item Name="User.ALLUPDATE" Category="" ClassName="User.ALLUPDATE" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="false" Schedule="">
  </Item>
  <Item Name="PersonProcess" Category="" ClassName="User.PersonProcess" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="false" Schedule="">
  </Item>
</Production>
]]></Data>
</XData>
</Class>


<Class name="User.Operation">
<Super>Ens.BusinessOperation</Super>
<TimeChanged>65833,51008.839426</TimeChanged>
<TimeCreated>65822,29947.777976</TimeCreated>

<Parameter name="INVOCATION">
<Default>Queue</Default>
</Parameter>

<Method name="Make">
<FormalSpec>pRequest:User.Request,*pResponse:User.selectResponse</FormalSpec>
<Implementation><![CDATA[
	set Data = ##class(User.Peter).%New()
	
	set tsc = $$$OK
	//New instance 
	set pResponse = ##class(User.selectResponse).%New()
	set Validate = ##class(User.Validation).%New()
	
	if (Validate.Validation(pRequest) = 1)
	{
		if (Validate.ValidateDOB(pRequest) = 1)
		{
			set Age = Validate.Calculate(pRequest)
			try {
				set sql = "INSERT INTO SQLUser.Peters(Age, DOB, Gender, Name, Race, Surname) VALUES (?,?,?,?,?,?)"
				set statement = ##class(%SQL.Statement).%New()
				set tsc = statement.%Prepare(sql)
				set result = statement.%Execute(Age, pRequest.DOB, pRequest.Gender, pRequest.Name, pRequest.Race, pRequest.Surname)
				set pResponse.Age = Age
				set pResponse.Name = pRequest.Name
				set pResponse.Surname = pRequest.Surname
				set pResponse.Race = pRequest.Race
				set pResponse.Gender = pRequest.Gender
				set pResponse.DOB = pRequest.DOB
				set pResponse.Status = "Success"
				return tsc
		
			}
			catch ex {
				set tsc = ex.AsStatus()
			
	}}}
	set pResponse.Status = "Please enter Valid information"
	return tsc
]]></Implementation>
</Method>

<XData name="MessageMap">
<Data><![CDATA[
<MapItems>
	<MapItem MessageType="User.Request">
	<Method>Make</Method>
	</MapItem>
	</MapItems>
]]></Data>
</XData>
</Class>


<Class name="User.Person">
<TimeChanged>65833,51590.588631</TimeChanged>
<TimeCreated>65828,47297.470273</TimeCreated>

<Property name="Name">
<Type>%String</Type>
</Property>

<Property name="Surname">
<Type>%String</Type>
</Property>

<Property name="Age">
<Type>%Integer</Type>
</Property>

<Property name="Gender">
<Type>%String</Type>
</Property>

<Property name="Race">
<Type>%String</Type>
</Property>

<Property name="DOB">
<Type>%Integer</Type>
</Property>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DefaultData>PersonDefaultData</DefaultData>
<Data name="PersonDefaultData">
<Subscript>"Person"</Subscript>
<Value name="1">
<Value>Name</Value>
</Value>
<Value name="2">
<Value>Surname</Value>
</Value>
<Value name="3">
<Value>Age</Value>
</Value>
<Value name="4">
<Value>Gender</Value>
</Value>
<Value name="5">
<Value>Race</Value>
</Value>
<Value name="6">
<Value>DOB</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="User.PersonProcess.Context">
<Description>
This class is generated by the User.PersonProcess BPL class.
This class should not be edited or modified in any way.
Do not make direct use of this class in your application.</Description>
<ClassType>persistent</ClassType>
<CompileAfter>User.PersonProcess</CompileAfter>
<IncludeCode/>
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.BP.Context</Super>
<TimeChanged>65833,52873.748311</TimeChanged>
<TimeCreated>65828,37204.503705</TimeCreated>
<GeneratedBy>Ens.BPL.Compiler.CLS</GeneratedBy>

<Method name="OnResponse1">
<Description>
Response Handler for call to User.Operation</Description>
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,request:User.Request,response:User.selectResponse,callrequest:User.Request,callresponse:User.selectResponse,callname:%String</FormalSpec>
<Language>objectscript</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Set status=$$$OK,response.Status=callresponse.Status
 If $$$ISERR(status) Quit
 } while (0)
Exit Quit status
Trap Set $ZT="",status=##class(Ens.Util.Error).EnsSystemError("User.PersonProcess.Thread1","OnResponse1")
 Goto Exit
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
</Storage>
</Class>


<Class name="User.PersonProcess.Thread1">
<Description>
This class is generated by the User.PersonProcess BPL class.
This class should not be edited or modified in any way.
Do not make direct use of this class in your application.</Description>
<ClassType>persistent</ClassType>
<CompileAfter>User.PersonProcess</CompileAfter>
<IncludeCode/>
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.BP.Thread</Super>
<TimeChanged>65833,52874.225606</TimeChanged>
<TimeCreated>65833,52873.737201</TimeCreated>
<GeneratedBy>Ens.BPL.Compiler.CLS</GeneratedBy>

<Method name="S1">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>objectscript</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 #; --- Begin Call Verify ---
 #; --- Begin Request ---
 Set callrequest=##class(User.Request).%New()
 If '$IsObject(callrequest) Set status=%objlasterror Quit
 Set status=$$$OK,callrequest=request
 If $$$ISERR(status) Quit
 Set status=..MakeAsyncCall("OnResponse1","User.Operation",callrequest,"Verify",1,0,"Verify",1)
 If $$$ISERR(status) Quit
 Kill callrequest
 #; --- End Request ---
 #; --- End Call Verify ---
 Do ..%PendingResponses.Clear(),..%SyncResponses.Clear()
 Set ..%SyncTimedOut=0,..%PendingTimeout="",..%PendingAlarmHandle="",..%SyncName=""
 If ..%Process.IsResponsePending("Verify") Do ..%PendingResponses.SetAt("","Verify")
 If ..%PendingResponses.Count()>0 {
    Set %name="",%alarmhandle=""
    Set status=..%Process.MakeTimerCall("_Timeout",.%name,5,"Verify",.%alarmhandle,"")
    If $$$ISERR(status) Quit
    Do ..%PendingResponses.SetAt("",%name) Set ..%PendingTimeout=%name,..%PendingAlarmHandle=%alarmhandle,..%SyncName=""
 }
 If ..%PendingResponses.Count()=0 {
    Set ..%NextState="S3"
 } else {
    Set ..%NextState="S2",..%Wait=1
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S1") Goto Exit
]]></Implementation>
</Method>

<Method name="S2">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>objectscript</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 If ..%PendingResponses.Count()=0 {
    Set ..%NextState="S3"
 } else {
    Set ..%NextState="S2",..%Wait=1
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S2") Goto Exit
]]></Implementation>
</Method>

<Method name="S3">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>objectscript</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Do process.ClearAllPendingResponses()
 Set ..%NextState="Stop"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S3") Goto Exit
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
</Storage>
</Class>


<Class name="User.PersonProcess">
<Description>
</Description>
<Super>Ens.BusinessProcessBPL</Super>
<TimeChanged>65833,52872.46161</TimeChanged>
<TimeCreated>65828,36932.078795</TimeCreated>

<XData name="BPL">
<Description>
BPL Definition</Description>
<XMLNamespace>http://www.intersystems.com/bpl</XMLNamespace>
<Data><![CDATA[
<process language='objectscript' request='User.Request' response='User.selectResponse' height='2000' width='2000' >
<sequence xend='200' yend='350' >
<call name='Verify' target='User.Operation' async='0' timeout='5' xpos='200' ypos='250' >
<request type='User.Request' >
<assign property="callrequest" value="request" action="set" />
</request>
<response type='User.selectResponse' >
<assign property="response.Status" value="callresponse.Status" action="set" />
</response>
</call>
</sequence>
</process>
]]></Data>
</XData>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
</Storage>
</Class>


<Class name="User.Peter">
<SqlTableName>Peters</SqlTableName>
<Super>%Persistent,%Populate,User.Person</Super>
<TimeChanged>65832,40525.305048</TimeChanged>
<TimeCreated>65822,29375.045512</TimeCreated>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^User.PeterD</DataLocation>
<DefaultData>PeterDefaultData</DefaultData>
<IdLocation>^User.PeterD</IdLocation>
<IndexLocation>^User.PeterI</IndexLocation>
<StreamLocation>^User.PeterS</StreamLocation>
<Data name="PeterDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Name</Value>
</Value>
<Value name="3">
<Value>Surname</Value>
</Value>
<Value name="4">
<Value>Age</Value>
</Value>
<Value name="5">
<Value>Gender</Value>
</Value>
<Value name="6">
<Value>Race</Value>
</Value>
<Value name="7">
<Value>DOB</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="User.Request">
<Super>Ens.Request,User.Person</Super>
<TimeChanged>65833,51659.404026</TimeChanged>
<TimeCreated>65822,29493.444752</TimeCreated>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DefaultData>RequestDefaultData</DefaultData>
<Data name="RequestDefaultData">
<Structure>listnode</Structure>
<Subscript>"Request"</Subscript>
<Value name="1">
<Value>Name</Value>
</Value>
<Value name="2">
<Value>Surname</Value>
</Value>
<Value name="3">
<Value>Age</Value>
</Value>
<Value name="4">
<Value>Gender</Value>
</Value>
<Value name="5">
<Value>Race</Value>
</Value>
<Value name="6">
<Value>DOB</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="User.Select">
<Super>Ens.BusinessOperation</Super>
<TimeChanged>65832,38173.983415</TimeChanged>
<TimeCreated>65826,36880.807512</TimeCreated>

<Parameter name="INVOCATION">
<Default>Queue</Default>
</Parameter>

<Method name="Select">
<FormalSpec>pRequest:User.Request,*pResponse:User.selectResponse</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set Data = ##class(User.Peter).%New()
	
	set tsc = $$$OK
	
	set pResponse = ##class(User.selectResponse).%New()
	
	try{
	    set sql = "SELECT * FROM SQLUser.Peters WHERE Name = ?"
		set statement = ##class(%SQL.Statement).%New()
		set tsc = statement.%Prepare(sql)
		set result = statement.%Execute(pRequest.Name)
		
		while (result.%Next() '= 0){
			set pResponse.Age = result.Age
			set pResponse.Surname = result.Surname
			set pResponse.DOB = result.DOB
			set pResponse.Gender = result.Gender
			set pResponse.Name = result.Name
			set pResponse.Race = result.Race
			set pResponse.Status = "Success"
		}
		return tsc
	}catch ex {
		set tsc = ex.AsStatus()
	}
	set pResponse.Status = "Error"
	return tsc
]]></Implementation>
</Method>

<XData name="MessageMap">
<Data><![CDATA[
<MapItems>
	<MapItem MessageType="User.Request">
	<Method>Select</Method>
	</MapItem>
	</MapItems>
]]></Data>
</XData>
</Class>


<Class name="User.UpdateOperation">
<Super>Ens.BusinessOperation</Super>
<TimeChanged>65827,48657.539682</TimeChanged>
<TimeCreated>65826,50292.070097</TimeCreated>

<Parameter name="INVOCATION">
<Default>Queue</Default>
</Parameter>

<Method name="Update">
<FormalSpec>pRequest:User.SelectRequest,*pResponse:User.selectResponse</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[

	set Data = ##class(User.Peter).%New()
	
	set tsc = $$$OK
	
	set pResponse = ##class(User.selectResponse).%New()
	
	try{
		set sql = "UPDATE SQLUser.Peters set Age = 89 WHERE Name = ?"
		set statement = ##class(%SQL.Statement).%New()
		set tsc = statement.%Prepare(sql)
		set result = statement.%Execute(pRequest.Name)
	}catch{
		set tsc = ex.AsStatus()
		set pResponse.OK = "Error"
	}
	set pResponse.OK = "Successfull"
	return tsc
]]></Implementation>
</Method>

<XData name="MessageMap">
<Data><![CDATA[
<MapItems>
	<MapItem MessageType="User.SelectRequest"> 
		<Method>Update</Method>
	</MapItem>
</MapItems>
]]></Data>
</XData>
</Class>


<Class name="User.Validation">
<Super>%Persistent,%Populate,User.Person</Super>
<TimeChanged>65833,51839.15834</TimeChanged>
<TimeCreated>65828,42510.6695</TimeCreated>

<Method name="Validation">
<FormalSpec>pRequest:Request</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
		if ($LENGTH(pRequest.Name) = 0) {return 0} 
		if ($LENGTH(pRequest.Surname) = 0){return 0}
		if ($LENGTH(pRequest.Gender) = 0){return 0}
		if ($LENGTH(pRequest.Race) = 0){return 0}
		if ($LENGTH(pRequest.DOB) = 0) {return 0}
		if ($LENGTH(pRequest.Age) '= 0) {return 0}
		return 1
]]></Implementation>
</Method>

<Method name="ValidateDOB">
<FormalSpec>pRequest:Request</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	if ($LENGTH(pRequest.DOB) '= 8) {return 0}
	if ($NUMBER(pRequest.DOB) = 0) {return 0}
	return 1
]]></Implementation>
</Method>

<Method name="Calculate">
<FormalSpec>pRequest:Request</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	set Age = 2021 - $EXTRACT(pRequest.DOB,1,4)
	return Age
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^User.ValidationD</DataLocation>
<DefaultData>ValidationDefaultData</DefaultData>
<IdLocation>^User.ValidationD</IdLocation>
<IndexLocation>^User.ValidationI</IndexLocation>
<StreamLocation>^User.ValidationS</StreamLocation>
<Data name="ValidationDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Name</Value>
</Value>
<Value name="3">
<Value>Surname</Value>
</Value>
<Value name="4">
<Value>Age</Value>
</Value>
<Value name="5">
<Value>Gender</Value>
</Value>
<Value name="6">
<Value>Race</Value>
</Value>
<Value name="7">
<Value>DOB</Value>
</Value>
</Data>
</Storage>
</Class>




<Class name="User.selectResponse">
<Super>Ens.Response,User.Person</Super>
<TimeChanged>65833,52359.330356</TimeChanged>
<TimeCreated>65826,39416.346563</TimeCreated>

<Property name="Status">
<Type>%String</Type>
</Property>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DefaultData>selectResponseDefaultData</DefaultData>
<Data name="selectResponseDefaultData">
<Structure>listnode</Structure>
<Subscript>"selectResponse"</Subscript>
<Value name="1">
<Value>Name</Value>
</Value>
<Value name="2">
<Value>Surname</Value>
</Value>
<Value name="3">
<Value>Age</Value>
</Value>
<Value name="4">
<Value>Gender</Value>
</Value>
<Value name="5">
<Value>Race</Value>
</Value>
<Value name="6">
<Value>DOB</Value>
</Value>
<Value name="7">
<Value>Status</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="User.updateRequest">
<Super>Ens.Request</Super>
<TimeChanged>65827,42434.288706</TimeChanged>
<TimeCreated>65827,42432.650875</TimeCreated>

<Property name="Surname">
<Type>%String</Type>
</Property>

<Property name="Gender">
<Type>%String</Type>
</Property>

<Property name="Race">
<Type>%String</Type>
</Property>

<Property name="Age">
<Type>%Integer</Type>
</Property>

<Property name="DOB">
<Type>%Integer</Type>
</Property>

<Property name="Name">
<Type>%String</Type>
</Property>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DefaultData>updateRequestDefaultData</DefaultData>
<Data name="updateRequestDefaultData">
<Structure>listnode</Structure>
<Subscript>"updateRequest"</Subscript>
<Value name="1">
<Value>Surname</Value>
</Value>
<Value name="2">
<Value>Gender</Value>
</Value>
<Value name="3">
<Value>Race</Value>
</Value>
<Value name="4">
<Value>Age</Value>
</Value>
<Value name="5">
<Value>DOB</Value>
</Value>
<Value name="6">
<Value>Name</Value>
</Value>
</Data>
</Storage>
</Class>
</Export>
