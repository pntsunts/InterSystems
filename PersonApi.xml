<?xml version="1.0" encoding="UTF-8"?>
<Export generator="IRIS" version="26" zv="IRIS for Windows (x86-64) 2020.1 (Build 215U)" ts="2021-04-14 11:01:44">
<Routine name="User.ALLUPDATE.1" type="INT" languagemode="0" generated="1" timestamp="65834,50479.377791"><![CDATA[
 ;User.ALLUPDATE.1
 ;Generated for class User.ALLUPDATE.  Do NOT edit. 03/31/2021 02:01:19PM
 ;;4A6C7430;User.ALLUPDATE
 ;
zGetRequestClassList() public {
 Set tList=""
 Set tList=tList_$lb("User.Request")
 Quit tList }
zGetResponseClassList(pRequest="") public {
 If pRequest="User.Request" Quit $lb("User.selectResponse")
 If pRequest="" Quit $lb("User.selectResponse")
 Quit "" }
zGetSettingRow(pSettingName="",pSourceClass="") public {
	Set tRow = ""
	// Check if the class has been compiled with the new generator
	If (pSourceClass = "User.ALLUPDATE") {
		Set tRow = $case(pSettingName,
			"AlertGroups": $LB("AlertGroups","The Alert Groups to which this item belongs.","%Library.String","",2500,"","","","",0,"Alert Groups","Alerting","Alerting Control","selector?multiSelect=1&context={Ens.ContextSearch/ProductionAlertGroups?productionName=@productionId}"),
			"AlertOnError": $LB("AlertOnError","Send an Alert message whenever an error occurs here","%Library.Boolean",0,"","","","","",0,"Alert On Error","Alerting","Alerting Control",""),
			"AlertRetryGracePeriod": $LB("AlertRetryGracePeriod","When AlertOnError is True, and the Operation is retrying,"_$char(13,10)_"refrain from alerting if the Operation succeeds within this number of seconds after an error","%Library.Numeric",0,"",0,"","","",0,"Alert Retry Grace Period","Alerting","Alerting Control",""),
			"ArchiveIO": $LB("ArchiveIO","If set, the Adapter will log in the InterSystems IRIS I/O archive each input and output communication it has with its external system.","%Library.Boolean",0,"","","","","",0,"Archive IO","Dev","Development and Debugging",""),
			"BusinessPartner": $LB("BusinessPartner","Name of a Business Partner Profile associated with this item","%Library.String","",128,"","","","",0,"Business Partner","Info","Informational Settings","partnerSelector"),
			"FailureTimeout": $LB("FailureTimeout","Total number of seconds to keep trying to deliver the message. <br>"_$char(13,10)_"After this number of seconds has elapsed, the business operation discards the message data and returns an error code. <br>"_$char(13,10)_"To ensure that no message is ever skipped, enter a Failure Timeout value of -1, which means 'Never time out'. <br>"_$char(13,10)_"Use a setting of -1 when complete data delivery is critical, for example in health care applications. ","%Library.Numeric",15,"",-1,"","","",0,"Failure Timeout","Additional","Additional Settings",""),
			"InactivityTimeout": $LB("InactivityTimeout","Send an Alert message if this number of seconds elapses with no messages being processed by this item. <br/>"_$char(13,10)_"Note that this alert will be sent even if AlertOnError is False. <br/>"_$char(13,10)_"Zero means no alerts of this type will be sent.","%Library.Numeric",0,"",0,"","","",0,"Inactivity Timeout","Alerting","Alerting Control",""),
			"QueueCountAlert": $LB("QueueCountAlert","Number of messages on this item's queue needed to trigger an Alert message to be sent. Note that no further"_$char(13,10)_"alerts will be sent unless the number of messages on the queue drops below 80% of this number and then rises again to this number. <br/>"_$char(13,10)_"Note that this alert will be sent even if AlertOnError is False. <br/>"_$char(13,10)_"Zero means no alerts of this type will be sent.","%Library.Numeric",0,"",0,"","","",0,"Queue Count Alert","Alerting","Alerting Control",""),
			"QueueWaitAlert": $LB("QueueWaitAlert","The number of seconds a message at the front of the queue may have waited since being queued before an alert is triggered.<br/>"_$char(13,10)_"Only one alert will be raised per host item per sequential trigger of the queue wait threshold. <br/>"_$char(13,10)_"Note that this alert will be sent even if AlertOnError is False. <br/>"_$char(13,10)_"Zero means no alerts of this type will be sent.","%Library.Numeric",0,"",0,"","","",0,"Queue Wait Alert","Alerting","Alerting Control",""),
			"ReplyCodeActions": $LB("ReplyCodeActions","<p>A comma-separated list of codes specifying what action this Operation will take on various reply status conditions. "_$char(13,10)_"The format of the list is: <br/> &lt;code&gt;=&lt;actions&gt;,(&lt;code&gt;,&lt;code&gt;)=&lt;actions&gt;,...<br/>"_$char(13,10)_"Types of reply status condition are identified by a specification code:"_$char(13,10)_"<ul style=""list-style-type: none;"">"_$char(13,10)_"<li><b>E</b> - Error status returned from message handler</li>"_$char(13,10)_"<li><b>E#&lt;statuscode&gt;</b> - Error status returned from message handler has status code equal to &lt;statuscode&gt;</li>"_$char(13,10)_"<li><b>E*&lt;text&gt;</b> - Error status returned from message handler contains text string &lt;text&gt;</li>"_$char(13,10)_"<li><b>X</b> - there is no reply message at all</li>"_$char(13,10)_"</ul></p>"_$char(13,10)_"<p>The following values for &lt;actions&gt; may be used alone or in combinations: "_$char(13,10)_"<ul style=""list-style-type: none;"">"_$char(13,10)_"<li><b>C</b> - Treat the message as Completed OK.</li>"_$char(13,10)_"<li><b>W</b> - Log a warning. If no other non-warning &lt;actions&gt; are triggered, the message will be treated as Completed OK.</li>"_$char(13,10)_"<li><b>R</b> - Retry the message according to the configured RetryInterval and FailureTimeout; finally Fail unless a "_$char(13,10)_"different action is also specified.</li>"_$char(13,10)_"<li><b>S</b> - Suspend the message, log an error, and move on to try the next message.</li>"_$char(13,10)_"<li><b>D</b> - Disable the Operation, log an error and restore the message to the front of the Operation's queue.</li>"_$char(13,10)_"<li><b>F</b> - Fail with an error and move on to try the next message from the Operation's queue.</li></ul>"_$char(13,10)_"An example of a valid ReplyCodeActions specification is 'E#6301=R,E#&lt;Ens&gt;ErrGeneral=RD,E=F'. This specification will result in a "_$char(13,10)_"retry when error code 6301 is encountered. When error code &lt;Ens&gt;ErrGeneral is encountered, the Operation first retries to send "_$char(13,10)_"the message until FailureTimeout and then, if the error continues, it disables the Operation instead of failing. Any other errors will "_$char(13,10)_"cause the Operation to fail processing of the current message and return the error status to the caller, without retrying first.</p>"_$char(13,10)_"<p><b>The default behavior is 'E=F'.</b> Thus any error status will result in the error being logged and returned to the caller,"_$char(13,10)_"no retries will be attempted, and the Operation will move on to try the next message from its queue.</p>"_$char(13,10)_"<p>All codes where &lt;actions&gt; consists of only 'W' (for 'log a Warning') will be evaluated, and a warning will be"_$char(13,10)_"generated for each matching &lt;code&gt;. Other &lt;code&gt; values will be evaluated in left-to-right order, executing the"_$char(13,10)_"first matching &lt;code&gt; that has a non-warning &lt;actions&gt; value. As noted in the details for the 'W' flag, an error"_$char(13,10)_"that only triggers 'W' &lt;actions&gt; will be treated as Completed OK.</p>","%Library.String","",1000,"","","","",0,"Reply Code Actions","Additional","Additional Settings",""),
			"RetryInterval": $LB("RetryInterval","How frequently to retry access to the output system","%Library.Numeric",5,"",0,"","","",0,"Retry Interval","Additional","Additional Settings",""),
			"SendSuperSession": $LB("SendSuperSession","<p>Flag whether the  %SuperSession property ought to be included in the outbound message.</p>"_$char(13,10)_"<p>Including the Super Session in the outbound message depends on the transport mechanism.</p>"_$char(13,10)_"<p>InterSystems IRIS supports automatically including the %SuperSession in the HTTP Headers for"_$char(13,10)_"both the HTTP and SOAP Outbound Adapters based on this setting.</p>"_$char(13,10)_"<p>For other transport mechanisms custom code can call the host operation API: <METHOD>IncludeSuperSession</METHOD>(.tSC)"_$char(13,10)_"and then use as appropriate the host property value of <PROPERTY>%SuperSession</PROPERTY> if IncludeSuperSession"_$char(13,10)_"API returns true.</p>"_$char(13,10)_"<p>The IncludeSuperSession() API returns true if the operation ought to send a super session based on this"_$char(13,10)_"host setting of SendSuperSession and the %SuperSession property is not empty.</p>"_$char(13,10)_"<p>The IncludeSuperSession() API will populate the host property <PROPERTY>%SuperSession</PROPERTY>"_$char(13,10)_"with either a generated Super Session or leave it with the Super Session passed to it with the request.</p>"_$char(13,10)_"<p>The IncludeSuperSession() API will return false if either SendSuperSession"_$char(13,10)_"is false or there was an error generating the super session (tSC will be populated accordingly).</p>"_$char(13,10)_"Example use in custom adapter Code: <br>"_$char(13,10)_"<pre>"_$char(13,10)_"#dim tSC As %Status = $$$OK"_$char(13,10)_"If ..BusinessHost.IncludeSuperSession(.tSC) {"_$char(13,10)_" /*"_$char(13,10)_"	  code to include ..BusinessHost.%SuperSession in output"_$char(13,10)_"	  based on transport mechanism."_$char(13,10)_" */	"_$char(13,10)_"}</pre>"_$char(13,10)_"<p>See also Host methods <method>GenerateSuperSession</method> and <method>OnGenerateSuperSession</method></p>","%Library.Boolean","","","","","","",0,"Send SuperSession","Additional","Additional Settings",""),
			"ThrottleDelay": $LB("ThrottleDelay","Duration of forced idleness before processing the next message, in milliseconds","%Library.Numeric",0,"","","","","",0,"Throttle Delay","Additional","Additional Settings",""),
			: "")
	}
	Else { // Fall back on getting the data dynamically 
		Set tRow = ..GetDynamicSettingRow(pSettingName,pSourceClass)
	}
	Quit tRow }
zMessageHandler(pRequest,pResponse) public {
 Set $ZT="Trap",$EC="",tSC=1
 do {
 If pRequest.%IsA("User.Request") {
  Do:..ArchiveIO ..NewIOLogEntry(0,1,"","UPDATED",..%SessionId,pRequest)
  Set ^IRIS.Temp.EnsJobMonitor($namespace,"sys"_":"_$Job,..%ConfigName,"%Method")="UPDATED",^IRIS.Temp.EnsJobMonitor($namespace,"sys"_":"_$Job,..%ConfigName,"%LastActivity")=$zdatetime($ztimestamp,3,,3)
  Set tSC=..UPDATED(.pRequest,.pResponse)
  Set ^IRIS.Temp.EnsJobMonitor($namespace,"sys"_":"_$Job,..%ConfigName,"%Method")="",^IRIS.Temp.EnsJobMonitor($namespace,"sys"_":"_$Job,..%ConfigName,"%LastActivity")=$zdatetime($ztimestamp,3,,3)
  Do:$S($D(%Ensemble("DoTrace")):%Ensemble("DoTrace"),1:##class(Ens.Util.Trace).DoTrace()) ##class(Ens.Util.Trace).WriteTrace("system",$classname(),"MessageHandler","UPDATED() returned with status "_$$getAllErrorTexts^EnsUtil(tSC)_", Retry="_..Retry_", SuspendMessage="_..SuspendMessage_", DeferResponse="_..DeferResponse_", Response="_$S('($Data(pResponse)#2&&$IsObject(pResponse)):"", 1:pResponse_"/"_$S('pResponse.%Extends("%Persistent"):"", 1:pResponse.%Id())))
  Do:$IsObject(..IOLogEntry) ..CloseIOLogEntry(tSC,"",$G(pResponse))
  Quit
 }
 Do:..ArchiveIO ..NewIOLogEntry(0,1,"","OnMessage",..%SessionId,pRequest)
 Set ^IRIS.Temp.EnsJobMonitor($namespace,"sys"_":"_$Job,..%ConfigName,"%Method")="OnMessage",^IRIS.Temp.EnsJobMonitor($namespace,"sys"_":"_$Job,..%ConfigName,"%LastActivity")=$zdatetime($ztimestamp,3,,3)
 Set tSC=..OnMessage(.pRequest,.pResponse)
 Set ^IRIS.Temp.EnsJobMonitor($namespace,"sys"_":"_$Job,..%ConfigName,"%Method")="",^IRIS.Temp.EnsJobMonitor($namespace,"sys"_":"_$Job,..%ConfigName,"%LastActivity")=$zdatetime($ztimestamp,3,,3)
 Do:$S($D(%Ensemble("DoTrace")):%Ensemble("DoTrace"),1:##class(Ens.Util.Trace).DoTrace()) ##class(Ens.Util.Trace).WriteTrace("system",$classname(),"MessageHandler","OnMessage() returned with status "_$$getAllErrorTexts^EnsUtil(tSC)_", Retry="_..Retry_", SuspendMessage="_..SuspendMessage_", DeferResponse="_..DeferResponse_", Response="_$S('($Data(pResponse)#2&&$IsObject(pResponse)):"", 1:pResponse_"/"_$S('pResponse.%Extends("%Persistent"):"", 1:pResponse.%Id())))
 Do:$IsObject(..IOLogEntry) ..CloseIOLogEntry(tSC,"",pResponse)
 } While 0
Exit
 If $TLevel>0 Set tTL=$TLevel  While $TLevel>0 { TCommit } Do ##class(Ens.Util.Log).LogWarning($classname(),"MessageHandler",tTL_" open user transaction"_$S(tTL>1:"s",1:"")_" found after BO MessageHandler method; committing before proceeding")
 Quit tSC
Trap
 Set $ZT="",tSC=##class(Ens.Util.Error).ExceptionStatus()
 Goto Exit }
zMessageHeaderHandler(pRequestHeader,pResponseHeader) public {
	Set $EC="",(tSC,tSCSuspend)=1, tAborted=0, pResponseHeader="", tDoAlert=""
	try {
		Set ..%RequestHeader=pRequestHeader, %Ensemble("CurrentHeaderId") = pRequestHeader.%Id()
		If pRequestHeader.MessageBodyClassName'="" {
			Set tRequest = $classmethod(pRequestHeader.MessageBodyClassName,"%OpenId",pRequestHeader.MessageBodyId,,.tSC)
			If '$IsObject(tRequest) Set tSC=$$Error^%apiOBJ("<Ens>ErrGeneral","Could not open MessageBody "_pRequestHeader.MessageBodyId_" for MessageHeader #"_pRequestHeader.%Id()_" with body class "_pRequestHeader.MessageBodyClassName_":"_$$getAllErrorTexts^EnsUtil(tSC))  Quit
		} Else {
			Set tRequest="", tSC=$$Error^%apiOBJ("<Ens>ErrGeneral","No MessageBody classname for MessageHeader #"_pRequestHeader.%Id())  Quit
		}
		Do ##class(Ens.Util.Statistics).InitStats(..%ConfigName)
		Set tConfigName = ..%ConfigName, tResponse = ""
		Do pRequestHeader.SetStatus(3)
		Set (..%SessionId,%Ensemble("SessionId")) = pRequestHeader.SessionId
		Set ..%SuperSession=pRequestHeader.SuperSession
		Set (tEndTime,..%LastReportedError)="", ..RetryCount=1, (..Retry,..SuspendMessage,..DeferResponse,..%AlertStartTime,tFailureTimedOut,tTerminate)=0
		While 1 { ; Retry loop
			Set tTimeCalled=$ZH, tDoAlert=""
			Set:'tEndTime tEndTime = tTimeCalled + ..FailureTimeout
			If $D(^Ens.Runtime("CrashedMessage",pRequestHeader.%Id())) {
				Kill ^Ens.Runtime("CrashedMessage",pRequestHeader.%Id())
				Set tSC=##class(Ens.Util.Error).EnsError($classname(),"MessageHeaderHandler","<Ens>ErrPreviouslyCrashedMessage",pRequestHeader.%Id())
			} Else {
				Set tSC=..MessageHandler(tRequest,.tResponse)
			}
			If ('tSC) {
				Set $EC=""  try {
					Do:$S($D(%Ensemble("DoTrace")):%Ensemble("DoTrace"),1:##class(Ens.Util.Trace).DoTrace()) ##class(Ens.Util.Trace).WriteTrace("system",$classname(),"MessageHeaderHandler","calling OnError R")
					Set tDoAlert=..OnError(.tSC)
				} catch {
					Set tSC=$select(+tSC:##class(Ens.Util.Error).EnsSystemError($classname(),"MessageHeaderHandler"),1:$$AppendStatus^%occSystem(tSC,##class(Ens.Util.Error).EnsSystemError($classname(),"MessageHeaderHandler"))), tDoAlert=1
				}
				If $TLevel>0 Set tTL=$TLevel  While $TLevel>0 { TCommit } Do ##class(Ens.Util.Log).LogWarning($classname(),"MessageHeaderHandler",tTL_" open user transaction"_$S(tTL>1:"s",1:"")_" found after OnError() R; committing before proceeding")
			}
			Set $EC=""  try {
				Set tMHSC=tSC
				Set tAction=..OnGetReplyAction(tRequest,.tResponse,.tSC)
				Set:""'=tAction tSC=..doReplyAction(tAction, tRequest,.tResponse,tSC)
				If tSC'=tMHSC&&('tSC) {
					Do:$S($D(%Ensemble("DoTrace")):%Ensemble("DoTrace"),1:##class(Ens.Util.Trace).DoTrace()) ##class(Ens.Util.Trace).WriteTrace("system",$classname(),"MessageHeaderHandler","calling OnError A")
					Set tDoAlert=..OnError(.tSC)
				}
			} catch {
				Set tSC=$select(+tSC:##class(Ens.Util.Error).EnsSystemError($classname(),"MessageHeaderHandler"),1:$$AppendStatus^%occSystem(tSC,##class(Ens.Util.Error).EnsSystemError($classname(),"MessageHeaderHandler"))), tDoAlert=1
			}
			If $TLevel>0 Set tTL=$TLevel  While $TLevel>0 { TCommit } Do ##class(Ens.Util.Log).LogWarning($classname(),"MessageHeaderHandler",tTL_" open user transaction"_$S(tTL>1:"s",1:"")_" found after ReplyAction OnError() A; committing before proceeding")
			If ..SuspendMessage {
				Set tSCSuspend=tSC
				Set tSC=$$Error^%apiOBJ("<Ens>ErrSuspending",pRequestHeader.%Id(),$$getAllErrorTexts^EnsUtil(tSC))
				Quit
			}
			Quit:..DeferResponse
			Quit:'..Retry
			Set ..Retry=0
			If ('tSC) {
				Set tTxt=$P($$getAllErrorTexts^EnsUtil(tSC)," -- ") ; strip off "logged as" varying text
				Set:'..%AlertStartTime&&..AlertOnError&&..AlertRetryGracePeriod&&(tTxt'=..%LastReportedError) ..%AlertStartTime=$ZH
				If ..%AlertStartTime {
					If $ZH>=(..%AlertStartTime+..AlertRetryGracePeriod) {
						Set ..%AlertStartTime=0
						If tTxt'=..%LastReportedError { Do ##class(Ens.Util.Log).LogError($classname(),"MessageHeaderHandler","Alerting at expiration of retry grace period ("_..AlertRetryGracePeriod_") for "_tTxt) }
						Else { Do ##class(Ens.Util.Log).LogInfo($classname(),"MessageHeaderHandler","Alerting at expiration of retry grace period ("_..AlertRetryGracePeriod_") for "_tTxt) }
					} Else {
						Set tDoAlert=0
						If tTxt'=..%LastReportedError { Do ##class(Ens.Util.Log).LogError($classname(),"MessageHeaderHandler","Not Alerting during retry grace period ("_..AlertRetryGracePeriod_") for "_tTxt) }
						Else { Do ##class(Ens.Util.Log).LogInfo($classname(),"MessageHeaderHandler","Not Alerting during retry grace period ("_..AlertRetryGracePeriod_") for "_tTxt) }
					}
				} Else {
					If tTxt'=..%LastReportedError { Do ##class(Ens.Util.Log).LogStatus($classname(),"MessageHeaderHandler",tSC) }
					Else { Set tDoAlert=0 }
				}
				Do:tDoAlert&&..AlertOnError ..SendAlert(##class(Ens.AlertRequest).%New($LB(..%ConfigName,$$getAllErrorTexts^EnsUtil(tSC))))
				Set tDoAlert=0
			} Else { Set ..%AlertStartTime=0, tTxt="" }
			Set ..%LastReportedError=tTxt
			If ..%QuitTask { Set tTerminate=1 }
			Else {
				If ..FailureTimeout'=-1 {
					Set tNow=$ZH
					If ..NoFailWhileDisconnected {
						try { Set tStayConnected=..Adapter.StayConnected }
						catch { Set tStayConnected=1 }
						If tStayConnected {
							try { Set tConnected=..Adapter.Connected }
							catch { Set tConnected=1 }
							If 'tConnected {
								If tNow>tEndTime Do:$S($D(%Ensemble("DoTrace")):%Ensemble("DoTrace"),1:##class(Ens.Util.Trace).DoTrace()) ##class(Ens.Util.Trace).WriteTrace("system",$classname(),"MessageHeaderHandler","Ignoring FailureTimeout while disconnected")
								Set:$G(tLast) tEndTime=tEndTime+(tNow-tLast) ; keep up with our disconnected time
								Set tLast=tNow
							} ElseIf $G(tLast) {
								Set tMinInterval=..RetryInterval+1  Set:..FailureTimeout<..RetryInterval&&(..FailureTimeout>0) tMinInterval=..FailureTimeout+1
								If tEndTime-tNow<tMinInterval Do:$S($D(%Ensemble("DoTrace")):%Ensemble("DoTrace"),1:##class(Ens.Util.Trace).DoTrace()) ##class(Ens.Util.Trace).WriteTrace("system",$classname(),"MessageHeaderHandler","Extending FailureTimeout by "_(tNow+tMinInterval-tEndTime)_" after reconnecting")  Set tEndTime=tNow+tMinInterval
								Kill tLast
							}
						}
					}
					If tNow>tEndTime {
						Set tFailureTimedOut=1, tSC=$$Error^%apiOBJ("<Ens>ErrFailureTimeout", ..FailureTimeout, $$getAllErrorTexts^EnsUtil(tSC), $classname()), tDoAlert=""
						Set $EC=""  try {
							Set tMHSC=tSC
							Set tDoDefault=..OnFailureTimeout(tRequest,.tResponse,.tSC)
							Set:tDoDefault tSC=$S(""=tAction:tSC,1:..finalReplyAction(tAction,tSC,1))
							Set:tSC'=tMHSC&&('tSC) tDoAlert=""
						} catch {
							Set tSC=$select(+tSC:##class(Ens.Util.Error).EnsSystemError($classname(),"MessageHeaderHandler"),1:$$AppendStatus^%occSystem(tSC,##class(Ens.Util.Error).EnsSystemError($classname(),"MessageHeaderHandler"))), tDoAlert=""
						}
						If $TLevel>0 Set tTL=$TLevel  While $TLevel>0 { TCommit } Do ##class(Ens.Util.Log).LogWarning($classname(),"MessageHeaderHandler",tTL_" open user transaction"_$S(tTL>1:"s",1:"")_" found after OnFailureTimeout(); committing before proceeding")
						Set:..SuspendMessage tSCSuspend=tSC
						Quit:'..%QuitTask
					}
				}
				If ..%QuitTask { Set tTerminate=1 }
				Else {
					Set ^IRIS.Temp.EnsHostMonitor($namespace,tConfigName,"%Status")="Retry",^IRIS.Temp.EnsHostMonitor($namespace,tConfigName,"%LastActivity")=$zdatetime($ztimestamp,3,,3)
					Set ^IRIS.Temp.EnsJobMonitor($namespace,"sys"_":"_$Job,tConfigName,"%Status")="Retry",^IRIS.Temp.EnsJobMonitor($namespace,"sys"_":"_$Job,tConfigName,"%LastActivity")=$zdatetime($ztimestamp,3,,3)
					Set tWaitTime = tTimeCalled + ..RetryInterval - $ZH
					Set tSC1=##class(Ens.Queue).DeQueue("SystemSignal:"_$Job,,$S(tWaitTime<0:0, 1:tWaitTime),,0)  If ('tSC1) Set tSC=$select(+tSC:tSC1,1:$$AppendStatus^%occSystem(tSC,tSC1))  Quit
					Set tTerminate=##class(Ens.Job).ShouldTerminate()
				} ; %QuitTask
			} ; %QuitTask
			Set tSBQ=##class(Ens.Job).ShouldBeQuiescent()
			If tSBQ || tTerminate {
				If pRequestHeader.Priority>2||tTerminate {
					Set tTerminate=1
					If 'tFailureTimedOut||(..%QuitTask>1) {
						If pRequestHeader.TargetQueueName="" {
							/* 
								If no target queue name then we cannot put back to queue.
								Double check invocation InProc and mark so we will RecoverActiveMessage() later			
							*/
							If pRequestHeader.Invocation=2 {
								If $Data(^Ens.ActiveMessage("sys"_":"_$Job),tActiveID) {
									Do ##class(Ens.Util.Log).LogInfo($classname(),"MessageHeaderHandler","Retry loop exited due to shutdown request for message "_..%RequestHeader.%Id()_" ; re-queueing corresponding Active Message:"_tActiveID_$S((''tSC):"",1:" - original error: "_$$getAllErrorTexts^EnsUtil(tSC)))								
									Set tSCActive = ##class(Ens.Job).RecoverActiveMessage(tActiveID,$Job,0)
									If (''tSCActive) Kill ^Ens.ActiveMessage("sys"_":"_$Job)
								} Else {
									Do ##class(Ens.Util.Log).LogError($classname(),"MessageHeaderHandler","Retry loop exited due to shutdown request for message "_..%RequestHeader.%Id()_" ; cannot re-queue corresponding Active Message since it is not defined"_$S((''tSC):"",1:" - original error: "_$$getAllErrorTexts^EnsUtil(tSC)))
								}
							} Else {
								Do ##class(Ens.Util.Log).LogError($classname(),"MessageHeaderHandler","Retry loop exited due to shutdown request for message "_..%RequestHeader.%Id()_" ; cannot re-queue since no target queue name and not InProc"_$S((''tSC):"",1:" - original error: "_$$getAllErrorTexts^EnsUtil(tSC)))
							}
						} Else {
							Set tSCx=tSC, tSC=##class(Ens.Queue).PutBackToQueue(pRequestHeader)
							Do ##class(Ens.Util.Log).LogInfo($classname(),"MessageHeaderHandler","Retry loop exited due to shutdown request for message "_..%RequestHeader.%Id()_" ; re-queueing"_$S((''tSCx):"",1:" - original error: "_$$getAllErrorTexts^EnsUtil(tSCx)))
						}
					} Else {
						Do ##class(Ens.Util.Log).LogInfo($classname(),"MessageHeaderHandler","Retry loop exited due to shutdown request for message "_..%RequestHeader.%Id()_" ; quitting with status "_$$getAllErrorTexts^EnsUtil(tSC))
					}
					Quit
				}
				Do ##class(Ens.Util.Log).LogInfo($classname(),"MessageHeaderHandler","Ignoring "_$S(tSBQ:"Quiescent",1:"Terminate")_" request while processing high priority (i.e. synchronous) request "_..%RequestHeader.%Id())
			}
			If ##class(Ens.Job).ShouldAbort() {
				Do ##class(Ens.Util.Log).LogWarning($classname(),"MessageHeaderHandler","Message "_..%RequestHeader.%Id()_" aborted as requested by signal for job "_$J_$S((''tSC):"",1:" - original error: "_$$getAllErrorTexts^EnsUtil(tSC)))
				Set tSC=1, tAborted=1
				Quit
			}
			If ##class(Ens.Job).ShouldSuspend() {
				Do ##class(Ens.Util.Log).LogWarning($classname(),"MessageHeaderHandler","Message "_pRequestHeader.%Id()_" suspended as requested by signal for job "_$J_$S((''tSC):"", 1:" - original error: "_$$getAllErrorTexts^EnsUtil(tSC)))
				Set tSC=1, ..SuspendMessage=1
				Quit
			}
			Set ..RetryCount=..RetryCount+1
			Set ^IRIS.Temp.EnsJobMonitor($namespace,"sys"_":"_$Job,tConfigName,"%Retry")=..RetryCount,^IRIS.Temp.EnsJobMonitor($namespace,"sys"_":"_$Job,tConfigName,"%LastActivity")=$zdatetime($ztimestamp,3,,3)
			Do:$S($D(%Ensemble("DoTrace")):%Ensemble("DoTrace"),1:##class(Ens.Util.Trace).DoTrace()) ##class(Ens.Util.Trace).WriteTrace("system",$classname(),"MessageHeaderHandler","Retrying Request Header Id "_pRequestHeader.%Id()_" - try #"_..RetryCount)
		} ; Retry loop
		Set ^IRIS.Temp.EnsJobMonitor($namespace,"sys"_":"_$Job,tConfigName,"%Retry")="",^IRIS.Temp.EnsJobMonitor($namespace,"sys"_":"_$Job,tConfigName,"%LastActivity")=$zdatetime($ztimestamp,3,,3)
		If ('tSC) {
			If ""=tDoAlert {
				Set $EC=""  try {
					Do:$S($D(%Ensemble("DoTrace")):%Ensemble("DoTrace"),1:##class(Ens.Util.Trace).DoTrace()) ##class(Ens.Util.Trace).WriteTrace("system",$classname(),"MessageHeaderHandler","calling OnError E")
					Set tDoAlert=..OnError(.tSC)
				} catch {
					Set tSC=$select(+tSC:##class(Ens.Util.Error).EnsSystemError($classname(),"MessageHeaderHandler"),1:$$AppendStatus^%occSystem(tSC,##class(Ens.Util.Error).EnsSystemError($classname(),"MessageHeaderHandler"))), tDoAlert=1
				}
				If $TLevel>0 Set tTL=$TLevel  While $TLevel>0 { TCommit } Do ##class(Ens.Util.Log).LogWarning($classname(),"MessageHeaderHandler",tTL_" open user transaction"_$S(tTL>1:"s",1:"")_" found after OnError() E; committing before proceeding")
			}
			Quit:'..SuspendMessage&&'..DeferResponse
		}
		Quit:tTerminate
		Set tConfigName=..%ConfigName
		Set tUTCH=$ztimestamp If $I(^IRIS.Temp.EnsHostMonitor($namespace,tConfigName,"%Count")),$I(^IRIS.Temp.EnsHostCounter($namespace,tConfigName,+tUTCH,$P(tUTCH,",",2)\10)) {} Set ^IRIS.Temp.EnsHostMonitor($namespace,tConfigName,"%Status")="OK",^IRIS.Temp.EnsHostMonitor($namespace,tConfigName,"%LastActivity")=$zdatetime($ztimestamp,3,,3)
		If $I(^IRIS.Temp.EnsJobMonitor($namespace,"sys"_":"_$Job,tConfigName,"%Count")) {} Set ^IRIS.Temp.EnsJobMonitor($namespace,"sys"_":"_$Job,tConfigName,"%Status")="OK",^IRIS.Temp.EnsJobMonitor($namespace,"sys"_":"_$Job,tConfigName,"%LastActivity")=$zdatetime($ztimestamp,3,,3)
		If tAborted {
			Do pRequestHeader.SetStatus(7)
			Quit
		}
		If ..SuspendMessage {
			Do pRequestHeader.SetStatus(5)
			If ('tSC) {
				If ('tSCSuspend) { Do ##class(Ens.Util.Log).LogStatus($classname(),"MessageHeaderHandler",tSC) }
				Else { Do ##class(Ens.Util.Log).LogWarning($classname(),"MessageHeaderHandler",$$GetOneStatusText^%apiOBJ(tSC)) }
			}
			Set tSC=1
			Quit
		}
		If ..DeferResponse {
			Do pRequestHeader.SetStatus(6)
			If ('tSC) {
				Do ##class(Ens.Util.Log).LogWarning($classname(),"MessageHeaderHandler","Deferring Response to Request "_pRequestHeader.%Id()_"; Operation returned error "_$$getAllErrorTexts^EnsUtil(tSC))
				Set tSC=1
			} Else {
				Do:$S($D(%Ensemble("DoTrace")):%Ensemble("DoTrace"),1:##class(Ens.Util.Trace).DoTrace()) ##class(Ens.Util.Trace).WriteTrace("system",$classname(),"MessageHeaderHandler","Deferring Response to Request "_pRequestHeader.%Id())
			}
			Quit
		}
		Do pRequestHeader.SetStatus(9)
		If (''tSC) && pRequestHeader.needsReply() {
			Set tSC=pRequestHeader.NewResponseMessage(.pResponseHeader,tResponse,..%SuperSession)
		}
	} catch {
		Set tSC=##class(Ens.Util.Error).EnsSystemError($classname(),"MessageHeaderHandler"), tDoAlert=1
	}
	If ('tSC) {
		Set:(tDoAlert="") tDoAlert = ..OnError(tSC)
		Set tTxt=$P($$getAllErrorTexts^EnsUtil(tSC)," -- ") ; strip off "logged as" varying text
		If tTxt'=..%LastReportedError { Do ##class(Ens.Util.Log).LogStatus($classname(),"MessageHeaderHandler",tSC) }
		Set ..%LastReportedError=tTxt
		Set tConfigName=..%ConfigName
		Set ^IRIS.Temp.EnsHostMonitor($namespace,tConfigName,"%Status")="Error",^IRIS.Temp.EnsHostMonitor($namespace,tConfigName,"%LastActivity")=$zdatetime($ztimestamp,3,,3)
		Set ^IRIS.Temp.EnsJobMonitor($namespace,"sys"_":"_$Job,tConfigName,"%Status")="Error",^IRIS.Temp.EnsJobMonitor($namespace,"sys"_":"_$Job,tConfigName,"%LastActivity")=$zdatetime($ztimestamp,3,,3)
		Do:'tAborted pRequestHeader.SetStatus(8)
		Do:tDoAlert&&..AlertOnError ..SendAlert(##class(Ens.AlertRequest).%New($LB(..%ConfigName,$$getAllErrorTexts^EnsUtil(tSC))))
	} ElseIf ..SuspendMessage&&('tSCSuspend) {
		Do:tDoAlert&&..AlertOnError ..SendAlert(##class(Ens.AlertRequest).%New($LB(..%ConfigName,$$getAllErrorTexts^EnsUtil(tSCSuspend))))
	}
	Set ..%SessionId=""
	Set ..%SuperSession=""
	Do ##class(Ens.Util.Statistics).RecordStats(3,..%ConfigName)
	Kill %Ensemble("SessionId")
	Kill %Ensemble("CurrentHeaderId")
	Set ..%RequestHeader=""
	Quit tSC
cleanNum(str)
	Set f=0  For { Set f=$F(str,"#",f)  Quit:'f
		For i=f:1 { Quit:$E(str,i)'?1N  Set $E(str,i)="",i=i-1 }
	}
	Quit str }
zOnKeepalive(pAdapterStatus) public {
	Set tSC=pAdapterStatus
	If ('tSC) {
		Do:$S($D(%Ensemble("DoTrace")):%Ensemble("DoTrace"),1:##class(Ens.Util.Trace).DoTrace()) ##class(Ens.Util.Trace).WriteTrace("system",$classname(),"OnKeepalive","calling OnError K")
		Set tDoAlert=..OnError(.tSC)
		If ('tSC) {
			Set tTxt=$P($$getAllErrorTexts^EnsUtil(tSC)," -- ") ; strip off "logged as" varying text
			Set:'..%AlertStartTime&&..AlertOnError&&..AlertRetryGracePeriod&&(tTxt'=..%LastReportedError) ..%AlertStartTime=$ZH
			If ..%AlertStartTime {
				If $ZH>=(..%AlertStartTime+..AlertRetryGracePeriod) {
					Set ..%AlertStartTime=0
					If tTxt'=..%LastReportedError { Do ##class(Ens.Util.Log).LogError($classname(),"OnKeepalive","Alerting at expiration of retry grace period ("_..AlertRetryGracePeriod_") for "_tTxt) }
					Else { Do ##class(Ens.Util.Log).LogInfo($classname(),"OnKeepalive","Alerting at expiration of retry grace period ("_..AlertRetryGracePeriod_") for "_tTxt) }
				} Else {
					Set tDoAlert=0
					If tTxt'=..%LastReportedError { Do ##class(Ens.Util.Log).LogError($classname(),"OnKeepalive","Not Alerting during retry grace period ("_..AlertRetryGracePeriod_") for "_tTxt) }
					Else { Do ##class(Ens.Util.Log).LogInfo($classname(),"OnKeepalive","Not Alerting during retry grace period ("_..AlertRetryGracePeriod_") for "_tTxt) }
				}
			} Else {
				If tTxt'=..%LastReportedError { Do ##class(Ens.Util.Log).LogStatus($classname(),"OnKeepalive",tSC) }
				Else { Set tDoAlert=0 }
			}
			Do:tDoAlert&&..AlertOnError ..SendAlert(##class(Ens.AlertRequest).%New($LB(..%ConfigName,$$getAllErrorTexts^EnsUtil(tSC))))
			Set tConfigName=..%ConfigName
			Set ^IRIS.Temp.EnsHostMonitor($namespace,tConfigName,"%Status")="Error",^IRIS.Temp.EnsHostMonitor($namespace,tConfigName,"%LastActivity")=$zdatetime($ztimestamp,3,,3)
			Set ^IRIS.Temp.EnsJobMonitor($namespace,"sys"_":"_$Job,tConfigName,"%Status")="Error",^IRIS.Temp.EnsJobMonitor($namespace,"sys"_":"_$Job,tConfigName,"%LastActivity")=$zdatetime($ztimestamp,3,,3)
			Set:'..%QuitTask tSC=1
		} Else { Set ..%AlertStartTime=0, tTxt="" }
	} Else { Set ..%AlertStartTime=0, tTxt="" }
	Set ..%LastReportedError=tTxt
	Quit tSC }
zUPDATED(pRequest,pResponse) public {
	set tsc = 1
	set pResponse = ##class(User.selectResponse).%New()
	try{
		if ($LENGTH(pRequest.Name) > 0)
		{
			set sql = "SELECT * FROM SQLUser.Peters WHERE Name = ?"
			set statement = ##class(%SQL.Statement).%New()
			set tsc = statement.%Prepare(sql)
			set result = statement.%Execute(pRequest.Name)
			while (result.%Next() '= 0){
				if ($LENGTH(pRequest.Age) > 0){set Age = pRequest.Age 
					}else { set Age = result.Age}
				if ($LENGTH(pRequest.DOB) > 0){set DOB = pRequest.DOB
					}else { set DOB = result.DOB}
				if ($LENGTH(pRequest.Gender) > 0) {set Gender = pRequest.Gender
					}else {set Gender = result.Gender}
				if ($LENGTH(pRequest.Race) > 0) {set Race =  pRequest.Race
					}else {set Race = result.Race}
				if ($LENGTH(pRequest.Surname) > 0) {set Surname = pRequest.Surname
					}else {set Surname = result.Surname}
			}
			set sql1 = "UPDATE SQLUser.Peters SET Age = ?, DOB = ?,Gender = ?, Race = ?, Surname = ? WHERE Name = ?"
			set state = ##class(%SQL.Statement).%New()
			set sc = state.%Prepare(sql1)
			set res = state.%Execute(Age,DOB,Gender,Race,Surname,pRequest.Name)
			set pResponse.Age = Age
			set pResponse.DOB = DOB
			set pResponse.Gender = Gender
			set pResponse.Race = Race
			set pResponse.Surname = Surname
			set pResponse.Name = pRequest.Name	
			return sc
		}
	}
	catch ex{
		set tsc = ex.AsStatus()
		set pResponse.Status = "Error"
	}
	set pResponse.Status = "Successfull"
	return tsc }
zfinalReplyAction(pAction,pSC,pFixError) public {
	If pAction["S" {
		Set ..SuspendMessage=1, tActionDesc="Suspending on"
	} ElseIf pAction["D" {
		Set:($ZS<(2**31)) $ZS=(2**31)
		Set tActionDesc="Disabling on"
		Do ##class(Ens.Job).Stop($Job)
		Do ##Class(Ens.Director).EnableConfigItem(..%ConfigName,0,0)
		Do ..SendRequestAsync("Ens.ScheduleHandler","")
		Set ..%QuitTask=1+(pAction'["F"), ..Retry=1 ; we are quitting but the retry flag will force us to requeue the current message
	} ElseIf pAction["F" {
		// No work required here ; just quit with error
		Set tActionDesc="Discarding message on"
		Set ..SuspendMessage=0
	} Else { ; ??
		Do ##class(Ens.Util.Log).LogWarning($classname(),"finalReplyAction",$$getAllErrorTexts^EnsUtil(pSC))
		Set pSC=1, pFixError=0
	}
	Set:pFixError pSC=$$Error^%apiOBJ("<Ens>ErrGeneral",tActionDesc_" "_$$getAllErrorTexts^EnsUtil(pSC))
	Quit pSC }
zEnumerateSettingsGetInfo(colinfo,parminfo,idinfo,qHandle,extoption=0,extinfo) public {
	Set colinfo=$lb($lb("Name",10,"Name"),$lb("Description",10,"Description"),$lb("Type",10,"Type"),$lb("Default",10,"Default"),$lb("MAXLEN",10,"MAXLEN"),$lb("MINVAL",10,"MINVAL"),$lb("MAXVAL",10,"MAXVAL"),$lb("VALUELIST",10,"VALUELIST"),$lb("DISPLAYLIST",10,"DISPLAYLIST"),$lb("IsRequired",10,"IsRequired"),$lb("LocalizedName",10,"LocalizedName"),$lb("Category",10,"Category"),$lb("LocalizedCategory",10,"LocalizedCategory"),$lb("EditorContext",10,"EditorContext"))
	Set parminfo=""
	Set idinfo=$lb(0,"")
	If extoption {
		Set extinfo=$lb("",$lb($lb("",""),$lb("",""),$lb("",""),$lb("",""),$lb("",""),$lb("",""),$lb("",""),$lb("",""),$lb("",""),$lb("",""),$lb("",""),$lb("",""),$lb("",""),$lb("","")))
	}
	Quit 1 }
zEnumerateSettingsGetODBCInfo(colinfo,parminfo,qHandle) public {
	set version = $Select($Get(%protocol,41)>40:4,1:3)
	Set metadata=$lb(1,14,"Name",12,50,0,2,"Name","ALLUPDATE","SQLUser","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"Description",12,50,0,2,"Description","ALLUPDATE","SQLUser","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"Type",12,50,0,2,"Type","ALLUPDATE","SQLUser","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"Default",12,50,0,2,"Default","ALLUPDATE","SQLUser","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"MAXLEN",12,50,0,2,"MAXLEN","ALLUPDATE","SQLUser","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"MINVAL",12,50,0,2,"MINVAL","ALLUPDATE","SQLUser","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"MAXVAL",12,50,0,2,"MAXVAL","ALLUPDATE","SQLUser","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"VALUELIST",12,50,0,2,"VALUELIST","ALLUPDATE","SQLUser","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"DISPLAYLIST",12,50,0,2,"DISPLAYLIST","ALLUPDATE","SQLUser","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"IsRequired",12,50,0,2,"IsRequired","ALLUPDATE","SQLUser","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"LocalizedName",12,50,0,2,"LocalizedName","ALLUPDATE","SQLUser","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"Category",12,50,0,2,"Category","ALLUPDATE","SQLUser","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"LocalizedCategory",12,50,0,2,"LocalizedCategory","ALLUPDATE","SQLUser","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"EditorContext",12,50,0,2,"EditorContext","ALLUPDATE","SQLUser","",$c(0,0,0,0,0,0,0,0,0,0,0,0),0)
	Set colcount=$li(metadata,2),cmdlen=colcount*10,parmcount=$li(metadata,3+cmdlen),pmdlen=parmcount*6,parminfo=$li(metadata,cmdlen+3,cmdlen+pmdlen+3)
	If version=4 {
		Set colinfo=$li(metadata,2,2+cmdlen)
	} Else {
		Set colinfo=$li(metadata,2,2)
		For i=0:1:colcount-1 Set colinfo=colinfo_$list(metadata,3+(i*10),11+(i*10))
	}
	Quit 1 }
]]></Routine>


<Class name="User.ALLUPDATE">
<Super>Ens.BusinessOperation</Super>
<TimeChanged>65833,51047.498422</TimeChanged>
<TimeCreated>65826,56929.467835</TimeCreated>

<Parameter name="INVOCATION">
<Default>Queue</Default>
</Parameter>

<Method name="UPDATED">
<FormalSpec>pRequest:User.Request,*pResponse:User.selectResponse</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tsc = $$$OK
	
	set pResponse = ##class(User.selectResponse).%New()
	
	try{
		if ($LENGTH(pRequest.Name) > 0)
		{
			set sql = "SELECT * FROM SQLUser.Peters WHERE Name = ?"
			set statement = ##class(%SQL.Statement).%New()
			set tsc = statement.%Prepare(sql)
			set result = statement.%Execute(pRequest.Name)
			
			while (result.%Next() '= 0){
			
				if ($LENGTH(pRequest.Age) > 0){set Age = pRequest.Age 
					}else { set Age = result.Age}
				if ($LENGTH(pRequest.DOB) > 0){set DOB = pRequest.DOB
					}else { set DOB = result.DOB}
				if ($LENGTH(pRequest.Gender) > 0) {set Gender = pRequest.Gender
					}else {set Gender = result.Gender}
				if ($LENGTH(pRequest.Race) > 0) {set Race =  pRequest.Race
					}else {set Race = result.Race}
				if ($LENGTH(pRequest.Surname) > 0) {set Surname = pRequest.Surname
					}else {set Surname = result.Surname}
			}
				
			set sql1 = "UPDATE SQLUser.Peters SET Age = ?, DOB = ?,Gender = ?, Race = ?, Surname = ? WHERE Name = ?"
			set state = ##class(%SQL.Statement).%New()
			set sc = state.%Prepare(sql1)
			set res = state.%Execute(Age,DOB,Gender,Race,Surname,pRequest.Name)
			
			set pResponse.Age = Age
			set pResponse.DOB = DOB
			set pResponse.Gender = Gender
			set pResponse.Race = Race
			set pResponse.Surname = Surname
			set pResponse.Name = pRequest.Name	
			return sc
		}
		
	}
	catch ex{
		set tsc = ex.AsStatus()
		set pResponse.Status = "Error"
	}
	set pResponse.Status = "Successfull"
	return tsc
]]></Implementation>
</Method>

<XData name="MessageMap">
<Data><![CDATA[
<MapItems>
	<MapItem MessageType="User.Request"> 
		<Method>UPDATED</Method>
	</MapItem>
</MapItems>
]]></Data>
</XData>
</Class>


<Routine name="User.CrudREST.1" type="INT" languagemode="0" generated="1" timestamp="65848,39388.772028"><![CDATA[
 ;User.CrudREST.1
 ;Generated for class User.CrudREST.  Do NOT edit. 04/14/2021 10:56:28AM
 ;;76696357;User.CrudREST
 ;
zDispatchMap(pIndex) public {
 If pIndex=1 Quit $ListBuild("R","/test","GET","Test","false")
 If pIndex=2 Quit $ListBuild("R","/Users","GET","GetUsers","false")
 Quit "" }
zGetUsers() public {
	set Data = ##class(User.Peter).%New()
	set tsc = 1
	try{
		set obj = {"Persons": []}
	    set sql = "SELECT * FROM SQLUser.Peters"
		set statement = ##class(%SQL.Statement).%New()
		set tsc = statement.%Prepare(sql)
		set result = statement.%Execute()
		while (result.%Next() '= 0){
			set Person = {
				"Name":(result.Name),
				"Surname":(result.Surname),
				"Age":(result.Age),
				"DOB":(result.DOB),
				"Gender":(result.Gender),
				"Race":(result.Race)
			}
			Do obj.Persons.%Push(Person)
		}
		Write obj.%ToJSON()
		return result
	}
	catch ex {
		set tsc = ex.AsStatus()		
	}
	return tsc }
zSupportedVerbs(pUrl,pVerbs) public {
 Set pVerbs="",tSC=1
 Do {
   Set tSC=..ResolveTarget(pUrl,.tTargetUrl,.tTargetClass)
   If ('tSC)||((tTargetUrl="")&&(tTargetClass="")) Quit
   If (tTargetUrl'=pUrl)&&(tTargetClass'=$classname()) {
       Set tSC=$zobjclassmethod(tTargetClass,"SupportedVerbs",tTargetUrl,.pVerbs)
       Quit
   }
   If ##class(%Regex.Matcher).%New("/Users").Match(pUrl) Set pVerbs="GET,OPTIONS" Quit
   If ##class(%Regex.Matcher).%New("/test").Match(pUrl) Set pVerbs="GET,OPTIONS" Quit
 } while 0
 Quit tSC }
zTest() public {
	 Write "Peter"
	 Quit 1 }
]]></Routine>


<Class name="User.CrudREST">
<Super>%CSP.REST</Super>
<TimeChanged>65848,39386.159473</TimeChanged>
<TimeCreated>65848,34705.119439</TimeCreated>

<XData name="UrlMap">
<XMLNamespace>http://www.intersystems.com/urlmap</XMLNamespace>
<Data><![CDATA[
<Routes>
<Route Url="/test" Method="GET" Call="Test"/>
<Route Url="/Users" Method="GET" Call="GetUsers"/>
<!--
<Route Url="/class/:namespace/:classname" Method="GET" Call="GetClass" Cors="true"/>
<Map Prefix="/docserver" Forward="%Api.v1.DocServer"/>
-->
</Routes>
]]></Data>
</XData>

<Method name="GetUsers">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set Data = ##class(User.Peter).%New()

	set tsc = $$$OK
	
	try{
		set obj = {"Persons": []}
	    set sql = "SELECT * FROM SQLUser.Peters"
		set statement = ##class(%SQL.Statement).%New()
		set tsc = statement.%Prepare(sql)
		set result = statement.%Execute()
		
		while (result.%Next() '= 0){
			set Person = {
				"Name":(result.Name),
				"Surname":(result.Surname),
				"Age":(result.Age),
				"DOB":(result.DOB),
				"Gender":(result.Gender),
				"Race":(result.Race)
			}
			Do obj.Persons.%Push(Person)
		}
		
		
		Write obj.%ToJSON()
		return result
	}
	
	catch ex {
		set tsc = ex.AsStatus()		
	}
	return tsc
]]></Implementation>
</Method>

<Method name="Test">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	 Write "Peter"
	 Quit 1
]]></Implementation>
</Method>
</Class>


<Routine name="User.DeleteOperation.1" type="INT" languagemode="0" generated="1" timestamp="65834,50571.36404"><![CDATA[
 ;User.DeleteOperation.1
 ;Generated for class User.DeleteOperation.  Do NOT edit. 03/31/2021 02:02:51PM
 ;;52694854;User.DeleteOperation
 ;
zDelete(pRequest,pResponse) public {
	set Data = ##class(User.Peter).%New()
	set tsc = 1
	set pResponse = ##class(User.selectResponse).%New()
	try{
		set sql = "DELETE FROM SQLUser.Peters WHERE Name = ?"
		set statement = ##class(%SQL.Statement).%New()
		set tsc = statement.%Prepare(sql)
		set result = statement.%Execute(pRequest.Name)
		set pResponse.Status = "Successfully Deleted"
		return tsc
		//set pResponse.Status = "Successfully Deleted"
	}catch{
		set tsc = ex.AsStatus()
	}
	return tsc }
zGetRequestClassList() public {
 Set tList=""
 Set tList=tList_$lb("User.Request")
 Quit tList }
zGetResponseClassList(pRequest="") public {
 If pRequest="User.Request" Quit $lb("User.selectResponse")
 If pRequest="" Quit $lb("User.selectResponse")
 Quit "" }
zGetSettingRow(pSettingName="",pSourceClass="") public {
	Set tRow = ""
	// Check if the class has been compiled with the new generator
	If (pSourceClass = "User.DeleteOperation") {
		Set tRow = $case(pSettingName,
			"AlertGroups": $LB("AlertGroups","The Alert Groups to which this item belongs.","%Library.String","",2500,"","","","",0,"Alert Groups","Alerting","Alerting Control","selector?multiSelect=1&context={Ens.ContextSearch/ProductionAlertGroups?productionName=@productionId}"),
			"AlertOnError": $LB("AlertOnError","Send an Alert message whenever an error occurs here","%Library.Boolean",0,"","","","","",0,"Alert On Error","Alerting","Alerting Control",""),
			"AlertRetryGracePeriod": $LB("AlertRetryGracePeriod","When AlertOnError is True, and the Operation is retrying,"_$char(13,10)_"refrain from alerting if the Operation succeeds within this number of seconds after an error","%Library.Numeric",0,"",0,"","","",0,"Alert Retry Grace Period","Alerting","Alerting Control",""),
			"ArchiveIO": $LB("ArchiveIO","If set, the Adapter will log in the InterSystems IRIS I/O archive each input and output communication it has with its external system.","%Library.Boolean",0,"","","","","",0,"Archive IO","Dev","Development and Debugging",""),
			"BusinessPartner": $LB("BusinessPartner","Name of a Business Partner Profile associated with this item","%Library.String","",128,"","","","",0,"Business Partner","Info","Informational Settings","partnerSelector"),
			"FailureTimeout": $LB("FailureTimeout","Total number of seconds to keep trying to deliver the message. <br>"_$char(13,10)_"After this number of seconds has elapsed, the business operation discards the message data and returns an error code. <br>"_$char(13,10)_"To ensure that no message is ever skipped, enter a Failure Timeout value of -1, which means 'Never time out'. <br>"_$char(13,10)_"Use a setting of -1 when complete data delivery is critical, for example in health care applications. ","%Library.Numeric",15,"",-1,"","","",0,"Failure Timeout","Additional","Additional Settings",""),
			"InactivityTimeout": $LB("InactivityTimeout","Send an Alert message if this number of seconds elapses with no messages being processed by this item. <br/>"_$char(13,10)_"Note that this alert will be sent even if AlertOnError is False. <br/>"_$char(13,10)_"Zero means no alerts of this type will be sent.","%Library.Numeric",0,"",0,"","","",0,"Inactivity Timeout","Alerting","Alerting Control",""),
			"QueueCountAlert": $LB("QueueCountAlert","Number of messages on this item's queue needed to trigger an Alert message to be sent. Note that no further"_$char(13,10)_"alerts will be sent unless the number of messages on the queue drops below 80% of this number and then rises again to this number. <br/>"_$char(13,10)_"Note that this alert will be sent even if AlertOnError is False. <br/>"_$char(13,10)_"Zero means no alerts of this type will be sent.","%Library.Numeric",0,"",0,"","","",0,"Queue Count Alert","Alerting","Alerting Control",""),
			"QueueWaitAlert": $LB("QueueWaitAlert","The number of seconds a message at the front of the queue may have waited since being queued before an alert is triggered.<br/>"_$char(13,10)_"Only one alert will be raised per host item per sequential trigger of the queue wait threshold. <br/>"_$char(13,10)_"Note that this alert will be sent even if AlertOnError is False. <br/>"_$char(13,10)_"Zero means no alerts of this type will be sent.","%Library.Numeric",0,"",0,"","","",0,"Queue Wait Alert","Alerting","Alerting Control",""),
			"ReplyCodeActions": $LB("ReplyCodeActions","<p>A comma-separated list of codes specifying what action this Operation will take on various reply status conditions. "_$char(13,10)_"The format of the list is: <br/> &lt;code&gt;=&lt;actions&gt;,(&lt;code&gt;,&lt;code&gt;)=&lt;actions&gt;,...<br/>"_$char(13,10)_"Types of reply status condition are identified by a specification code:"_$char(13,10)_"<ul style=""list-style-type: none;"">"_$char(13,10)_"<li><b>E</b> - Error status returned from message handler</li>"_$char(13,10)_"<li><b>E#&lt;statuscode&gt;</b> - Error status returned from message handler has status code equal to &lt;statuscode&gt;</li>"_$char(13,10)_"<li><b>E*&lt;text&gt;</b> - Error status returned from message handler contains text string &lt;text&gt;</li>"_$char(13,10)_"<li><b>X</b> - there is no reply message at all</li>"_$char(13,10)_"</ul></p>"_$char(13,10)_"<p>The following values for &lt;actions&gt; may be used alone or in combinations: "_$char(13,10)_"<ul style=""list-style-type: none;"">"_$char(13,10)_"<li><b>C</b> - Treat the message as Completed OK.</li>"_$char(13,10)_"<li><b>W</b> - Log a warning. If no other non-warning &lt;actions&gt; are triggered, the message will be treated as Completed OK.</li>"_$char(13,10)_"<li><b>R</b> - Retry the message according to the configured RetryInterval and FailureTimeout; finally Fail unless a "_$char(13,10)_"different action is also specified.</li>"_$char(13,10)_"<li><b>S</b> - Suspend the message, log an error, and move on to try the next message.</li>"_$char(13,10)_"<li><b>D</b> - Disable the Operation, log an error and restore the message to the front of the Operation's queue.</li>"_$char(13,10)_"<li><b>F</b> - Fail with an error and move on to try the next message from the Operation's queue.</li></ul>"_$char(13,10)_"An example of a valid ReplyCodeActions specification is 'E#6301=R,E#&lt;Ens&gt;ErrGeneral=RD,E=F'. This specification will result in a "_$char(13,10)_"retry when error code 6301 is encountered. When error code &lt;Ens&gt;ErrGeneral is encountered, the Operation first retries to send "_$char(13,10)_"the message until FailureTimeout and then, if the error continues, it disables the Operation instead of failing. Any other errors will "_$char(13,10)_"cause the Operation to fail processing of the current message and return the error status to the caller, without retrying first.</p>"_$char(13,10)_"<p><b>The default behavior is 'E=F'.</b> Thus any error status will result in the error being logged and returned to the caller,"_$char(13,10)_"no retries will be attempted, and the Operation will move on to try the next message from its queue.</p>"_$char(13,10)_"<p>All codes where &lt;actions&gt; consists of only 'W' (for 'log a Warning') will be evaluated, and a warning will be"_$char(13,10)_"generated for each matching &lt;code&gt;. Other &lt;code&gt; values will be evaluated in left-to-right order, executing the"_$char(13,10)_"first matching &lt;code&gt; that has a non-warning &lt;actions&gt; value. As noted in the details for the 'W' flag, an error"_$char(13,10)_"that only triggers 'W' &lt;actions&gt; will be treated as Completed OK.</p>","%Library.String","",1000,"","","","",0,"Reply Code Actions","Additional","Additional Settings",""),
			"RetryInterval": $LB("RetryInterval","How frequently to retry access to the output system","%Library.Numeric",5,"",0,"","","",0,"Retry Interval","Additional","Additional Settings",""),
			"SendSuperSession": $LB("SendSuperSession","<p>Flag whether the  %SuperSession property ought to be included in the outbound message.</p>"_$char(13,10)_"<p>Including the Super Session in the outbound message depends on the transport mechanism.</p>"_$char(13,10)_"<p>InterSystems IRIS supports automatically including the %SuperSession in the HTTP Headers for"_$char(13,10)_"both the HTTP and SOAP Outbound Adapters based on this setting.</p>"_$char(13,10)_"<p>For other transport mechanisms custom code can call the host operation API: <METHOD>IncludeSuperSession</METHOD>(.tSC)"_$char(13,10)_"and then use as appropriate the host property value of <PROPERTY>%SuperSession</PROPERTY> if IncludeSuperSession"_$char(13,10)_"API returns true.</p>"_$char(13,10)_"<p>The IncludeSuperSession() API returns true if the operation ought to send a super session based on this"_$char(13,10)_"host setting of SendSuperSession and the %SuperSession property is not empty.</p>"_$char(13,10)_"<p>The IncludeSuperSession() API will populate the host property <PROPERTY>%SuperSession</PROPERTY>"_$char(13,10)_"with either a generated Super Session or leave it with the Super Session passed to it with the request.</p>"_$char(13,10)_"<p>The IncludeSuperSession() API will return false if either SendSuperSession"_$char(13,10)_"is false or there was an error generating the super session (tSC will be populated accordingly).</p>"_$char(13,10)_"Example use in custom adapter Code: <br>"_$char(13,10)_"<pre>"_$char(13,10)_"#dim tSC As %Status = $$$OK"_$char(13,10)_"If ..BusinessHost.IncludeSuperSession(.tSC) {"_$char(13,10)_" /*"_$char(13,10)_"	  code to include ..BusinessHost.%SuperSession in output"_$char(13,10)_"	  based on transport mechanism."_$char(13,10)_" */	"_$char(13,10)_"}</pre>"_$char(13,10)_"<p>See also Host methods <method>GenerateSuperSession</method> and <method>OnGenerateSuperSession</method></p>","%Library.Boolean","","","","","","",0,"Send SuperSession","Additional","Additional Settings",""),
			"ThrottleDelay": $LB("ThrottleDelay","Duration of forced idleness before processing the next message, in milliseconds","%Library.Numeric",0,"","","","","",0,"Throttle Delay","Additional","Additional Settings",""),
			: "")
	}
	Else { // Fall back on getting the data dynamically 
		Set tRow = ..GetDynamicSettingRow(pSettingName,pSourceClass)
	}
	Quit tRow }
zMessageHandler(pRequest,pResponse) public {
 Set $ZT="Trap",$EC="",tSC=1
 do {
 If pRequest.%IsA("User.Request") {
  Do:..ArchiveIO ..NewIOLogEntry(0,1,"","Delete",..%SessionId,pRequest)
  Set ^IRIS.Temp.EnsJobMonitor($namespace,"sys"_":"_$Job,..%ConfigName,"%Method")="Delete",^IRIS.Temp.EnsJobMonitor($namespace,"sys"_":"_$Job,..%ConfigName,"%LastActivity")=$zdatetime($ztimestamp,3,,3)
  Set tSC=..Delete(.pRequest,.pResponse)
  Set ^IRIS.Temp.EnsJobMonitor($namespace,"sys"_":"_$Job,..%ConfigName,"%Method")="",^IRIS.Temp.EnsJobMonitor($namespace,"sys"_":"_$Job,..%ConfigName,"%LastActivity")=$zdatetime($ztimestamp,3,,3)
  Do:$S($D(%Ensemble("DoTrace")):%Ensemble("DoTrace"),1:##class(Ens.Util.Trace).DoTrace()) ##class(Ens.Util.Trace).WriteTrace("system",$classname(),"MessageHandler","Delete() returned with status "_$$getAllErrorTexts^EnsUtil(tSC)_", Retry="_..Retry_", SuspendMessage="_..SuspendMessage_", DeferResponse="_..DeferResponse_", Response="_$S('($Data(pResponse)#2&&$IsObject(pResponse)):"", 1:pResponse_"/"_$S('pResponse.%Extends("%Persistent"):"", 1:pResponse.%Id())))
  Do:$IsObject(..IOLogEntry) ..CloseIOLogEntry(tSC,"",$G(pResponse))
  Quit
 }
 Do:..ArchiveIO ..NewIOLogEntry(0,1,"","OnMessage",..%SessionId,pRequest)
 Set ^IRIS.Temp.EnsJobMonitor($namespace,"sys"_":"_$Job,..%ConfigName,"%Method")="OnMessage",^IRIS.Temp.EnsJobMonitor($namespace,"sys"_":"_$Job,..%ConfigName,"%LastActivity")=$zdatetime($ztimestamp,3,,3)
 Set tSC=..OnMessage(.pRequest,.pResponse)
 Set ^IRIS.Temp.EnsJobMonitor($namespace,"sys"_":"_$Job,..%ConfigName,"%Method")="",^IRIS.Temp.EnsJobMonitor($namespace,"sys"_":"_$Job,..%ConfigName,"%LastActivity")=$zdatetime($ztimestamp,3,,3)
 Do:$S($D(%Ensemble("DoTrace")):%Ensemble("DoTrace"),1:##class(Ens.Util.Trace).DoTrace()) ##class(Ens.Util.Trace).WriteTrace("system",$classname(),"MessageHandler","OnMessage() returned with status "_$$getAllErrorTexts^EnsUtil(tSC)_", Retry="_..Retry_", SuspendMessage="_..SuspendMessage_", DeferResponse="_..DeferResponse_", Response="_$S('($Data(pResponse)#2&&$IsObject(pResponse)):"", 1:pResponse_"/"_$S('pResponse.%Extends("%Persistent"):"", 1:pResponse.%Id())))
 Do:$IsObject(..IOLogEntry) ..CloseIOLogEntry(tSC,"",pResponse)
 } While 0
Exit
 If $TLevel>0 Set tTL=$TLevel  While $TLevel>0 { TCommit } Do ##class(Ens.Util.Log).LogWarning($classname(),"MessageHandler",tTL_" open user transaction"_$S(tTL>1:"s",1:"")_" found after BO MessageHandler method; committing before proceeding")
 Quit tSC
Trap
 Set $ZT="",tSC=##class(Ens.Util.Error).ExceptionStatus()
 Goto Exit }
zMessageHeaderHandler(pRequestHeader,pResponseHeader) public {
	Set $EC="",(tSC,tSCSuspend)=1, tAborted=0, pResponseHeader="", tDoAlert=""
	try {
		Set ..%RequestHeader=pRequestHeader, %Ensemble("CurrentHeaderId") = pRequestHeader.%Id()
		If pRequestHeader.MessageBodyClassName'="" {
			Set tRequest = $classmethod(pRequestHeader.MessageBodyClassName,"%OpenId",pRequestHeader.MessageBodyId,,.tSC)
			If '$IsObject(tRequest) Set tSC=$$Error^%apiOBJ("<Ens>ErrGeneral","Could not open MessageBody "_pRequestHeader.MessageBodyId_" for MessageHeader #"_pRequestHeader.%Id()_" with body class "_pRequestHeader.MessageBodyClassName_":"_$$getAllErrorTexts^EnsUtil(tSC))  Quit
		} Else {
			Set tRequest="", tSC=$$Error^%apiOBJ("<Ens>ErrGeneral","No MessageBody classname for MessageHeader #"_pRequestHeader.%Id())  Quit
		}
		Do ##class(Ens.Util.Statistics).InitStats(..%ConfigName)
		Set tConfigName = ..%ConfigName, tResponse = ""
		Do pRequestHeader.SetStatus(3)
		Set (..%SessionId,%Ensemble("SessionId")) = pRequestHeader.SessionId
		Set ..%SuperSession=pRequestHeader.SuperSession
		Set (tEndTime,..%LastReportedError)="", ..RetryCount=1, (..Retry,..SuspendMessage,..DeferResponse,..%AlertStartTime,tFailureTimedOut,tTerminate)=0
		While 1 { ; Retry loop
			Set tTimeCalled=$ZH, tDoAlert=""
			Set:'tEndTime tEndTime = tTimeCalled + ..FailureTimeout
			If $D(^Ens.Runtime("CrashedMessage",pRequestHeader.%Id())) {
				Kill ^Ens.Runtime("CrashedMessage",pRequestHeader.%Id())
				Set tSC=##class(Ens.Util.Error).EnsError($classname(),"MessageHeaderHandler","<Ens>ErrPreviouslyCrashedMessage",pRequestHeader.%Id())
			} Else {
				Set tSC=..MessageHandler(tRequest,.tResponse)
			}
			If ('tSC) {
				Set $EC=""  try {
					Do:$S($D(%Ensemble("DoTrace")):%Ensemble("DoTrace"),1:##class(Ens.Util.Trace).DoTrace()) ##class(Ens.Util.Trace).WriteTrace("system",$classname(),"MessageHeaderHandler","calling OnError R")
					Set tDoAlert=..OnError(.tSC)
				} catch {
					Set tSC=$select(+tSC:##class(Ens.Util.Error).EnsSystemError($classname(),"MessageHeaderHandler"),1:$$AppendStatus^%occSystem(tSC,##class(Ens.Util.Error).EnsSystemError($classname(),"MessageHeaderHandler"))), tDoAlert=1
				}
				If $TLevel>0 Set tTL=$TLevel  While $TLevel>0 { TCommit } Do ##class(Ens.Util.Log).LogWarning($classname(),"MessageHeaderHandler",tTL_" open user transaction"_$S(tTL>1:"s",1:"")_" found after OnError() R; committing before proceeding")
			}
			Set $EC=""  try {
				Set tMHSC=tSC
				Set tAction=..OnGetReplyAction(tRequest,.tResponse,.tSC)
				Set:""'=tAction tSC=..doReplyAction(tAction, tRequest,.tResponse,tSC)
				If tSC'=tMHSC&&('tSC) {
					Do:$S($D(%Ensemble("DoTrace")):%Ensemble("DoTrace"),1:##class(Ens.Util.Trace).DoTrace()) ##class(Ens.Util.Trace).WriteTrace("system",$classname(),"MessageHeaderHandler","calling OnError A")
					Set tDoAlert=..OnError(.tSC)
				}
			} catch {
				Set tSC=$select(+tSC:##class(Ens.Util.Error).EnsSystemError($classname(),"MessageHeaderHandler"),1:$$AppendStatus^%occSystem(tSC,##class(Ens.Util.Error).EnsSystemError($classname(),"MessageHeaderHandler"))), tDoAlert=1
			}
			If $TLevel>0 Set tTL=$TLevel  While $TLevel>0 { TCommit } Do ##class(Ens.Util.Log).LogWarning($classname(),"MessageHeaderHandler",tTL_" open user transaction"_$S(tTL>1:"s",1:"")_" found after ReplyAction OnError() A; committing before proceeding")
			If ..SuspendMessage {
				Set tSCSuspend=tSC
				Set tSC=$$Error^%apiOBJ("<Ens>ErrSuspending",pRequestHeader.%Id(),$$getAllErrorTexts^EnsUtil(tSC))
				Quit
			}
			Quit:..DeferResponse
			Quit:'..Retry
			Set ..Retry=0
			If ('tSC) {
				Set tTxt=$P($$getAllErrorTexts^EnsUtil(tSC)," -- ") ; strip off "logged as" varying text
				Set:'..%AlertStartTime&&..AlertOnError&&..AlertRetryGracePeriod&&(tTxt'=..%LastReportedError) ..%AlertStartTime=$ZH
				If ..%AlertStartTime {
					If $ZH>=(..%AlertStartTime+..AlertRetryGracePeriod) {
						Set ..%AlertStartTime=0
						If tTxt'=..%LastReportedError { Do ##class(Ens.Util.Log).LogError($classname(),"MessageHeaderHandler","Alerting at expiration of retry grace period ("_..AlertRetryGracePeriod_") for "_tTxt) }
						Else { Do ##class(Ens.Util.Log).LogInfo($classname(),"MessageHeaderHandler","Alerting at expiration of retry grace period ("_..AlertRetryGracePeriod_") for "_tTxt) }
					} Else {
						Set tDoAlert=0
						If tTxt'=..%LastReportedError { Do ##class(Ens.Util.Log).LogError($classname(),"MessageHeaderHandler","Not Alerting during retry grace period ("_..AlertRetryGracePeriod_") for "_tTxt) }
						Else { Do ##class(Ens.Util.Log).LogInfo($classname(),"MessageHeaderHandler","Not Alerting during retry grace period ("_..AlertRetryGracePeriod_") for "_tTxt) }
					}
				} Else {
					If tTxt'=..%LastReportedError { Do ##class(Ens.Util.Log).LogStatus($classname(),"MessageHeaderHandler",tSC) }
					Else { Set tDoAlert=0 }
				}
				Do:tDoAlert&&..AlertOnError ..SendAlert(##class(Ens.AlertRequest).%New($LB(..%ConfigName,$$getAllErrorTexts^EnsUtil(tSC))))
				Set tDoAlert=0
			} Else { Set ..%AlertStartTime=0, tTxt="" }
			Set ..%LastReportedError=tTxt
			If ..%QuitTask { Set tTerminate=1 }
			Else {
				If ..FailureTimeout'=-1 {
					Set tNow=$ZH
					If ..NoFailWhileDisconnected {
						try { Set tStayConnected=..Adapter.StayConnected }
						catch { Set tStayConnected=1 }
						If tStayConnected {
							try { Set tConnected=..Adapter.Connected }
							catch { Set tConnected=1 }
							If 'tConnected {
								If tNow>tEndTime Do:$S($D(%Ensemble("DoTrace")):%Ensemble("DoTrace"),1:##class(Ens.Util.Trace).DoTrace()) ##class(Ens.Util.Trace).WriteTrace("system",$classname(),"MessageHeaderHandler","Ignoring FailureTimeout while disconnected")
								Set:$G(tLast) tEndTime=tEndTime+(tNow-tLast) ; keep up with our disconnected time
								Set tLast=tNow
							} ElseIf $G(tLast) {
								Set tMinInterval=..RetryInterval+1  Set:..FailureTimeout<..RetryInterval&&(..FailureTimeout>0) tMinInterval=..FailureTimeout+1
								If tEndTime-tNow<tMinInterval Do:$S($D(%Ensemble("DoTrace")):%Ensemble("DoTrace"),1:##class(Ens.Util.Trace).DoTrace()) ##class(Ens.Util.Trace).WriteTrace("system",$classname(),"MessageHeaderHandler","Extending FailureTimeout by "_(tNow+tMinInterval-tEndTime)_" after reconnecting")  Set tEndTime=tNow+tMinInterval
								Kill tLast
							}
						}
					}
					If tNow>tEndTime {
						Set tFailureTimedOut=1, tSC=$$Error^%apiOBJ("<Ens>ErrFailureTimeout", ..FailureTimeout, $$getAllErrorTexts^EnsUtil(tSC), $classname()), tDoAlert=""
						Set $EC=""  try {
							Set tMHSC=tSC
							Set tDoDefault=..OnFailureTimeout(tRequest,.tResponse,.tSC)
							Set:tDoDefault tSC=$S(""=tAction:tSC,1:..finalReplyAction(tAction,tSC,1))
							Set:tSC'=tMHSC&&('tSC) tDoAlert=""
						} catch {
							Set tSC=$select(+tSC:##class(Ens.Util.Error).EnsSystemError($classname(),"MessageHeaderHandler"),1:$$AppendStatus^%occSystem(tSC,##class(Ens.Util.Error).EnsSystemError($classname(),"MessageHeaderHandler"))), tDoAlert=""
						}
						If $TLevel>0 Set tTL=$TLevel  While $TLevel>0 { TCommit } Do ##class(Ens.Util.Log).LogWarning($classname(),"MessageHeaderHandler",tTL_" open user transaction"_$S(tTL>1:"s",1:"")_" found after OnFailureTimeout(); committing before proceeding")
						Set:..SuspendMessage tSCSuspend=tSC
						Quit:'..%QuitTask
					}
				}
				If ..%QuitTask { Set tTerminate=1 }
				Else {
					Set ^IRIS.Temp.EnsHostMonitor($namespace,tConfigName,"%Status")="Retry",^IRIS.Temp.EnsHostMonitor($namespace,tConfigName,"%LastActivity")=$zdatetime($ztimestamp,3,,3)
					Set ^IRIS.Temp.EnsJobMonitor($namespace,"sys"_":"_$Job,tConfigName,"%Status")="Retry",^IRIS.Temp.EnsJobMonitor($namespace,"sys"_":"_$Job,tConfigName,"%LastActivity")=$zdatetime($ztimestamp,3,,3)
					Set tWaitTime = tTimeCalled + ..RetryInterval - $ZH
					Set tSC1=##class(Ens.Queue).DeQueue("SystemSignal:"_$Job,,$S(tWaitTime<0:0, 1:tWaitTime),,0)  If ('tSC1) Set tSC=$select(+tSC:tSC1,1:$$AppendStatus^%occSystem(tSC,tSC1))  Quit
					Set tTerminate=##class(Ens.Job).ShouldTerminate()
				} ; %QuitTask
			} ; %QuitTask
			Set tSBQ=##class(Ens.Job).ShouldBeQuiescent()
			If tSBQ || tTerminate {
				If pRequestHeader.Priority>2||tTerminate {
					Set tTerminate=1
					If 'tFailureTimedOut||(..%QuitTask>1) {
						If pRequestHeader.TargetQueueName="" {
							/* 
								If no target queue name then we cannot put back to queue.
								Double check invocation InProc and mark so we will RecoverActiveMessage() later			
							*/
							If pRequestHeader.Invocation=2 {
								If $Data(^Ens.ActiveMessage("sys"_":"_$Job),tActiveID) {
									Do ##class(Ens.Util.Log).LogInfo($classname(),"MessageHeaderHandler","Retry loop exited due to shutdown request for message "_..%RequestHeader.%Id()_" ; re-queueing corresponding Active Message:"_tActiveID_$S((''tSC):"",1:" - original error: "_$$getAllErrorTexts^EnsUtil(tSC)))								
									Set tSCActive = ##class(Ens.Job).RecoverActiveMessage(tActiveID,$Job,0)
									If (''tSCActive) Kill ^Ens.ActiveMessage("sys"_":"_$Job)
								} Else {
									Do ##class(Ens.Util.Log).LogError($classname(),"MessageHeaderHandler","Retry loop exited due to shutdown request for message "_..%RequestHeader.%Id()_" ; cannot re-queue corresponding Active Message since it is not defined"_$S((''tSC):"",1:" - original error: "_$$getAllErrorTexts^EnsUtil(tSC)))
								}
							} Else {
								Do ##class(Ens.Util.Log).LogError($classname(),"MessageHeaderHandler","Retry loop exited due to shutdown request for message "_..%RequestHeader.%Id()_" ; cannot re-queue since no target queue name and not InProc"_$S((''tSC):"",1:" - original error: "_$$getAllErrorTexts^EnsUtil(tSC)))
							}
						} Else {
							Set tSCx=tSC, tSC=##class(Ens.Queue).PutBackToQueue(pRequestHeader)
							Do ##class(Ens.Util.Log).LogInfo($classname(),"MessageHeaderHandler","Retry loop exited due to shutdown request for message "_..%RequestHeader.%Id()_" ; re-queueing"_$S((''tSCx):"",1:" - original error: "_$$getAllErrorTexts^EnsUtil(tSCx)))
						}
					} Else {
						Do ##class(Ens.Util.Log).LogInfo($classname(),"MessageHeaderHandler","Retry loop exited due to shutdown request for message "_..%RequestHeader.%Id()_" ; quitting with status "_$$getAllErrorTexts^EnsUtil(tSC))
					}
					Quit
				}
				Do ##class(Ens.Util.Log).LogInfo($classname(),"MessageHeaderHandler","Ignoring "_$S(tSBQ:"Quiescent",1:"Terminate")_" request while processing high priority (i.e. synchronous) request "_..%RequestHeader.%Id())
			}
			If ##class(Ens.Job).ShouldAbort() {
				Do ##class(Ens.Util.Log).LogWarning($classname(),"MessageHeaderHandler","Message "_..%RequestHeader.%Id()_" aborted as requested by signal for job "_$J_$S((''tSC):"",1:" - original error: "_$$getAllErrorTexts^EnsUtil(tSC)))
				Set tSC=1, tAborted=1
				Quit
			}
			If ##class(Ens.Job).ShouldSuspend() {
				Do ##class(Ens.Util.Log).LogWarning($classname(),"MessageHeaderHandler","Message "_pRequestHeader.%Id()_" suspended as requested by signal for job "_$J_$S((''tSC):"", 1:" - original error: "_$$getAllErrorTexts^EnsUtil(tSC)))
				Set tSC=1, ..SuspendMessage=1
				Quit
			}
			Set ..RetryCount=..RetryCount+1
			Set ^IRIS.Temp.EnsJobMonitor($namespace,"sys"_":"_$Job,tConfigName,"%Retry")=..RetryCount,^IRIS.Temp.EnsJobMonitor($namespace,"sys"_":"_$Job,tConfigName,"%LastActivity")=$zdatetime($ztimestamp,3,,3)
			Do:$S($D(%Ensemble("DoTrace")):%Ensemble("DoTrace"),1:##class(Ens.Util.Trace).DoTrace()) ##class(Ens.Util.Trace).WriteTrace("system",$classname(),"MessageHeaderHandler","Retrying Request Header Id "_pRequestHeader.%Id()_" - try #"_..RetryCount)
		} ; Retry loop
		Set ^IRIS.Temp.EnsJobMonitor($namespace,"sys"_":"_$Job,tConfigName,"%Retry")="",^IRIS.Temp.EnsJobMonitor($namespace,"sys"_":"_$Job,tConfigName,"%LastActivity")=$zdatetime($ztimestamp,3,,3)
		If ('tSC) {
			If ""=tDoAlert {
				Set $EC=""  try {
					Do:$S($D(%Ensemble("DoTrace")):%Ensemble("DoTrace"),1:##class(Ens.Util.Trace).DoTrace()) ##class(Ens.Util.Trace).WriteTrace("system",$classname(),"MessageHeaderHandler","calling OnError E")
					Set tDoAlert=..OnError(.tSC)
				} catch {
					Set tSC=$select(+tSC:##class(Ens.Util.Error).EnsSystemError($classname(),"MessageHeaderHandler"),1:$$AppendStatus^%occSystem(tSC,##class(Ens.Util.Error).EnsSystemError($classname(),"MessageHeaderHandler"))), tDoAlert=1
				}
				If $TLevel>0 Set tTL=$TLevel  While $TLevel>0 { TCommit } Do ##class(Ens.Util.Log).LogWarning($classname(),"MessageHeaderHandler",tTL_" open user transaction"_$S(tTL>1:"s",1:"")_" found after OnError() E; committing before proceeding")
			}
			Quit:'..SuspendMessage&&'..DeferResponse
		}
		Quit:tTerminate
		Set tConfigName=..%ConfigName
		Set tUTCH=$ztimestamp If $I(^IRIS.Temp.EnsHostMonitor($namespace,tConfigName,"%Count")),$I(^IRIS.Temp.EnsHostCounter($namespace,tConfigName,+tUTCH,$P(tUTCH,",",2)\10)) {} Set ^IRIS.Temp.EnsHostMonitor($namespace,tConfigName,"%Status")="OK",^IRIS.Temp.EnsHostMonitor($namespace,tConfigName,"%LastActivity")=$zdatetime($ztimestamp,3,,3)
		If $I(^IRIS.Temp.EnsJobMonitor($namespace,"sys"_":"_$Job,tConfigName,"%Count")) {} Set ^IRIS.Temp.EnsJobMonitor($namespace,"sys"_":"_$Job,tConfigName,"%Status")="OK",^IRIS.Temp.EnsJobMonitor($namespace,"sys"_":"_$Job,tConfigName,"%LastActivity")=$zdatetime($ztimestamp,3,,3)
		If tAborted {
			Do pRequestHeader.SetStatus(7)
			Quit
		}
		If ..SuspendMessage {
			Do pRequestHeader.SetStatus(5)
			If ('tSC) {
				If ('tSCSuspend) { Do ##class(Ens.Util.Log).LogStatus($classname(),"MessageHeaderHandler",tSC) }
				Else { Do ##class(Ens.Util.Log).LogWarning($classname(),"MessageHeaderHandler",$$GetOneStatusText^%apiOBJ(tSC)) }
			}
			Set tSC=1
			Quit
		}
		If ..DeferResponse {
			Do pRequestHeader.SetStatus(6)
			If ('tSC) {
				Do ##class(Ens.Util.Log).LogWarning($classname(),"MessageHeaderHandler","Deferring Response to Request "_pRequestHeader.%Id()_"; Operation returned error "_$$getAllErrorTexts^EnsUtil(tSC))
				Set tSC=1
			} Else {
				Do:$S($D(%Ensemble("DoTrace")):%Ensemble("DoTrace"),1:##class(Ens.Util.Trace).DoTrace()) ##class(Ens.Util.Trace).WriteTrace("system",$classname(),"MessageHeaderHandler","Deferring Response to Request "_pRequestHeader.%Id())
			}
			Quit
		}
		Do pRequestHeader.SetStatus(9)
		If (''tSC) && pRequestHeader.needsReply() {
			Set tSC=pRequestHeader.NewResponseMessage(.pResponseHeader,tResponse,..%SuperSession)
		}
	} catch {
		Set tSC=##class(Ens.Util.Error).EnsSystemError($classname(),"MessageHeaderHandler"), tDoAlert=1
	}
	If ('tSC) {
		Set:(tDoAlert="") tDoAlert = ..OnError(tSC)
		Set tTxt=$P($$getAllErrorTexts^EnsUtil(tSC)," -- ") ; strip off "logged as" varying text
		If tTxt'=..%LastReportedError { Do ##class(Ens.Util.Log).LogStatus($classname(),"MessageHeaderHandler",tSC) }
		Set ..%LastReportedError=tTxt
		Set tConfigName=..%ConfigName
		Set ^IRIS.Temp.EnsHostMonitor($namespace,tConfigName,"%Status")="Error",^IRIS.Temp.EnsHostMonitor($namespace,tConfigName,"%LastActivity")=$zdatetime($ztimestamp,3,,3)
		Set ^IRIS.Temp.EnsJobMonitor($namespace,"sys"_":"_$Job,tConfigName,"%Status")="Error",^IRIS.Temp.EnsJobMonitor($namespace,"sys"_":"_$Job,tConfigName,"%LastActivity")=$zdatetime($ztimestamp,3,,3)
		Do:'tAborted pRequestHeader.SetStatus(8)
		Do:tDoAlert&&..AlertOnError ..SendAlert(##class(Ens.AlertRequest).%New($LB(..%ConfigName,$$getAllErrorTexts^EnsUtil(tSC))))
	} ElseIf ..SuspendMessage&&('tSCSuspend) {
		Do:tDoAlert&&..AlertOnError ..SendAlert(##class(Ens.AlertRequest).%New($LB(..%ConfigName,$$getAllErrorTexts^EnsUtil(tSCSuspend))))
	}
	Set ..%SessionId=""
	Set ..%SuperSession=""
	Do ##class(Ens.Util.Statistics).RecordStats(3,..%ConfigName)
	Kill %Ensemble("SessionId")
	Kill %Ensemble("CurrentHeaderId")
	Set ..%RequestHeader=""
	Quit tSC
cleanNum(str)
	Set f=0  For { Set f=$F(str,"#",f)  Quit:'f
		For i=f:1 { Quit:$E(str,i)'?1N  Set $E(str,i)="",i=i-1 }
	}
	Quit str }
zOnKeepalive(pAdapterStatus) public {
	Set tSC=pAdapterStatus
	If ('tSC) {
		Do:$S($D(%Ensemble("DoTrace")):%Ensemble("DoTrace"),1:##class(Ens.Util.Trace).DoTrace()) ##class(Ens.Util.Trace).WriteTrace("system",$classname(),"OnKeepalive","calling OnError K")
		Set tDoAlert=..OnError(.tSC)
		If ('tSC) {
			Set tTxt=$P($$getAllErrorTexts^EnsUtil(tSC)," -- ") ; strip off "logged as" varying text
			Set:'..%AlertStartTime&&..AlertOnError&&..AlertRetryGracePeriod&&(tTxt'=..%LastReportedError) ..%AlertStartTime=$ZH
			If ..%AlertStartTime {
				If $ZH>=(..%AlertStartTime+..AlertRetryGracePeriod) {
					Set ..%AlertStartTime=0
					If tTxt'=..%LastReportedError { Do ##class(Ens.Util.Log).LogError($classname(),"OnKeepalive","Alerting at expiration of retry grace period ("_..AlertRetryGracePeriod_") for "_tTxt) }
					Else { Do ##class(Ens.Util.Log).LogInfo($classname(),"OnKeepalive","Alerting at expiration of retry grace period ("_..AlertRetryGracePeriod_") for "_tTxt) }
				} Else {
					Set tDoAlert=0
					If tTxt'=..%LastReportedError { Do ##class(Ens.Util.Log).LogError($classname(),"OnKeepalive","Not Alerting during retry grace period ("_..AlertRetryGracePeriod_") for "_tTxt) }
					Else { Do ##class(Ens.Util.Log).LogInfo($classname(),"OnKeepalive","Not Alerting during retry grace period ("_..AlertRetryGracePeriod_") for "_tTxt) }
				}
			} Else {
				If tTxt'=..%LastReportedError { Do ##class(Ens.Util.Log).LogStatus($classname(),"OnKeepalive",tSC) }
				Else { Set tDoAlert=0 }
			}
			Do:tDoAlert&&..AlertOnError ..SendAlert(##class(Ens.AlertRequest).%New($LB(..%ConfigName,$$getAllErrorTexts^EnsUtil(tSC))))
			Set tConfigName=..%ConfigName
			Set ^IRIS.Temp.EnsHostMonitor($namespace,tConfigName,"%Status")="Error",^IRIS.Temp.EnsHostMonitor($namespace,tConfigName,"%LastActivity")=$zdatetime($ztimestamp,3,,3)
			Set ^IRIS.Temp.EnsJobMonitor($namespace,"sys"_":"_$Job,tConfigName,"%Status")="Error",^IRIS.Temp.EnsJobMonitor($namespace,"sys"_":"_$Job,tConfigName,"%LastActivity")=$zdatetime($ztimestamp,3,,3)
			Set:'..%QuitTask tSC=1
		} Else { Set ..%AlertStartTime=0, tTxt="" }
	} Else { Set ..%AlertStartTime=0, tTxt="" }
	Set ..%LastReportedError=tTxt
	Quit tSC }
zfinalReplyAction(pAction,pSC,pFixError) public {
	If pAction["S" {
		Set ..SuspendMessage=1, tActionDesc="Suspending on"
	} ElseIf pAction["D" {
		Set:($ZS<(2**31)) $ZS=(2**31)
		Set tActionDesc="Disabling on"
		Do ##class(Ens.Job).Stop($Job)
		Do ##Class(Ens.Director).EnableConfigItem(..%ConfigName,0,0)
		Do ..SendRequestAsync("Ens.ScheduleHandler","")
		Set ..%QuitTask=1+(pAction'["F"), ..Retry=1 ; we are quitting but the retry flag will force us to requeue the current message
	} ElseIf pAction["F" {
		// No work required here ; just quit with error
		Set tActionDesc="Discarding message on"
		Set ..SuspendMessage=0
	} Else { ; ??
		Do ##class(Ens.Util.Log).LogWarning($classname(),"finalReplyAction",$$getAllErrorTexts^EnsUtil(pSC))
		Set pSC=1, pFixError=0
	}
	Set:pFixError pSC=$$Error^%apiOBJ("<Ens>ErrGeneral",tActionDesc_" "_$$getAllErrorTexts^EnsUtil(pSC))
	Quit pSC }
zEnumerateSettingsGetInfo(colinfo,parminfo,idinfo,qHandle,extoption=0,extinfo) public {
	Set colinfo=$lb($lb("Name",10,"Name"),$lb("Description",10,"Description"),$lb("Type",10,"Type"),$lb("Default",10,"Default"),$lb("MAXLEN",10,"MAXLEN"),$lb("MINVAL",10,"MINVAL"),$lb("MAXVAL",10,"MAXVAL"),$lb("VALUELIST",10,"VALUELIST"),$lb("DISPLAYLIST",10,"DISPLAYLIST"),$lb("IsRequired",10,"IsRequired"),$lb("LocalizedName",10,"LocalizedName"),$lb("Category",10,"Category"),$lb("LocalizedCategory",10,"LocalizedCategory"),$lb("EditorContext",10,"EditorContext"))
	Set parminfo=""
	Set idinfo=$lb(0,"")
	If extoption {
		Set extinfo=$lb("",$lb($lb("",""),$lb("",""),$lb("",""),$lb("",""),$lb("",""),$lb("",""),$lb("",""),$lb("",""),$lb("",""),$lb("",""),$lb("",""),$lb("",""),$lb("",""),$lb("","")))
	}
	Quit 1 }
zEnumerateSettingsGetODBCInfo(colinfo,parminfo,qHandle) public {
	set version = $Select($Get(%protocol,41)>40:4,1:3)
	Set metadata=$lb(1,14,"Name",12,50,0,2,"Name","DeleteOperation","SQLUser","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"Description",12,50,0,2,"Description","DeleteOperation","SQLUser","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"Type",12,50,0,2,"Type","DeleteOperation","SQLUser","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"Default",12,50,0,2,"Default","DeleteOperation","SQLUser","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"MAXLEN",12,50,0,2,"MAXLEN","DeleteOperation","SQLUser","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"MINVAL",12,50,0,2,"MINVAL","DeleteOperation","SQLUser","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"MAXVAL",12,50,0,2,"MAXVAL","DeleteOperation","SQLUser","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"VALUELIST",12,50,0,2,"VALUELIST","DeleteOperation","SQLUser","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"DISPLAYLIST",12,50,0,2,"DISPLAYLIST","DeleteOperation","SQLUser","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"IsRequired",12,50,0,2,"IsRequired","DeleteOperation","SQLUser","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"LocalizedName",12,50,0,2,"LocalizedName","DeleteOperation","SQLUser","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"Category",12,50,0,2,"Category","DeleteOperation","SQLUser","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"LocalizedCategory",12,50,0,2,"LocalizedCategory","DeleteOperation","SQLUser","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"EditorContext",12,50,0,2,"EditorContext","DeleteOperation","SQLUser","",$c(0,0,0,0,0,0,0,0,0,0,0,0),0)
	Set colcount=$li(metadata,2),cmdlen=colcount*10,parmcount=$li(metadata,3+cmdlen),pmdlen=parmcount*6,parminfo=$li(metadata,cmdlen+3,cmdlen+pmdlen+3)
	If version=4 {
		Set colinfo=$li(metadata,2,2+cmdlen)
	} Else {
		Set colinfo=$li(metadata,2,2)
		For i=0:1:colcount-1 Set colinfo=colinfo_$list(metadata,3+(i*10),11+(i*10))
	}
	Quit 1 }
]]></Routine>


<Class name="User.DeleteOperation">
<Super>Ens.BusinessOperation</Super>
<TimeChanged>65834,50569.777793</TimeChanged>
<TimeCreated>65826,50683.465414</TimeCreated>

<Parameter name="INVOCATION">
<Default>Queue</Default>
</Parameter>

<Method name="Delete">
<FormalSpec>pRequest:User.Request,*pResponse:User.selectResponse</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[

	set Data = ##class(User.Peter).%New()
	
	set tsc = $$$OK
	
	set pResponse = ##class(User.selectResponse).%New()
	
	try{
		set sql = "DELETE FROM SQLUser.Peters WHERE Name = ?"
		set statement = ##class(%SQL.Statement).%New()
		set tsc = statement.%Prepare(sql)
		set result = statement.%Execute(pRequest.Name)
		set pResponse.Status = "Successfully Deleted"
		return tsc
		//set pResponse.Status = "Successfully Deleted"
		
	}catch{
		set tsc = ex.AsStatus()
	}
	return tsc
]]></Implementation>
</Method>

<XData name="MessageMap">
<Data><![CDATA[
<MapItems>
	<MapItem MessageType="User.Request"> 
		<Method>Delete</Method>
	</MapItem>
</MapItems>
]]></Data>
</XData>
</Class>


<Routine name="User.GetApi.1" type="INT" languagemode="0" generated="1" timestamp="65847,35458.620263"><![CDATA[
 ;User.GetApi.1
 ;Generated for class User.GetApi.  Do NOT edit. 04/13/2021 09:50:58AM
 ;;2B4B3450;User.GetApi
 ;
zApi(pRequest,pResponse) public {
	set Data = ##class(EnsLib.HTTP.OutboundAdapter).%New()
	do Data.GetURL("https://26ef06b0-0cda-41dd-9e8b-02b3a7e81e40.mock.pstmn.io/Peter")
}
zGetRequestClassList() public {
 Set tList=""
 Quit tList }
zGetSettingRow(pSettingName="",pSourceClass="") public {
	Set tRow = ""
	// Check if the class has been compiled with the new generator
	If (pSourceClass = "User.GetApi") {
		Set tRow = $case(pSettingName,
			"AlertGroups": $LB("AlertGroups","The Alert Groups to which this item belongs.","%Library.String","",2500,"","","","",0,"Alert Groups","Alerting","Alerting Control","selector?multiSelect=1&context={Ens.ContextSearch/ProductionAlertGroups?productionName=@productionId}"),
			"AlertOnError": $LB("AlertOnError","Send an Alert message whenever an error occurs here","%Library.Boolean",0,"","","","","",0,"Alert On Error","Alerting","Alerting Control",""),
			"AlertRetryGracePeriod": $LB("AlertRetryGracePeriod","When AlertOnError is True, and the Operation is retrying,"_$char(13,10)_"refrain from alerting if the Operation succeeds within this number of seconds after an error","%Library.Numeric",0,"",0,"","","",0,"Alert Retry Grace Period","Alerting","Alerting Control",""),
			"ArchiveIO": $LB("ArchiveIO","If set, the Adapter will log in the InterSystems IRIS I/O archive each input and output communication it has with its external system.","%Library.Boolean",0,"","","","","",0,"Archive IO","Dev","Development and Debugging",""),
			"BusinessPartner": $LB("BusinessPartner","Name of a Business Partner Profile associated with this item","%Library.String","",128,"","","","",0,"Business Partner","Info","Informational Settings","partnerSelector"),
			"FailureTimeout": $LB("FailureTimeout","Total number of seconds to keep trying to deliver the message. <br>"_$char(13,10)_"After this number of seconds has elapsed, the business operation discards the message data and returns an error code. <br>"_$char(13,10)_"To ensure that no message is ever skipped, enter a Failure Timeout value of -1, which means 'Never time out'. <br>"_$char(13,10)_"Use a setting of -1 when complete data delivery is critical, for example in health care applications. ","%Library.Numeric",15,"",-1,"","","",0,"Failure Timeout","Additional","Additional Settings",""),
			"InactivityTimeout": $LB("InactivityTimeout","Send an Alert message if this number of seconds elapses with no messages being processed by this item. <br/>"_$char(13,10)_"Note that this alert will be sent even if AlertOnError is False. <br/>"_$char(13,10)_"Zero means no alerts of this type will be sent.","%Library.Numeric",0,"",0,"","","",0,"Inactivity Timeout","Alerting","Alerting Control",""),
			"QueueCountAlert": $LB("QueueCountAlert","Number of messages on this item's queue needed to trigger an Alert message to be sent. Note that no further"_$char(13,10)_"alerts will be sent unless the number of messages on the queue drops below 80% of this number and then rises again to this number. <br/>"_$char(13,10)_"Note that this alert will be sent even if AlertOnError is False. <br/>"_$char(13,10)_"Zero means no alerts of this type will be sent.","%Library.Numeric",0,"",0,"","","",0,"Queue Count Alert","Alerting","Alerting Control",""),
			"QueueWaitAlert": $LB("QueueWaitAlert","The number of seconds a message at the front of the queue may have waited since being queued before an alert is triggered.<br/>"_$char(13,10)_"Only one alert will be raised per host item per sequential trigger of the queue wait threshold. <br/>"_$char(13,10)_"Note that this alert will be sent even if AlertOnError is False. <br/>"_$char(13,10)_"Zero means no alerts of this type will be sent.","%Library.Numeric",0,"",0,"","","",0,"Queue Wait Alert","Alerting","Alerting Control",""),
			"ReplyCodeActions": $LB("ReplyCodeActions","<p>A comma-separated list of codes specifying what action this Operation will take on various reply status conditions. "_$char(13,10)_"The format of the list is: <br/> &lt;code&gt;=&lt;actions&gt;,(&lt;code&gt;,&lt;code&gt;)=&lt;actions&gt;,...<br/>"_$char(13,10)_"Types of reply status condition are identified by a specification code:"_$char(13,10)_"<ul style=""list-style-type: none;"">"_$char(13,10)_"<li><b>E</b> - Error status returned from message handler</li>"_$char(13,10)_"<li><b>E#&lt;statuscode&gt;</b> - Error status returned from message handler has status code equal to &lt;statuscode&gt;</li>"_$char(13,10)_"<li><b>E*&lt;text&gt;</b> - Error status returned from message handler contains text string &lt;text&gt;</li>"_$char(13,10)_"<li><b>X</b> - there is no reply message at all</li>"_$char(13,10)_"</ul></p>"_$char(13,10)_"<p>The following values for &lt;actions&gt; may be used alone or in combinations: "_$char(13,10)_"<ul style=""list-style-type: none;"">"_$char(13,10)_"<li><b>C</b> - Treat the message as Completed OK.</li>"_$char(13,10)_"<li><b>W</b> - Log a warning. If no other non-warning &lt;actions&gt; are triggered, the message will be treated as Completed OK.</li>"_$char(13,10)_"<li><b>R</b> - Retry the message according to the configured RetryInterval and FailureTimeout; finally Fail unless a "_$char(13,10)_"different action is also specified.</li>"_$char(13,10)_"<li><b>S</b> - Suspend the message, log an error, and move on to try the next message.</li>"_$char(13,10)_"<li><b>D</b> - Disable the Operation, log an error and restore the message to the front of the Operation's queue.</li>"_$char(13,10)_"<li><b>F</b> - Fail with an error and move on to try the next message from the Operation's queue.</li></ul>"_$char(13,10)_"An example of a valid ReplyCodeActions specification is 'E#6301=R,E#&lt;Ens&gt;ErrGeneral=RD,E=F'. This specification will result in a "_$char(13,10)_"retry when error code 6301 is encountered. When error code &lt;Ens&gt;ErrGeneral is encountered, the Operation first retries to send "_$char(13,10)_"the message until FailureTimeout and then, if the error continues, it disables the Operation instead of failing. Any other errors will "_$char(13,10)_"cause the Operation to fail processing of the current message and return the error status to the caller, without retrying first.</p>"_$char(13,10)_"<p><b>The default behavior is 'E=F'.</b> Thus any error status will result in the error being logged and returned to the caller,"_$char(13,10)_"no retries will be attempted, and the Operation will move on to try the next message from its queue.</p>"_$char(13,10)_"<p>All codes where &lt;actions&gt; consists of only 'W' (for 'log a Warning') will be evaluated, and a warning will be"_$char(13,10)_"generated for each matching &lt;code&gt;. Other &lt;code&gt; values will be evaluated in left-to-right order, executing the"_$char(13,10)_"first matching &lt;code&gt; that has a non-warning &lt;actions&gt; value. As noted in the details for the 'W' flag, an error"_$char(13,10)_"that only triggers 'W' &lt;actions&gt; will be treated as Completed OK.</p>","%Library.String","",1000,"","","","",0,"Reply Code Actions","Additional","Additional Settings",""),
			"RetryInterval": $LB("RetryInterval","How frequently to retry access to the output system","%Library.Numeric",5,"",0,"","","",0,"Retry Interval","Additional","Additional Settings",""),
			"SendSuperSession": $LB("SendSuperSession","<p>Flag whether the  %SuperSession property ought to be included in the outbound message.</p>"_$char(13,10)_"<p>Including the Super Session in the outbound message depends on the transport mechanism.</p>"_$char(13,10)_"<p>InterSystems IRIS supports automatically including the %SuperSession in the HTTP Headers for"_$char(13,10)_"both the HTTP and SOAP Outbound Adapters based on this setting.</p>"_$char(13,10)_"<p>For other transport mechanisms custom code can call the host operation API: <METHOD>IncludeSuperSession</METHOD>(.tSC)"_$char(13,10)_"and then use as appropriate the host property value of <PROPERTY>%SuperSession</PROPERTY> if IncludeSuperSession"_$char(13,10)_"API returns true.</p>"_$char(13,10)_"<p>The IncludeSuperSession() API returns true if the operation ought to send a super session based on this"_$char(13,10)_"host setting of SendSuperSession and the %SuperSession property is not empty.</p>"_$char(13,10)_"<p>The IncludeSuperSession() API will populate the host property <PROPERTY>%SuperSession</PROPERTY>"_$char(13,10)_"with either a generated Super Session or leave it with the Super Session passed to it with the request.</p>"_$char(13,10)_"<p>The IncludeSuperSession() API will return false if either SendSuperSession"_$char(13,10)_"is false or there was an error generating the super session (tSC will be populated accordingly).</p>"_$char(13,10)_"Example use in custom adapter Code: <br>"_$char(13,10)_"<pre>"_$char(13,10)_"#dim tSC As %Status = $$$OK"_$char(13,10)_"If ..BusinessHost.IncludeSuperSession(.tSC) {"_$char(13,10)_" /*"_$char(13,10)_"	  code to include ..BusinessHost.%SuperSession in output"_$char(13,10)_"	  based on transport mechanism."_$char(13,10)_" */	"_$char(13,10)_"}</pre>"_$char(13,10)_"<p>See also Host methods <method>GenerateSuperSession</method> and <method>OnGenerateSuperSession</method></p>","%Library.Boolean","","","","","","",0,"Send SuperSession","Additional","Additional Settings",""),
			"ThrottleDelay": $LB("ThrottleDelay","Duration of forced idleness before processing the next message, in milliseconds","%Library.Numeric",0,"","","","","",0,"Throttle Delay","Additional","Additional Settings",""),
			: "")
	}
	Else { // Fall back on getting the data dynamically 
		Set tRow = ..GetDynamicSettingRow(pSettingName,pSourceClass)
	}
	Quit tRow }
zMessageHeaderHandler(pRequestHeader,pResponseHeader) public {
	Set $EC="",(tSC,tSCSuspend)=1, tAborted=0, pResponseHeader="", tDoAlert=""
	try {
		Set ..%RequestHeader=pRequestHeader, %Ensemble("CurrentHeaderId") = pRequestHeader.%Id()
		If pRequestHeader.MessageBodyClassName'="" {
			Set tRequest = $classmethod(pRequestHeader.MessageBodyClassName,"%OpenId",pRequestHeader.MessageBodyId,,.tSC)
			If '$IsObject(tRequest) Set tSC=$$Error^%apiOBJ("<Ens>ErrGeneral","Could not open MessageBody "_pRequestHeader.MessageBodyId_" for MessageHeader #"_pRequestHeader.%Id()_" with body class "_pRequestHeader.MessageBodyClassName_":"_$$getAllErrorTexts^EnsUtil(tSC))  Quit
		} Else {
			Set tRequest="", tSC=$$Error^%apiOBJ("<Ens>ErrGeneral","No MessageBody classname for MessageHeader #"_pRequestHeader.%Id())  Quit
		}
		Do ##class(Ens.Util.Statistics).InitStats(..%ConfigName)
		Set tConfigName = ..%ConfigName, tResponse = ""
		Do pRequestHeader.SetStatus(3)
		Set (..%SessionId,%Ensemble("SessionId")) = pRequestHeader.SessionId
		Set ..%SuperSession=pRequestHeader.SuperSession
		Set (tEndTime,..%LastReportedError)="", ..RetryCount=1, (..Retry,..SuspendMessage,..DeferResponse,..%AlertStartTime,tFailureTimedOut,tTerminate)=0
		While 1 { ; Retry loop
			Set tTimeCalled=$ZH, tDoAlert=""
			Set:'tEndTime tEndTime = tTimeCalled + ..FailureTimeout
			If $D(^Ens.Runtime("CrashedMessage",pRequestHeader.%Id())) {
				Kill ^Ens.Runtime("CrashedMessage",pRequestHeader.%Id())
				Set tSC=##class(Ens.Util.Error).EnsError($classname(),"MessageHeaderHandler","<Ens>ErrPreviouslyCrashedMessage",pRequestHeader.%Id())
			} Else {
				Set tSC=..MessageHandler(tRequest,.tResponse)
			}
			If ('tSC) {
				Set $EC=""  try {
					Do:$S($D(%Ensemble("DoTrace")):%Ensemble("DoTrace"),1:##class(Ens.Util.Trace).DoTrace()) ##class(Ens.Util.Trace).WriteTrace("system",$classname(),"MessageHeaderHandler","calling OnError R")
					Set tDoAlert=..OnError(.tSC)
				} catch {
					Set tSC=$select(+tSC:##class(Ens.Util.Error).EnsSystemError($classname(),"MessageHeaderHandler"),1:$$AppendStatus^%occSystem(tSC,##class(Ens.Util.Error).EnsSystemError($classname(),"MessageHeaderHandler"))), tDoAlert=1
				}
				If $TLevel>0 Set tTL=$TLevel  While $TLevel>0 { TCommit } Do ##class(Ens.Util.Log).LogWarning($classname(),"MessageHeaderHandler",tTL_" open user transaction"_$S(tTL>1:"s",1:"")_" found after OnError() R; committing before proceeding")
			}
			Set $EC=""  try {
				Set tMHSC=tSC
				Set tAction=..OnGetReplyAction(tRequest,.tResponse,.tSC)
				Set:""'=tAction tSC=..doReplyAction(tAction, tRequest,.tResponse,tSC)
				If tSC'=tMHSC&&('tSC) {
					Do:$S($D(%Ensemble("DoTrace")):%Ensemble("DoTrace"),1:##class(Ens.Util.Trace).DoTrace()) ##class(Ens.Util.Trace).WriteTrace("system",$classname(),"MessageHeaderHandler","calling OnError A")
					Set tDoAlert=..OnError(.tSC)
				}
			} catch {
				Set tSC=$select(+tSC:##class(Ens.Util.Error).EnsSystemError($classname(),"MessageHeaderHandler"),1:$$AppendStatus^%occSystem(tSC,##class(Ens.Util.Error).EnsSystemError($classname(),"MessageHeaderHandler"))), tDoAlert=1
			}
			If $TLevel>0 Set tTL=$TLevel  While $TLevel>0 { TCommit } Do ##class(Ens.Util.Log).LogWarning($classname(),"MessageHeaderHandler",tTL_" open user transaction"_$S(tTL>1:"s",1:"")_" found after ReplyAction OnError() A; committing before proceeding")
			If ..SuspendMessage {
				Set tSCSuspend=tSC
				Set tSC=$$Error^%apiOBJ("<Ens>ErrSuspending",pRequestHeader.%Id(),$$getAllErrorTexts^EnsUtil(tSC))
				Quit
			}
			Quit:..DeferResponse
			Quit:'..Retry
			Set ..Retry=0
			If ('tSC) {
				Set tTxt=$P($$getAllErrorTexts^EnsUtil(tSC)," -- ") ; strip off "logged as" varying text
				Set:'..%AlertStartTime&&..AlertOnError&&..AlertRetryGracePeriod&&(tTxt'=..%LastReportedError) ..%AlertStartTime=$ZH
				If ..%AlertStartTime {
					If $ZH>=(..%AlertStartTime+..AlertRetryGracePeriod) {
						Set ..%AlertStartTime=0
						If tTxt'=..%LastReportedError { Do ##class(Ens.Util.Log).LogError($classname(),"MessageHeaderHandler","Alerting at expiration of retry grace period ("_..AlertRetryGracePeriod_") for "_tTxt) }
						Else { Do ##class(Ens.Util.Log).LogInfo($classname(),"MessageHeaderHandler","Alerting at expiration of retry grace period ("_..AlertRetryGracePeriod_") for "_tTxt) }
					} Else {
						Set tDoAlert=0
						If tTxt'=..%LastReportedError { Do ##class(Ens.Util.Log).LogError($classname(),"MessageHeaderHandler","Not Alerting during retry grace period ("_..AlertRetryGracePeriod_") for "_tTxt) }
						Else { Do ##class(Ens.Util.Log).LogInfo($classname(),"MessageHeaderHandler","Not Alerting during retry grace period ("_..AlertRetryGracePeriod_") for "_tTxt) }
					}
				} Else {
					If tTxt'=..%LastReportedError { Do ##class(Ens.Util.Log).LogStatus($classname(),"MessageHeaderHandler",tSC) }
					Else { Set tDoAlert=0 }
				}
				Do:tDoAlert&&..AlertOnError ..SendAlert(##class(Ens.AlertRequest).%New($LB(..%ConfigName,$$getAllErrorTexts^EnsUtil(tSC))))
				Set tDoAlert=0
			} Else { Set ..%AlertStartTime=0, tTxt="" }
			Set ..%LastReportedError=tTxt
			If ..%QuitTask { Set tTerminate=1 }
			Else {
				If ..FailureTimeout'=-1 {
					Set tNow=$ZH
					If ..NoFailWhileDisconnected {
						try { Set tStayConnected=..Adapter.StayConnected }
						catch { Set tStayConnected=1 }
						If tStayConnected {
							try { Set tConnected=..Adapter.Connected }
							catch { Set tConnected=1 }
							If 'tConnected {
								If tNow>tEndTime Do:$S($D(%Ensemble("DoTrace")):%Ensemble("DoTrace"),1:##class(Ens.Util.Trace).DoTrace()) ##class(Ens.Util.Trace).WriteTrace("system",$classname(),"MessageHeaderHandler","Ignoring FailureTimeout while disconnected")
								Set:$G(tLast) tEndTime=tEndTime+(tNow-tLast) ; keep up with our disconnected time
								Set tLast=tNow
							} ElseIf $G(tLast) {
								Set tMinInterval=..RetryInterval+1  Set:..FailureTimeout<..RetryInterval&&(..FailureTimeout>0) tMinInterval=..FailureTimeout+1
								If tEndTime-tNow<tMinInterval Do:$S($D(%Ensemble("DoTrace")):%Ensemble("DoTrace"),1:##class(Ens.Util.Trace).DoTrace()) ##class(Ens.Util.Trace).WriteTrace("system",$classname(),"MessageHeaderHandler","Extending FailureTimeout by "_(tNow+tMinInterval-tEndTime)_" after reconnecting")  Set tEndTime=tNow+tMinInterval
								Kill tLast
							}
						}
					}
					If tNow>tEndTime {
						Set tFailureTimedOut=1, tSC=$$Error^%apiOBJ("<Ens>ErrFailureTimeout", ..FailureTimeout, $$getAllErrorTexts^EnsUtil(tSC), $classname()), tDoAlert=""
						Set $EC=""  try {
							Set tMHSC=tSC
							Set tDoDefault=..OnFailureTimeout(tRequest,.tResponse,.tSC)
							Set:tDoDefault tSC=$S(""=tAction:tSC,1:..finalReplyAction(tAction,tSC,1))
							Set:tSC'=tMHSC&&('tSC) tDoAlert=""
						} catch {
							Set tSC=$select(+tSC:##class(Ens.Util.Error).EnsSystemError($classname(),"MessageHeaderHandler"),1:$$AppendStatus^%occSystem(tSC,##class(Ens.Util.Error).EnsSystemError($classname(),"MessageHeaderHandler"))), tDoAlert=""
						}
						If $TLevel>0 Set tTL=$TLevel  While $TLevel>0 { TCommit } Do ##class(Ens.Util.Log).LogWarning($classname(),"MessageHeaderHandler",tTL_" open user transaction"_$S(tTL>1:"s",1:"")_" found after OnFailureTimeout(); committing before proceeding")
						Set:..SuspendMessage tSCSuspend=tSC
						Quit:'..%QuitTask
					}
				}
				If ..%QuitTask { Set tTerminate=1 }
				Else {
					Set ^IRIS.Temp.EnsHostMonitor($namespace,tConfigName,"%Status")="Retry",^IRIS.Temp.EnsHostMonitor($namespace,tConfigName,"%LastActivity")=$zdatetime($ztimestamp,3,,3)
					Set ^IRIS.Temp.EnsJobMonitor($namespace,"sys"_":"_$Job,tConfigName,"%Status")="Retry",^IRIS.Temp.EnsJobMonitor($namespace,"sys"_":"_$Job,tConfigName,"%LastActivity")=$zdatetime($ztimestamp,3,,3)
					Set tWaitTime = tTimeCalled + ..RetryInterval - $ZH
					Set tSC1=##class(Ens.Queue).DeQueue("SystemSignal:"_$Job,,$S(tWaitTime<0:0, 1:tWaitTime),,0)  If ('tSC1) Set tSC=$select(+tSC:tSC1,1:$$AppendStatus^%occSystem(tSC,tSC1))  Quit
					Set tTerminate=##class(Ens.Job).ShouldTerminate()
				} ; %QuitTask
			} ; %QuitTask
			Set tSBQ=##class(Ens.Job).ShouldBeQuiescent()
			If tSBQ || tTerminate {
				If pRequestHeader.Priority>2||tTerminate {
					Set tTerminate=1
					If 'tFailureTimedOut||(..%QuitTask>1) {
						If pRequestHeader.TargetQueueName="" {
							/* 
								If no target queue name then we cannot put back to queue.
								Double check invocation InProc and mark so we will RecoverActiveMessage() later			
							*/
							If pRequestHeader.Invocation=2 {
								If $Data(^Ens.ActiveMessage("sys"_":"_$Job),tActiveID) {
									Do ##class(Ens.Util.Log).LogInfo($classname(),"MessageHeaderHandler","Retry loop exited due to shutdown request for message "_..%RequestHeader.%Id()_" ; re-queueing corresponding Active Message:"_tActiveID_$S((''tSC):"",1:" - original error: "_$$getAllErrorTexts^EnsUtil(tSC)))								
									Set tSCActive = ##class(Ens.Job).RecoverActiveMessage(tActiveID,$Job,0)
									If (''tSCActive) Kill ^Ens.ActiveMessage("sys"_":"_$Job)
								} Else {
									Do ##class(Ens.Util.Log).LogError($classname(),"MessageHeaderHandler","Retry loop exited due to shutdown request for message "_..%RequestHeader.%Id()_" ; cannot re-queue corresponding Active Message since it is not defined"_$S((''tSC):"",1:" - original error: "_$$getAllErrorTexts^EnsUtil(tSC)))
								}
							} Else {
								Do ##class(Ens.Util.Log).LogError($classname(),"MessageHeaderHandler","Retry loop exited due to shutdown request for message "_..%RequestHeader.%Id()_" ; cannot re-queue since no target queue name and not InProc"_$S((''tSC):"",1:" - original error: "_$$getAllErrorTexts^EnsUtil(tSC)))
							}
						} Else {
							Set tSCx=tSC, tSC=##class(Ens.Queue).PutBackToQueue(pRequestHeader)
							Do ##class(Ens.Util.Log).LogInfo($classname(),"MessageHeaderHandler","Retry loop exited due to shutdown request for message "_..%RequestHeader.%Id()_" ; re-queueing"_$S((''tSCx):"",1:" - original error: "_$$getAllErrorTexts^EnsUtil(tSCx)))
						}
					} Else {
						Do ##class(Ens.Util.Log).LogInfo($classname(),"MessageHeaderHandler","Retry loop exited due to shutdown request for message "_..%RequestHeader.%Id()_" ; quitting with status "_$$getAllErrorTexts^EnsUtil(tSC))
					}
					Quit
				}
				Do ##class(Ens.Util.Log).LogInfo($classname(),"MessageHeaderHandler","Ignoring "_$S(tSBQ:"Quiescent",1:"Terminate")_" request while processing high priority (i.e. synchronous) request "_..%RequestHeader.%Id())
			}
			If ##class(Ens.Job).ShouldAbort() {
				Do ##class(Ens.Util.Log).LogWarning($classname(),"MessageHeaderHandler","Message "_..%RequestHeader.%Id()_" aborted as requested by signal for job "_$J_$S((''tSC):"",1:" - original error: "_$$getAllErrorTexts^EnsUtil(tSC)))
				Set tSC=1, tAborted=1
				Quit
			}
			If ##class(Ens.Job).ShouldSuspend() {
				Do ##class(Ens.Util.Log).LogWarning($classname(),"MessageHeaderHandler","Message "_pRequestHeader.%Id()_" suspended as requested by signal for job "_$J_$S((''tSC):"", 1:" - original error: "_$$getAllErrorTexts^EnsUtil(tSC)))
				Set tSC=1, ..SuspendMessage=1
				Quit
			}
			Set ..RetryCount=..RetryCount+1
			Set ^IRIS.Temp.EnsJobMonitor($namespace,"sys"_":"_$Job,tConfigName,"%Retry")=..RetryCount,^IRIS.Temp.EnsJobMonitor($namespace,"sys"_":"_$Job,tConfigName,"%LastActivity")=$zdatetime($ztimestamp,3,,3)
			Do:$S($D(%Ensemble("DoTrace")):%Ensemble("DoTrace"),1:##class(Ens.Util.Trace).DoTrace()) ##class(Ens.Util.Trace).WriteTrace("system",$classname(),"MessageHeaderHandler","Retrying Request Header Id "_pRequestHeader.%Id()_" - try #"_..RetryCount)
		} ; Retry loop
		Set ^IRIS.Temp.EnsJobMonitor($namespace,"sys"_":"_$Job,tConfigName,"%Retry")="",^IRIS.Temp.EnsJobMonitor($namespace,"sys"_":"_$Job,tConfigName,"%LastActivity")=$zdatetime($ztimestamp,3,,3)
		If ('tSC) {
			If ""=tDoAlert {
				Set $EC=""  try {
					Do:$S($D(%Ensemble("DoTrace")):%Ensemble("DoTrace"),1:##class(Ens.Util.Trace).DoTrace()) ##class(Ens.Util.Trace).WriteTrace("system",$classname(),"MessageHeaderHandler","calling OnError E")
					Set tDoAlert=..OnError(.tSC)
				} catch {
					Set tSC=$select(+tSC:##class(Ens.Util.Error).EnsSystemError($classname(),"MessageHeaderHandler"),1:$$AppendStatus^%occSystem(tSC,##class(Ens.Util.Error).EnsSystemError($classname(),"MessageHeaderHandler"))), tDoAlert=1
				}
				If $TLevel>0 Set tTL=$TLevel  While $TLevel>0 { TCommit } Do ##class(Ens.Util.Log).LogWarning($classname(),"MessageHeaderHandler",tTL_" open user transaction"_$S(tTL>1:"s",1:"")_" found after OnError() E; committing before proceeding")
			}
			Quit:'..SuspendMessage&&'..DeferResponse
		}
		Quit:tTerminate
		Set tConfigName=..%ConfigName
		Set tUTCH=$ztimestamp If $I(^IRIS.Temp.EnsHostMonitor($namespace,tConfigName,"%Count")),$I(^IRIS.Temp.EnsHostCounter($namespace,tConfigName,+tUTCH,$P(tUTCH,",",2)\10)) {} Set ^IRIS.Temp.EnsHostMonitor($namespace,tConfigName,"%Status")="OK",^IRIS.Temp.EnsHostMonitor($namespace,tConfigName,"%LastActivity")=$zdatetime($ztimestamp,3,,3)
		If $I(^IRIS.Temp.EnsJobMonitor($namespace,"sys"_":"_$Job,tConfigName,"%Count")) {} Set ^IRIS.Temp.EnsJobMonitor($namespace,"sys"_":"_$Job,tConfigName,"%Status")="OK",^IRIS.Temp.EnsJobMonitor($namespace,"sys"_":"_$Job,tConfigName,"%LastActivity")=$zdatetime($ztimestamp,3,,3)
		If tAborted {
			Do pRequestHeader.SetStatus(7)
			Quit
		}
		If ..SuspendMessage {
			Do pRequestHeader.SetStatus(5)
			If ('tSC) {
				If ('tSCSuspend) { Do ##class(Ens.Util.Log).LogStatus($classname(),"MessageHeaderHandler",tSC) }
				Else { Do ##class(Ens.Util.Log).LogWarning($classname(),"MessageHeaderHandler",$$GetOneStatusText^%apiOBJ(tSC)) }
			}
			Set tSC=1
			Quit
		}
		If ..DeferResponse {
			Do pRequestHeader.SetStatus(6)
			If ('tSC) {
				Do ##class(Ens.Util.Log).LogWarning($classname(),"MessageHeaderHandler","Deferring Response to Request "_pRequestHeader.%Id()_"; Operation returned error "_$$getAllErrorTexts^EnsUtil(tSC))
				Set tSC=1
			} Else {
				Do:$S($D(%Ensemble("DoTrace")):%Ensemble("DoTrace"),1:##class(Ens.Util.Trace).DoTrace()) ##class(Ens.Util.Trace).WriteTrace("system",$classname(),"MessageHeaderHandler","Deferring Response to Request "_pRequestHeader.%Id())
			}
			Quit
		}
		Do pRequestHeader.SetStatus(9)
		If (''tSC) && pRequestHeader.needsReply() {
			Set tSC=pRequestHeader.NewResponseMessage(.pResponseHeader,tResponse,..%SuperSession)
		}
	} catch {
		Set tSC=##class(Ens.Util.Error).EnsSystemError($classname(),"MessageHeaderHandler"), tDoAlert=1
	}
	If ('tSC) {
		Set:(tDoAlert="") tDoAlert = ..OnError(tSC)
		Set tTxt=$P($$getAllErrorTexts^EnsUtil(tSC)," -- ") ; strip off "logged as" varying text
		If tTxt'=..%LastReportedError { Do ##class(Ens.Util.Log).LogStatus($classname(),"MessageHeaderHandler",tSC) }
		Set ..%LastReportedError=tTxt
		Set tConfigName=..%ConfigName
		Set ^IRIS.Temp.EnsHostMonitor($namespace,tConfigName,"%Status")="Error",^IRIS.Temp.EnsHostMonitor($namespace,tConfigName,"%LastActivity")=$zdatetime($ztimestamp,3,,3)
		Set ^IRIS.Temp.EnsJobMonitor($namespace,"sys"_":"_$Job,tConfigName,"%Status")="Error",^IRIS.Temp.EnsJobMonitor($namespace,"sys"_":"_$Job,tConfigName,"%LastActivity")=$zdatetime($ztimestamp,3,,3)
		Do:'tAborted pRequestHeader.SetStatus(8)
		Do:tDoAlert&&..AlertOnError ..SendAlert(##class(Ens.AlertRequest).%New($LB(..%ConfigName,$$getAllErrorTexts^EnsUtil(tSC))))
	} ElseIf ..SuspendMessage&&('tSCSuspend) {
		Do:tDoAlert&&..AlertOnError ..SendAlert(##class(Ens.AlertRequest).%New($LB(..%ConfigName,$$getAllErrorTexts^EnsUtil(tSCSuspend))))
	}
	Set ..%SessionId=""
	Set ..%SuperSession=""
	Do ##class(Ens.Util.Statistics).RecordStats(3,..%ConfigName)
	Kill %Ensemble("SessionId")
	Kill %Ensemble("CurrentHeaderId")
	Set ..%RequestHeader=""
	Quit tSC
cleanNum(str)
	Set f=0  For { Set f=$F(str,"#",f)  Quit:'f
		For i=f:1 { Quit:$E(str,i)'?1N  Set $E(str,i)="",i=i-1 }
	}
	Quit str }
zOnKeepalive(pAdapterStatus) public {
	Set tSC=pAdapterStatus
	If ('tSC) {
		Do:$S($D(%Ensemble("DoTrace")):%Ensemble("DoTrace"),1:##class(Ens.Util.Trace).DoTrace()) ##class(Ens.Util.Trace).WriteTrace("system",$classname(),"OnKeepalive","calling OnError K")
		Set tDoAlert=..OnError(.tSC)
		If ('tSC) {
			Set tTxt=$P($$getAllErrorTexts^EnsUtil(tSC)," -- ") ; strip off "logged as" varying text
			Set:'..%AlertStartTime&&..AlertOnError&&..AlertRetryGracePeriod&&(tTxt'=..%LastReportedError) ..%AlertStartTime=$ZH
			If ..%AlertStartTime {
				If $ZH>=(..%AlertStartTime+..AlertRetryGracePeriod) {
					Set ..%AlertStartTime=0
					If tTxt'=..%LastReportedError { Do ##class(Ens.Util.Log).LogError($classname(),"OnKeepalive","Alerting at expiration of retry grace period ("_..AlertRetryGracePeriod_") for "_tTxt) }
					Else { Do ##class(Ens.Util.Log).LogInfo($classname(),"OnKeepalive","Alerting at expiration of retry grace period ("_..AlertRetryGracePeriod_") for "_tTxt) }
				} Else {
					Set tDoAlert=0
					If tTxt'=..%LastReportedError { Do ##class(Ens.Util.Log).LogError($classname(),"OnKeepalive","Not Alerting during retry grace period ("_..AlertRetryGracePeriod_") for "_tTxt) }
					Else { Do ##class(Ens.Util.Log).LogInfo($classname(),"OnKeepalive","Not Alerting during retry grace period ("_..AlertRetryGracePeriod_") for "_tTxt) }
				}
			} Else {
				If tTxt'=..%LastReportedError { Do ##class(Ens.Util.Log).LogStatus($classname(),"OnKeepalive",tSC) }
				Else { Set tDoAlert=0 }
			}
			Do:tDoAlert&&..AlertOnError ..SendAlert(##class(Ens.AlertRequest).%New($LB(..%ConfigName,$$getAllErrorTexts^EnsUtil(tSC))))
			Set tConfigName=..%ConfigName
			Set ^IRIS.Temp.EnsHostMonitor($namespace,tConfigName,"%Status")="Error",^IRIS.Temp.EnsHostMonitor($namespace,tConfigName,"%LastActivity")=$zdatetime($ztimestamp,3,,3)
			Set ^IRIS.Temp.EnsJobMonitor($namespace,"sys"_":"_$Job,tConfigName,"%Status")="Error",^IRIS.Temp.EnsJobMonitor($namespace,"sys"_":"_$Job,tConfigName,"%LastActivity")=$zdatetime($ztimestamp,3,,3)
			Set:'..%QuitTask tSC=1
		} Else { Set ..%AlertStartTime=0, tTxt="" }
	} Else { Set ..%AlertStartTime=0, tTxt="" }
	Set ..%LastReportedError=tTxt
	Quit tSC }
zfinalReplyAction(pAction,pSC,pFixError) public {
	If pAction["S" {
		Set ..SuspendMessage=1, tActionDesc="Suspending on"
	} ElseIf pAction["D" {
		Set:($ZS<(2**31)) $ZS=(2**31)
		Set tActionDesc="Disabling on"
		Do ##class(Ens.Job).Stop($Job)
		Do ##Class(Ens.Director).EnableConfigItem(..%ConfigName,0,0)
		Do ..SendRequestAsync("Ens.ScheduleHandler","")
		Set ..%QuitTask=1+(pAction'["F"), ..Retry=1 ; we are quitting but the retry flag will force us to requeue the current message
	} ElseIf pAction["F" {
		// No work required here ; just quit with error
		Set tActionDesc="Discarding message on"
		Set ..SuspendMessage=0
	} Else { ; ??
		Do ##class(Ens.Util.Log).LogWarning($classname(),"finalReplyAction",$$getAllErrorTexts^EnsUtil(pSC))
		Set pSC=1, pFixError=0
	}
	Set:pFixError pSC=$$Error^%apiOBJ("<Ens>ErrGeneral",tActionDesc_" "_$$getAllErrorTexts^EnsUtil(pSC))
	Quit pSC }
zAdapterNewObject() public {
	Set newobject=##class(EnsLib.HTTP.OutboundAdapter).%New() If newobject="" Quit ""
	Set ..Adapter=newobject
	Quit newobject }
zEnumerateSettingsGetInfo(colinfo,parminfo,idinfo,qHandle,extoption=0,extinfo) public {
	Set colinfo=$lb($lb("Name",10,"Name"),$lb("Description",10,"Description"),$lb("Type",10,"Type"),$lb("Default",10,"Default"),$lb("MAXLEN",10,"MAXLEN"),$lb("MINVAL",10,"MINVAL"),$lb("MAXVAL",10,"MAXVAL"),$lb("VALUELIST",10,"VALUELIST"),$lb("DISPLAYLIST",10,"DISPLAYLIST"),$lb("IsRequired",10,"IsRequired"),$lb("LocalizedName",10,"LocalizedName"),$lb("Category",10,"Category"),$lb("LocalizedCategory",10,"LocalizedCategory"),$lb("EditorContext",10,"EditorContext"))
	Set parminfo=""
	Set idinfo=$lb(0,"")
	If extoption {
		Set extinfo=$lb("",$lb($lb("",""),$lb("",""),$lb("",""),$lb("",""),$lb("",""),$lb("",""),$lb("",""),$lb("",""),$lb("",""),$lb("",""),$lb("",""),$lb("",""),$lb("",""),$lb("","")))
	}
	Quit 1 }
zEnumerateSettingsGetODBCInfo(colinfo,parminfo,qHandle) public {
	set version = $Select($Get(%protocol,41)>40:4,1:3)
	Set metadata=$lb(1,14,"Name",12,50,0,2,"Name","GetApi","SQLUser","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"Description",12,50,0,2,"Description","GetApi","SQLUser","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"Type",12,50,0,2,"Type","GetApi","SQLUser","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"Default",12,50,0,2,"Default","GetApi","SQLUser","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"MAXLEN",12,50,0,2,"MAXLEN","GetApi","SQLUser","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"MINVAL",12,50,0,2,"MINVAL","GetApi","SQLUser","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"MAXVAL",12,50,0,2,"MAXVAL","GetApi","SQLUser","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"VALUELIST",12,50,0,2,"VALUELIST","GetApi","SQLUser","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"DISPLAYLIST",12,50,0,2,"DISPLAYLIST","GetApi","SQLUser","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"IsRequired",12,50,0,2,"IsRequired","GetApi","SQLUser","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"LocalizedName",12,50,0,2,"LocalizedName","GetApi","SQLUser","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"Category",12,50,0,2,"Category","GetApi","SQLUser","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"LocalizedCategory",12,50,0,2,"LocalizedCategory","GetApi","SQLUser","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"EditorContext",12,50,0,2,"EditorContext","GetApi","SQLUser","",$c(0,0,0,0,0,0,0,0,0,0,0,0),0)
	Set colcount=$li(metadata,2),cmdlen=colcount*10,parmcount=$li(metadata,3+cmdlen),pmdlen=parmcount*6,parminfo=$li(metadata,cmdlen+3,cmdlen+pmdlen+3)
	If version=4 {
		Set colinfo=$li(metadata,2,2+cmdlen)
	} Else {
		Set colinfo=$li(metadata,2,2)
		For i=0:1:colcount-1 Set colinfo=colinfo_$list(metadata,3+(i*10),11+(i*10))
	}
	Quit 1 }
]]></Routine>


<Class name="User.GetApi">
<Super>Ens.BusinessOperation</Super>
<TimeChanged>65847,35456.79031</TimeChanged>
<TimeCreated>65846,52225.733757</TimeCreated>

<Parameter name="ADAPTER">
<Default>EnsLib.HTTP.OutboundAdapter</Default>
</Parameter>

<Property name="Adapter">
<Type>EnsLib.HTTP.OutboundAdapter</Type>
</Property>

<Parameter name="INVOCATION">
<Default>Queue</Default>
</Parameter>

<Method name="Api">
<FormalSpec>pRequest:User.Request,*pResponse:User.selectResponse</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set Data = ##class(EnsLib.HTTP.OutboundAdapter).%New()
	
	do Data.GetURL("https://26ef06b0-0cda-41dd-9e8b-02b3a7e81e40.mock.pstmn.io/Peter")
]]></Implementation>
</Method>
</Class>


<Routine name="User.InsertProcess.1" type="INT" languagemode="0" generated="1" timestamp="65834,40438.709164"><![CDATA[
 ;User.InsertProcess.1
 ;Generated for class User.InsertProcess.  Do NOT edit. 03/31/2021 11:13:58AM
 ;;71686C34;User.InsertProcess
 ;
SQLUPPER(v,l) { quit $zu(28,v,7,$g(l,32767)) }
ALPHAUP(v,r) { quit $zu(28,v,6) }
STRING(v,l) { quit $zu(28,v,9,$g(l,32767)) }
SQLSTRING(v,l) { quit $zu(28,v,8,$g(l,32767)) }
UPPER(v) { quit $zu(28,v,5) }
MVR(v) { quit $zu(28,v,2) }
TRUNCATE(v,l) { quit $e(v,1,$g(l,3641144)) }
%CheckConstraintsForExtent(pConstraintList="",pCheckDisabled=0,pErrorLog) [ SQLCODE,tID ] public { New %ROWCOUNT,%ROWID,%msg,SQLCODE,tID 
	kill pErrorLog set tStatusAll = 1, pErrorLog = 0 if '$listvalid(pConstraintList) { set pConstraintList = $listfromstring(pConstraintList) }
	 ;---&sql(declare ext cursor for select %ID into :tID FROM SQLUser.InsertProcess)
 	 ;--- ** SQL PUBLIC Variables: SQLCODE, tID
	 
	 ;---&sql(open ext)
	try { s %ext0192="",%ext0192=$classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xEvL1sMKax8tAjoG6jXRGYwOGEff","%New") if '$isobject(%ext0192) s %ext0192=$$%0dsqlA() } catch { if $ze["<CLASS DOES NOT EXIST>"&&($ze["%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xEvL1sMKax8tAjoG6jXRGYwOGEff")||($ze["<ZSQLU>") { s %ext0192=$$%0dsqlA() } else { throw } }
	if SQLCODE '< 0 {
		for {
			 ;---&sql(fetch ext)
 			 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE
			if $isobject($g(%ext0192))'=1 { s SQLCODE=-102 } else { do %ext0192.FET() if SQLCODE=0 { } }
			if SQLCODE { if SQLCODE=100 { quit } elseif SQLCODE<0 { set tStatusAll = $select(+tStatusAll:$$Error^%apiOBJ(5521,SQLCODE,$Get(%msg)),1:$$AppendStatus^%occSystem(tStatusAll,$$Error^%apiOBJ(5521,SQLCODE,$Get(%msg)))) quit } }
			set tStatus = ..%CheckConstraints(tID,pConstraintList,pCheckDisabled,.tErrorInfo)
			if ('tStatus) { set tStatusAll = $select(+tStatusAll:tStatus,1:$$AppendStatus^%occSystem(tStatusAll,tStatus)) set:pErrorLog<1000 pErrorLog = pErrorLog + 1, pErrorLog(pErrorLog) = tErrorInfo _ $Listbuild(tStatus) }
		}
		 ;---&sql(close ext)
		if '$isobject($get(%ext0192)) { set SQLCODE=-102 } else { set SQLCODE=0 kill %ext0192 }
	}
	quit tStatusAll }
 q
%0dsqlA()	n %xxsql
	s %xxsql("S",1)="DECLARE ext CURSOR FOR SELECT %ID INTO :tID FROM SQLUser . InsertProcess"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","DEBUG")=$c(1),%xxsql("M","FORKNETDMN")=$c(1)
	s %xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1)
	s %xxsql("M","USELOST")=$c(1),%xxsql("M","ZVERSION")=$c(1),%xxsql("I","%occErrors")="",%xxsql("I","%occSqlfunc")="",%xxsql("I","%sySite")=""
	s %xxsql("I","%sySt")="",%xxsql("I","%sySystem")="",%xxsql("I","EnsConstants")="",%xxsql("I","EnsErrors")="",%xxsql("I","EnsUtil")=""
	s %xxsql("I","Ensemble")="",%xxsql("NS")="PROJECT1"
	return $$BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","User",0,"",),",0,ext,","User.InsertProcess.CLS",1)
%FileIndices(id,pIndexHandle=0) public {
	Set $ZTrap="CatchError",sc=1
	Set bsv0N2=$Get(^Ens.BusinessProcessD(id))
	Set bsv0N3=$listget(bsv0N2,1)
	Quit:$select(bsv0N3="":1,bsv0N3'[($extract(bsv0N3)_"InsertProcess"_$extract(bsv0N3)):1,1:0) 1
	If bsv0N3'="~Ens.BusinessProcessBPL~InsertProcess~" {
		Set bsv0N1=$piece(bsv0N3,$extract(bsv0N3),*-1)
		Set:bsv0N1'["." bsv0N1="User."_bsv0N1
		If bsv0N1'="" {
			Quit $classmethod(bsv0N1,"%FileIndices",id,.pIndexHandle)
		}
	}
	Set bsv0N4=..%TimeCreatedStorageToLogical($listget(bsv0N2,13))
	Set bsv0N5=..%TimeCompletedStorageToLogical($listget(bsv0N2,12))
	Set bsv0N6=$listget(bsv0N2,22)
	Set bsv0N7=$listget(bsv0N2,21)
	Set bsv0N8=$listget(bsv0N2,4)
	If ('pIndexHandle)||($Ascii($Get(pIndexHandle("Ens.BusinessProcess")),1)=1) {
		Set bsv0N9=$listget(bsv0N2,11)
		Set bsv0N10=$s(bsv0N9'="":bsv0N9,1:-1E14)
		Set ^Ens.BusinessProcessI("SessionId",bsv0N10,id)=$listget(bsv0N2,1)
	}
	If ('pIndexHandle)||($Ascii($Get(pIndexHandle("Ens.BusinessProcess")),2)=1) {
		Set bsv0N11=$s(bsv0N4'="":bsv0N4,1:-1E14)
		Set ^Ens.BusinessProcessI("TimeCreated",bsv0N11,id)=$listget(bsv0N2,1)
	}
	QUIT 1
CatchError	s $ZTrap="" i $ZE'="" { s sc = $$Error^%apiOBJ(5002,$ZE) } q sc }
%SQLAcquireLock(%rowid,s=0,unlockref=0)
	new %d,gotlock
	set %d(1)=%rowid set s=$e("E",'unlockref)_$e("S",s)
	lock +^Ens.BusinessProcessD(%d(1))#s:$zu(115,4) set gotlock=$t
	if gotlock,'unlockref { set:$case($SYSTEM.Lock.ReturnCode(),2:1,4:1,:0)&&($tlevel) %0CacheLock("User.InsertProcess","E")=1 }
	set:gotlock&&unlockref unlockref=unlockref+1,unlockref(unlockref)=$lb($name(^Ens.BusinessProcessD(%d(1))),"User.InsertProcess",s_"D")
	QUIT gotlock
%SQLAcquireTableLock(s=0,SQLCODE,to="")
	set s=$e("S",s) set:to="" to=$zu(115,4) lock +^Ens.BusinessProcessD#s:to QUIT:$t 1 set SQLCODE=-110 if s="S" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler35",,"SQLUser"_"."_"InsertProcess") } else { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler36",,"SQLUser"_"."_"InsertProcess") } QUIT 0
	Return
%SQLBeforeTriggers()
	new %ok,pChanged,pNew,pOld set %ok=1 //  'BEFORE' trigger(s)
	if %oper="INSERT" {
		set pNew(4)=%d(4),pNew(1)=%d(1)
	}
	if %oper="UPDATE" {
		set pNew(4)=$g(%d(4)),pNew(1)=$g(%d(1))
	}
	if %oper="DELETE" {
		set pNew(4)=$g(%e(4)),pNew(1)=%d(1)
	}
	do:("DELETE"[%oper)&&('$a(%check,6)) ..OnDeleteExecute(%oper,.pNew,.pOld,.pChanged,.%ok,.%msg) if '%ok { set sqlcode=-13_$s(%oper="INSERT":0,%oper="UPDATE":2,1:4) quit  }	// Call Trigger OnDelete
	QUIT
%SQLBuildIndices(pIndices="",pLockFlag=0,pStartID="",pEndID="",pIgnoreIndexList="")
	QUIT ..%BuildIndices(pIndices,,pLockFlag,,pStartID,pEndID,pIgnoreIndexList)
%SQLBuildPurgeIndexForRow(pIndices="",pActions="BP",pLockRow=1,%d,%e,pIgnoreIndexList="")
	// Purge and build index nodes for a single row using given values, return Status Code
	new sn,tSC,tLock set tSC=1,pActions=$zcvt(pActions,"U")
	try {
		if $g(%d(1))="" { set tSC=$select(+tSC:$$Error^%apiOBJ(5521,-108,"RowID value must be specified in %d(1) when calling %SQLBuildPurgeIndexForRow for table 'SQLUser.InsertProcess'"),1:$$AppendStatus^%occSystem(tSC,$$Error^%apiOBJ(5521,-108,"RowID value must be specified in %d(1) when calling %SQLBuildPurgeIndexForRow for table 'SQLUser.InsertProcess'"))) RETURN tSC }
		if pLockRow { if '..%SQLAcquireLock(%d(1)) { set tSC=$select(+tSC:$$Error^%apiOBJ(5521,-114,"Unable to lock row in table 'SQLUser.InsertProcess' with %ID = '"_%d(1)_"'"),1:$$AppendStatus^%occSystem(tSC,$$Error^%apiOBJ(5521,-114,"Unable to lock row in table 'SQLUser.InsertProcess' with %ID = '"_%d(1)_"'"))) RETURN tSC  } else { set tLock=1 }}
		if ((pIndices="")||($lf(pIndices,"SessionId"))),'$listfind(pIgnoreIndexList,"SessionId") {
			if pActions["P" {
				set sn(1)=%e(16) set:sn(1)="" sn(1)=-1E14 set sn(2)=%d(1) k ^Ens.BusinessProcessI("SessionId",sn(1),sn(2))
			}
			if pActions["B" {
				set sn(1)=%d(16) set:sn(1)="" sn(1)=-1E14 set sn(2)=%d(1) set ^Ens.BusinessProcessI("SessionId",sn(1),sn(2))=%d(38)
			}
		}
		if ((pIndices="")||($lf(pIndices,"TimeCreated"))),'$listfind(pIgnoreIndexList,"TimeCreated") {
			if pActions["P" {
				set sn(1)=%e(21) set:sn(1)="" sn(1)=-1E14 set sn(2)=%d(1) k ^Ens.BusinessProcessI("TimeCreated",sn(1),sn(2))
			}
			if pActions["B" {
				set sn(1)=%d(21) set:sn(1)="" sn(1)=-1E14 set sn(2)=%d(1) set ^Ens.BusinessProcessI("TimeCreated",sn(1),sn(2))=%d(38)
			}
		}
		if pLockRow { do ..%SQLReleaseLock(%d(1),0,0) set tLock=0 }
	}
	catch {
		if $g(tLock) { do ..%SQLReleaseLock(%d(1),0,0) }
		set tSC=$select(+tSC:$$Error^%apiOBJ(5594,$ze),1:$$AppendStatus^%occSystem(tSC,$$Error^%apiOBJ(5594,$ze)))
	}
	QUIT tSC
%SQLCheckUnique(pFromOrig=0,%pID,%pVals...)
	 ;---&sql(SELECT ID FROM SQLUser.InsertProcess WHERE  ID=:%pVals(1) AND (%ID <> :%pID OR :%pID IS NULL)) QUIT SQLCODE=100
 	 ;--- ** SQL PUBLIC Variables: %pID, %pVals, SQLCODE
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xEMsl4oKA3KHPPUHch54j4PiGlC6","%New") } catch { if $ze["<CLASS DOES NOT EXIST>"&&($ze["%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xEMsl4oKA3KHPPUHch54j4PiGlC6")||($ze["<ZSQLU>") { d %0dsqlD } else { throw } } QUIT SQLCODE=100
 q
%0dsqlD	n %xxsql
	s %xxsql("S",1)="SELECT ID FROM SQLUser . InsertProcess WHERE ID = :%pVals(1) AND ( %ID <> :%pID OR :%pID IS NULL )"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","DEBUG")=$c(1),%xxsql("M","FORKNETDMN")=$c(1)
	s %xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1)
	s %xxsql("M","USELOST")=$c(1),%xxsql("M","ZVERSION")=$c(1),%xxsql("I","%occErrors")="",%xxsql("I","%occSqlfunc")="",%xxsql("I","%sySite")=""
	s %xxsql("I","%sySt")="",%xxsql("I","%sySystem")="",%xxsql("I","EnsConstants")="",%xxsql("I","EnsErrors")="",%xxsql("I","EnsUtil")=""
	s %xxsql("I","Ensemble")="",%xxsql("NS")="PROJECT1"
	d BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","User",0,"",),,"User.InsertProcess.CLS")
	q
%SQLCopyIcolIntoName()
	if %oper="DELETE" {
		set:$d(%d(1)) %f("ID")=%d(1)
		QUIT
	}
	set:$d(%d(1)) %f("ID")=%d(1) set:$a(%e,2)&&$d(%d(2)) %f("%ConfigName")=%d(2) set:$a(%e,3)&&$d(%d(3)) %f("%ConfigQueueName")=%d(3) set:$a(%e,4)&&$d(%d(4)) %f("%Context")=%d(4) set:$a(%e,5)&&$d(%d(5)) %f("%Counter")=%d(5) set:$a(%e,6)&&$d(%d(6)) %f("%IsCompleted")=%d(6) set:$a(%e,7)&&$d(%d(7)) %f("%IsTerminated")=%d(7) set:$a(%e,8)&&$d(%d(8)) %f("%IsTimerInterrupted")=%d(8) set:$a(%e,9)&&$d(%d(9)) %f("%MasterPendingResponsesOld")=%d(9) set:$a(%e,10)&&$d(%d(10)) %f("%MessagesReceivedOld")=%d(10) set:$a(%e,11)&&$d(%d(11)) %f("%MessagesSentOld")=%d(11) set:$a(%e,12)&&$d(%d(12)) %f("%PrimaryRequestHeader")=%d(12) set:$a(%e,13)&&$d(%d(13)) %f("%PrimaryResponseHeader")=%d(13) set:$a(%e,14)&&$d(%d(14)) %f("%QuitTask")=%d(14) set:$a(%e,15)&&$d(%d(15)) %f("%RepliedStatus")=%d(15) set:$a(%e,16)&&$d(%d(16)) %f("%SessionId")=%d(16) set:$a(%e,17)&&$d(%d(17)) %f("%StatusCode")=%d(17) set:$a(%e,18)&&$d(%d(18)) %f("%SuperSession")=%d(18) set:$a(%e,19)&&$d(%d(19)) %f("%Thread")=%d(19) set:$a(%e,20)&&$d(%d(20)) %f("%TimeCompleted")=%d(20) set:$a(%e,21)&&$d(%d(21)) %f("%TimeCreated")=%d(21) set:$a(%e,22)&&$d(%d(22)) %f("%responseClassName")=%d(22) set:$a(%e,23)&&$d(%d(23)) %f("%responseId")=%d(23) set:$a(%e,24)&&$d(%d(24)) %f("Adapter")=%d(24) set:$a(%e,25)&&$d(%d(25)) %f("AlertGroups")=%d(25) set:$a(%e,26)&&$d(%d(26)) %f("AlertOnError")=%d(26) set:$a(%e,27)&&$d(%d(27)) %f("AlertRetryGracePeriod")=%d(27) set:$a(%e,28)&&$d(%d(28)) %f("BusinessPartner")=%d(28) set:$a(%e,29)&&$d(%d(29)) %f("FailureTimeout")=%d(29) set:$a(%e,30)&&$d(%d(30)) %f("InactivityTimeout")=%d(30) set:$a(%e,31)&&$d(%d(31)) %f("QueueCountAlert")=%d(31) set:$a(%e,32)&&$d(%d(32)) %f("QueueWaitAlert")=%d(32) set:$a(%e,33)&&$d(%d(33)) %f("ReplyCodeActions")=%d(33) set:$a(%e,34)&&$d(%d(34)) %f("Retry")=%d(34) set:$a(%e,35)&&$d(%d(35)) %f("RetryInterval")=%d(35) set:$a(%e,36)&&$d(%d(36)) %f("RuleLogging")=%d(36) set:$a(%e,37)&&$d(%d(37)) %f("SuspendMessage")=%d(37) set:$a(%e,38)&&$d(%d(38)) %f("x__classname")=%d(38)
	QUIT
%SQLCopyNameIntoIcol()
	k %d,%e set:$d(%f("ID"))#2 %d(1)=%f("ID") set:$d(%f("%ConfigName"))#2 %d(2)=%f("%ConfigName") set:$d(%f("%ConfigQueueName"))#2 %d(3)=%f("%ConfigQueueName") set:$d(%f("%Context"))#2 %d(4)=%f("%Context") set:$d(%f("%Counter"))#2 %d(5)=%f("%Counter") set:$d(%f("%IsCompleted"))#2 %d(6)=%f("%IsCompleted") set:$d(%f("%IsTerminated"))#2 %d(7)=%f("%IsTerminated") set:$d(%f("%IsTimerInterrupted"))#2 %d(8)=%f("%IsTimerInterrupted") set:$d(%f("%MasterPendingResponsesOld"))#2 %d(9)=%f("%MasterPendingResponsesOld") set:$d(%f("%MessagesReceivedOld"))#2 %d(10)=%f("%MessagesReceivedOld") set:$d(%f("%MessagesSentOld"))#2 %d(11)=%f("%MessagesSentOld") set:$d(%f("%PrimaryRequestHeader"))#2 %d(12)=%f("%PrimaryRequestHeader") set:$d(%f("%PrimaryResponseHeader"))#2 %d(13)=%f("%PrimaryResponseHeader") set:$d(%f("%QuitTask"))#2 %d(14)=%f("%QuitTask") set:$d(%f("%RepliedStatus"))#2 %d(15)=%f("%RepliedStatus") set:$d(%f("%SessionId"))#2 %d(16)=%f("%SessionId") set:$d(%f("%StatusCode"))#2 %d(17)=%f("%StatusCode") set:$d(%f("%SuperSession"))#2 %d(18)=%f("%SuperSession") set:$d(%f("%Thread"))#2 %d(19)=%f("%Thread") set:$d(%f("%TimeCompleted"))#2 %d(20)=%f("%TimeCompleted") set:$d(%f("%TimeCreated"))#2 %d(21)=%f("%TimeCreated") set:$d(%f("%responseClassName"))#2 %d(22)=%f("%responseClassName") set:$d(%f("%responseId"))#2 %d(23)=%f("%responseId") set:$d(%f("Adapter"))#2 %d(24)=%f("Adapter") set:$d(%f("AlertGroups"))#2 %d(25)=%f("AlertGroups") set:$d(%f("AlertOnError"))#2 %d(26)=%f("AlertOnError") set:$d(%f("AlertRetryGracePeriod"))#2 %d(27)=%f("AlertRetryGracePeriod") set:$d(%f("BusinessPartner"))#2 %d(28)=%f("BusinessPartner") set:$d(%f("FailureTimeout"))#2 %d(29)=%f("FailureTimeout") set:$d(%f("InactivityTimeout"))#2 %d(30)=%f("InactivityTimeout") set:$d(%f("QueueCountAlert"))#2 %d(31)=%f("QueueCountAlert") set:$d(%f("QueueWaitAlert"))#2 %d(32)=%f("QueueWaitAlert") set:$d(%f("ReplyCodeActions"))#2 %d(33)=%f("ReplyCodeActions") set:$d(%f("Retry"))#2 %d(34)=%f("Retry") set:$d(%f("RetryInterval"))#2 %d(35)=%f("RetryInterval") set:$d(%f("RuleLogging"))#2 %d(36)=%f("RuleLogging") set:$d(%f("SuspendMessage"))#2 %d(37)=%f("SuspendMessage") set:$d(%f("x__classname"))#2 %d(38)=%f("x__classname")  kill %f QUIT
%SQLDefineiDjVars(%d,subs,master)
	QUIT
%SQLDelete(%rowid,%check,%tstart=1,%mv=0,%polymorphic=0)
	// SQL DELETE method for table SQLUser.InsertProcess
	if %polymorphic { do ..%SQLCopyNameIntoIcol() set %d(1)=%rowid,%e(1)=%rowid  goto %SQLDeletePD }
	new bva,ce,%d,dc,%e,%ele,%itm,%key,%l,%nc,omcall,%oper,%pos,%s,sn,sqlcode,subs,%SkipFiling set %oper="DELETE",sqlcode=0,%ROWID=%rowid,%d(1)=%rowid,%e(1)=%rowid,%l=$c(0)
	if '$d(%0CacheSQLRA) { new %0CacheSQLRA set omcall=1 }
	if '$a(%check,2) {
		new %ls lock +^Ens.BusinessProcessD(%d(1))#"E":$zu(115,4) set %ls=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,4:2,2:2,1:3,:""))
		set:%ls=2 $e(%check,2)=$c(1) set:%ls=2&&($tlevel) %0CacheLock("User.InsertProcess","E")=1 set:$case(%ls,1:1,2:1,:0) $e(%l)=$c(1)
		if '%ls||(%ls=3) { set SQLCODE=-110,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer",$s('%ls:"SQLFiler40",1:"SQLFiler55"),,%oper,"SQLUser"_"."_"InsertProcess",$g(%d(1))) RETURN  }
	}
	if %tstart { TSTART:($zu(115,1)=1)||('$TLEVEL&&($zu(115,1)=2))  }
	set $zt="ERRORDelete"
%SQLDeletePD	// Entry point for Polymorphic Dispatch from a super-table
	do ..%SQLGetOld(%rowid,.%d,.%e,.sqlcode) if sqlcode { set SQLCODE=-106,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler58",,"SQLUser"_"."_"InsertProcess",%rowid) do ..%SQLEExit() QUIT  }
	if %e(38)'="" { set sn=$p(%e(38),$e(%e(38)),$l(%e(38),$e(%e(38)))-1) if "InsertProcess"'=sn { new %f do ..%SQLCopyIcolIntoName() do $classmethod(sn,"%SQLDelete",%rowid,%check,%tstart,%mv,1) QUIT  }}
	if '$a(%check),'$zu(115,7) do  if sqlcode set SQLCODE=sqlcode do ..%SQLEExit() QUIT  
	. new %fk,%k,%p,%st,%t,%z set %k="",%p("%1")="%d(1),",%p("IDKEY")="%d(1),"
	. for  quit:sqlcode<0  set %k=$o(^rINDEXEXT("F","User.InsertProcess",%k)) quit:%k=""  set %t="" for  set %t=$o(^rINDEXEXT("F","User.InsertProcess",%k,"f",%t)) quit:%t=""  set %st=(%t="User.InsertProcess") set %fk="" for  set %fk=$o(^rINDEXEXT("F","User.InsertProcess",%k,"f",%t,%fk)) quit:%fk=""  x "set %z=$classmethod(%t,%fk_""SQLFKeyRefAction"",%st,%k,$a(%check,2),"_%p(%k)_")" if %z set sqlcode=-124 quit  
	if '$a(%check,4) { do ..%SQLBeforeTriggers() if sqlcode { set SQLCODE=sqlcode do ..%SQLEExit() QUIT }}
	set ce="" for  { set ce=$order(^oddSQL("SQLUser","InsertProcess","DC",ce)) quit:ce=""   do $classmethod(ce,"%SQLDeleteChildren",%d(1),%check,.sqlcode) quit:sqlcode<0  } if sqlcode<0 { set SQLCODE=sqlcode do ..%SQLEExit() QUIT } // Delete any children
	set ce="" for  { set ce=$order(^oddSQL("Ens","BusinessProcessBPL","DC",ce)) quit:ce=""   do $classmethod(ce,"%SQLDeleteChildren",%d(1),%check,.sqlcode) quit:sqlcode<0  } if sqlcode<0 { set SQLCODE=sqlcode do ..%SQLEExit() QUIT } // Delete any children of the root extent
	set ce="" for  { set ce=$order(^oddSQL("Ens","BusinessProcess","DC",ce)) quit:ce=""   do $classmethod(ce,"%SQLDeleteChildren",%d(1),%check,.sqlcode) quit:sqlcode<0  } if sqlcode<0 { set SQLCODE=sqlcode do ..%SQLEExit() QUIT } // Delete any children of the root extent
	if '$a(%check,3),'$g(%SkipFiling) {
		set sn(1)=%e(16) set:sn(1)="" sn(1)=-1E14 set sn(2)=%d(1) k ^Ens.BusinessProcessI("SessionId",sn(1),sn(2))
		set sn(1)=%e(21) set:sn(1)="" sn(1)=-1E14 set sn(2)=%d(1) k ^Ens.BusinessProcessI("TimeCreated",sn(1),sn(2))
	}
	goto:$g(%SkipFiling) %SQLDeleteSkip
	k ^Ens.BusinessProcessD(%d(1))
%SQLDeleteSkip	//
	do ..%SQLUnlock() TCOMMIT:%tstart&&($zu(115,1)=1)
	set SQLCODE=0 kill:$g(omcall) %0CacheSQLRA
	QUIT
ERRORDelete	set $zt="",SQLCODE=-415,%msg=$s($g(%msg)'="":%msg_" -- ",1:"")_$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler51",,%oper,"SQLUser"_"."_"InsertProcess",$ze) if $ze["<FRAMESTACK>" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler52",,$ze,%oper,"SQLUser"_"."_"InsertProcess") do ##Class(%SYS.System).WriteToConsoleLog(%msg) if ($zu(67,10,$j)=1)||($zu(67,10,$j)=3) { write !,%msg h 3 } HALT  } do ..%SQLEExit() QUIT
	Return
%SQLDeleteTempStreams()
	// Delete all temporary streams
	QUIT
%SQLEExit()
	do ..%SQLUnlock() 
	if %tstart,$zu(115,1)=1,$TLEVEL { set %tstart=0 TROLLBACK 1 } kill:$g(omcall) %0CacheSQLRA QUIT  
	Return
%SQLExists(pLockOnly=0,pUnlockRef,%pVal...)
	// SQL Foreign Key validation entry point for Key %1.  Called by FKeys that reference this Key to see if the row is defined
	new id set id=%pVal(1)
	if pLockOnly>=0 { if '..%SQLGetLock(id,1,.pUnlockRef) { set sqlcode=-114,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler39",,"SQLUser"_"."_"InsertProcess"_":"_"%1") QUIT 0 } }
	if pLockOnly<1 {
		new qv set qv='..%SQLCheckUnique(0,,%pVal(1)) QUIT:pLockOnly=-1 qv
		do:'$g(pUnlockRef) ..%SQLReleaseLock(id,1) quit qv
	}
	else { do:'$g(pUnlockRef) ..%SQLReleaseLock(id,1) QUIT 1 }
	Return
%SQLGetLock(pRowId,pShared=0,pUnlockRef)
	QUIT ..%SQLAcquireLock(pRowId,pShared,.pUnlockRef)
%SQLGetOld(%rowid,%d,%e,sqlcode)
	// Get old data values
	new SQLCODE,%ROWCOUNT
	 ;---&sql(SELECT x__classname,%SessionId,%TimeCreated,%Context INTO :%e() FROM %IGNOREINDEX * SQLUser.InsertProcess WHERE ID=:%rowid)
 	 ;--- ** SQL PUBLIC Variables: %e, %rowid, SQLCODE
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xEOluQNkTsOQvzmg1EIdqyScKQnJ","%New") } catch { if $ze["<CLASS DOES NOT EXIST>"&&($ze["%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xEOluQNkTsOQvzmg1EIdqyScKQnJ")||($ze["<ZSQLU>") { d %0dsqlF } else { throw } }
	set sqlcode=SQLCODE QUIT:sqlcode'=0
	QUIT
 q
%0dsqlF	n %xxsql
	s %xxsql("S",1)="SELECT x__classname , %SessionId , %TimeCreated , %Context INTO :%e() FROM %IGNOREINDEX * SQLUser . InsertProcess WHERE ID = :%rowid"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","DEBUG")=$c(1),%xxsql("M","FORKNETDMN")=$c(1)
	s %xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1)
	s %xxsql("M","USELOST")=$c(1),%xxsql("M","ZVERSION")=$c(1),%xxsql("I","%occErrors")="",%xxsql("I","%occSqlfunc")="",%xxsql("I","%sySite")=""
	s %xxsql("I","%sySt")="",%xxsql("I","%sySystem")="",%xxsql("I","EnsConstants")="",%xxsql("I","EnsErrors")="",%xxsql("I","EnsUtil")=""
	s %xxsql("I","Ensemble")="",%xxsql("NS")="PROJECT1"
	d BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","User",0,"",),,"User.InsertProcess.CLS")
	q
%SQLGetOldAll()
	// Get all old data values
	new SQLCODE,%ROWCOUNT
	 ;---&sql(SELECT %ConfigName,%ConfigQueueName,%Context,%Counter,%IsCompleted,%IsTerminated,%IsTimerInterrupted,%MasterPendingResponsesOld,%MessagesReceivedOld,%MessagesSentOld,%PrimaryRequestHeader,%PrimaryResponseHeader,%QuitTask,%RepliedStatus,%SessionId,%StatusCode,%SuperSession,%Thread,%TimeCompleted,%TimeCreated,%responseClassName,%responseId,Adapter,AlertGroups,AlertOnError,AlertRetryGracePeriod,BusinessPartner,FailureTimeout,InactivityTimeout,QueueCountAlert,QueueWaitAlert,ReplyCodeActions,Retry,RetryInterval,RuleLogging,SuspendMessage,x__classname INTO :%e() FROM %IGNOREINDEX * SQLUser.InsertProcess WHERE ID=:%rowid)
 	 ;--- ** SQL PUBLIC Variables: %e, %rowid, SQLCODE
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xECPAaYDGHvaZk8AAhzjw5tGZJhB","%New") } catch { if $ze["<CLASS DOES NOT EXIST>"&&($ze["%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xECPAaYDGHvaZk8AAhzjw5tGZJhB")||($ze["<ZSQLU>") { d %0dsqlH } else { throw } }
	set sqlcode=SQLCODE QUIT:sqlcode'=0
	QUIT
 q
%0dsqlH	n %xxsql
	s %xxsql("S",1)="SELECT %ConfigName , %ConfigQueueName , %Context , %Counter , %IsCompleted , %IsTerminated , %IsTimerInterrupted , %MasterPendingResponsesOld , %MessagesReceivedOld , %MessagesSentOld , %PrimaryRequestHeader , %PrimaryResponseHeader , %QuitTask , %RepliedStatus , %SessionId , %StatusCode , %SuperSession , %Thread , %TimeCompleted , %TimeCreated , %responseClassName , %responseId , Adapter , AlertGroups , AlertOnError , AlertRetryGracePeriod , BusinessPartner , FailureTimeout , InactivityTimeout , QueueCountAlert , QueueWaitAlert , ReplyCodeActions , Retry , RetryInterval , RuleLogging , SuspendMessage , x__classname INTO :%e() FROM %IGNOREINDEX * SQLUser . InsertProcess WHERE ID = :%rowid"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","DEBUG")=$c(1),%xxsql("M","FORKNETDMN")=$c(1)
	s %xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1)
	s %xxsql("M","USELOST")=$c(1),%xxsql("M","ZVERSION")=$c(1),%xxsql("I","%occErrors")="",%xxsql("I","%occSqlfunc")="",%xxsql("I","%sySite")=""
	s %xxsql("I","%sySt")="",%xxsql("I","%sySystem")="",%xxsql("I","EnsConstants")="",%xxsql("I","EnsErrors")="",%xxsql("I","EnsUtil")=""
	s %xxsql("I","Ensemble")="",%xxsql("NS")="PROJECT1"
	d BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","User",0,"",),,"User.InsertProcess.CLS")
	q
%SQLGetOldIndex(%rowid,%d,pF=0,sqlcode)
	try {
		new tClass,tF,tOid,tSC
		set tOid=..%ComposeOid(%rowid)
		if ''..%OnDetermineClass(tOid,.tClass),tClass'=$classname() {
			set tF=1 do $classmethod(tClass,"%SQLGetOldIndex",%rowid,,.tF,.sqlcode)
			set:$d(tF("%SessionId")) %d(16)=tF("%SessionId") set:$d(tF("x__classname")) %d(38)=tF("x__classname") set:$d(tF("%TimeCreated")) %d(21)=tF("%TimeCreated") 
			RETURN
		}
	}
	catch { }
	// Get index old data values
	new SQLCODE,%ROWCOUNT
	 ;---&sql(SELECT %SessionId,x__classname,%TimeCreated INTO :%d() FROM %IGNOREINDEX * SQLUser.InsertProcess WHERE ID=:%rowid)
 	 ;--- ** SQL PUBLIC Variables: %d, %rowid, SQLCODE
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xEiTQox2xNUxGia14HVGBnSJktQr","%New") } catch { if $ze["<CLASS DOES NOT EXIST>"&&($ze["%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xEiTQox2xNUxGia14HVGBnSJktQr")||($ze["<ZSQLU>") { d %0dsqlJ } else { throw } }
	if pF { set:$d(%d(16)) pF("%SessionId")=%d(16) set:$d(%d(38)) pF("x__classname")=%d(38) set:$d(%d(21)) pF("%TimeCreated")=%d(21)  }
	set sqlcode=SQLCODE QUIT:sqlcode'=0
	QUIT
 q
%0dsqlJ	n %xxsql
	s %xxsql("S",1)="SELECT %SessionId , x__classname , %TimeCreated INTO :%d() FROM %IGNOREINDEX * SQLUser . InsertProcess WHERE ID = :%rowid"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","DEBUG")=$c(1),%xxsql("M","FORKNETDMN")=$c(1)
	s %xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1)
	s %xxsql("M","USELOST")=$c(1),%xxsql("M","ZVERSION")=$c(1),%xxsql("I","%occErrors")="",%xxsql("I","%occSqlfunc")="",%xxsql("I","%sySite")=""
	s %xxsql("I","%sySt")="",%xxsql("I","%sySystem")="",%xxsql("I","EnsConstants")="",%xxsql("I","EnsErrors")="",%xxsql("I","EnsUtil")=""
	s %xxsql("I","Ensemble")="",%xxsql("NS")="PROJECT1"
	d BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","User",0,"",),,"User.InsertProcess.CLS")
	q
%SQLInsert(%d,%check,%inssel,%vco,%tstart=1,%mv=0)
	// SQL INSERT method for table SQLUser.InsertProcess
	new bva,%ele,%itm,%key,%f,%l,%n,%nc,%oper,%pos,%s,sqlcode,sn,subs,icol set %oper="INSERT",sqlcode=0,%l=$c(0,0,0)
	if $a(%check,7) { new %diu merge %diu=%d }
	if $d(%d(1)),'$zu(115,11) { if %d(1)'="" { set SQLCODE=-111,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler6",,"ID","SQLUser"_"."_"InsertProcess") RETURN ""  } kill %d(1) } 
	if '$a(%check),'..%SQLValidateFields(.sqlcode) { set SQLCODE=sqlcode RETURN "" }
	do:'$a(%check,8) ..%SQLNormalizeFields()
	if %tstart { TSTART:($zu(115,1)=1)||('$TLEVEL&&($zu(115,1)=2))  } set $zt="ERRORInsert"
	set:'$d(%d(6)) %d(6)=0 set:'$d(%d(7)) %d(7)=0 set:'$d(%d(8)) %d(8)=0 set:'$d(%d(14)) %d(14)=0 set:'$d(%d(15)) %d(15)=1 set:'$d(%d(17)) %d(17)=1 set:'$d(%d(26)) %d(26)=0 set:'$d(%d(27)) %d(27)=0 set:'$d(%d(29)) %d(29)=15 set:'$d(%d(30)) %d(30)=0 set:'$d(%d(31)) %d(31)=0 set:'$d(%d(32)) %d(32)=0 set:'$d(%d(34)) %d(34)=0 set:'$d(%d(35)) %d(35)=5 set:'$d(%d(36)) %d(36)="r" set:'$d(%d(37)) %d(37)=0 set:'$d(%d(38)) %d(38)="~Ens.BusinessProcessBPL~InsertProcess~"
	if '$a(%check) {
		do {
			if $g(%vco)'="" { d @%vco quit:sqlcode<0  }
		} while 0
		if sqlcode<0 { set SQLCODE=sqlcode do ..%SQLEExit() RETURN "" }		// A constraint failed
	}
	if '$d(%d(1)) { set %d(1)=$i(^Ens.BusinessProcessD) } elseif %d(1)>$g(^Ens.BusinessProcessD) { if $i(^Ens.BusinessProcessD,$zabs(%d(1)-$g(^Ens.BusinessProcessD))) {}} elseif $d(^Ens.BusinessProcessD(%d(1))) { set SQLCODE=-119,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler33",,"ID",%d(1),"SQLUser"_"."_"InsertProcess"_"."_"ID") do ..%SQLEExit() RETURN "" }
	for icol=38,16,21,4 { set:'($d(%d(icol))#2) %d(icol)="" }
	if '$a(%check,2) {
		new %ls lock +^Ens.BusinessProcessD(%d(1))#"E":$zu(115,4) set %ls=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,4:2,2:2,1:3,:""))
		set:%ls=2 $e(%check,2)=$c(1) set:%ls=2&&($tlevel) %0CacheLock("User.InsertProcess","E")=1 set:$case(%ls,1:1,2:1,:0) $e(%l)=$c(1)
		if '%ls||(%ls=3) { set SQLCODE=-110,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer",$s('%ls:"SQLFiler40",1:"SQLFiler55"),,%oper,"SQLUser"_"."_"InsertProcess",$g(%d(1))) do ..%SQLEExit() RETURN ""  }
	}
	set ^Ens.BusinessProcessD(%d(1))=$lb(%d(38),%d(3),%d(6),%d(9),,%d(12),%d(13),%d(15),%d(23),%d(24),%d(16),%d(20),%d(21),%d(2),%d(14),%d(26),%d(22),%d(8),%d(7),%d(17),%d(10),%d(11),%d(33),%d(35),%d(27),%d(29),%d(34),%d(37),%d(31),%d(32),%d(30),%d(28),%d(25),%d(18))
	set:$s((%d(4)'=""):1,($g(%d(5))'=""):1,($g(%d(19))'=""):1,1:($g(%d(36))'="")) ^Ens.BusinessProcessD(%d(1),"BusinessProcessBPL")=$lb(%d(4),%d(19),%d(5),%d(36))
	if '$a(%check,3) {
		set sn(1)=%d(16) set:sn(1)="" sn(1)=-1E14 set sn(2)=%d(1) set ^Ens.BusinessProcessI("SessionId",sn(1),sn(2))=%d(38)
		set sn(1)=%d(21) set:sn(1)="" sn(1)=-1E14 set sn(2)=%d(1) set ^Ens.BusinessProcessI("TimeCreated",sn(1),sn(2))=%d(38)
	}
	lock:$a(%l) -^Ens.BusinessProcessD(%d(1))#"E"
	TCOMMIT:%tstart&&($zu(115,1)=1)
	set SQLCODE=0
	QUIT %d(1) 			// %SQLInsert
ERRORInsert	set $zt="",SQLCODE=-415,%msg=$s($g(%msg)'="":%msg_" -- ",1:"")_$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler51",,%oper,"SQLUser"_"."_"InsertProcess",$ze)
	if $ze["<FRAMESTACK>" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler52",,$ze,%oper,"SQLUser"_"."_"InsertProcess") do ##Class(%SYS.System).WriteToConsoleLog(%msg) if ($zu(67,10,$j)=1)||($zu(67,10,$j)=3) { write !,%msg h 3 } HALT  }
	do ..%SQLEExit()
	RETURN ""
%SQLInvalid(pIcol,pVal) public {
	set:$l($g(pVal))>40 pVal=$e(pVal,1,40)_"..." do:'$d(%n) ..%SQLnBuild() set %msg=$s($g(%msg)'="":%msg_$c(13,10),1:"")_$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler37",,"SQLUser"_"."_"InsertProcess"_"."_$lg(%n,pIcol),$s($g(pVal)'="":$s(pVal="":"<NULL>",pVal=$c(0):"<EMPTY STRING>",1:"'"_pVal_"'"),1:"")),sqlcode=$s(%oper="INSERT":-104,1:-105)
	QUIT sqlcode }
%SQLMissing(fname)
	set sqlcode=-108,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler47",,fname,"SQLUser"_"."_"InsertProcess") quit
%SQLNormalizeFields()
	set:$g(%d(20))'="" %d(20)=$$NormalizeField20(%d(20))
	set:$g(%d(21))'="" %d(21)=$$NormalizeField21(%d(21))
	new %f for %f=6,7,8,26,34,37 { set:$g(%d(%f))'="" %d(%f)=$s(%d(%f)="":"",1:%d(%f)\1) }
	for %f=27,29,30,31,32,35 { set:$g(%d(%f))'="" %d(%f)=$select($zu(115,13)&&(%d(%f)=$c(0)):"",1:$normalize($decimal(%d(%f)),2)) }
	for %f=4,5,12,13,14,15,16,19 { set:$g(%d(%f))'="" %d(%f)=$select(%d(%f)=$c(0)&&$zu(115,13):"",1:%d(%f)\1) }
	QUIT
NormalizeField20(%val) {	if $p(%val,":",3)'["." quit %val
	for i=1:1:3 quit:$e(%val,*)'="0"  set %val=$e(%val,1,*-1)
	if $e(%val,*)="." set %val=$e(%val,1,*-1)
	quit %val
}
NormalizeField21(%val) {	if $p(%val,":",3)'["." quit %val
	for i=1:1:3 quit:$e(%val,*)'="0"  set %val=$e(%val,1,*-1)
	if $e(%val,*)="." set %val=$e(%val,1,*-1)
	quit %val
}
	Return
%SQLPurgeIndices(pIndices="",pLockExtent=0,pIgnoreIndexList="")
	QUIT ..%PurgeIndices(pIndices,pLockExtent,pIgnoreIndexList)
%SQLQuickLoad(%rowid,%nolock=0,pkey=0,qq=0)
	// Get fields from row where SQLRowID=%rowid
	new d,i,il,subs set:%nolock=2 %nolock=1
	if %nolock=0 { if '..%SQLAcquireLock(%rowid) { set %qrc=114,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler45",,"SQLUser"_"."_"InsertProcess",%rowid),%ROWCOUNT=0 QUIT  } set:$zu(115,2) il=$zu(115,2,0) }
	 ;---&sql(SELECT %INTERNAL(ID),%ConfigName,%ConfigQueueName,%INTERNAL(%Context),%Counter,%IsCompleted,%IsTerminated,%IsTimerInterrupted,%INTERNAL(%MasterPendingResponsesOld),%INTERNAL(%MessagesReceivedOld),%INTERNAL(%MessagesSentOld),%INTERNAL(%PrimaryRequestHeader),%INTERNAL(%PrimaryResponseHeader),%QuitTask,%RepliedStatus,%SessionId,%StatusCode,%SuperSession,%INTERNAL(%Thread),%TimeCompleted,%TimeCreated,%responseClassName,%responseId,Adapter,AlertGroups,AlertOnError,AlertRetryGracePeriod,BusinessPartner,FailureTimeout,InactivityTimeout,QueueCountAlert,QueueWaitAlert,ReplyCodeActions,Retry,RetryInterval,RuleLogging,SuspendMessage,x__classname INTO :d(1),:d(2),:d(3),:d(4),:d(5),:d(6),:d(7),:d(8),:d(9),:d(10),:d(11),:d(12),:d(13),:d(14),:d(15),:d(16),:d(17),:d(18),:d(19),:d(20),:d(21),:d(22),:d(23),:d(24),:d(25),:d(26),:d(27),:d(28),:d(29),:d(30),:d(31),:d(32),:d(33),:d(34),:d(35),:d(36),:d(37),:d(38) FROM SQLUser.InsertProcess WHERE %ID = :%rowid)
 	 ;--- ** SQL PUBLIC Variables: %rowid, SQLCODE, d
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xEVFNS3xvgX2Kbeyparwcu58MNY1","%New") } catch { if $ze["<CLASS DOES NOT EXIST>"&&($ze["%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xEVFNS3xvgX2Kbeyparwcu58MNY1")||($ze["<ZSQLU>") { d %0dsqlL } else { throw } }
	if SQLCODE { if %nolock=0 { do ..%SQLReleaseLock(%rowid,0,1) do:$g(il) $zu(115,2,il) } set %ROWCOUNT=0 set:SQLCODE<0 SQLCODE=-SQLCODE set %qrc=SQLCODE QUIT  }
	if qq,d(38)'="" { new sn set sn=$p(d(38),$e(d(38)),$l(d(38),$e(d(38)))-1) if "InsertProcess"'=sn { if %nolock=0 { do ..%SQLReleaseLock(%rowid,0,1) do:$g(il) $zu(115,2,il) } kill d set:sn'["." sn="User."_sn  do $classmethod(sn,"%SQLQuickLoad",%rowid,%nolock,0,1) QUIT  }}
	if %nolock=0 { if $zu(115,1)=1 { TSTART  } elseIf '$TLEVEL,$zu(115,1)=2 { TSTART  }}
	set:qq d=$zobjexport("User.InsertProcess",18),d=$zobjexport(38,18) set i=-1 for  { set i=$o(d(i)) quit:i=""  set d=$zobjexport(d(i),18) } set %qrc=0,%ROWCOUNT=1 if %nolock=0 { d ..%SQLReleaseLock(%rowid,0,0) do:$g(il) $zu(115,2,il) } quit
	Return
 q
%0dsqlL	n %xxsql
	s %xxsql("S",1)="SELECT %INTERNAL ( ID ) , %ConfigName , %ConfigQueueName , %INTERNAL ( %Context ) , %Counter , %IsCompleted , %IsTerminated , %IsTimerInterrupted , %INTERNAL ( %MasterPendingResponsesOld ) , %INTERNAL ( %MessagesReceivedOld ) , %INTERNAL ( %MessagesSentOld ) , %INTERNAL ( %PrimaryRequestHeader ) , %INTERNAL ( %PrimaryResponseHeader ) , %QuitTask , %RepliedStatus , %SessionId , %StatusCode , %SuperSession , %INTERNAL ( %Thread ) , %TimeCompleted , %TimeCreated , %responseClassName , %responseId , Adapter , AlertGroups , AlertOnError , AlertRetryGracePeriod , BusinessPartner , FailureTimeout , InactivityTimeout , QueueCountAlert , QueueWaitAlert , ReplyCodeActions , Retry , RetryInterval , RuleLogging , SuspendMessage , x__classname INTO :d(1) , :d(2) , :d(3) , :d(4) , :d(5) , :d(6) , :d(7) , :d(8) , :d(9) , :d(10) , :d(11) , :d(12) , :d(13) , :d(14) , :d(15) , :d(16) , :d(17) , :d(18) , :d(19) , :d(20) , :d(21) , :d(22) , :d(23) , :d(24) , :d(25) , :d(26) , :d(27) , :d(28) , :d(29) , :d(30) , :d(31) , :d(32) ,"
	s %xxsql("S",1)=%xxsql("S",1)_" :d(33) , :d(34) , :d(35) , :d(36) , :d(37) , :d(38) FROM SQLUser . InsertProcess WHERE %ID = :%rowid"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","DEBUG")=$c(1),%xxsql("M","FORKNETDMN")=$c(1)
	s %xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1)
	s %xxsql("M","USELOST")=$c(1),%xxsql("M","ZVERSION")=$c(1),%xxsql("I","%occErrors")="",%xxsql("I","%occSqlfunc")="",%xxsql("I","%sySite")=""
	s %xxsql("I","%sySt")="",%xxsql("I","%sySystem")="",%xxsql("I","EnsConstants")="",%xxsql("I","EnsErrors")="",%xxsql("I","EnsUtil")=""
	s %xxsql("I","Ensemble")="",%xxsql("NS")="PROJECT1"
	d BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("ODBC","","","User",0,"",),,"User.InsertProcess.CLS")
	q
%SQLReleaseLock(%rowid,s=0,i=0,e="")
	new %d
	set:e="" e=1 set %d(1)=%rowid set s=$e("E",e)_$e("S",s)_$e("D",i)
	lock -^Ens.BusinessProcessD(%d(1))#s
	QUIT
%SQLReleaseTableLock(s=0,i=0)
	set s=$e("S",s)_$e("D",i) lock -^Ens.BusinessProcessD#s QUIT 1
	Return
%SQLUnlock()
	lock:$a(%l) -^Ens.BusinessProcessD(%d(1))#"E"
	QUIT
%SQLUnlockError(cname)
	set sqlcode=-110 if %oper="DELETE" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler48",,"SQLUser"_"."_"InsertProcess",cname) } else { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler49",,"SQLUser"_"."_"InsertProcess",cname) } quit
	Return
%SQLUpdate(%rowid,%check,%d,%vco,%tstart=1,%mv=0,%polymorphic=0,%soid)
	// SQL UPDATE method for table SQLUser.InsertProcess
	if %polymorphic { do ..%SQLCopyNameIntoIcol() set %d(1)=%rowid,%e(1)=%rowid,$e(%e,1)=$c(0) new icol for icol=2:1:38 { set $e(%e,icol)=$c($d(%d(icol))) }  goto %SQLUpdatePD }
	new %e,bva,%ele,%itm,%key,%f,%l,%n,%nc,%oper,%pos,%s,icol,omcall,s,sn,sqlcode,subs,t set %oper="UPDATE",sqlcode=0,%ROWID=%rowid,$e(%e,1)=$c(0),%l=$c(0,0,0)
	if '$d(%0CacheSQLRA) { new %0CacheSQLRA set omcall=1 }
	if '$a(%check,7) {
		if '$a(%check),'..%SQLValidateFields(.sqlcode) { set SQLCODE=sqlcode QUIT  }
		do:'$a(%check,8) ..%SQLNormalizeFields()
	}
	if $d(%d(1)),%d(1)'=%rowid { set SQLCODE=-107,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler16",,"ID","SQLUser"_"."_"InsertProcess") QUIT  }
	for icol=2:1:38 { set $e(%e,icol)=$c($d(%d(icol))) }
	set %d(1)=%rowid,%e(1)=%rowid
	if '$a(%check,2) {
		new %ls lock +^Ens.BusinessProcessD(%d(1))#"E":$zu(115,4) set %ls=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,4:2,2:2,1:3,:""))
		set:%ls=2 $e(%check,2)=$c(1) set:%ls=2&&($tlevel) %0CacheLock("User.InsertProcess","E")=1 set:$case(%ls,1:1,2:1,:0) $e(%l)=$c(1)
		if '%ls||(%ls=3) { set SQLCODE=-110,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer",$s('%ls:"SQLFiler40",1:"SQLFiler55"),,%oper,"SQLUser"_"."_"InsertProcess",$g(%d(1))) RETURN  }
	}
	if %tstart { TSTART:($zu(115,1)=1)||('$TLEVEL&&($zu(115,1)=2))  }
	set $zt="ERRORUpdate"
%SQLUpdatePD		// Entry point for Polymorphic Dispatch from a super-table
	if $g(%vco)="" { do ..%SQLGetOld(%rowid,.%d,.%e,.sqlcode) i sqlcode { s SQLCODE=-109,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler59",,"SQLUser"_"."_"InsertProcess",%rowid) do ..%SQLEExit() QUIT  } for icol=38,16,21,4 { set:'$d(%d(icol)) %d(icol)=%e(icol) set:%d(icol)=%e(icol) $e(%e,icol)=$c(0) }} else { do ..%SQLGetOldAll() if sqlcode { set SQLCODE=-109,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler59",,"SQLUser"_"."_"InsertProcess",%rowid) do ..%SQLEExit() QUIT  } for icol=2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38 { set:'$d(%d(icol)) %d(icol)=%e(icol) set:%d(icol)=%e(icol) $e(%e,icol)=$c(0) }}
	if %e(38)'="" set sn=$p(%e(38),$e(%e(38)),$l(%e(38),$e(%e(38)))-1) if "InsertProcess"'=sn new %f do ..%SQLCopyIcolIntoName() do $classmethod(sn,"%SQLUpdate",%rowid,%check,.%d,$g(%vco),%tstart,%mv,1) QUIT
	if '$a(%check) {
		do {
			if $g(%vco)'="" { d @%vco quit:sqlcode<0  }
		} while 0
		if sqlcode { set SQLCODE=sqlcode do ..%SQLEExit() QUIT  }
	}
	if ($zboolean(%e,$c(0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1),1)[$c(1)) {
		set ^Ens.BusinessProcessD(%d(1))=$listupdate($g(^Ens.BusinessProcessD(%d(1))),1,$a(%e,38):%d(38),$a(%e,3):%d(3),$a(%e,6):%d(6),$a(%e,9):%d(9),,$a(%e,12):%d(12),$a(%e,13):%d(13),$a(%e,15):%d(15),$a(%e,23):%d(23),$a(%e,24):%d(24),$a(%e,16):%d(16),$a(%e,20):%d(20),$a(%e,21):%d(21),$a(%e,2):%d(2),$a(%e,14):%d(14),$a(%e,26):%d(26),$a(%e,22):%d(22),$a(%e,8):%d(8),$a(%e,7):%d(7),$a(%e,17):%d(17),$a(%e,10):%d(10),$a(%e,11):%d(11),$a(%e,33):%d(33),$a(%e,35):%d(35),$a(%e,27):%d(27),$a(%e,29):%d(29),$a(%e,34):%d(34),$a(%e,37):%d(37),$a(%e,31):%d(31),$a(%e,32):%d(32),$a(%e,30):%d(30),$a(%e,28):%d(28),$a(%e,25):%d(25),$a(%e,18):%d(18))
	}
	if $s($a(%e,4):1,$a(%e,5):1,$a(%e,19):1,1:$a(%e,36)) {
		set ^Ens.BusinessProcessD(%d(1),"BusinessProcessBPL")=$listupdate($g(^Ens.BusinessProcessD(%d(1),"BusinessProcessBPL")),1,$a(%e,4):%d(4),$a(%e,19):%d(19),$a(%e,5):%d(5),$a(%e,36):%d(36))
	}
	if '$a(%check,3) { 
		if $a(%e,16)||$a(%e,38) {	// SessionId index map
			if $a(%e,16) { set sn(1)=%e(16) set:sn(1)="" sn(1)=-1E14 set sn(2)=%d(1) k ^Ens.BusinessProcessI("SessionId",sn(1),sn(2)) }
			set sn(1)=%d(16) set:sn(1)="" sn(1)=-1E14 set sn(2)=%d(1) set ^Ens.BusinessProcessI("SessionId",sn(1),sn(2))=%d(38)
		}
		if $a(%e,21)||$a(%e,38) {	// TimeCreated index map
			if $a(%e,21) { set sn(1)=%e(21) set:sn(1)="" sn(1)=-1E14 set sn(2)=%d(1) k ^Ens.BusinessProcessI("TimeCreated",sn(1),sn(2)) }
			set sn(1)=%d(21) set:sn(1)="" sn(1)=-1E14 set sn(2)=%d(1) set ^Ens.BusinessProcessI("TimeCreated",sn(1),sn(2))=%d(38)
		}
	}
	do ..%SQLUnlock() TCOMMIT:%tstart&&($zu(115,1)=1)
	set SQLCODE=0 kill:$g(omcall) %0CacheSQLRA
	QUIT
ERRORUpdate	set $zt="",SQLCODE=-415,%msg=$s($g(%msg)'="":%msg_" -- ",1:"")_$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler51",,%oper,"SQLUser"_"."_"InsertProcess",$ze) if $ze["<FRAMESTACK>" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler52",,$ze,%oper,"SQLUser"_"."_"InsertProcess") do ##Class(%SYS.System).WriteToConsoleLog(%msg) if ($zu(67,10,$j)=1)||($zu(67,10,$j)=3) { write !,%msg h 3 } HALT  } do ..%SQLEExit() QUIT  
	Return
%SQLValidateFields(sqlcode)
	if $g(%d(26))'="",'($$ValidateField26(%d(26))) { set sqlcode=..%SQLInvalid(26+1,%d(26)) } 
	if $g(%d(34))'="",'($$ValidateField34(%d(34))) { set sqlcode=..%SQLInvalid(34+1,%d(34)) } 
	if $g(%d(37))'="",'($$ValidateField37(%d(37))) { set sqlcode=..%SQLInvalid(37+1,%d(37)) } 
	if $g(%d(6))'="",'($$ValidateField6(%d(6))) { set sqlcode=..%SQLInvalid(6+1,%d(6)) } 
	if $g(%d(7))'="",'($$ValidateField7(%d(7))) { set sqlcode=..%SQLInvalid(7+1,%d(7)) } 
	if $g(%d(8))'="",'($$ValidateField8(%d(8))) { set sqlcode=..%SQLInvalid(8+1,%d(8)) } 
	if $g(%d(29))'="",'($select($zu(115,13)&&(%d(29)=$c(0)):1,$isvalidnum(%d(29),2,-1,):1,'$isvalidnum(%d(29)):$$Error^%apiOBJ(7207,%d(29)),1:$$Error^%apiOBJ(7204,%d(29),-1))) { set sqlcode=..%SQLInvalid(29+1,%d(29)) } 
	new %f for %f=27,30,31,32,35 { if $g(%d(%f))'="",'($select($zu(115,13)&&(%d(%f)=$c(0)):1,$isvalidnum(%d(%f),2,0,):1,'$isvalidnum(%d(%f)):$$Error^%apiOBJ(7207,%d(%f)),1:$$Error^%apiOBJ(7204,%d(%f),0))) set sqlcode=..%SQLInvalid(%f+1,$g(%d(%f))) quit  } 
	for %f=5,14,15,16 { if $g(%d(%f))'="",'($select(%d(%f)=$c(0)&&$zu(115,13):1,$isvalidnum(%d(%f),0):1,1:$$Error^%apiOBJ(7207,%d(%f)))) set sqlcode=..%SQLInvalid(%f+1,$g(%d(%f))) quit  } 
	if $g(%d(33))'="",'(($l(%d(33))'>1000)) { set sqlcode=..%SQLInvalid(33+1,%d(33)) } 
	for %f=2,3,22,28 { if $g(%d(%f))'="",'(($l(%d(%f))'>128)) set sqlcode=..%SQLInvalid(%f+1,$g(%d(%f))) quit  } 
	if $g(%d(25))'="",'(($l(%d(25))'>2500)) { set sqlcode=..%SQLInvalid(25+1,%d(25)) } 
	if $g(%d(18))'="",'(($l(%d(18))'>300)) { set sqlcode=..%SQLInvalid(18+1,%d(18)) } 
	if $g(%d(36))'="",'(($l(%d(36))'>50)) { set sqlcode=..%SQLInvalid(36+1,%d(36)) } 
	QUIT 'sqlcode
ValidateField6(%val="") {	Quit $isvalidnum(%val,0,0,2)&&(+%val'=2)
}
ValidateField7(%val="") {	Quit $isvalidnum(%val,0,0,2)&&(+%val'=2)
}
ValidateField8(%val="") {	Quit $isvalidnum(%val,0,0,2)&&(+%val'=2)
}
ValidateField26(%val="") {	Quit $isvalidnum(%val,0,0,2)&&(+%val'=2)
}
ValidateField34(%val="") {	Quit $isvalidnum(%val,0,0,2)&&(+%val'=2)
}
ValidateField37(%val="") {	Quit $isvalidnum(%val,0,0,2)&&(+%val'=2)
}
	Return
%SQLnBuild() public {
	set %n=$lb(,"ID","%ConfigName","%ConfigQueueName","%Context","%Counter","%IsCompleted","%IsTerminated","%IsTimerInterrupted","%MasterPendingResponsesOld","%MessagesReceivedOld","%MessagesSentOld","%PrimaryRequestHeader","%PrimaryResponseHeader","%QuitTask","%RepliedStatus","%SessionId","%StatusCode","%SuperSession","%Thread","%TimeCompleted","%TimeCreated","%responseClassName","%responseId","Adapter","AlertGroups","AlertOnError","AlertRetryGracePeriod","BusinessPartner","FailureTimeout","InactivityTimeout","QueueCountAlert","QueueWaitAlert","ReplyCodeActions","Retry","RetryInterval","RuleLogging","SuspendMessage","x__classname")
	QUIT }
%SaveData(id) public {
	try {
		set id=$listget(i%"%%OID") if id'="" { set insert=0,idassigned=1 } else { set insert=1,idassigned=0 }
		set lock=0,lockok=0,tSharedLock=0
		if 'idassigned { set id=$i(^Ens.BusinessProcessD) do ..%IdSet(id) set:$g(%objtxSTATUS)=2 %objtxOIDASSIGNED(+$this)="" }
		set zzc10v1=$s(i%%TimeCreated'="":i%%TimeCreated,1:-1E14)
		set zzc10v2=$s(i%%SessionId'="":i%%SessionId,1:-1E14)
		try {
			set tInnerException = ""
			;
			if 'insert {
				if (i%%Concurrency<4)&&(i%%Concurrency) { lock +(^Ens.BusinessProcessD(id)#"E"):$zu(115,4) set lockok=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,2:2,4:2,:0)) set:lockok=2&&($tlevel) %0CacheLock($classname(),"E")=1 if lockok { set lock=1 } else { Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5803,$classname())) } }
				if ('$Data(^Ens.BusinessProcessD(id))) {
					set insert=1
					if lock { lock -(^Ens.BusinessProcessD(id)#"E") set (lock,lockok) = 0 }
				}
			}
			if insert {
				set zzc20v1="",ptr="" for  set ptr=$order(i%%MessagesSentOld(ptr),1,val) Quit:ptr=""  set zzc20v1=zzc20v1_$listbuild(val)
				set zzc20v2="",ptr="" for  set ptr=$order(i%%MessagesReceivedOld(ptr),1,val) Quit:ptr=""  set zzc20v2=zzc20v2_$listbuild(val)
				set zzc20v3="",ptr="" for  set ptr=$order(i%%MasterPendingResponsesOld(ptr),1,val) Quit:ptr=""  set zzc20v3=zzc20v3_$listbuild(val)
				if i%%Concurrency&&$tlevel {  lock +(^Ens.BusinessProcessD(id)#"E"):$zu(115,4) set lockok=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,2:2,4:2,:0)) set:(lockok=2&&(i%%Concurrency'=4)) %0CacheLock($classname(),"E")=1 set:lockok lock=1 if 'lockok { Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5803,$classname())) } }
				if i%%Concurrency=3 { lock +(^Ens.BusinessProcessD(id)#"ES") set tSharedLock=1 }
				set:i%%Concurrency=4 lock=0
				set zzc39v1="" For counter=0:1 { Set zzc39v1 = $Order(i%%MasterPendingResponses(zzc39v1),1,val) Quit:zzc39v1=""  Set ^Ens.BusinessProcessD(id,"pending",zzc39v1)=val }
				Set:counter>0 ^Ens.BusinessProcessD(id,"pending")=counter
				set zzc39v2="" For counter=0:1 { Set zzc39v2 = $Order(i%%MessagesReceived(zzc39v2),1,val) Quit:zzc39v2=""  Set ^Ens.BusinessProcessD(id,"received",zzc39v2)=val }
				Set:counter>0 ^Ens.BusinessProcessD(id,"received")=counter
				set zzc39v3="" For counter=0:1 { Set zzc39v3 = $Order(i%%MessagesSent(zzc39v3),1,val) Quit:zzc39v3=""  Set ^Ens.BusinessProcessD(id,"sent",zzc39v3)=val }
				Set:counter>0 ^Ens.BusinessProcessD(id,"sent")=counter
				set zzc39v4="" For  { Set zzc39v4 = $Order(i%%SynchronizedResponses(zzc39v4),1,val) Quit:zzc39v4=""  Set ^Ens.BusinessProcessD(id,"%SynchronizedResponses",zzc39v4)=val }
				set ^Ens.BusinessProcessD(id,"BusinessProcessBPL")=$lb(i%%Context,i%%Thread,i%%Counter,i%RuleLogging)
				set ^Ens.BusinessProcessD(id)=$lb("~Ens.BusinessProcessBPL~InsertProcess~",i%%ConfigQueueName,i%%IsCompleted,zzc20v3,,i%%PrimaryRequestHeader,i%%PrimaryResponseHeader,i%%RepliedStatus,i%%responseId,i%Adapter,i%%SessionId,i%%TimeCompleted,i%%TimeCreated,i%%ConfigName,i%%QuitTask,i%AlertOnError,i%%responseClassName,i%%IsTimerInterrupted,i%%IsTerminated,i%%StatusCode,zzc20v2,zzc20v1,i%ReplyCodeActions,i%RetryInterval,i%AlertRetryGracePeriod,i%FailureTimeout,i%Retry,i%SuspendMessage,i%QueueCountAlert,i%QueueWaitAlert,i%InactivityTimeout,i%BusinessPartner,i%AlertGroups,i%%SuperSession)
				set ^Ens.BusinessProcessI("SessionId",zzc10v2,id)="~Ens.BusinessProcessBPL~InsertProcess~"
				set ^Ens.BusinessProcessI("TimeCreated",zzc10v1,id)="~Ens.BusinessProcessBPL~InsertProcess~"
			}
			else {
				set zzc31v1=$G(^Ens.BusinessProcessD(id))
				set zzc31v2=..%TimeCreatedStorageToLogical($listget(zzc31v1,13))
				set zzc31v3=$listget(zzc31v1,11)
				if (i%%SessionId'=zzc31v3) {
					kill ^Ens.BusinessProcessI("SessionId",$s(zzc31v3'="":zzc31v3,1:-1E14),id)
					set ^Ens.BusinessProcessI("SessionId",zzc10v2,id)="~Ens.BusinessProcessBPL~InsertProcess~"
				}
				if (i%%TimeCreated'=zzc31v2) {
					kill ^Ens.BusinessProcessI("TimeCreated",$s(zzc31v2'="":zzc31v2,1:-1E14),id)
					set ^Ens.BusinessProcessI("TimeCreated",zzc10v1,id)="~Ens.BusinessProcessBPL~InsertProcess~"
				}
				set zzc40v5="",ptr="" for  set ptr=$order(i%%MessagesSentOld(ptr),1,val) Quit:ptr=""  set zzc40v5=zzc40v5_$listbuild(val)
				set zzc40v6="",ptr="" for  set ptr=$order(i%%MessagesReceivedOld(ptr),1,val) Quit:ptr=""  set zzc40v6=zzc40v6_$listbuild(val)
				set zzc40v7="",ptr="" for  set ptr=$order(i%%MasterPendingResponsesOld(ptr),1,val) Quit:ptr=""  set zzc40v7=zzc40v7_$listbuild(val)
				kill nodes merge nodes=i%%MasterPendingResponses
				set counter=0,zzc40v1="" for { set zzc40v1 = $Order(^Ens.BusinessProcessD(id,"pending",zzc40v1),1,data) Quit:zzc40v1=""  if $data(nodes(zzc40v1),val) { if data=val kill nodes(zzc40v1)  set counter=counter+1 } else { kill ^Ens.BusinessProcessD(id,"pending",zzc40v1) } }
				set zzc40v1="" for { set zzc40v1 = $Order(nodes(zzc40v1),1,val) Quit:zzc40v1=""  set ^Ens.BusinessProcessD(id,"pending",zzc40v1)=val,counter=counter+1 }
				if counter=0 { zkill ^Ens.BusinessProcessD(id,"pending") } else { Set ^Ens.BusinessProcessD(id,"pending")=counter }
				kill nodes merge nodes=i%%MessagesReceived
				set counter=0,zzc40v2="" for { set zzc40v2 = $Order(^Ens.BusinessProcessD(id,"received",zzc40v2),1,data) Quit:zzc40v2=""  if $data(nodes(zzc40v2),val) { if data=val kill nodes(zzc40v2)  set counter=counter+1 } else { kill ^Ens.BusinessProcessD(id,"received",zzc40v2) } }
				set zzc40v2="" for { set zzc40v2 = $Order(nodes(zzc40v2),1,val) Quit:zzc40v2=""  set ^Ens.BusinessProcessD(id,"received",zzc40v2)=val,counter=counter+1 }
				if counter=0 { zkill ^Ens.BusinessProcessD(id,"received") } else { Set ^Ens.BusinessProcessD(id,"received")=counter }
				kill nodes merge nodes=i%%MessagesSent
				set counter=0,zzc40v3="" for { set zzc40v3 = $Order(^Ens.BusinessProcessD(id,"sent",zzc40v3),1,data) Quit:zzc40v3=""  if $data(nodes(zzc40v3),val) { if data=val kill nodes(zzc40v3)  set counter=counter+1 } else { kill ^Ens.BusinessProcessD(id,"sent",zzc40v3) } }
				set zzc40v3="" for { set zzc40v3 = $Order(nodes(zzc40v3),1,val) Quit:zzc40v3=""  set ^Ens.BusinessProcessD(id,"sent",zzc40v3)=val,counter=counter+1 }
				if counter=0 { zkill ^Ens.BusinessProcessD(id,"sent") } else { Set ^Ens.BusinessProcessD(id,"sent")=counter }
				kill nodes merge nodes=i%%SynchronizedResponses
				set zzc40v4="" for { set zzc40v4 = $Order(^Ens.BusinessProcessD(id,"%SynchronizedResponses",zzc40v4),1,data) Quit:zzc40v4=""  if $data(nodes(zzc40v4),val) { if data=val kill nodes(zzc40v4) } else { kill ^Ens.BusinessProcessD(id,"%SynchronizedResponses",zzc40v4) } }
				merge ^Ens.BusinessProcessD(id,"%SynchronizedResponses")=nodes
				set ^Ens.BusinessProcessD(id,"BusinessProcessBPL")=$lb(i%%Context,i%%Thread,i%%Counter,i%RuleLogging)
				set ^Ens.BusinessProcessD(id)=$lb("~Ens.BusinessProcessBPL~InsertProcess~",i%%ConfigQueueName,i%%IsCompleted,zzc40v7,,i%%PrimaryRequestHeader,i%%PrimaryResponseHeader,i%%RepliedStatus,i%%responseId,i%Adapter,i%%SessionId,i%%TimeCompleted,i%%TimeCreated,i%%ConfigName,i%%QuitTask,i%AlertOnError,i%%responseClassName,i%%IsTimerInterrupted,i%%IsTerminated,i%%StatusCode,zzc40v6,zzc40v5,i%ReplyCodeActions,i%RetryInterval,i%AlertRetryGracePeriod,i%FailureTimeout,i%Retry,i%SuspendMessage,i%QueueCountAlert,i%QueueWaitAlert,i%InactivityTimeout,i%BusinessPartner,i%AlertGroups,i%%SuperSession)
			}
			set tStatus = 1
		}
		catch tInnerException {
			if ('idassigned) { Set $zobjoid("",$listget(i%"%%OID"))="",i%"%%OID"="" kill:$g(%objtxSTATUS)=2 %objtxOIDASSIGNED(+$this) }
			if (tSharedLock) {  lock -(^Ens.BusinessProcessD(id)#"ES") } elseif (lockok=1)&&(insert)&&(i%%Concurrency=4) {  lock -(^Ens.BusinessProcessD(id)) }
		}
		if lock lock -(^Ens.BusinessProcessD(id)#"E")
		if $Isobject(tInnerException) { throw tInnerException }
	}
	catch tException {
		set tStatus = tException.AsStatus()
	}
	quit tStatus }
%ValidateIndices(idxList="",autoCorrect=0,lockOption=1,multiProcess=1,mapList,verbose=1,errors)
	w !,"There are no indices to validate for class 'User.InsertProcess'"
	QUIT 1
zGetRequestClassList() public {
 Quit $lb("User.Request") }
zGetResponseClassList(pRequest="") public {
 If pRequest=""||(pRequest="User.Request") Quit $lb("User.selectResponse")
 Quit "" }
zGetSettingRow(pSettingName="",pSourceClass="") public {
	Set tRow = ""
	// Check if the class has been compiled with the new generator
	If (pSourceClass = "User.InsertProcess") {
		Set tRow = $case(pSettingName,
			"AlertGroups": $LB("AlertGroups","The Alert Groups to which this item belongs.","%Library.String","",2500,"","","","",0,"Alert Groups","Alerting","Alerting Control","selector?multiSelect=1&context={Ens.ContextSearch/ProductionAlertGroups?productionName=@productionId}"),
			"AlertOnError": $LB("AlertOnError","Send an Alert message whenever an error occurs here","%Library.Boolean",0,"","","","","",0,"Alert On Error","Alerting","Alerting Control",""),
			"AlertRetryGracePeriod": $LB("AlertRetryGracePeriod","When AlertOnError is True and the Process is retrying, refrain from alerting if the Process succeeds within this number of seconds after an error","%Library.Numeric",0,"",0,"","","",0,"Alert Retry Grace Period","Alerting","Alerting Control",""),
			"BusinessPartner": $LB("BusinessPartner","Name of a Business Partner Profile associated with this item","%Library.String","",128,"","","","",0,"Business Partner","Info","Informational Settings","partnerSelector"),
			"FailureTimeout": $LB("FailureTimeout","How long to keep retrying before giving up and returning an error code. <br/>"_$char(13,10)_"-1 means never give up.","%Library.Numeric",15,"",-1,"","","",0,"Failure Timeout","Additional","Additional Settings",""),
			"InactivityTimeout": $LB("InactivityTimeout","Send an Alert message if this number of seconds elapses with no messages being processed by this item. <br/>"_$char(13,10)_"Note that this alert will be sent even if AlertOnError is False. <br/>"_$char(13,10)_"Zero means no alerts of this type will be sent.","%Library.Numeric",0,"",0,"","","",0,"Inactivity Timeout","Alerting","Alerting Control",""),
			"QueueCountAlert": $LB("QueueCountAlert","Number of messages on this item's queue needed to trigger an Alert message to be sent. Note that no further"_$char(13,10)_"alerts will be sent unless the number of messages on the queue drops below 80% of this number and then rises again to this number. <br/>"_$char(13,10)_"Note that this alert will be sent even if AlertOnError is False. <br/>"_$char(13,10)_"Zero means no alerts of this type will be sent.","%Library.Numeric",0,"",0,"","","",0,"Queue Count Alert","Alerting","Alerting Control",""),
			"QueueWaitAlert": $LB("QueueWaitAlert","The number of seconds a message at the front of the queue may have waited since being queued before an alert is triggered.<br/>"_$char(13,10)_"Only one alert will be raised per host item per sequential trigger of the queue wait threshold. <br/>"_$char(13,10)_"Note that this alert will be sent even if AlertOnError is False. <br/>"_$char(13,10)_"Zero means no alerts of this type will be sent.","%Library.Numeric",0,"",0,"","","",0,"Queue Wait Alert","Alerting","Alerting Control",""),
			"ReplyCodeActions": $LB("ReplyCodeActions","<p>A comma-separated list of codes specifying what action this Process will take on various reply status conditions."_$char(13,10)_"The format of the list is: <br /> &lt;code&gt;=&lt;actions&gt;,(&lt;code&gt;,&lt;code&gt;)=&lt;actions&gt;,...<br/>"_$char(13,10)_"Types of reply status condition are identified by a specification code:"_$char(13,10)_"<ul style=""list-style-type: none;"">"_$char(13,10)_"<li><b>E</b> - Error status returned from message handler</li>"_$char(13,10)_"<li><b>E#&lt;statuscode&gt;</b> - Error status returned from message handler has status code equal to &lt;statuscode&gt;</li>"_$char(13,10)_"<li><b>E*&lt;text&gt;</b> - Error status returned from message handler contains text string &lt;text&gt;</li>"_$char(13,10)_"<li><b>X</b> - there is no reply message at all</li>"_$char(13,10)_"</ul></p>"_$char(13,10)_"<p>The following values for &lt;actions&gt; may be used alone or in combinations:"_$char(13,10)_"<ul style=""list-style-type: none;"">"_$char(13,10)_"<li><b>C</b> - Treat the message as Completed OK.</li>"_$char(13,10)_"<li><b>W</b> - Log a warning. If no other non-warning &lt;actions&gt; are triggered, the message will be treated as Completed OK.</li>"_$char(13,10)_"<li><b>R</b> - Retry the message according to the configured RetryInterval and FailureTimeout; finally Fail unless a "_$char(13,10)_"different action is also specified.</li>"_$char(13,10)_"<li><b>S</b> - Suspend the message, log an error, and move on to try the next message.</li>"_$char(13,10)_"<li><b>D</b> - Disable the Process, log an error and restore the original incoming message to the front of the Process's queue.</li>"_$char(13,10)_"<li><b>F</b> - Fail with an error and move on to try the next message from the Process's queue.</li></ul>"_$char(13,10)_"<b>NOTE:</b> the D action can only immediately stop all instances of a Business Process if the BP is configured with PoolSize=1."_$char(13,10)_"If PoolSize=0 this action will disable all Business Processes that share the Actor pool.</p>"_$char(13,10)_"<p>An example of a valid ReplyCodeActions specification is 'E#6301=R,E#&lt;Ens&gt;ErrGeneral=RD,E=F'. This specification will result in a "_$char(13,10)_"retry when error code 6301 is encountered. When error code &lt;Ens&gt;ErrGeneral is encountered, the Operation first retries to send "_$char(13,10)_"the message until FailureTimeout and then, if the error continues, it disables the Operation instead of failing. Any other errors will "_$char(13,10)_"cause the Operation to fail processing of the current message and return the error status to the caller, without retrying first.</p>"_$char(13,10)_"<p><b>The default behavior is 'E=F'.</b> Thus any error status will result in the error being logged and returned to the caller, "_$char(13,10)_"no retries will be attempted, and the Process will move on to try the next message from its queue.</p>"_$char(13,10)_"<p>All codes where &lt;actions&gt; consists of only 'W' (for 'log a Warning') will be evaluated, and a warning will be"_$char(13,10)_"generated for each matching &lt;code&gt;. Other &lt;code&gt; values will be evaluated in left-to-right order, executing the"_$char(13,10)_"first matching &lt;code&gt; that has a non-warning &lt;actions&gt; value. As noted in the details for the 'W' flag, an error"_$char(13,10)_"that only triggers 'W' &lt;actions&gt; will be treated as Completed OK.</p>","%Library.String","",1000,"","","","",0,"Reply Code Actions","Additional","Additional Settings",""),
			"RetryInterval": $LB("RetryInterval","How frequently to retry access to the output system","%Library.Numeric",5,"",0,"","","",0,"Retry Interval","Additional","Additional Settings",""),
			"RuleLogging": $LB("RuleLogging","This set of flags controls the logging performed by the rule engine whenever a Rule activity is executed."_$char(13,10)_"The following flags are available:"_$char(13,10)_"<ul><li>'e' - log errors only. All errors will be logged irrespective of other flags, so "_$char(13,10)_"setting the value to 'e' or leaving the value empty will only log errors.</li>"_$char(13,10)_"<li>'r' - log return values. This is the default value for the setting, and is "_$char(13,10)_"also automatic whenever the 'd' or 'c' flags are specified.</li>"_$char(13,10)_"<li>'d' - log user-defined debug actions in the rule. This will also include 'r'.</li>"_$char(13,10)_"<li>'c' - log details of the conditions that are evaluated in the rule. This will also include 'r'.</li>"_$char(13,10)_"<li>'a' - log all available information. This is equivalent to 'rcd'.</li></ul>","%Library.String","r",50,"","","","",0,"RuleLogging","Dev","Development and Debugging",""),
			: "")
	}
	Else { // Fall back on getting the data dynamically 
		Set tRow = ..GetDynamicSettingRow(pSettingName,pSourceClass)
	}
	Quit tRow }
zMessageHeaderHandler(pRequestHeader,pResponseHeader,pResponseIsError) public {
 Set tSC=1, pResponseIsError=""
 Set $EC=""  try {
	If '..#SKIPMESSAGEHISTORY Do ..%MessagesReceived.Insert(pRequestHeader.%Id())
	If pRequestHeader.Type = 1 {
		If '(..%PrimaryRequestHeader="") { Do ##class(Ens.Util.Log).LogAssert($classname(),"MessageHeaderHandler","Assert Condition Failed: "_"..%PrimaryRequestHeader="""""_$char(13,10)) BREAK }
		Set ..%PrimaryRequestHeader=pRequestHeader, %Ensemble("CurrentHeaderId")=pRequestHeader.%Id()
		Set ..%Concurrency=4
		Set tSC=..%Save()  Quit:('tSC)
		Set (..%SessionId,%Ensemble("SessionId"))=pRequestHeader.SessionId
		Set ..%SuperSession=pRequestHeader.SuperSession
		Set ..%TimeCreated = $zdatetime($ztimestamp,3,,3)
		Do pRequestHeader.SetStatus(3)
		Set tResponse=""
		If $D(^Ens.Runtime("CrashedMessage",pRequestHeader.%Id())) {
			Kill ^Ens.Runtime("CrashedMessage",pRequestHeader.%Id())
			Set tSC=##class(Ens.Util.Error).EnsError($classname(),"MessageHeaderHandler","<Ens>ErrPreviouslyCrashedMessage",pRequestHeader.%Id())
		} Else {
			Set $EC=""  try {
				Set tSC=..OnRequest(..%request,.tResponse)
			} catch ex {
				Set tSC=$Select($ZE="":ex.AsStatus(),1:##class(Ens.Util.Error).EnsSystemError($classname(),"MessageHeaderHandler"))
			}
			If $TLevel>0 Set tTL=$TLevel  While $TLevel>0 { TCommit } Do ##class(Ens.Util.Log).LogWarning($classname(),"MessageHeaderHandler",tTL_" open user transaction"_$S(tTL>1:"s",1:"")_" found after OnRequest(); committing before proceeding")
		}
		Set:(''tSC) tSC=..%responseSet(tResponse)
		Quit:('tSC)
	} ElseIf pRequestHeader.Type = 3 {
		Set %Ensemble("CurrentHeaderId")=pRequestHeader.%Id()
		Do pRequestHeader.SetStatus(3)
		Do ..%MasterPendingResponses.Clear()
		Set ..%IsTerminated=1
		Set tSC=$classmethod(pRequestHeader.MessageBodyClassName,"%OpenId",pRequestHeader.MessageBodyId).StringValue
	} Else {
		Set ..%CurrentResponseHeader=pRequestHeader, %Ensemble("CurrentHeaderId")=pRequestHeader.%Id()
		Set %Ensemble("SessionId")=..%SessionId
		If ..%IsCompleted {
			Do:$S($D(%Ensemble("DoTrace")):%Ensemble("DoTrace"),1:##class(Ens.Util.Trace).DoTrace()) ##class(Ens.Util.Trace).WriteTrace("system",$classname(),"MessageHeaderHandler","Discarding response '"_pRequestHeader.%Id()_"' to already-completed process "_..%Id())
			Do pRequestHeader.SetStatus(4)
			Quit
		}
		Set tCallRequestHeader = ##class(Ens.MessageHeader).%OpenId(pRequestHeader.CorrespondingMessageId)
		If tCallRequestHeader.MessageBodyClassName'="" {
			Set tCallRequest = $classmethod(tCallRequestHeader.MessageBodyClassName,"%OpenId",tCallRequestHeader.MessageBodyId,,.tSC)
			If '$IsObject(tCallRequest) Set tSC=$$Error^%apiOBJ("<Ens>ErrGeneral","Could not open callrequest MessageBody "_tCallRequestHeader.MessageBodyId_" for MessageHeader #"_tCallRequestHeader.%Id()_" with body class "_tCallRequestHeader.MessageBodyClassName_":"_$$getAllErrorTexts^EnsUtil(tSC))  Quit
		} Else {
			Set tCallRequest=""
		}
		Set tIndex=0 For i=1:1:..%MasterPendingResponses.Count() {
			Set tEntry=..%MasterPendingResponses.GetAt(i)
			If $li(tEntry,1)=pRequestHeader.CorrespondingMessageId Set tIndex=i,tCompletionKey=$li(tEntry,2),tIsTimer=$li(tEntry,3),pControlledCompletionKeys=$li(tEntry,4) Quit
		}
		If tIndex=0 {
			Do:$S($D(%Ensemble("DoTrace")):%Ensemble("DoTrace"),1:##class(Ens.Util.Trace).DoTrace()) ##class(Ens.Util.Trace).WriteTrace("system",$classname(),"MessageHeaderHandler","Discarding response '"_pRequestHeader.%Id()_"' belonging to message '"_pRequestHeader.CorrespondingMessageId_"' while in process "_..%Id())
			Do pRequestHeader.SetStatus(4)
			Quit
		}
		Do pRequestHeader.SetStatus(3)
		Set pResponseIsError = pRequestHeader.IsError
		If pResponseIsError {
			Set tResponse=..%response
			Set tErroredResponseStatus=pRequestHeader.ErrorStatus
			Set $EC=""  try {
				Set tSC=..OnError(..%request,.tResponse,tCallRequest,tErroredResponseStatus,tCompletionKey)
				If ..WillHandleErroredResponse() {
					Set tSC=1
				} Else {
					Set:(''tSC) pResponseIsError=0
				}
			} catch ex {
				Set tSC=$Select($ZE="":ex.AsStatus(),1:##class(Ens.Util.Error).EnsSystemError($classname(),"MessageHeaderHandler")), pResponseIsError="" ; new tSC for which OnError() has not been called
			}
			If $TLevel>0 Set tTL=$TLevel  While $TLevel>0 { TCommit } Do ##class(Ens.Util.Log).LogWarning($classname(),"MessageHeaderHandler",tTL_" open user transaction"_$S(tTL>1:"s",1:"")_" found after OnError(); committing before proceeding")
			Quit:('tSC)
			Set tSC=..%responseSet(tResponse)  If ('tSC) Set pResponseIsError=""  Quit
		}
		Do ..%MasterPendingResponses.RemoveAt(tIndex)
		If tIsTimer {
			Set tResponse=..%response
			Do:$S($D(%Ensemble("DoTrace")):%Ensemble("DoTrace"),1:##class(Ens.Util.Trace).DoTrace()) ##class(Ens.Util.Trace).WriteTrace("bproc",$classname(),"MessageHeaderHandler","calling OnTimeout")
			Set $EC=""  try {
				Set tSC=..OnTimeout(..%request,.tResponse,tCallRequest,tCompletionKey)
			} catch ex {
				Set tSC=$Select($ZE="":ex.AsStatus(),1:##class(Ens.Util.Error).EnsSystemError($classname(),"MessageHeaderHandler"))
			}
			If $TLevel>0 Set tTL=$TLevel  While $TLevel>0 { TCommit } Do ##class(Ens.Util.Log).LogWarning($classname(),"MessageHeaderHandler",tTL_" open user transaction"_$S(tTL>1:"s",1:"")_" found after OnTimeout(); committing before proceeding")
			Do:$S($D(%Ensemble("DoTrace")):%Ensemble("DoTrace"),1:##class(Ens.Util.Trace).DoTrace()) ##class(Ens.Util.Trace).WriteTrace("bproc",$classname(),"MessageHeaderHandler","returned from OnTimeout")
			Set:(''tSC) tSC=..%responseSet(tResponse)
			Quit:('tSC)
			For i=..%MasterPendingResponses.Count():-1:1 {
				Set tEntry=..%MasterPendingResponses.GetAt(i)
				If (pControlledCompletionKeys="*")||$listfind(pControlledCompletionKeys,$li(tEntry,2)) {
					Do ..%MasterPendingResponses.RemoveAt(i)
					Set tRequestHeader=##class(Ens.MessageHeader).%OpenId($li(tEntry,1))
					If tRequestHeader.MessageBodyClassName'="" {
						Set tMessageBody=$classmethod(tRequestHeader.MessageBodyClassName,"%OpenId",tRequestHeader.MessageBodyId,,.tSC1)
						If '$IsObject(tMessageBody) {
							Do ##class(Ens.Util.Log).LogWarning($classname(),"MessageHeaderHandler","Could not open pending MessageBody "_tRequestHeader.MessageBodyId_" for MessageHeader #"_tRequestHeader.%Id()_" with body class "_tRequestHeader.MessageBodyClassName_":"_$$getAllErrorTexts^EnsUtil(tSC1))
						} Else {
							Do:$S($D(%Ensemble("DoTrace")):%Ensemble("DoTrace"),1:##class(Ens.Util.Trace).DoTrace()) ##class(Ens.Util.Trace).WriteTrace("bproc",$classname(),"MessageHeaderHandler","calling body %OnTimeout")
							Set $EC=""  try {
								Set tSC1 = tMessageBody.%OnTimeout()
								If ('tSC1) Do ##class(Ens.Util.Log).LogStatus($classname(),"MessageHeaderHandler",tSC1)
								Do:$S($D(%Ensemble("DoTrace")):%Ensemble("DoTrace"),1:##class(Ens.Util.Trace).DoTrace()) ##class(Ens.Util.Trace).WriteTrace("bproc",$classname(),"MessageHeaderHandler","returned from body %OnTimeout")
							} catch ex {
								If ex.Name '= "<METHOD DOES NOT EXIST>" Do ##class(Ens.Util.Error).EnsSystemError($classname(),"MessageHeaderHandler")
							}
							If $TLevel>0 Set tTL=$TLevel  While $TLevel>0 { TCommit } Do ##class(Ens.Util.Log).LogWarning($classname(),"MessageHeaderHandler",tTL_" open user transaction"_$S(tTL>1:"s",1:"")_" found after body %OnTimeout(); committing before proceeding")
						}
					}
				}
			}
		}
		If ..%MasterPendingResponses.Count()>0 {
			Set tHasNonTimer=0
			For i=1:1:..%MasterPendingResponses.Count() {
				Set tEntry=..%MasterPendingResponses.GetAt(i)
				If $li(tEntry,3)=0 Set tHasNonTimer=1 Quit
			}
			If tHasNonTimer=0 Do ..%MasterPendingResponses.Clear()
		}
		If 'pResponseIsError {
			Set tResponse=..%response, pResponseIsError="" ; new tSC coming up for which OnError() has not been called
			If pRequestHeader.MessageBodyClassName'="" {
				Set tMessageBody = $classmethod(pRequestHeader.MessageBodyClassName,"%OpenId",pRequestHeader.MessageBodyId,,.tSC)
				If '$IsObject(tMessageBody) Set tSC=$$Error^%apiOBJ("<Ens>ErrGeneral","Could not open request MessageBody "_pRequestHeader.MessageBodyId_" for MessageHeader #"_pRequestHeader.%Id()_" with body class "_pRequestHeader.MessageBodyClassName_":"_$$getAllErrorTexts^EnsUtil(tSC))  Quit
				Set:tIsTimer ..%IsTimerInterrupted=tMessageBody.IsInterrupted
			} Else {
				Set tMessageBody = ""
			}
			If $D(^Ens.Runtime("CrashedMessage",pRequestHeader.%Id())) {
				Kill ^Ens.Runtime("CrashedMessage",pRequestHeader.%Id())
				Set tSC=##class(Ens.Util.Error).EnsError($classname(),"MessageHeaderHandler","<Ens>ErrPreviouslyCrashedMessage",pRequestHeader.%Id())
			} Else {
				Do:$S($D(%Ensemble("DoTrace")):%Ensemble("DoTrace"),1:##class(Ens.Util.Trace).DoTrace()) ##class(Ens.Util.Trace).WriteTrace("bproc",$classname(),"MessageHeaderHandler","calling OnResponse")
				Set $EC=""  try {
					Set tSC=..OnResponse(..%request,.tResponse,tCallRequest,tMessageBody,tCompletionKey)
				} catch ex {
					Set tSC=$Select($ZE="":ex.AsStatus(),1:##class(Ens.Util.Error).EnsSystemError($classname(),"MessageHeaderHandler"))
				}
			If $TLevel>0 Set tTL=$TLevel  While $TLevel>0 { TCommit } Do ##class(Ens.Util.Log).LogWarning($classname(),"MessageHeaderHandler",tTL_" open user transaction"_$S(tTL>1:"s",1:"")_" found after OnResponse(); committing before proceeding")
				Do:$S($D(%Ensemble("DoTrace")):%Ensemble("DoTrace"),1:##class(Ens.Util.Trace).DoTrace()) ##class(Ens.Util.Trace).WriteTrace("bproc",$classname(),"MessageHeaderHandler","returned from OnResponse")
			}
			Set:(''tSC) tSC=..%responseSet(tResponse)
		} Else {
			Set tResponse=..%response
			Do:$S($D(%Ensemble("DoTrace")):%Ensemble("DoTrace"),1:##class(Ens.Util.Trace).DoTrace()) ##class(Ens.Util.Trace).WriteTrace("bproc",$classname(),"MessageHeaderHandler","calling OnErroredResponse")
			Set $EC=""  try {
				Set tSC=..OnErroredResponse(tErroredResponseStatus,..%request,.tResponse,tCompletionKey)
				Set pResponseIsError=('tSC)
			} catch ex {
				Set tSC=$Select($ZE="":ex.AsStatus(),1:##class(Ens.Util.Error).EnsSystemError($classname(),"MessageHeaderHandler")), pResponseIsError="" ; new tSC for which OnError() has not been called
			}
			If $TLevel>0 Set tTL=$TLevel  While $TLevel>0 { TCommit } Do ##class(Ens.Util.Log).LogWarning($classname(),"MessageHeaderHandler",tTL_" open user transaction"_$S(tTL>1:"s",1:"")_" found after OnErroredResponse(); committing before proceeding")
			Do:$S($D(%Ensemble("DoTrace")):%Ensemble("DoTrace"),1:##class(Ens.Util.Trace).DoTrace()) ##class(Ens.Util.Trace).WriteTrace("bproc",$classname(),"MessageHeaderHandler","returned from OnErroredResponse")
			Quit:('tSC)
			Set tSC=..%responseSet(tResponse)
		}
		Quit:('tSC)
	} ; Else
	Do pRequestHeader.SetStatus(9)
	If ..%MasterPendingResponses.Count()=0 {
		Set tResponse=..%response
		Do:$S($D(%Ensemble("DoTrace")):%Ensemble("DoTrace"),1:##class(Ens.Util.Trace).DoTrace()) ##class(Ens.Util.Trace).WriteTrace("bproc",$classname(),"MessageHeaderHandler","calling OnComplete")
		Set $EC=""  try {
			Set tSC=..OnComplete(..%request,.tResponse)
		} catch ex {
			Set tSC=$Select($ZE="":ex.AsStatus(),1:##class(Ens.Util.Error).EnsSystemError($classname(),"MessageHeaderHandler"))
		}
		If $TLevel>0 Set tTL=$TLevel  While $TLevel>0 { TCommit } Do ##class(Ens.Util.Log).LogWarning($classname(),"MessageHeaderHandler",tTL_" open user transaction"_$S(tTL>1:"s",1:"")_" found after OnComplete(); committing before proceeding")
		Do:$S($D(%Ensemble("DoTrace")):%Ensemble("DoTrace"),1:##class(Ens.Util.Trace).DoTrace()) ##class(Ens.Util.Trace).WriteTrace("bproc",$classname(),"MessageHeaderHandler","returned from OnComplete")
		Set:(''tSC) tSC=..%responseSet(tResponse)
		Quit:('tSC)
		If ..%MasterPendingResponses.Count()=0 {
			Set ..%IsCompleted = 1, ..%TimeCompleted = $zdatetime($ztimestamp,3,,3)
			If ..%RepliedStatus=1 Set tSC=..Reply(..%response)
		}
	}
 } catch {
	Set tSC=##class(Ens.Util.Error).EnsSystemError($classname(),"MessageHeaderHandler")
 }
 If ('tSC)&&(pRequestHeader.Type=2)&&(pRequestHeader.Status=3) {
	Do pRequestHeader.SetStatus(8)
 }
 Quit tSC }
zOnErroredResponse(pErroredResponseStatus,request,response,pCompletionKey) public {
 Set $ZT="Trap",tSC=1 do {
 Set tSC=..%Thread.AnyHandlerActive(.tActive)
 If ('tSC)
 If tActive = 0 Set tSC=pErroredResponseStatus Quit
 Set ..%Context.%LastError=pErroredResponseStatus
 Set tSC=..%Thread.SwitchState(.tStatus,request,.response,pCompletionKey,1)
 Kill %BPLVARS
 If ('tSC) Quit
 If '(tStatus=2||(tStatus=3)) { Do ##class(Ens.Util.Log).LogAssert($classname(),"OnErroredResponse","Assert Condition Failed: "_"tStatus=2||(tStatus=3)"_$char(13,10)) BREAK }
 Set tSC=..UpdateSynchronizedResponses()
 If ('tSC) Quit
 } while (0)
Exit Quit tSC
Trap Set $ZT="",tSC=##class(Ens.Util.Error).EnsSystemError($classname(),"OnErroredResponse") Goto Exit }
zOnGetReplyAction(pRequest,pResponse,pSC) public {
 	Set (tFullAction,tText)="", nActions=$S(""=$ZStrip(..ReplyCodeActions,"<>W"):0, 1:$L(..ReplyCodeActions,","))
	For i=1:1:nActions { Set tType=$P(..ReplyCodeActions,",",i)  Continue:""=tType
		Set tAction="", tCode=$ZStrip($P(tType,"="),"<>W"), tCodeU=$ZCVT(tCode,"U")
		Set tKnown=$Case($E(tCodeU)
						,"E":$Case($E(tCode,2)
								,"#":1
								,"*":1
								,"":1
								,:0)
						,"X":$Case($E(tCode,2),"":1, :0)
						,:0
						)
		If 'tKnown {
			Do ##class(Ens.Util.Log).LogWarning($classname(),"OnGetReplyAction","Unrecognized reply code:'"_tType_"'")
			Continue
		}
		Set tMatch=$Case($E(tCodeU)
						,"E":('pSC)
						,"X":'($Data(pResponse)#2&&$IsObject(pResponse))
						,:0)
				 && $Case($E(tCode,2)
						,"#":$$StatusEquals^%apiOBJ(pSC,$E(tCode,3,*))
						,"*":$$getAllErrorTexts^EnsUtil(pSC)[$E(tCode,3,*)
						,:1)
		If tMatch {
			If $E(tCodeU)="X" {
				Set tMatchText="Empty Response object matched ReplyCodeAction "_i_" : ':"_tType_"'"
			} Else {
				Set tMatchText="Status '"_$$getAllErrorTexts^EnsUtil(pSC)_"' matched ReplyCodeAction "_i_" : '"_tType_"'"
			}
			Set tAction=$ZCVT($ZStrip($P(tType,"=",2),"<>W"),"U")
			Set:tAction'?1.(1"R",1"C",1"W",1"S",1"D",1"F") tAction=""
			If ""=tAction {
				Do ##class(Ens.Util.Log).LogWarning($classname(),"OnGetReplyAction","Unrecognized reply code action:'"_tType_"'")
				Continue
			}
			Set:""'=tMatchText tText=tText_$S(""'=tText:" and ",1:"")_tMatchText
			Set:tAction["W" tFullAction=""
			Set tFullAction=tAction_$S(tAction["W":"",1:tFullAction)
			Quit:tFullAction'?1."W"
		}
	}
	Set:""'=tText ..%ActionHint("CodeReason")=
		"Message body "_pRequest_" / "_pRequest.%Id()_" because "_
		$S('$IsObject(pResponse):"",1:"response "_pResponse_$S(""=pResponse.%Id():"",1:" / "_pResponse.%Id())_" ")_
		tText_" resulting in Action code "_tFullAction
	Quit tFullAction }
zOnRequest(request,response) public {
 Set $ZT="Trap",tSC=1 do {
 Set ..%Thread=$zobjclassmethod("User.InsertProcess.Thread1","%New",$this)
 If '($IsObject(..%Thread)) { Do ##class(Ens.Util.Log).LogAssert($classname(),"OnRequest","Assert Condition Failed: "_"$IsObject(..%Thread)"_$char(13,10)) BREAK }
 Set response=$zobjclassmethod("User.selectResponse","%New")
 If '($IsObject(response)) { Do ##class(Ens.Util.Log).LogAssert($classname(),"OnRequest","Assert Condition Failed: "_"$IsObject(response)"_$char(13,10)) BREAK }
 Set ..%Context=$zobjclassmethod("User.InsertProcess.Context","%New",$this)
 If '($IsObject(..%Context)) { Do ##class(Ens.Util.Log).LogAssert($classname(),"OnRequest","Assert Condition Failed: "_"$IsObject(..%Context)"_$char(13,10)) BREAK }
 Set tSC=..%Thread.SwitchState(.tStatus,request,.response,"",0)
 Kill %BPLVARS
 If ('tSC) Quit
 If '(tStatus=2||(tStatus=3)||(tStatus=4)) { Do ##class(Ens.Util.Log).LogAssert($classname(),"OnRequest","Assert Condition Failed: "_"tStatus=2||(tStatus=3)||(tStatus=4)"_$char(13,10)) BREAK }
 If tStatus'=3&&(..%Context.%Id()'="")&&(..%SessionId'="") Kill ^Ens.BPL.Milestone(..%SessionId,..%Context.%Id())
 } while (0)
Exit Quit tSC
Trap Set $ZT="",tSC=##class(Ens.Util.Error).EnsSystemError($classname(),"OnRequest") Goto Exit }
zOnResponse(request,response,callrequest,callresponse,pCompletionKey) public {
 Set $ZT="Trap",tSC=1 do {
   If pCompletionKey'="" {
     Set tResponseHandler=..%Context.%ResponseHandlers.GetAt(pCompletionKey)
     If tResponseHandler'="" {
       Set tSC=$zobjmethod(..%Context,tResponseHandler,$this,..%Context,request,.response,callrequest,callresponse,pCompletionKey)
       If ('tSC) Quit
    }
  }
  Set tSC=..%Thread.SwitchState(.tStatus,request,.response,pCompletionKey,0,callresponse)
  Kill %BPLVARS
  If ('tSC) Quit
  If '(tStatus=2||(tStatus=3)) { Do ##class(Ens.Util.Log).LogAssert($classname(),"OnResponse","Assert Condition Failed: "_"tStatus=2||(tStatus=3)"_$char(13,10)) BREAK }
  Set tSC=..UpdateSynchronizedResponses()
  If ('tSC) Quit
  If tStatus=2&&(..%Context.%Id()'="")&&(..%SessionId'="") Kill ^Ens.BPL.Milestone(..%SessionId,..%Context.%Id())
 } while (0)
Exit Quit tSC
Trap Set $ZT="",tSC=##class(Ens.Util.Error).EnsSystemError($classname(),"OnResponse") Goto Exit }
%MasterPendingResponsesGetSwizz(noswizzle=0) public {
	Set oref=##class(%Collection.ListOfDT).%New() If oref="" Quit ""
	Set modstate=$system.CLS.GetModifiedBits() Set r%%MasterPendingResponses=oref Do $system.CLS.SetModifiedBits(modstate)
	Set oref.ElementType="User.InsertProcess:%MasterPendingResponses",oref.ElementClassType="datatype",oref.Owner=+$this,oref.Storage=$this."%MasterPendingResponses%i"(),oref.OrefStorage=oref.Storage+1
	Do $system.CLS.SetModified(oref,0)
	Quit oref }
%MasterPendingResponsesOldGetSw(noswizzle=0) public {
	Set oref=##class(%Collection.ListOfDT).%New() If oref="" Quit ""
	Set modstate=$system.CLS.GetModifiedBits() Set r%%MasterPendingResponsesOld=oref Do $system.CLS.SetModifiedBits(modstate)
	Set oref.ElementType="User.InsertProcess:%MasterPendingResponsesOld",oref.ElementClassType="datatype",oref.Owner=+$this,oref.Storage=$this."%MasterPendingResponsesOld%i"(),oref.OrefStorage=oref.Storage+1
	Do $system.CLS.SetModified(oref,0)
	Quit oref }
%MessagesReceivedGetSwizzled(noswizzle=0) public {
	Set oref=##class(%Collection.ListOfDT).%New() If oref="" Quit ""
	Set modstate=$system.CLS.GetModifiedBits() Set r%%MessagesReceived=oref Do $system.CLS.SetModifiedBits(modstate)
	Set oref.ElementType="User.InsertProcess:%MessagesReceived",oref.ElementClassType="datatype",oref.Owner=+$this,oref.Storage=$this."%MessagesReceived%i"(),oref.OrefStorage=oref.Storage+1
	Do $system.CLS.SetModified(oref,0)
	Quit oref }
%MessagesReceivedOldGetSwizzled(noswizzle=0) public {
	Set oref=##class(%Collection.ListOfDT).%New() If oref="" Quit ""
	Set modstate=$system.CLS.GetModifiedBits() Set r%%MessagesReceivedOld=oref Do $system.CLS.SetModifiedBits(modstate)
	Set oref.ElementType="User.InsertProcess:%MessagesReceivedOld",oref.ElementClassType="datatype",oref.Owner=+$this,oref.Storage=$this."%MessagesReceivedOld%i"(),oref.OrefStorage=oref.Storage+1
	Do $system.CLS.SetModified(oref,0)
	Quit oref }
%MessagesSentGetSwizzled(noswizzle=0) public {
	Set oref=##class(%Collection.ListOfDT).%New() If oref="" Quit ""
	Set modstate=$system.CLS.GetModifiedBits() Set r%%MessagesSent=oref Do $system.CLS.SetModifiedBits(modstate)
	Set oref.ElementType="User.InsertProcess:%MessagesSent",oref.ElementClassType="datatype",oref.Owner=+$this,oref.Storage=$this."%MessagesSent%i"(),oref.OrefStorage=oref.Storage+1
	Do $system.CLS.SetModified(oref,0)
	Quit oref }
%MessagesSentOldGetSwizzled(noswizzle=0) public {
	Set oref=##class(%Collection.ListOfDT).%New() If oref="" Quit ""
	Set modstate=$system.CLS.GetModifiedBits() Set r%%MessagesSentOld=oref Do $system.CLS.SetModifiedBits(modstate)
	Set oref.ElementType="User.InsertProcess:%MessagesSentOld",oref.ElementClassType="datatype",oref.Owner=+$this,oref.Storage=$this."%MessagesSentOld%i"(),oref.OrefStorage=oref.Storage+1
	Do $system.CLS.SetModified(oref,0)
	Quit oref }
%SynchronizedResponsesGetSwizzl(noswizzle=0) public {
	Set oref=##class(%Collection.ArrayOfDT).%New() If oref="" Quit ""
	Set modstate=$system.CLS.GetModifiedBits() Set r%%SynchronizedResponses=oref Do $system.CLS.SetModifiedBits(modstate)
	Set oref.ElementType="User.InsertProcess:%SynchronizedResponses",oref.ElementClassType="datatype",oref.Owner=+$this,oref.Storage=$this."%SynchronizedResponses%i"(),oref.OrefStorage=oref.Storage+1
	Do $system.CLS.SetModified(oref,0)
	Quit oref }
zEnumerateSettingsGetInfo(colinfo,parminfo,idinfo,qHandle,extoption=0,extinfo) public {
	Set colinfo=$lb($lb("Name",10,"Name"),$lb("Description",10,"Description"),$lb("Type",10,"Type"),$lb("Default",10,"Default"),$lb("MAXLEN",10,"MAXLEN"),$lb("MINVAL",10,"MINVAL"),$lb("MAXVAL",10,"MAXVAL"),$lb("VALUELIST",10,"VALUELIST"),$lb("DISPLAYLIST",10,"DISPLAYLIST"),$lb("IsRequired",10,"IsRequired"),$lb("LocalizedName",10,"LocalizedName"),$lb("Category",10,"Category"),$lb("LocalizedCategory",10,"LocalizedCategory"),$lb("EditorContext",10,"EditorContext"))
	Set parminfo=""
	Set idinfo=$lb(0,"")
	If extoption {
		Set extinfo=$lb("",$lb($lb("",""),$lb("",""),$lb("",""),$lb("",""),$lb("",""),$lb("",""),$lb("",""),$lb("",""),$lb("",""),$lb("",""),$lb("",""),$lb("",""),$lb("",""),$lb("","")))
	}
	Quit 1 }
zEnumerateSettingsGetODBCInfo(colinfo,parminfo,qHandle) public {
	set version = $Select($Get(%protocol,41)>40:4,1:3)
	Set metadata=$lb(1,14,"Name",12,50,0,2,"Name","InsertProcess","SQLUser","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"Description",12,50,0,2,"Description","InsertProcess","SQLUser","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"Type",12,50,0,2,"Type","InsertProcess","SQLUser","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"Default",12,50,0,2,"Default","InsertProcess","SQLUser","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"MAXLEN",12,50,0,2,"MAXLEN","InsertProcess","SQLUser","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"MINVAL",12,50,0,2,"MINVAL","InsertProcess","SQLUser","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"MAXVAL",12,50,0,2,"MAXVAL","InsertProcess","SQLUser","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"VALUELIST",12,50,0,2,"VALUELIST","InsertProcess","SQLUser","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"DISPLAYLIST",12,50,0,2,"DISPLAYLIST","InsertProcess","SQLUser","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"IsRequired",12,50,0,2,"IsRequired","InsertProcess","SQLUser","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"LocalizedName",12,50,0,2,"LocalizedName","InsertProcess","SQLUser","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"Category",12,50,0,2,"Category","InsertProcess","SQLUser","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"LocalizedCategory",12,50,0,2,"LocalizedCategory","InsertProcess","SQLUser","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"EditorContext",12,50,0,2,"EditorContext","InsertProcess","SQLUser","",$c(0,0,0,0,0,0,0,0,0,0,0,0),0)
	Set colcount=$li(metadata,2),cmdlen=colcount*10,parmcount=$li(metadata,3+cmdlen),pmdlen=parmcount*6,parminfo=$li(metadata,cmdlen+3,cmdlen+pmdlen+3)
	If version=4 {
		Set colinfo=$li(metadata,2,2+cmdlen)
	} Else {
		Set colinfo=$li(metadata,2,2)
		For i=0:1:colcount-1 Set colinfo=colinfo_$list(metadata,3+(i*10),11+(i*10))
	}
	Quit 1 }
zExtentExecute(%qHandle) [ SQLCODE ] public { New %ROWCOUNT,%ROWID,%msg,SQLCODE 
	Set sc=1
	 ;---&sql(DECLARE QExtent CURSOR FOR
 	 ;---		 SELECT ID FROM SQLUser.InsertProcess)
 	 ;--- ** SQL PUBLIC Variables: SQLCODE
	 
	 ;---&sql(OPEN QExtent)
	try { s %qHandle="",%qHandle=$classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xE9c19Xe8zbWIPRNEOGzgMcY4kNg","%New") if '$isobject(%qHandle) s %qHandle=$$%0dsqlN() } catch { if $ze["<CLASS DOES NOT EXIST>"&&($ze["%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xE9c19Xe8zbWIPRNEOGzgMcY4kNg")||($ze["<ZSQLU>") { s %qHandle=$$%0dsqlN() } else { throw } }
	If SQLCODE { Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.%Message=$g(%msg) Set sc=$$Error^%apiOBJ(5821,"SQLCODE = "_SQLCODE) } Else { Set sc=1 }
	Quit sc }
zExtentFetch(%qHandle,Row,AtEnd=0) [ SQLCODE ] public { New %ROWCOUNT,%ROWID,%msg,SQLCODE 
	Set Row="",AtEnd=0
	 ;---&sql(FETCH QExtent INTO :c1)
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE
	if $isobject($g(%qHandle))'=1 { s SQLCODE=-102 } else { do %qHandle.FET() if SQLCODE=0 { s c1=%qHandle.sqlcol1 } }
	If 'SQLCODE { Set Row=$lb(c1) Set sc=1 }
	ElseIf SQLCODE=100 { Set AtEnd=1,sc=1 Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.%ROWCOUNT=$g(%ROWCOUNT) }
	Else { Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.Message=$g(%msg) Set AtEnd=1,sc=$$Error^%apiOBJ(5540,SQLCODE,$get(%msg)) }
	QUIT sc }
zExtentFetchRows(%qHandle,FetchCount=0,RowSet,ReturnCount,AtEnd) [ SQLCODE ] public { New %ROWCOUNT,%ROWID,%msg,SQLCODE 
	Set RowSet="",ReturnCount=0,AtEnd=0
	For {
		 ;---&sql(FETCH QExtent INTO :c1)
 		 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE
		if $isobject($g(%qHandle))'=1 { s SQLCODE=-102 } else { do %qHandle.FET() if SQLCODE=0 { s c1=%qHandle.sqlcol1 } }
		If 'SQLCODE { Set RowSet=RowSet_$lb(c1),ReturnCount=ReturnCount+1 Quit:(ReturnCount=FetchCount)||(($l(RowSet)+($l(RowSet)\ReturnCount))>24000) } Else { Set AtEnd=1 Quit }
	}
	If 'SQLCODE { Set sc=1 } ElseIf SQLCODE=100 { Set sc=1 Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.%ROWCOUNT=$g(%ROWCOUNT) } Else { Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.Message=$g(%msg) Set sc=$$Error^%apiOBJ(5540,SQLCODE,$get(%msg)) }
	Quit sc }
zExtentSendODBC(%qHandle,array,qacn,%qrc,piece,ColumnCount) [ SQLCODE ] public { New %ROWCOUNT,%ROWID,%msg,SQLCODE 
	set %qrc=0,piece=0
	for {
		set rc=..ExtentFetch(.%qHandle,.row,.atend)
		if ('rc) { set %qrc=-400 set:$isobject($get(%sqlcontext)) %sqlcontext.SQLCode=-400,%sqlcontext.Message=$g(%msg) do ProcessError^%ourProcedure(rc,$get(%sqlcontext),.%qrc,.%msg),Logerr^%SYS.SQLSRV(%qrc,"","SP",.%msg) RETURN  }
		if row="" { set %qrc=100 set:$isobject($get(%sqlcontext)) %sqlcontext.SQLCode=100 RETURN  }
		if $g(%protocol)>50 { RETURN:$zobjexport(row,60) }
		else {
			if %protocol>46 { for piece=1:1:ColumnCount { goto:$zobjexport($lg(row,piece),50) SPDone } }
			else { for piece=1:1:ColumnCount { goto:$zobjexport($lg(row,piece),7) SPDone } }
		}
	}
	QUIT
SPDone	set:%protocol>46 piece=piece+1
	kill array(qacn)
	for i=piece:1:ColumnCount { set array(qacn,i)=$lg(row,i) }
	QUIT }
 q
%0dsqlN()	n %xxsql
	s %xxsql("S",1)="DECLARE QExtent CURSOR FOR SELECT ID "
	s %xxsql("S",2)="INTO  :i%sqlcol1"
	s %xxsql("S",3)="FROM SQLUser . InsertProcess"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","DEBUG")=$c(1),%xxsql("M","FORKNETDMN")=$c(1)
	s %xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1)
	s %xxsql("M","USELOST")=$c(1),%xxsql("M","ZVERSION")=$c(1),%xxsql("I","%occErrors")="",%xxsql("I","%occSqlfunc")="",%xxsql("I","%sySite")=""
	s %xxsql("I","%sySt")="",%xxsql("I","%sySystem")="",%xxsql("I","EnsConstants")="",%xxsql("I","EnsErrors")="",%xxsql("I","EnsUtil")=""
	s %xxsql("I","Ensemble")="",%xxsql("NS")="PROJECT1"
	return $$BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Runtime","","","User",0,"",),",1,QExtent,","User.InsertProcess.CLS",1)
zExtentFunc() public {
	try {
		set tSchemaPath = ##class(%SQL.Statement).%ClassPath($classname())
			set tStatement = ##class(%SQL.Statement).%New(,tSchemaPath)
			do tStatement.prepare(" SELECT ID FROM SQLUser . InsertProcess")
		set tResult = tStatement.%Execute()
	}
	catch tException { if '$Isobject($Get(tResult)) { set tResult = ##class(%SQL.StatementResult).%New() } set tResult.%SQLCODE=tException.AsSQLCODE(),tResult.%Message=tException.AsSQLMessage() }
	Quit tResult }
zExtentGetODBCInfo(colinfo,parminfo,qHandle) public {
	set version = $Select($Get(%protocol,41)>40:4,1:3)
	Set metadata=$lb(1,1,"ID",4,10,0,2,"ID","InsertProcess","SQLUser","",$c(0,0,0,0,0,0,0,0,0,0,0,1),0)
	Set colcount=$li(metadata,2),cmdlen=colcount*10,parmcount=$li(metadata,3+cmdlen),pmdlen=parmcount*6,parminfo=$li(metadata,cmdlen+3,cmdlen+pmdlen+3)
	If version=4 {
		Set colinfo=$li(metadata,2,2+cmdlen)
	} Else {
		Set colinfo=$li(metadata,2,2)
		For i=0:1:colcount-1 Set colinfo=colinfo_$list(metadata,3+(i*10),11+(i*10))
	}
	Quit 1 }
zIDKEYSQLCheckUnique(pFromOrig=0,%pID,%pVals...)
	 ;---if pFromOrig &sql(SELECT ID FROM Ens.BusinessProcess WHERE  ID=:%pVals(1) AND (%ID <> :%pID OR :%pID IS NULL)) QUIT SQLCODE=100
 	 ;--- ** SQL PUBLIC Variables: %pID, %pVals, SQLCODE
	if pFromOrig try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xEZlq1EcE7IVkme3ehT8HRRFIC42","%New") } catch { if $ze["<CLASS DOES NOT EXIST>"&&($ze["%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xEZlq1EcE7IVkme3ehT8HRRFIC42")||($ze["<ZSQLU>") { d %0dsqlR } else { throw } } QUIT SQLCODE=100
	 ;---&sql(SELECT ID FROM SQLUser.InsertProcess WHERE  ID=:%pVals(1) AND (%ID <> :%pID OR :%pID IS NULL)) QUIT SQLCODE=100
 	 ;--- ** SQL PUBLIC Variables: %pID, %pVals, SQLCODE
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xEMsl4oKA3KHPPUHch54j4PiGlC6","%New") } catch { if $ze["<CLASS DOES NOT EXIST>"&&($ze["%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xEMsl4oKA3KHPPUHch54j4PiGlC6")||($ze["<ZSQLU>") { d %0dsqlT } else { throw } } QUIT SQLCODE=100
 q
%0dsqlR	n %xxsql
	s %xxsql("S",1)="SELECT ID FROM Ens . BusinessProcess WHERE ID = :%pVals(1) AND ( %ID <> :%pID OR :%pID IS NULL )"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","DEBUG")=$c(1),%xxsql("M","FORKNETDMN")=$c(1)
	s %xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1)
	s %xxsql("M","USELOST")=$c(1),%xxsql("M","ZVERSION")=$c(1),%xxsql("I","%occErrors")="",%xxsql("I","%occSqlfunc")="",%xxsql("I","%sySite")=""
	s %xxsql("I","%sySt")="",%xxsql("I","%sySystem")="",%xxsql("I","EnsConstants")="",%xxsql("I","EnsErrors")="",%xxsql("I","EnsUtil")=""
	s %xxsql("I","Ensemble")="",%xxsql("NS")="PROJECT1"
	d BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","User",0,"",),,"User.InsertProcess.CLS")
	q
%0dsqlT	n %xxsql
	s %xxsql("S",1)="SELECT ID FROM SQLUser . InsertProcess WHERE ID = :%pVals(1) AND ( %ID <> :%pID OR :%pID IS NULL )"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","DEBUG")=$c(1),%xxsql("M","FORKNETDMN")=$c(1)
	s %xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1)
	s %xxsql("M","USELOST")=$c(1),%xxsql("M","ZVERSION")=$c(1),%xxsql("I","%occErrors")="",%xxsql("I","%occSqlfunc")="",%xxsql("I","%sySite")=""
	s %xxsql("I","%sySt")="",%xxsql("I","%sySystem")="",%xxsql("I","EnsConstants")="",%xxsql("I","EnsErrors")="",%xxsql("I","EnsUtil")=""
	s %xxsql("I","Ensemble")="",%xxsql("NS")="PROJECT1"
	d BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","User",0,"",),,"User.InsertProcess.CLS")
	q
zIDKEYSQLExists(pLockOnly=0,pUnlockRef,%pVal...)
	// SQL Foreign Key validation entry point for Key IDKEY.  Called by FKeys that reference this Key to see if the row is defined
	new id set id=%pVal(1)
	if pLockOnly>=0 { if '..%SQLGetLock(id,1,.pUnlockRef) { set sqlcode=-114,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler39",,"SQLUser"_"."_"InsertProcess"_":"_"IDKEY") QUIT 0 } }
	if pLockOnly<1 {
		new qv set qv='..IDKEYSQLCheckUnique(0,,%pVal(1)) QUIT:pLockOnly=-1 qv
		do:'$g(pUnlockRef) ..%SQLReleaseLock(id,1) quit qv
	}
	else { do:'$g(pUnlockRef) ..%SQLReleaseLock(id,1) QUIT 1 }
	Return
zSessionIdExists(K1,id="") [ K1,SQLCODE,id ] public { New SQLCODE 
	 ;---&sql(SELECT %ID INTO :id FROM SQLUser.InsertProcess WHERE (:K1 is not null and %SessionId = :K1) OR (:K1 IS NULL AND %SessionId IS NULL))
 	 ;--- ** SQL PUBLIC Variables: K1, SQLCODE, id
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xE57l9An3DrpFNGfkBlCwlXUY29g","%New") } catch { if $ze["<CLASS DOES NOT EXIST>"&&($ze["%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xE57l9An3DrpFNGfkBlCwlXUY29g")||($ze["<ZSQLU>") { d %0dsqlV } else { throw } }
	Quit $select('SQLCODE:1,1:0) }
 q
%0dsqlV	n %xxsql
	s %xxsql("S",1)="SELECT %ID INTO :id FROM SQLUser . InsertProcess WHERE ( :K1 IS NOT NULL AND %SessionId = :K1 ) OR ( :K1 IS NULL AND %SessionId IS NULL )"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","DEBUG")=$c(1),%xxsql("M","FORKNETDMN")=$c(1)
	s %xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1)
	s %xxsql("M","USELOST")=$c(1),%xxsql("M","ZVERSION")=$c(1),%xxsql("I","%occErrors")="",%xxsql("I","%occSqlfunc")="",%xxsql("I","%sySite")=""
	s %xxsql("I","%sySt")="",%xxsql("I","%sySystem")="",%xxsql("I","EnsConstants")="",%xxsql("I","EnsErrors")="",%xxsql("I","EnsUtil")=""
	s %xxsql("I","Ensemble")="",%xxsql("NS")="PROJECT1"
	d BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","User",0,"",),,"User.InsertProcess.CLS")
	q
zTimeCreatedExists(K1,id="") [ K1,SQLCODE,id ] public { New SQLCODE 
	 ;---&sql(SELECT %ID INTO :id FROM SQLUser.InsertProcess WHERE (:K1 is not null and %TimeCreated = :K1) OR (:K1 IS NULL AND %TimeCreated IS NULL))
 	 ;--- ** SQL PUBLIC Variables: K1, SQLCODE, id
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xE9uzxTHgFSJhNHscgzuf8ozBGVi","%New") } catch { if $ze["<CLASS DOES NOT EXIST>"&&($ze["%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xE9uzxTHgFSJhNHscgzuf8ozBGVi")||($ze["<ZSQLU>") { d %0dsqlX } else { throw } }
	Quit $select('SQLCODE:1,1:0) }
 q
%0dsqlX	n %xxsql
	s %xxsql("S",1)="SELECT %ID INTO :id FROM SQLUser . InsertProcess WHERE ( :K1 IS NOT NULL AND %TimeCreated = :K1 ) OR ( :K1 IS NULL AND %TimeCreated IS NULL )"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","DEBUG")=$c(1),%xxsql("M","FORKNETDMN")=$c(1)
	s %xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1)
	s %xxsql("M","USELOST")=$c(1),%xxsql("M","ZVERSION")=$c(1),%xxsql("I","%occErrors")="",%xxsql("I","%occSqlfunc")="",%xxsql("I","%sySite")=""
	s %xxsql("I","%sySt")="",%xxsql("I","%sySystem")="",%xxsql("I","EnsConstants")="",%xxsql("I","EnsErrors")="",%xxsql("I","EnsUtil")=""
	s %xxsql("I","Ensemble")="",%xxsql("NS")="PROJECT1"
	d BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","User",0,"",),,"User.InsertProcess.CLS")
	q
zOnDeleteExecute(%oper=0,pNew,pOld,pChanged,%ok,%msg)
     ;---&sql(DELETE from Ens_BP.Context where %ID = :pNew(4) )
      ;--- ** SQL PUBLIC Variables: SQLCODE, pNew
    try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xE8pwAzSYBmjmtBypyRBQJuNllr8","%New") } catch { if $ze["<CLASS DOES NOT EXIST>"&&($ze["%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xE8pwAzSYBmjmtBypyRBQJuNllr8")||($ze["<ZSQLU>") { d %0dsqlZ } else { throw } }
     ;---&sql(DELETE from Ens_BP.Thread where %Process = :pNew(1))
      ;--- ** SQL PUBLIC Variables: SQLCODE, pNew
    try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xEg2MbBgziMt6xYRhMkw1u2fhcJC","%New") } catch { if $ze["<CLASS DOES NOT EXIST>"&&($ze["%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xEg2MbBgziMt6xYRhMkw1u2fhcJC")||($ze["<ZSQLU>") { d %0dsql1 } else { throw } }
	QUIT
 q
%0dsqlZ	n %xxsql
	s %xxsql("S",1)="DELETE FROM Ens_BP . Context WHERE %ID = :pNew(4)"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","DEBUG")=$c(1),%xxsql("M","FORKNETDMN")=$c(1)
	s %xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1)
	s %xxsql("M","USELOST")=$c(1),%xxsql("M","ZVERSION")=$c(1),%xxsql("I","%occErrors")="",%xxsql("I","%occSqlfunc")="",%xxsql("I","%sySite")=""
	s %xxsql("I","%sySt")="",%xxsql("I","%sySystem")="",%xxsql("I","EnsConstants")="",%xxsql("I","EnsErrors")="",%xxsql("I","EnsUtil")=""
	s %xxsql("I","Ensemble")="",%xxsql("NS")="PROJECT1"
	d BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","Ens,User",0,"",),,"User.InsertProcess.CLS")
	q
%0dsql1	n %xxsql
	s %xxsql("S",1)="DELETE FROM Ens_BP . Thread WHERE %Process = :pNew(1)"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","DEBUG")=$c(1),%xxsql("M","FORKNETDMN")=$c(1)
	s %xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1)
	s %xxsql("M","USELOST")=$c(1),%xxsql("M","ZVERSION")=$c(1),%xxsql("I","%occErrors")="",%xxsql("I","%occSqlfunc")="",%xxsql("I","%sySite")=""
	s %xxsql("I","%sySt")="",%xxsql("I","%sySystem")="",%xxsql("I","EnsConstants")="",%xxsql("I","EnsErrors")="",%xxsql("I","EnsUtil")=""
	s %xxsql("I","Ensemble")="",%xxsql("NS")="PROJECT1"
	d BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","Ens,User",0,"",),,"User.InsertProcess.CLS")
	q
]]></Routine>


<Class name="User.InsertProcess.Context">
<Description>
This class is generated by the User.InsertProcess BPL class.
This class should not be edited or modified in any way.
Do not make direct use of this class in your application.</Description>
<ClassType>persistent</ClassType>
<CompileAfter>User.InsertProcess</CompileAfter>
<IncludeCode/>
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.BP.Context</Super>
<TimeChanged>65834,40438.502519</TimeChanged>
<TimeCreated>65834,38417.542517</TimeCreated>
<GeneratedBy>Ens.BPL.Compiler.CLS</GeneratedBy>

<Property name="age">
<Type>%Integer</Type>
</Property>

<Property name="sc">
<Type>%Boolean</Type>
</Property>

<Method name="OnResponse1">
<Description>
Response Handler for call to User.Operation</Description>
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,request:User.Request,response:User.selectResponse,callrequest:User.Request,callresponse:User.selectResponse,callname:%String</FormalSpec>
<Language>objectscript</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Set status=$$$OK,response=callresponse
 If $$$ISERR(status) Quit
 } while (0)
Exit Quit status
Trap Set $ZT="",status=##class(Ens.Util.Error).EnsSystemError("User.InsertProcess.Thread1","OnResponse1")
 Goto Exit
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DefaultData>ContextDefaultData1</DefaultData>
<Data name="ContextDefaultData1">
<Structure>listnode</Structure>
<Subscript>"Context"</Subscript>
<Value name="1">
<Value>sc</Value>
</Value>
<Value name="2">
<Value>Sc</Value>
</Value>
<Value name="3">
<Value>age</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="User.InsertProcess.Thread1">
<Description>
This class is generated by the User.InsertProcess BPL class.
This class should not be edited or modified in any way.
Do not make direct use of this class in your application.</Description>
<ClassType>persistent</ClassType>
<CompileAfter>User.InsertProcess</CompileAfter>
<IncludeCode/>
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.BP.Thread</Super>
<TimeChanged>65834,40438.963292</TimeChanged>
<TimeCreated>65834,40438.49256</TimeCreated>
<GeneratedBy>Ens.BPL.Compiler.CLS</GeneratedBy>

<Method name="S1">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>objectscript</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Do {
 set object = ##class(User.Validation).%New()
 
 set context.sc = object.Validation(request)
 } while (0)
 If $$$ISERR(status) Quit
 If (context.sc = 1) {
 Set ..%NextState="S3"
 } else {
 Set ..%NextState="S9"
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S1") Goto Exit
]]></Implementation>
</Method>

<Method name="S2">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>objectscript</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Do process.ClearAllPendingResponses()
 Set ..%NextState="Stop"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S2") Goto Exit
]]></Implementation>
</Method>

<Method name="S3">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>objectscript</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Do {
 set object = ##class(User.Validation).%New()
 
 set context.sc = object.ValidateDOB(request)
 } while (0)
 If $$$ISERR(status) Quit
 If (context.sc = 1) {
 Set ..%NextState="S5"
 } else {
 Set ..%NextState="S8"
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S3") Goto Exit
]]></Implementation>
</Method>

<Method name="S4">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>objectscript</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Set ..%NextState="S2"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S4") Goto Exit
]]></Implementation>
</Method>

<Method name="S5">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>objectscript</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Do {
 set Object = ##class(User.Validation).%New()
 
 set context.age = Object.Calculate(request)
 
 set request.Age = context.age
 } while (0)
 If $$$ISERR(status) Quit
 #; --- Begin Call CalI Insert ---
 #; --- Begin Request ---
 Set callrequest=##class(User.Request).%New()
 If '$IsObject(callrequest) Set status=%objlasterror Quit
 Set status=$$$OK,callrequest=request
 If $$$ISERR(status) Quit
 Set status=..MakeAsyncCall("OnResponse1","User.Operation",callrequest,"CalI Insert",1,0,"CalI Insert",1)
 If $$$ISERR(status) Quit
 Kill callrequest
 #; --- End Request ---
 #; --- End Call CalI Insert ---
 Do ..%PendingResponses.Clear(),..%SyncResponses.Clear()
 Set ..%SyncTimedOut=0,..%PendingTimeout="",..%PendingAlarmHandle="",..%SyncName=""
 If ..%Process.IsResponsePending("CalI Insert") Do ..%PendingResponses.SetAt("","CalI Insert")
 If ..%PendingResponses.Count()>0 {
    Set %name="",%alarmhandle=""
    Set status=..%Process.MakeTimerCall("_Timeout",.%name,5,"CalI Insert",.%alarmhandle,"")
    If $$$ISERR(status) Quit
    Do ..%PendingResponses.SetAt("",%name) Set ..%PendingTimeout=%name,..%PendingAlarmHandle=%alarmhandle,..%SyncName=""
 }
 If ..%PendingResponses.Count()=0 {
    Set ..%NextState="S7"
 } else {
    Set ..%NextState="S6",..%Wait=1
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S5") Goto Exit
]]></Implementation>
</Method>

<Method name="S6">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>objectscript</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 If ..%PendingResponses.Count()=0 {
    Set ..%NextState="S7"
 } else {
    Set ..%NextState="S6",..%Wait=1
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S6") Goto Exit
]]></Implementation>
</Method>

<Method name="S7">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>objectscript</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Set ..%NextState="S4"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S7") Goto Exit
]]></Implementation>
</Method>

<Method name="S8">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>objectscript</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Set status=$$$OK,response.Status="INVALID DOB"
 If $$$ISERR(status) Quit
 Set ..%NextState="S4"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S8") Goto Exit
]]></Implementation>
</Method>

<Method name="S9">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>objectscript</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Set status=$$$OK,response.Status="ERROR EMPTY"
 If $$$ISERR(status) Quit
 Set ..%NextState="S2"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S9") Goto Exit
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
</Storage>
</Class>


<Class name="User.InsertProcess">
<Description>
</Description>
<ClassType>persistent</ClassType>
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.BusinessProcessBPL</Super>
<TimeChanged>65834,40422.219593</TimeChanged>
<TimeCreated>65834,37914.434369</TimeCreated>

<XData name="BPL">
<Description>
BPL Definition</Description>
<XMLNamespace>http://www.intersystems.com/bpl</XMLNamespace>
<Data><![CDATA[
<process language='objectscript' request='User.Request' response='User.selectResponse' height='2000' width='2000' >
<context>
<property name='age' type='%Integer' instantiate='0' />
<property name='sc' type='%Boolean' instantiate='0' />
</context>
<sequence xend='200' yend='1150' >
<code name='RequiredFields' xpos='200' ypos='250' >
<![CDATA[ set object = ##class(User.Validation).%New()
 
 set context.sc = object.Validation(request)]]]]><![CDATA[>
</code>
<if name='CheckSc' condition='context.sc = 1' xpos='200' ypos='350' xend='200' yend='1050' >
<true>
<code name='CheckDOB' xpos='470' ypos='500' >
<![CDATA[ set object = ##class(User.Validation).%New()
 
 set context.sc = object.ValidateDOB(request)]]]]><![CDATA[>
</code>
<if name='Checksc' condition='context.sc = 1' xpos='470' ypos='600' xend='470' yend='950' >
<true>
<code name='CalculateAge' xpos='740' ypos='750' >
<![CDATA[ set Object = ##class(User.Validation).%New()
 
 set context.age = Object.Calculate(request)
 
 set request.Age = context.age]]]]><![CDATA[>
</code>
<call name='CalI Insert' target='User.Operation' async='0' timeout='5' xpos='740' ypos='850' >
<request type='User.Request' >
<assign property="callrequest" value="request" action="set" />
</request>
<response type='User.selectResponse' >
<assign property="response" value="callresponse" action="set" />
</response>
</call>
</true>
<false>
<assign name="error DOB" property="response.Status" value="&quot;INVALID DOB&quot;" action="set" xpos='470' ypos='750' />
</false>
</if>
</true>
<false>
<assign name="error response" property="response.Status" value="&quot;ERROR EMPTY&quot;" action="set" xpos='200' ypos='500' />
</false>
</if>
</sequence>
</process>
]]></Data>
</XData>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
</Storage>
</Class>




<Routine name="User.InsertProcessMasterPendingResponses.1" type="INT" languagemode="0" generated="1" timestamp="65834,40438.761995"><![CDATA[
 ;User.InsertProcessMasterPendingResponses.1
 ;Generated for class User.InsertProcessMasterPendingResponses.  Do NOT edit. 03/31/2021 11:13:58AM
 ;;556F514D;User.InsertProcessMasterPendingResponses
 ;
SQLUPPER(v,l) { quit $zu(28,v,7,$g(l,32767)) }
ALPHAUP(v,r) { quit $zu(28,v,6) }
STRING(v,l) { quit $zu(28,v,9,$g(l,32767)) }
SQLSTRING(v,l) { quit $zu(28,v,8,$g(l,32767)) }
UPPER(v) { quit $zu(28,v,5) }
MVR(v) { quit $zu(28,v,2) }
TRUNCATE(v,l) { quit $e(v,1,$g(l,3641144)) }
%SQLAcquireLock(%rowid,s=0,unlockref=0)
	new %d,gotlock,subs
	set %d(1)=%rowid,%d(0)=$p(%d(1),"||",1),%d(3)=$p(%d(1),"||",2),subs(6)=$p(%d(0),"||",1) set s=$e("S",s)
	lock +^Ens.BusinessProcessD(subs(6),"pending",%d(3))#s:$zu(115,4) set gotlock=$t
	set:gotlock&&unlockref unlockref=unlockref+1,unlockref(unlockref)=$lb($name(^Ens.BusinessProcessD(subs(6),"pending",%d(3))),"User.InsertProcessMasterPendingResponses",s_"D")
	QUIT gotlock
%SQLAcquireTableLock(s=0,SQLCODE,to="")
	set s=$e("S",s) set:to="" to=$zu(115,4) lock +^Ens.BusinessProcessD#s:to QUIT:$t 1 set SQLCODE=-110 if s="S" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler35",,"SQLUser"_"."_"InsertProcess_MasterPendingResponses") } else { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler36",,"SQLUser"_"."_"InsertProcess_MasterPendingResponses") } QUIT 0
	Return
%SQLAfterTriggers()
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLAfterTriggers")
%SQLBeforeTriggers()
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLBeforeTriggers")
%SQLBuildIndices(pIndices="",pLockFlag=0,pStartID="",pEndID="",pIgnoreIndexList="")
	QUIT ##class(User.InsertProcess).%BuildIndices(pIndices,,pLockFlag,,pStartID,pEndID,pIgnoreIndexList)
%SQLBuildPurgeIndexForRow(pIndices="",pActions="BP",pLockRow=1,%d,%e,pIgnoreIndexList="")
	// Purge and build index nodes for a single row using given values, return Status Code
	new sn,tSC,tLock set tSC=1,pActions=$zcvt(pActions,"U")
	try {
		if $g(%d(1))="" { set tSC=$select(+tSC:$$Error^%apiOBJ(5521,-108,"RowID value must be specified in %d(1) when calling %SQLBuildPurgeIndexForRow for table 'SQLUser.InsertProcess_MasterPendingResponses'"),1:$$AppendStatus^%occSystem(tSC,$$Error^%apiOBJ(5521,-108,"RowID value must be specified in %d(1) when calling %SQLBuildPurgeIndexForRow for table 'SQLUser.InsertProcess_MasterPendingResponses'"))) RETURN tSC }
		if pLockRow { if '..%SQLAcquireLock(%d(1)) { set tSC=$select(+tSC:$$Error^%apiOBJ(5521,-114,"Unable to lock row in table 'SQLUser.InsertProcess_MasterPendingResponses' with %ID = '"_%d(1)_"'"),1:$$AppendStatus^%occSystem(tSC,$$Error^%apiOBJ(5521,-114,"Unable to lock row in table 'SQLUser.InsertProcess_MasterPendingResponses' with %ID = '"_%d(1)_"'"))) RETURN tSC  } else { set tLock=1 }}
		set %d(0)=$p(%d(1),"||",1),%d(3)=$p(%d(1),"||",2)
		set subs(6)=$p(%d(0),"||",1)
		if pLockRow { do ..%SQLReleaseLock(%d(1),0,0) set tLock=0 }
	}
	catch {
		if $g(tLock) { do ..%SQLReleaseLock(%d(1),0,0) }
		set tSC=$select(+tSC:$$Error^%apiOBJ(5594,$ze),1:$$AppendStatus^%occSystem(tSC,$$Error^%apiOBJ(5594,$ze)))
	}
	QUIT tSC
%SQLCheckUnique(pFromOrig=0,%pID,%pVals...)
	 ;---&sql(SELECT ID FROM SQLUser.InsertProcess_MasterPendingResponses WHERE  ID=:%pVals(1) AND (%ID <> :%pID OR :%pID IS NULL)) QUIT SQLCODE=100
 	 ;--- ** SQL PUBLIC Variables: %pID, %pVals, SQLCODE
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xEaxIZNt5kYXGucE3guYDDUWaUEe","%New") } catch { if $ze["<CLASS DOES NOT EXIST>"&&($ze["%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xEaxIZNt5kYXGucE3guYDDUWaUEe")||($ze["<ZSQLU>") { d %0dsqlA } else { throw } } QUIT SQLCODE=100
 q
%0dsqlA	n %xxsql
	s %xxsql("S",1)="SELECT ID FROM SQLUser . InsertProcess_MasterPendingResponses WHERE ID = :%pVals(1) AND ( %ID <> :%pID OR :%pID IS NULL )"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","DEBUG")=$c(1),%xxsql("M","FORKNETDMN")=$c(1)
	s %xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1)
	s %xxsql("M","USELOST")=$c(1),%xxsql("M","ZVERSION")=$c(1),%xxsql("I","%occErrors")="",%xxsql("I","%occSqlfunc")="",%xxsql("I","%sySite")=""
	s %xxsql("I","%sySt")="",%xxsql("I","%sySystem")="",%xxsql("I","EnsConstants")="",%xxsql("I","EnsErrors")="",%xxsql("I","EnsUtil")=""
	s %xxsql("I","Ensemble")="",%xxsql("NS")="PROJECT1"
	d BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","User",0,"",),,"User.InsertProcessMasterPendingResponses.CLS")
	q
%SQLCheckUniqueIndices(pIndices,pOK)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLCheckUniqueIndices")
%SQLCheckUniqueKeys(pConNumber,pFromOrig=0,pUpdate=0,pVals...)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLCheckUniqueKeys")
%SQLCopyIcolIntoName()
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLCopyIcolIntoName")
%SQLCopyNameIntoIcol()
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLCopyNameToIcol")
%SQLCreateInsDelTables(pInsTrigObj,pDelTrigObj)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLCreateInsDelTables")
%SQLDefineiDjVars(%d,subs,master)
	QUIT
%SQLDelete(%rowid,%check,%tstart=1,%mv=0,%polymorphic=0)
	// SQL DELETE method for table SQLUser.InsertProcess_MasterPendingResponses
	new bva,ce,%d,dc,%e,%ele,%itm,%key,%l,%nc,omcall,%oper,%pos,%s,sn,sqlcode,subs set %oper="DELETE",sqlcode=0,%ROWID=%rowid,%d(1)=%rowid,%e(1)=%rowid,%d(0)=$p(%d(1),"||",1),%d(3)=$p(%d(1),"||",2),subs(6)=$p(%d(0),"||",1),%l=$c(0)
	if '$d(%0CacheSQLRA) { new %0CacheSQLRA set omcall=1 }
	if '$a(%check,2) { new %ls if $tlevel,$i(%0CacheLock("User.InsertProcessMasterPendingResponses"))>$zu(156,50,1) { lock +^Ens.BusinessProcessD:$zu(115,4) lock:$t -^Ens.BusinessProcessD set %ls=$s($t:2,1:0) } else { lock +^Ens.BusinessProcessD(subs(6),"pending",%d(3)):$zu(115,4) set %ls=$t } set:%ls=2 $e(%check,2)=$c(1) set:%ls=1 $e(%l)=$c(1) if '%ls { set SQLCODE=-110,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler40",,%oper,"SQLUser"_"."_"InsertProcess_MasterPendingResponses",$g(%d(1))) RETURN  }} if %tstart { TSTART:($zu(115,1)=1)||('$TLEVEL&&($zu(115,1)=2))  }
	set $zt="ERRORDelete"
	if '$a(%check),'$zu(115,7) do  if sqlcode set SQLCODE=sqlcode do ..%SQLEExit() QUIT  
	. new %fk,%k,%p,%st,%t,%z set %k="",%p("%1")="%d(1),",%p("IDKEY")="%d(0),%d(3),,"
	. for  quit:sqlcode<0  set %k=$o(^rINDEXEXT("F","User.InsertProcessMasterPendingResponses",%k)) quit:%k=""  set %t="" for  set %t=$o(^rINDEXEXT("F","User.InsertProcessMasterPendingResponses",%k,"f",%t)) quit:%t=""  set %st=(%t="User.InsertProcessMasterPendingResponses") set %fk="" for  set %fk=$o(^rINDEXEXT("F","User.InsertProcessMasterPendingResponses",%k,"f",%t,%fk)) quit:%fk=""  x "set %z=$classmethod(%t,%fk_""SQLFKeyRefAction"",%st,%k,$a(%check,2),"_%p(%k)_")" if %z set sqlcode=-124 quit  
	set ce="" for  { set ce=$order(^oddSQL("SQLUser","InsertProcess_MasterPendingResponses","DC",ce)) quit:ce=""   do $classmethod(ce,"%SQLDeleteChildren",%d(1),%check,.sqlcode) quit:sqlcode<0  } if sqlcode<0 { set SQLCODE=sqlcode do ..%SQLEExit() QUIT } // Delete any children
	if '$a(%check,3) {
	}
	k ^Ens.BusinessProcessD(subs(6),"pending",%d(3))
	do ..%SQLUnlock() TCOMMIT:%tstart&&($zu(115,1)=1)
	set SQLCODE=0 kill:$g(omcall) %0CacheSQLRA
	QUIT
ERRORDelete	set $zt="",SQLCODE=-415,%msg=$s($g(%msg)'="":%msg_" -- ",1:"")_$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler51",,%oper,"SQLUser"_"."_"InsertProcess_MasterPendingResponses",$ze) if $ze["<FRAMESTACK>" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler52",,$ze,%oper,"SQLUser"_"."_"InsertProcess_MasterPendingResponses") do ##Class(%SYS.System).WriteToConsoleLog(%msg) if ($zu(67,10,$j)=1)||($zu(67,10,$j)=3) { write !,%msg h 3 } HALT  } do ..%SQLEExit() QUIT
	Return
%SQLDeleteChildren(%parent,%check,sqlcode)
	// Delete all rows where InsertProcess = :%parent
	new %ROWCOUNT,%ROWID,SQLCODE
	set:$a(%check,2)=2 $e(%check,2)=$c(0)
	 ;---&sql(DELETE %USECHECKVARIABLE FROM SQLUser.InsertProcess_MasterPendingResponses WHERE InsertProcess = :%parent)
 	 ;--- ** SQL PUBLIC Variables: %parent, SQLCODE
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xEiKkFgKUq5V3cHommvsK3C61e6G","%New") } catch { if $ze["<CLASS DOES NOT EXIST>"&&($ze["%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xEiKkFgKUq5V3cHommvsK3C61e6G")||($ze["<ZSQLU>") { d %0dsqlC } else { throw } }
	set:SQLCODE<0 sqlcode=SQLCODE QUIT  
 q
%0dsqlC	n %xxsql
	s %xxsql("S",1)="DELETE %USECHECKVARIABLE FROM SQLUser . InsertProcess_MasterPendingResponses WHERE InsertProcess = :%parent"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","DEBUG")=$c(1),%xxsql("M","FORKNETDMN")=$c(1)
	s %xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1)
	s %xxsql("M","USELOST")=$c(1),%xxsql("M","ZVERSION")=$c(1),%xxsql("I","%occErrors")="",%xxsql("I","%occSqlfunc")="",%xxsql("I","%sySite")=""
	s %xxsql("I","%sySt")="",%xxsql("I","%sySystem")="",%xxsql("I","EnsConstants")="",%xxsql("I","EnsErrors")="",%xxsql("I","EnsUtil")=""
	s %xxsql("I","Ensemble")="",%xxsql("NS")="PROJECT1"
	d BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","User",0,"",),,"User.InsertProcessMasterPendingResponses.CLS")
	q
%SQLDeleteTempStreams()
	// Delete all temporary streams
	QUIT
%SQLEExit()
	do:%oper'="DELETE" ..%SQLUnlock2() do ..%SQLUnlock() 
	do ..%SQLUnlockRef()
	if %tstart,$zu(115,1)=1,$TLEVEL { set %tstart=0 TROLLBACK 1 } kill:$g(omcall) %0CacheSQLRA QUIT  
	Return
%SQLExists(pLockOnly=0,pUnlockRef,%pVal...)
	// SQL Foreign Key validation entry point for Key %1.  Called by FKeys that reference this Key to see if the row is defined
	new id set id=%pVal(1)
	if pLockOnly>=0 { if '..%SQLGetLock(id,1,.pUnlockRef) { set sqlcode=-114,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler39",,"SQLUser"_"."_"InsertProcess_MasterPendingResponses"_":"_"%1") QUIT 0 } }
	if pLockOnly<1 {
		new qv set qv='..%SQLCheckUnique(0,,%pVal(1)) QUIT:pLockOnly=-1 qv
		do:'$g(pUnlockRef) ..%SQLReleaseLock(id,1) quit qv
	}
	else { do:'$g(pUnlockRef) ..%SQLReleaseLock(id,1) QUIT 1 }
	Return
%SQLFKeyDelLock()
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLFKeyDelLock")
%SQLFastInsert(%check)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLFastInsert")
%SQLFieldValidate()
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLFieldValidate")
%SQLGetLock(pRowId,pShared=0,pUnlockRef)
	if $tlevel,$i(%0CacheLock("User.InsertProcessMasterPendingResponses"))>$zu(156,50,1) { new s set s=$e("S",pShared) lock +^Ens.BusinessProcessD#s:$zu(115,4) lock:$t -^Ens.BusinessProcessD#s QUIT $s($t:2,1:0) } 
	QUIT ..%SQLAcquireLock(pRowId,pShared,.pUnlockRef)
%SQLGetOld(%rowid,%d,%e,sqlcode)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLGetOld")
%SQLGetOldAll()
	// Get all old data values
	new SQLCODE,%ROWCOUNT
	 ;---&sql(SELECT MasterPendingResponses INTO :%e() FROM %IGNOREINDEX * SQLUser.InsertProcess_MasterPendingResponses WHERE ID=:%rowid)
 	 ;--- ** SQL PUBLIC Variables: %e, %rowid, SQLCODE
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xEK4QorOPfLuv9JgQyJesgwg11ED","%New") } catch { if $ze["<CLASS DOES NOT EXIST>"&&($ze["%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xEK4QorOPfLuv9JgQyJesgwg11ED")||($ze["<ZSQLU>") { d %0dsqlE } else { throw } }
	set sqlcode=SQLCODE QUIT:sqlcode'=0
	QUIT
 q
%0dsqlE	n %xxsql
	s %xxsql("S",1)="SELECT MasterPendingResponses INTO :%e() FROM %IGNOREINDEX * SQLUser . InsertProcess_MasterPendingResponses WHERE ID = :%rowid"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","DEBUG")=$c(1),%xxsql("M","FORKNETDMN")=$c(1)
	s %xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1)
	s %xxsql("M","USELOST")=$c(1),%xxsql("M","ZVERSION")=$c(1),%xxsql("I","%occErrors")="",%xxsql("I","%occSqlfunc")="",%xxsql("I","%sySite")=""
	s %xxsql("I","%sySt")="",%xxsql("I","%sySystem")="",%xxsql("I","EnsConstants")="",%xxsql("I","EnsErrors")="",%xxsql("I","EnsUtil")=""
	s %xxsql("I","Ensemble")="",%xxsql("NS")="PROJECT1"
	d BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","User",0,"",),,"User.InsertProcessMasterPendingResponses.CLS")
	q
%SQLGetOldIndex(%rowid,%d,pF=0,sqlcode)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLGetOldIndex")
%SQLInsert(%d,%check,%inssel,%vco,%tstart=1,%mv=0)
	// SQL INSERT method for table SQLUser.InsertProcess_MasterPendingResponses
	new bva,%ele,%itm,%key,%f,%l,%n,%nc,%oper,%pos,%s,sqlcode,sn,subs,unlockref set %oper="INSERT",sqlcode=0,%l=$c(0,0,0),unlockref=1
	if $a(%check,7) { new %diu merge %diu=%d }
	set:$d(%d(0)) subs(6)=$p(%d(0),"||",1)
	if '$a(%check),'..%SQLValidateFields(.sqlcode) { set SQLCODE=sqlcode RETURN "" }
	do:'$a(%check,8) ..%SQLNormalizeFields()
	if %tstart { TSTART:($zu(115,1)=1)||('$TLEVEL&&($zu(115,1)=2))  } set $zt="ERRORInsert"
	if '$a(%check),$g(%d(0))'="",'##class(User.InsertProcess).%SQLExists($s($a(%check,2)=1:-1,1:0),.unlockref,%d(0)) {
		if sqlcode<0 { set SQLCODE=sqlcode if SQLCODE=-114 { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler56",,%oper,"SQLUser"_"."_"InsertProcess",$g(%d(0))) } } else { set SQLCODE=-104,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler9",,"SQLUser"_"."_"InsertProcess_MasterPendingResponses") }
		do ..%SQLEExit() RETURN ""
	}
	if '$a(%check) { if $g(%d(0))="" { do ..%SQLMissing("InsertProcess") set SQLCODE=sqlcode do ..%SQLEExit() RETURN "" } }
	set:'$d(%d(3)) %d(3)=$i(^Ens.BusinessProcessD(subs(6),"pending")) set %d(1)=%d(0)_"||"_%d(3),subs(6)=$p(%d(0),"||",1)
	if '$a(%check) {
		do {
			if $g(%vco)'="" { d @%vco quit:sqlcode<0  }
				// Constraint IDKEY
				if '$a(%check,2) { lock +^Ens.BusinessProcessD("IDKEY",%d(0),%d(3)):$zu(115,4) if $t { set $e(%l,2)=$c(1) } else { do ..%SQLUnlockError("IDKEY") quit  } }
				if '$a(%check,7) { if '..IDKEYSQLCheckUnique(0,,%d(0),%d(3)) { set sqlcode=-119,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler10",,"SQLUser"_"."_"InsertProcess_MasterPendingResponses","IDKEY","InsertProcess"_"="_$$quoter^%apiSQL($g(%d(0)))_","_"element_key"_"="_$$quoter^%apiSQL($g(%d(3)))) quit  }} // INSERT
				else { new tID set tID=..IDKEYSQLFindRowIDByConstraint($lb(%d(0),%d(3)),1) if tID'="" { kill %d merge %d=%diu kill %diu do ..%SQLUpdate(tID,%check,.%d),..%SQLUnlock2(),..%SQLUnlockRef() set $e(%check,7)=$c(2) quit  }} // INSERT OR UPDATE
		} while 0
		QUIT:$a(%check,7)=2 $s('SQLCODE:tID,1:"")				// INSERT became UPDATE
		if sqlcode<0 { set SQLCODE=sqlcode do ..%SQLEExit() RETURN "" }		// A constraint failed
	}
	if '$a(%check,2) { new %ls if $tlevel,$i(%0CacheLock("User.InsertProcessMasterPendingResponses"))>$zu(156,50,1) { lock +^Ens.BusinessProcessD:$zu(115,4) lock:$t -^Ens.BusinessProcessD set %ls=$s($t:2,1:0) } else { lock +^Ens.BusinessProcessD(subs(6),"pending",%d(3)):$zu(115,4) set %ls=$t } set:%ls=2 $e(%check,2)=$c(1) set:%ls=1 $e(%l)=$c(1) if '%ls set SQLCODE=-110,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler40",,%oper,"SQLUser"_"."_"InsertProcess_MasterPendingResponses",$g(%d(1))) do ..%SQLEExit() RETURN ""  }
	set ^Ens.BusinessProcessD(subs(6),"pending",%d(3))=$g(%d(2))
	lock:$a(%l,2) -^Ens.BusinessProcessD("IDKEY",%d(0),%d(3))#"D" 
	lock:$a(%l) -^Ens.BusinessProcessD(subs(6),"pending",%d(3))
	TCOMMIT:%tstart&&($zu(115,1)=1)
	do ..%SQLUnlockRef()
	set SQLCODE=0
	QUIT %d(1) 			// %SQLInsert
ERRORInsert	set $zt="",SQLCODE=-415,%msg=$s($g(%msg)'="":%msg_" -- ",1:"")_$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler51",,%oper,"SQLUser"_"."_"InsertProcess_MasterPendingResponses",$ze)
	if $ze["<FRAMESTACK>" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler52",,$ze,%oper,"SQLUser"_"."_"InsertProcess_MasterPendingResponses") do ##Class(%SYS.System).WriteToConsoleLog(%msg) if ($zu(67,10,$j)=1)||($zu(67,10,$j)=3) { write !,%msg h 3 } HALT  }
	do ..%SQLEExit()
	RETURN ""
%SQLInsertComputes(view=0)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLInsertComputes")
%SQLInsertStreams(pVal,pClassname,pProperty,pField,pChangeEmptyToNull,pOIDType,sqlcode,%msg) public {
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLInsertStreams") }
%SQLInvalid(pIcol,pVal) public {
	set:$l($g(pVal))>40 pVal=$e(pVal,1,40)_"..." do:'$d(%n) ..%SQLnBuild() set %msg=$s($g(%msg)'="":%msg_$c(13,10),1:"")_$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler37",,"SQLUser"_"."_"InsertProcess_MasterPendingResponses"_"."_$lg(%n,pIcol),$s($g(pVal)'="":$s(pVal="":"<NULL>",pVal=$c(0):"<EMPTY STRING>",1:"'"_pVal_"'"),1:"")),sqlcode=$s(%oper="INSERT":-104,1:-105)
	QUIT sqlcode }
%SQLInvalid2(ficol,val,char) [ sqlcode ] public {
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLInvalid2") }
%SQLMVDelete(oref,flags,%rowid,oldrec)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLMVDelete")
%SQLMVIndexDelete(%e)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLMVIndexDelete")
%SQLMVIndexInsert(%d)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLMVIndexInsert")
%SQLMVIndexUpdate(%d,%e)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLMVIndexUpdate")
%SQLMVInsert(oref,flags,%rowid,newrec)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLMVInsert")
%SQLMVUpdate(oref,flags,%rowid,newrec,oldrec)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLMVUpdate")
%SQLMissing(fname)
	set sqlcode=-108,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler47",,fname,"SQLUser"_"."_"InsertProcess_MasterPendingResponses") quit
%SQLNormalizeCompFields()
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLNormalizeCompFields")
%SQLNormalizeFields()
	set:$g(%d(0))'="" %d(0)=$select(%d(0)=$c(0)&&$zu(115,13):"",1:%d(0)\1)
	QUIT
%SQLPurgeIndices(pIndices="",pLockExtent=0,pIgnoreIndexList="")
	QUIT ##class(User.InsertProcess).%PurgeIndices(pIndices,pLockExtent,pIgnoreIndexList)
%SQLQuickBulkInsert(%nolock=0)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLQuickBulkInsert")
%SQLQuickBulkLoad(%rowidlist,%nolock=0,pkey=0)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLQuickBulkLoad")
%SQLQuickBulkSave(%nolock=0)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLQuickBulkSave")
%SQLQuickBulkUpdate(%nolock=0)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLQuickBulkUpdate")
%SQLQuickDelete(%rowid,%nolock=0,pkey=0)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLQuickDelete")
%SQLQuickDeleteChildren(%parent,%nolock=0,pkey=0)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLQuickDeleteChildren")
%SQLQuickFindPKeyByRowID(%rowid)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLQuickFindPKeyByRowID")
%SQLQuickFindRowIDByPKey(pPKey,pOutput=1,pInternal=0)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLQuickFindRowIDByPKey")
%SQLQuickInsert(d,%nolock=0,pkey=0,parentpkey=0)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLQuickInsert")
%SQLQuickLoad(%rowid,%nolock=0,pkey=0,qq=0)
	// Get fields from row where SQLRowID=%rowid
	new d,i,il,subs set:%nolock=2 %nolock=1
	if %nolock=0 { if '..%SQLAcquireLock(%rowid) { set %qrc=114,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler45",,"SQLUser"_"."_"InsertProcess_MasterPendingResponses",%rowid),%ROWCOUNT=0 QUIT  } set:$zu(115,2) il=$zu(115,2,0) }
	set d(1)=%rowid,d(0)=$p(d(1),"||",1),d(3)=$p(d(1),"||",2),subs(6)=$p(d(0),"||",1)
	new s,ul set ul=0,d(1)=%rowid if $zu(115,2)=1 { lock +^Ens.BusinessProcessD(subs(6),"pending",d(3))#"S":$zu(115,4) if $t { set ul=1 } else { set %qrc=114,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler46",,"SQLUser"_"."_"InsertProcess_MasterPendingResponses",%rowid),%ROWCOUNT=0 quit  } }
	if '$d(^Ens.BusinessProcessD(subs(6),"pending",d(3)),s) { set SQLCODE=100,%qrc=100 if %nolock=0 { do:$g(il) $zu(115,2,il) }} else { set SQLCODE=0
	if %nolock=0 { if $zu(115,1)=1 { TSTART  } elseif '$TLEVEL,$zu(115,1)=2 { TSTART  }} set d(2)=s  }
	do ..%SQLQuickLogicalToOdbc(.d)
	if SQLCODE set %ROWCOUNT=0 set:SQLCODE<0 SQLCODE=-SQLCODE lock:ul -^Ens.BusinessProcessD(subs(6),"pending",d(3))#"SI" set %qrc=SQLCODE QUIT
	set:qq d=$zobjexport("User.InsertProcessMasterPendingResponses",18),d=$zobjexport(4,18) set i=-1 for  { set i=$o(d(i)) quit:i=""  set d=$zobjexport(d(i),18) } set %qrc=0,%ROWCOUNT=1 lock:ul -^Ens.BusinessProcessD(subs(6),"pending",d(3))#"SI" if %nolock=0 { do ..%SQLReleaseLock(%rowid,0,0) do:$g(il) $zu(115,2,il) } QUIT
	Return
%SQLQuickLoadChildren(%parref,%nolock=0,pkey=0,returnpkey=0)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLQuickLoadChildren")
%SQLQuickLogicalToOdbc(%d)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLLogicalToOdbcFields")
%SQLQuickOdbcToLogical(%d)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLQuickOdbcToLogical")
%SQLQuickUpdate(%rowid,d,%nolock=0,pkey=0)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLQuickUpdate")
%SQLReleaseLock(%rowid,s=0,i=0,e="")
	new %d,subs
	set %d(1)=%rowid,%d(0)=$p(%d(1),"||",1),%d(3)=$p(%d(1),"||",2),subs(6)=$p(%d(0),"||",1) set s=$e("S",s)_$e("D",i)
	lock -^Ens.BusinessProcessD(subs(6),"pending",%d(3))#s
	set:i&&($g(%0CacheLock("User.InsertProcessMasterPendingResponses"))) %0CacheLock("User.InsertProcessMasterPendingResponses")=%0CacheLock("User.InsertProcessMasterPendingResponses")-1
	QUIT
%SQLReleaseTableLock(s=0,i=0)
	set s=$e("S",s)_$e("D",i) lock -^Ens.BusinessProcessD#s QUIT 1
	Return
%SQLStorageValidation()
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLStorageValidation")
%SQLTrigDelTab()
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLTrigDelTab")
%SQLTrigInsTab()
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLTrigInsTab")
%SQLUnlock()
	lock:$a(%l) -^Ens.BusinessProcessD(subs(6),"pending",%d(3))
	QUIT
%SQLUnlock2()
	lock:$a(%l,2) -^Ens.BusinessProcessD("IDKEY",%d(0),%d(3))#"D" QUIT
%SQLUnlockError(cname)
	set sqlcode=-110 if %oper="DELETE" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler48",,"SQLUser"_"."_"InsertProcess_MasterPendingResponses",cname) } else { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler49",,"SQLUser"_"."_"InsertProcess_MasterPendingResponses",cname) } quit
	Return
%SQLUnlockRef()
	for %itm=2:1:$g(unlockref) {
		if $lg(unlockref(%itm))'="%UnlockId" { lock -@$lg(unlockref(%itm))#$lg(unlockref(%itm),3) }
		else { do $classmethod($lg(unlockref(%itm),2),$lg(unlockref(%itm)),$lg(unlockref(%itm),3),1,1) }
		set:$g(%0CacheLock($lg(unlockref(%itm),2))) %0CacheLock($lg(unlockref(%itm),2))=%0CacheLock($lg(unlockref(%itm),2))-1
	}
	QUIT
%SQLUpdate(%rowid,%check,%d,%vco,%tstart=1,%mv=0,%polymorphic=0,%soid)
	// SQL UPDATE method for table SQLUser.InsertProcess_MasterPendingResponses
	new %e,bva,%ele,%itm,%key,%f,%l,%n,%nc,%oper,%pos,%s,icol,omcall,s,sn,sqlcode,subs,t set %oper="UPDATE",sqlcode=0,%ROWID=%rowid,$e(%e,1)=$c(0),%l=$c(0,0,0)
	if '$d(%0CacheSQLRA) { new %0CacheSQLRA set omcall=1 }
	if '$a(%check,7) {
		if '$a(%check),'..%SQLValidateFields(.sqlcode) { set SQLCODE=sqlcode QUIT  }
		do:'$a(%check,8) ..%SQLNormalizeFields()
	}
	if ($d(%d(1))&&($g(%d(1))'=%rowid))||($d(%d(0))&&($g(%d(0))'=$p(%rowid,"||",1)))||($d(%d(3))&&($g(%d(3))'=$p(%rowid,"||",2))) { set SQLCODE=-107,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler17",,"'ID', 'InsertProcess', or 'element_key'","SQLUser"_"."_"InsertProcess_MasterPendingResponses") QUIT  }
	for icol=2:1:3 { set $e(%e,icol)=$c($d(%d(icol))) }
	set %d(1)=%rowid,%e(1)=%rowid,%d(0)=$p(%d(1),"||",1),%d(3)=$p(%d(1),"||",2),subs(6)=$p(%d(0),"||",1)
	if '$a(%check,2) { new %ls if $tlevel,$i(%0CacheLock("User.InsertProcessMasterPendingResponses"))>$zu(156,50,1) { lock +^Ens.BusinessProcessD:$zu(115,4) lock:$t -^Ens.BusinessProcessD set %ls=$s($t:2,1:0) } else { lock +^Ens.BusinessProcessD(subs(6),"pending",%d(3)):$zu(115,4) set %ls=$t } set:%ls=2 $e(%check,2)=$c(1) set:%ls=1 $e(%l)=$c(1) if '%ls { set SQLCODE=-110,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler40",,%oper,"SQLUser"_"."_"InsertProcess_MasterPendingResponses",$g(%d(1))) RETURN  }} if %tstart { TSTART:($zu(115,1)=1)||('$TLEVEL&&($zu(115,1)=2))  }
	set $zt="ERRORUpdate"
	if $g(%vco)'="" { do ..%SQLGetOldAll() if sqlcode { set SQLCODE=-109,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler59",,"SQLUser"_"."_"InsertProcess_MasterPendingResponses",%rowid) do ..%SQLEExit() QUIT  } set:'$d(%d(2)) %d(2)=%e(2) set:%d(2)=%e(2) $e(%e,2)=$c(0)}
	if '$a(%check) {
		do {
			if $g(%vco)'="" { d @%vco quit:sqlcode<0  }
		} while 0
		if sqlcode { set SQLCODE=sqlcode do ..%SQLEExit() QUIT  }
	}
	set:$a(%e,2) ^Ens.BusinessProcessD(subs(6),"pending",%d(3))=$g(%d(2))
	do ..%SQLUnlock2()
	do ..%SQLUnlock() TCOMMIT:%tstart&&($zu(115,1)=1)
	set SQLCODE=0 kill:$g(omcall) %0CacheSQLRA
	QUIT
ERRORUpdate	set $zt="",SQLCODE=-415,%msg=$s($g(%msg)'="":%msg_" -- ",1:"")_$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler51",,%oper,"SQLUser"_"."_"InsertProcess_MasterPendingResponses",$ze) if $ze["<FRAMESTACK>" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler52",,$ze,%oper,"SQLUser"_"."_"InsertProcess_MasterPendingResponses") do ##Class(%SYS.System).WriteToConsoleLog(%msg) if ($zu(67,10,$j)=1)||($zu(67,10,$j)=3) { write !,%msg h 3 } HALT  } do ..%SQLEExit() QUIT  
	Return
%SQLUpdateComputes(view=0)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLUpdateComputes")
%SQLUpdateStreams(pNew,pOld,pClassname,pProperty,pField,pChangeEmptyToNull,pOIDType,sqlcode,%msg,pAllowOid=0) public {
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLUpdateStreams") }
%SQLValidateCompFields(sqlcode)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLValidateCompFields")
%SQLValidateFields(sqlcode)
	if $g(%d(3))'="",'(($l(%d(3))'>50)) { set sqlcode=..%SQLInvalid(3+1,%d(3)) } 
	QUIT 'sqlcode
%SQLicompView()
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLicompView")
%SQLnBuild() public {
	set %n=$lb("ID","ID","MasterPendingResponses","element_key")
	QUIT }
%ValidateIndices(idxList="",autoCorrect=0,lockOption=1,multiProcess=1,mapList,verbose=1,errors)
	w !,"There are no indices to validate for class 'User.InsertProcessMasterPendingResponses'"
	QUIT 1
zIDKEYSQLCheckUnique(pFromOrig=0,%pID,%pVals...)
	 ;---&sql(SELECT InsertProcess,element_key FROM SQLUser.InsertProcess_MasterPendingResponses WHERE  InsertProcess=:%pVals(1) AND element_key=:%pVals(2) AND (%ID <> :%pID OR :%pID IS NULL)) QUIT SQLCODE=100
 	 ;--- ** SQL PUBLIC Variables: %pID, %pVals, SQLCODE
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xEZXglFLyWwXvcP6qCavDUQ73Ail","%New") } catch { if $ze["<CLASS DOES NOT EXIST>"&&($ze["%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xEZXglFLyWwXvcP6qCavDUQ73Ail")||($ze["<ZSQLU>") { d %0dsqlG } else { throw } } QUIT SQLCODE=100
 q
%0dsqlG	n %xxsql
	s %xxsql("S",1)="SELECT InsertProcess , element_key FROM SQLUser . InsertProcess_MasterPendingResponses WHERE InsertProcess = :%pVals(1) AND element_key = :%pVals(2) AND ( %ID <> :%pID OR :%pID IS NULL )"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","DEBUG")=$c(1),%xxsql("M","FORKNETDMN")=$c(1)
	s %xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1)
	s %xxsql("M","USELOST")=$c(1),%xxsql("M","ZVERSION")=$c(1),%xxsql("I","%occErrors")="",%xxsql("I","%occSqlfunc")="",%xxsql("I","%sySite")=""
	s %xxsql("I","%sySt")="",%xxsql("I","%sySystem")="",%xxsql("I","EnsConstants")="",%xxsql("I","EnsErrors")="",%xxsql("I","EnsUtil")=""
	s %xxsql("I","Ensemble")="",%xxsql("NS")="PROJECT1"
	d BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","User",0,"",),,"User.InsertProcessMasterPendingResponses.CLS")
	q
zIDKEYSQLExists(pLockOnly=0,pUnlockRef,%pVal...)
	// SQL Foreign Key validation entry point for Key IDKEY.  Called by FKeys that reference this Key to see if the row is defined
	new id set id=..IDKEYSQLFindRowIDByConstraint($lb(%pVal(1),%pVal(2)),1) QUIT:SQLCODE $s('pLockOnly:0,1:1)
	if pLockOnly>=0 { if '..%SQLGetLock(id,1,.pUnlockRef) { set sqlcode=-114,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler39",,"SQLUser"_"."_"InsertProcess_MasterPendingResponses"_":"_"IDKEY") QUIT 0 } }
	if pLockOnly<1 {
		new qv set qv='..IDKEYSQLCheckUnique(0,,%pVal(1),%pVal(2)) QUIT:pLockOnly=-1 qv
		do:'$g(pUnlockRef) ..%SQLReleaseLock(id,1) quit qv
	}
	else { do:'$g(pUnlockRef) ..%SQLReleaseLock(id,1) QUIT 1 }
	Return
zIDKEYSQLFindRowIDByConstraint(%con,pInternal=0)
	// Get ROWID value for UNIQUE Key IDKEY value given in %con
	new %d,id,rtm set rtm=$zu(115,5,$s(pInternal:0,1:1)) set %d(0)=$lg(%con,1) set %d(3)=$lg(%con,2)
	set %ROWCOUNT=0 set:'pInternal %qrc=0
	 ;---&sql(SELECT %ID INTO :id FROM SQLUser.InsertProcess_MasterPendingResponses WHERE InsertProcess = :%d(0) AND element_key = :%d(3))
 	 ;--- ** SQL PUBLIC Variables: %d, SQLCODE, id
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xEnqqgL7x5khkmKj5YeiDYA2BSyw","%New") } catch { if $ze["<CLASS DOES NOT EXIST>"&&($ze["%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xEnqqgL7x5khkmKj5YeiDYA2BSyw")||($ze["<ZSQLU>") { d %0dsqlI } else { throw } }
	do $zu(115,5,rtm)
	if pInternal { QUIT:'SQLCODE $g(id) RETURN "" }
	if SQLCODE { set:SQLCODE<0 %qrc=-SQLCODE set:'%ROWCOUNT&&(SQLCODE=100) id="",%qrc=0 } set d=$zobjexport(id,18) QUIT
	Return
 q
%0dsqlI	n %xxsql
	s %xxsql("S",1)="SELECT %ID INTO :id FROM SQLUser . InsertProcess_MasterPendingResponses WHERE InsertProcess = :%d(0) AND element_key = :%d(3)"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","DEBUG")=$c(1),%xxsql("M","FORKNETDMN")=$c(1)
	s %xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1)
	s %xxsql("M","USELOST")=$c(1),%xxsql("M","ZVERSION")=$c(1),%xxsql("I","%occErrors")="",%xxsql("I","%occSqlfunc")="",%xxsql("I","%sySite")=""
	s %xxsql("I","%sySt")="",%xxsql("I","%sySystem")="",%xxsql("I","EnsConstants")="",%xxsql("I","EnsErrors")="",%xxsql("I","EnsUtil")=""
	s %xxsql("I","Ensemble")="",%xxsql("NS")="PROJECT1"
	d BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Runtime","","","User",0,"",),,"User.InsertProcessMasterPendingResponses.CLS")
	q
]]></Routine>


<Routine name="User.InsertProcessMessagesReceived.1" type="INT" languagemode="0" generated="1" timestamp="65834,40438.810238"><![CDATA[
 ;User.InsertProcessMessagesReceived.1
 ;Generated for class User.InsertProcessMessagesReceived.  Do NOT edit. 03/31/2021 11:13:58AM
 ;;72644C5A;User.InsertProcessMessagesReceived
 ;
SQLUPPER(v,l) { quit $zu(28,v,7,$g(l,32767)) }
ALPHAUP(v,r) { quit $zu(28,v,6) }
STRING(v,l) { quit $zu(28,v,9,$g(l,32767)) }
SQLSTRING(v,l) { quit $zu(28,v,8,$g(l,32767)) }
UPPER(v) { quit $zu(28,v,5) }
MVR(v) { quit $zu(28,v,2) }
TRUNCATE(v,l) { quit $e(v,1,$g(l,3641144)) }
%SQLAcquireLock(%rowid,s=0,unlockref=0)
	new %d,gotlock,subs
	set %d(1)=%rowid,%d(0)=$p(%d(1),"||",1),%d(3)=$p(%d(1),"||",2),subs(6)=$p(%d(0),"||",1) set s=$e("S",s)
	lock +^Ens.BusinessProcessD(subs(6),"received",%d(3))#s:$zu(115,4) set gotlock=$t
	set:gotlock&&unlockref unlockref=unlockref+1,unlockref(unlockref)=$lb($name(^Ens.BusinessProcessD(subs(6),"received",%d(3))),"User.InsertProcessMessagesReceived",s_"D")
	QUIT gotlock
%SQLAcquireTableLock(s=0,SQLCODE,to="")
	set s=$e("S",s) set:to="" to=$zu(115,4) lock +^Ens.BusinessProcessD#s:to QUIT:$t 1 set SQLCODE=-110 if s="S" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler35",,"SQLUser"_"."_"InsertProcess_MessagesReceived") } else { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler36",,"SQLUser"_"."_"InsertProcess_MessagesReceived") } QUIT 0
	Return
%SQLAfterTriggers()
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLAfterTriggers")
%SQLBeforeTriggers()
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLBeforeTriggers")
%SQLBuildIndices(pIndices="",pLockFlag=0,pStartID="",pEndID="",pIgnoreIndexList="")
	QUIT ##class(User.InsertProcess).%BuildIndices(pIndices,,pLockFlag,,pStartID,pEndID,pIgnoreIndexList)
%SQLBuildPurgeIndexForRow(pIndices="",pActions="BP",pLockRow=1,%d,%e,pIgnoreIndexList="")
	// Purge and build index nodes for a single row using given values, return Status Code
	new sn,tSC,tLock set tSC=1,pActions=$zcvt(pActions,"U")
	try {
		if $g(%d(1))="" { set tSC=$select(+tSC:$$Error^%apiOBJ(5521,-108,"RowID value must be specified in %d(1) when calling %SQLBuildPurgeIndexForRow for table 'SQLUser.InsertProcess_MessagesReceived'"),1:$$AppendStatus^%occSystem(tSC,$$Error^%apiOBJ(5521,-108,"RowID value must be specified in %d(1) when calling %SQLBuildPurgeIndexForRow for table 'SQLUser.InsertProcess_MessagesReceived'"))) RETURN tSC }
		if pLockRow { if '..%SQLAcquireLock(%d(1)) { set tSC=$select(+tSC:$$Error^%apiOBJ(5521,-114,"Unable to lock row in table 'SQLUser.InsertProcess_MessagesReceived' with %ID = '"_%d(1)_"'"),1:$$AppendStatus^%occSystem(tSC,$$Error^%apiOBJ(5521,-114,"Unable to lock row in table 'SQLUser.InsertProcess_MessagesReceived' with %ID = '"_%d(1)_"'"))) RETURN tSC  } else { set tLock=1 }}
		set %d(0)=$p(%d(1),"||",1),%d(3)=$p(%d(1),"||",2)
		set subs(6)=$p(%d(0),"||",1)
		if pLockRow { do ..%SQLReleaseLock(%d(1),0,0) set tLock=0 }
	}
	catch {
		if $g(tLock) { do ..%SQLReleaseLock(%d(1),0,0) }
		set tSC=$select(+tSC:$$Error^%apiOBJ(5594,$ze),1:$$AppendStatus^%occSystem(tSC,$$Error^%apiOBJ(5594,$ze)))
	}
	QUIT tSC
%SQLCheckUnique(pFromOrig=0,%pID,%pVals...)
	 ;---&sql(SELECT ID FROM SQLUser.InsertProcess_MessagesReceived WHERE  ID=:%pVals(1) AND (%ID <> :%pID OR :%pID IS NULL)) QUIT SQLCODE=100
 	 ;--- ** SQL PUBLIC Variables: %pID, %pVals, SQLCODE
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xExHoYz1DaJHSj4FNhkBw3GNEZxT","%New") } catch { if $ze["<CLASS DOES NOT EXIST>"&&($ze["%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xExHoYz1DaJHSj4FNhkBw3GNEZxT")||($ze["<ZSQLU>") { d %0dsqlA } else { throw } } QUIT SQLCODE=100
 q
%0dsqlA	n %xxsql
	s %xxsql("S",1)="SELECT ID FROM SQLUser . InsertProcess_MessagesReceived WHERE ID = :%pVals(1) AND ( %ID <> :%pID OR :%pID IS NULL )"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","DEBUG")=$c(1),%xxsql("M","FORKNETDMN")=$c(1)
	s %xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1)
	s %xxsql("M","USELOST")=$c(1),%xxsql("M","ZVERSION")=$c(1),%xxsql("I","%occErrors")="",%xxsql("I","%occSqlfunc")="",%xxsql("I","%sySite")=""
	s %xxsql("I","%sySt")="",%xxsql("I","%sySystem")="",%xxsql("I","EnsConstants")="",%xxsql("I","EnsErrors")="",%xxsql("I","EnsUtil")=""
	s %xxsql("I","Ensemble")="",%xxsql("NS")="PROJECT1"
	d BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","User",0,"",),,"User.InsertProcessMessagesReceived.CLS")
	q
%SQLCheckUniqueIndices(pIndices,pOK)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLCheckUniqueIndices")
%SQLCheckUniqueKeys(pConNumber,pFromOrig=0,pUpdate=0,pVals...)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLCheckUniqueKeys")
%SQLCopyIcolIntoName()
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLCopyIcolIntoName")
%SQLCopyNameIntoIcol()
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLCopyNameToIcol")
%SQLCreateInsDelTables(pInsTrigObj,pDelTrigObj)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLCreateInsDelTables")
%SQLDefineiDjVars(%d,subs,master)
	QUIT
%SQLDelete(%rowid,%check,%tstart=1,%mv=0,%polymorphic=0)
	// SQL DELETE method for table SQLUser.InsertProcess_MessagesReceived
	new bva,ce,%d,dc,%e,%ele,%itm,%key,%l,%nc,omcall,%oper,%pos,%s,sn,sqlcode,subs set %oper="DELETE",sqlcode=0,%ROWID=%rowid,%d(1)=%rowid,%e(1)=%rowid,%d(0)=$p(%d(1),"||",1),%d(3)=$p(%d(1),"||",2),subs(6)=$p(%d(0),"||",1),%l=$c(0)
	if '$d(%0CacheSQLRA) { new %0CacheSQLRA set omcall=1 }
	if '$a(%check,2) { new %ls if $tlevel,$i(%0CacheLock("User.InsertProcessMessagesReceived"))>$zu(156,50,1) { lock +^Ens.BusinessProcessD:$zu(115,4) lock:$t -^Ens.BusinessProcessD set %ls=$s($t:2,1:0) } else { lock +^Ens.BusinessProcessD(subs(6),"received",%d(3)):$zu(115,4) set %ls=$t } set:%ls=2 $e(%check,2)=$c(1) set:%ls=1 $e(%l)=$c(1) if '%ls { set SQLCODE=-110,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler40",,%oper,"SQLUser"_"."_"InsertProcess_MessagesReceived",$g(%d(1))) RETURN  }} if %tstart { TSTART:($zu(115,1)=1)||('$TLEVEL&&($zu(115,1)=2))  }
	set $zt="ERRORDelete"
	if '$a(%check),'$zu(115,7) do  if sqlcode set SQLCODE=sqlcode do ..%SQLEExit() QUIT  
	. new %fk,%k,%p,%st,%t,%z set %k="",%p("%1")="%d(1),",%p("IDKEY")="%d(0),%d(3),,"
	. for  quit:sqlcode<0  set %k=$o(^rINDEXEXT("F","User.InsertProcessMessagesReceived",%k)) quit:%k=""  set %t="" for  set %t=$o(^rINDEXEXT("F","User.InsertProcessMessagesReceived",%k,"f",%t)) quit:%t=""  set %st=(%t="User.InsertProcessMessagesReceived") set %fk="" for  set %fk=$o(^rINDEXEXT("F","User.InsertProcessMessagesReceived",%k,"f",%t,%fk)) quit:%fk=""  x "set %z=$classmethod(%t,%fk_""SQLFKeyRefAction"",%st,%k,$a(%check,2),"_%p(%k)_")" if %z set sqlcode=-124 quit  
	set ce="" for  { set ce=$order(^oddSQL("SQLUser","InsertProcess_MessagesReceived","DC",ce)) quit:ce=""   do $classmethod(ce,"%SQLDeleteChildren",%d(1),%check,.sqlcode) quit:sqlcode<0  } if sqlcode<0 { set SQLCODE=sqlcode do ..%SQLEExit() QUIT } // Delete any children
	if '$a(%check,3) {
	}
	k ^Ens.BusinessProcessD(subs(6),"received",%d(3))
	do ..%SQLUnlock() TCOMMIT:%tstart&&($zu(115,1)=1)
	set SQLCODE=0 kill:$g(omcall) %0CacheSQLRA
	QUIT
ERRORDelete	set $zt="",SQLCODE=-415,%msg=$s($g(%msg)'="":%msg_" -- ",1:"")_$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler51",,%oper,"SQLUser"_"."_"InsertProcess_MessagesReceived",$ze) if $ze["<FRAMESTACK>" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler52",,$ze,%oper,"SQLUser"_"."_"InsertProcess_MessagesReceived") do ##Class(%SYS.System).WriteToConsoleLog(%msg) if ($zu(67,10,$j)=1)||($zu(67,10,$j)=3) { write !,%msg h 3 } HALT  } do ..%SQLEExit() QUIT
	Return
%SQLDeleteChildren(%parent,%check,sqlcode)
	// Delete all rows where InsertProcess = :%parent
	new %ROWCOUNT,%ROWID,SQLCODE
	set:$a(%check,2)=2 $e(%check,2)=$c(0)
	 ;---&sql(DELETE %USECHECKVARIABLE FROM SQLUser.InsertProcess_MessagesReceived WHERE InsertProcess = :%parent)
 	 ;--- ** SQL PUBLIC Variables: %parent, SQLCODE
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xE56ugwRJkQi7oaDxK2usoAglaQz","%New") } catch { if $ze["<CLASS DOES NOT EXIST>"&&($ze["%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xE56ugwRJkQi7oaDxK2usoAglaQz")||($ze["<ZSQLU>") { d %0dsqlC } else { throw } }
	set:SQLCODE<0 sqlcode=SQLCODE QUIT  
 q
%0dsqlC	n %xxsql
	s %xxsql("S",1)="DELETE %USECHECKVARIABLE FROM SQLUser . InsertProcess_MessagesReceived WHERE InsertProcess = :%parent"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","DEBUG")=$c(1),%xxsql("M","FORKNETDMN")=$c(1)
	s %xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1)
	s %xxsql("M","USELOST")=$c(1),%xxsql("M","ZVERSION")=$c(1),%xxsql("I","%occErrors")="",%xxsql("I","%occSqlfunc")="",%xxsql("I","%sySite")=""
	s %xxsql("I","%sySt")="",%xxsql("I","%sySystem")="",%xxsql("I","EnsConstants")="",%xxsql("I","EnsErrors")="",%xxsql("I","EnsUtil")=""
	s %xxsql("I","Ensemble")="",%xxsql("NS")="PROJECT1"
	d BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","User",0,"",),,"User.InsertProcessMessagesReceived.CLS")
	q
%SQLDeleteTempStreams()
	// Delete all temporary streams
	QUIT
%SQLEExit()
	do:%oper'="DELETE" ..%SQLUnlock2() do ..%SQLUnlock() 
	do ..%SQLUnlockRef()
	if %tstart,$zu(115,1)=1,$TLEVEL { set %tstart=0 TROLLBACK 1 } kill:$g(omcall) %0CacheSQLRA QUIT  
	Return
%SQLExists(pLockOnly=0,pUnlockRef,%pVal...)
	// SQL Foreign Key validation entry point for Key %1.  Called by FKeys that reference this Key to see if the row is defined
	new id set id=%pVal(1)
	if pLockOnly>=0 { if '..%SQLGetLock(id,1,.pUnlockRef) { set sqlcode=-114,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler39",,"SQLUser"_"."_"InsertProcess_MessagesReceived"_":"_"%1") QUIT 0 } }
	if pLockOnly<1 {
		new qv set qv='..%SQLCheckUnique(0,,%pVal(1)) QUIT:pLockOnly=-1 qv
		do:'$g(pUnlockRef) ..%SQLReleaseLock(id,1) quit qv
	}
	else { do:'$g(pUnlockRef) ..%SQLReleaseLock(id,1) QUIT 1 }
	Return
%SQLFKeyDelLock()
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLFKeyDelLock")
%SQLFastInsert(%check)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLFastInsert")
%SQLFieldValidate()
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLFieldValidate")
%SQLGetLock(pRowId,pShared=0,pUnlockRef)
	if $tlevel,$i(%0CacheLock("User.InsertProcessMessagesReceived"))>$zu(156,50,1) { new s set s=$e("S",pShared) lock +^Ens.BusinessProcessD#s:$zu(115,4) lock:$t -^Ens.BusinessProcessD#s QUIT $s($t:2,1:0) } 
	QUIT ..%SQLAcquireLock(pRowId,pShared,.pUnlockRef)
%SQLGetOld(%rowid,%d,%e,sqlcode)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLGetOld")
%SQLGetOldAll()
	// Get all old data values
	new SQLCODE,%ROWCOUNT
	 ;---&sql(SELECT MessagesReceived INTO :%e() FROM %IGNOREINDEX * SQLUser.InsertProcess_MessagesReceived WHERE ID=:%rowid)
 	 ;--- ** SQL PUBLIC Variables: %e, %rowid, SQLCODE
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xESHeicuijzJIowIr4IFliqy0jV5","%New") } catch { if $ze["<CLASS DOES NOT EXIST>"&&($ze["%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xESHeicuijzJIowIr4IFliqy0jV5")||($ze["<ZSQLU>") { d %0dsqlE } else { throw } }
	set sqlcode=SQLCODE QUIT:sqlcode'=0
	QUIT
 q
%0dsqlE	n %xxsql
	s %xxsql("S",1)="SELECT MessagesReceived INTO :%e() FROM %IGNOREINDEX * SQLUser . InsertProcess_MessagesReceived WHERE ID = :%rowid"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","DEBUG")=$c(1),%xxsql("M","FORKNETDMN")=$c(1)
	s %xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1)
	s %xxsql("M","USELOST")=$c(1),%xxsql("M","ZVERSION")=$c(1),%xxsql("I","%occErrors")="",%xxsql("I","%occSqlfunc")="",%xxsql("I","%sySite")=""
	s %xxsql("I","%sySt")="",%xxsql("I","%sySystem")="",%xxsql("I","EnsConstants")="",%xxsql("I","EnsErrors")="",%xxsql("I","EnsUtil")=""
	s %xxsql("I","Ensemble")="",%xxsql("NS")="PROJECT1"
	d BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","User",0,"",),,"User.InsertProcessMessagesReceived.CLS")
	q
%SQLGetOldIndex(%rowid,%d,pF=0,sqlcode)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLGetOldIndex")
%SQLInsert(%d,%check,%inssel,%vco,%tstart=1,%mv=0)
	// SQL INSERT method for table SQLUser.InsertProcess_MessagesReceived
	new bva,%ele,%itm,%key,%f,%l,%n,%nc,%oper,%pos,%s,sqlcode,sn,subs,unlockref set %oper="INSERT",sqlcode=0,%l=$c(0,0,0),unlockref=1
	if $a(%check,7) { new %diu merge %diu=%d }
	set:$d(%d(0)) subs(6)=$p(%d(0),"||",1)
	if '$a(%check),'..%SQLValidateFields(.sqlcode) { set SQLCODE=sqlcode RETURN "" }
	do:'$a(%check,8) ..%SQLNormalizeFields()
	if %tstart { TSTART:($zu(115,1)=1)||('$TLEVEL&&($zu(115,1)=2))  } set $zt="ERRORInsert"
	if '$a(%check),$g(%d(0))'="",'##class(User.InsertProcess).%SQLExists($s($a(%check,2)=1:-1,1:0),.unlockref,%d(0)) {
		if sqlcode<0 { set SQLCODE=sqlcode if SQLCODE=-114 { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler56",,%oper,"SQLUser"_"."_"InsertProcess",$g(%d(0))) } } else { set SQLCODE=-104,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler9",,"SQLUser"_"."_"InsertProcess_MessagesReceived") }
		do ..%SQLEExit() RETURN ""
	}
	if '$a(%check) { if $g(%d(0))="" { do ..%SQLMissing("InsertProcess") set SQLCODE=sqlcode do ..%SQLEExit() RETURN "" } }
	set:'$d(%d(3)) %d(3)=$i(^Ens.BusinessProcessD(subs(6),"received")) set %d(1)=%d(0)_"||"_%d(3),subs(6)=$p(%d(0),"||",1)
	if '$a(%check) {
		do {
			if $g(%vco)'="" { d @%vco quit:sqlcode<0  }
				// Constraint IDKEY
				if '$a(%check,2) { lock +^Ens.BusinessProcessD("IDKEY",%d(0),%d(3)):$zu(115,4) if $t { set $e(%l,2)=$c(1) } else { do ..%SQLUnlockError("IDKEY") quit  } }
				if '$a(%check,7) { if '..IDKEYSQLCheckUnique(0,,%d(0),%d(3)) { set sqlcode=-119,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler10",,"SQLUser"_"."_"InsertProcess_MessagesReceived","IDKEY","InsertProcess"_"="_$$quoter^%apiSQL($g(%d(0)))_","_"element_key"_"="_$$quoter^%apiSQL($g(%d(3)))) quit  }} // INSERT
				else { new tID set tID=..IDKEYSQLFindRowIDByConstraint($lb(%d(0),%d(3)),1) if tID'="" { kill %d merge %d=%diu kill %diu do ..%SQLUpdate(tID,%check,.%d),..%SQLUnlock2(),..%SQLUnlockRef() set $e(%check,7)=$c(2) quit  }} // INSERT OR UPDATE
		} while 0
		QUIT:$a(%check,7)=2 $s('SQLCODE:tID,1:"")				// INSERT became UPDATE
		if sqlcode<0 { set SQLCODE=sqlcode do ..%SQLEExit() RETURN "" }		// A constraint failed
	}
	if '$a(%check,2) { new %ls if $tlevel,$i(%0CacheLock("User.InsertProcessMessagesReceived"))>$zu(156,50,1) { lock +^Ens.BusinessProcessD:$zu(115,4) lock:$t -^Ens.BusinessProcessD set %ls=$s($t:2,1:0) } else { lock +^Ens.BusinessProcessD(subs(6),"received",%d(3)):$zu(115,4) set %ls=$t } set:%ls=2 $e(%check,2)=$c(1) set:%ls=1 $e(%l)=$c(1) if '%ls set SQLCODE=-110,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler40",,%oper,"SQLUser"_"."_"InsertProcess_MessagesReceived",$g(%d(1))) do ..%SQLEExit() RETURN ""  }
	set ^Ens.BusinessProcessD(subs(6),"received",%d(3))=$g(%d(2))
	lock:$a(%l,2) -^Ens.BusinessProcessD("IDKEY",%d(0),%d(3))#"D" 
	lock:$a(%l) -^Ens.BusinessProcessD(subs(6),"received",%d(3))
	TCOMMIT:%tstart&&($zu(115,1)=1)
	do ..%SQLUnlockRef()
	set SQLCODE=0
	QUIT %d(1) 			// %SQLInsert
ERRORInsert	set $zt="",SQLCODE=-415,%msg=$s($g(%msg)'="":%msg_" -- ",1:"")_$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler51",,%oper,"SQLUser"_"."_"InsertProcess_MessagesReceived",$ze)
	if $ze["<FRAMESTACK>" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler52",,$ze,%oper,"SQLUser"_"."_"InsertProcess_MessagesReceived") do ##Class(%SYS.System).WriteToConsoleLog(%msg) if ($zu(67,10,$j)=1)||($zu(67,10,$j)=3) { write !,%msg h 3 } HALT  }
	do ..%SQLEExit()
	RETURN ""
%SQLInsertComputes(view=0)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLInsertComputes")
%SQLInsertStreams(pVal,pClassname,pProperty,pField,pChangeEmptyToNull,pOIDType,sqlcode,%msg) public {
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLInsertStreams") }
%SQLInvalid(pIcol,pVal) public {
	set:$l($g(pVal))>40 pVal=$e(pVal,1,40)_"..." do:'$d(%n) ..%SQLnBuild() set %msg=$s($g(%msg)'="":%msg_$c(13,10),1:"")_$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler37",,"SQLUser"_"."_"InsertProcess_MessagesReceived"_"."_$lg(%n,pIcol),$s($g(pVal)'="":$s(pVal="":"<NULL>",pVal=$c(0):"<EMPTY STRING>",1:"'"_pVal_"'"),1:"")),sqlcode=$s(%oper="INSERT":-104,1:-105)
	QUIT sqlcode }
%SQLInvalid2(ficol,val,char) [ sqlcode ] public {
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLInvalid2") }
%SQLMVDelete(oref,flags,%rowid,oldrec)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLMVDelete")
%SQLMVIndexDelete(%e)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLMVIndexDelete")
%SQLMVIndexInsert(%d)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLMVIndexInsert")
%SQLMVIndexUpdate(%d,%e)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLMVIndexUpdate")
%SQLMVInsert(oref,flags,%rowid,newrec)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLMVInsert")
%SQLMVUpdate(oref,flags,%rowid,newrec,oldrec)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLMVUpdate")
%SQLMissing(fname)
	set sqlcode=-108,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler47",,fname,"SQLUser"_"."_"InsertProcess_MessagesReceived") quit
%SQLNormalizeCompFields()
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLNormalizeCompFields")
%SQLNormalizeFields()
	set:$g(%d(0))'="" %d(0)=$select(%d(0)=$c(0)&&$zu(115,13):"",1:%d(0)\1)
	QUIT
%SQLPurgeIndices(pIndices="",pLockExtent=0,pIgnoreIndexList="")
	QUIT ##class(User.InsertProcess).%PurgeIndices(pIndices,pLockExtent,pIgnoreIndexList)
%SQLQuickBulkInsert(%nolock=0)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLQuickBulkInsert")
%SQLQuickBulkLoad(%rowidlist,%nolock=0,pkey=0)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLQuickBulkLoad")
%SQLQuickBulkSave(%nolock=0)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLQuickBulkSave")
%SQLQuickBulkUpdate(%nolock=0)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLQuickBulkUpdate")
%SQLQuickDelete(%rowid,%nolock=0,pkey=0)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLQuickDelete")
%SQLQuickDeleteChildren(%parent,%nolock=0,pkey=0)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLQuickDeleteChildren")
%SQLQuickFindPKeyByRowID(%rowid)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLQuickFindPKeyByRowID")
%SQLQuickFindRowIDByPKey(pPKey,pOutput=1,pInternal=0)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLQuickFindRowIDByPKey")
%SQLQuickInsert(d,%nolock=0,pkey=0,parentpkey=0)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLQuickInsert")
%SQLQuickLoad(%rowid,%nolock=0,pkey=0,qq=0)
	// Get fields from row where SQLRowID=%rowid
	new d,i,il,subs set:%nolock=2 %nolock=1
	if %nolock=0 { if '..%SQLAcquireLock(%rowid) { set %qrc=114,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler45",,"SQLUser"_"."_"InsertProcess_MessagesReceived",%rowid),%ROWCOUNT=0 QUIT  } set:$zu(115,2) il=$zu(115,2,0) }
	set d(1)=%rowid,d(0)=$p(d(1),"||",1),d(3)=$p(d(1),"||",2),subs(6)=$p(d(0),"||",1)
	new s,ul set ul=0,d(1)=%rowid if $zu(115,2)=1 { lock +^Ens.BusinessProcessD(subs(6),"received",d(3))#"S":$zu(115,4) if $t { set ul=1 } else { set %qrc=114,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler46",,"SQLUser"_"."_"InsertProcess_MessagesReceived",%rowid),%ROWCOUNT=0 quit  } }
	if '$d(^Ens.BusinessProcessD(subs(6),"received",d(3)),s) { set SQLCODE=100,%qrc=100 if %nolock=0 { do:$g(il) $zu(115,2,il) }} else { set SQLCODE=0
	if %nolock=0 { if $zu(115,1)=1 { TSTART  } elseif '$TLEVEL,$zu(115,1)=2 { TSTART  }} set d(2)=s  }
	do ..%SQLQuickLogicalToOdbc(.d)
	if SQLCODE set %ROWCOUNT=0 set:SQLCODE<0 SQLCODE=-SQLCODE lock:ul -^Ens.BusinessProcessD(subs(6),"received",d(3))#"SI" set %qrc=SQLCODE QUIT
	set:qq d=$zobjexport("User.InsertProcessMessagesReceived",18),d=$zobjexport(4,18) set i=-1 for  { set i=$o(d(i)) quit:i=""  set d=$zobjexport(d(i),18) } set %qrc=0,%ROWCOUNT=1 lock:ul -^Ens.BusinessProcessD(subs(6),"received",d(3))#"SI" if %nolock=0 { do ..%SQLReleaseLock(%rowid,0,0) do:$g(il) $zu(115,2,il) } QUIT
	Return
%SQLQuickLoadChildren(%parref,%nolock=0,pkey=0,returnpkey=0)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLQuickLoadChildren")
%SQLQuickLogicalToOdbc(%d)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLLogicalToOdbcFields")
%SQLQuickOdbcToLogical(%d)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLQuickOdbcToLogical")
%SQLQuickUpdate(%rowid,d,%nolock=0,pkey=0)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLQuickUpdate")
%SQLReleaseLock(%rowid,s=0,i=0,e="")
	new %d,subs
	set %d(1)=%rowid,%d(0)=$p(%d(1),"||",1),%d(3)=$p(%d(1),"||",2),subs(6)=$p(%d(0),"||",1) set s=$e("S",s)_$e("D",i)
	lock -^Ens.BusinessProcessD(subs(6),"received",%d(3))#s
	set:i&&($g(%0CacheLock("User.InsertProcessMessagesReceived"))) %0CacheLock("User.InsertProcessMessagesReceived")=%0CacheLock("User.InsertProcessMessagesReceived")-1
	QUIT
%SQLReleaseTableLock(s=0,i=0)
	set s=$e("S",s)_$e("D",i) lock -^Ens.BusinessProcessD#s QUIT 1
	Return
%SQLStorageValidation()
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLStorageValidation")
%SQLTrigDelTab()
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLTrigDelTab")
%SQLTrigInsTab()
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLTrigInsTab")
%SQLUnlock()
	lock:$a(%l) -^Ens.BusinessProcessD(subs(6),"received",%d(3))
	QUIT
%SQLUnlock2()
	lock:$a(%l,2) -^Ens.BusinessProcessD("IDKEY",%d(0),%d(3))#"D" QUIT
%SQLUnlockError(cname)
	set sqlcode=-110 if %oper="DELETE" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler48",,"SQLUser"_"."_"InsertProcess_MessagesReceived",cname) } else { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler49",,"SQLUser"_"."_"InsertProcess_MessagesReceived",cname) } quit
	Return
%SQLUnlockRef()
	for %itm=2:1:$g(unlockref) {
		if $lg(unlockref(%itm))'="%UnlockId" { lock -@$lg(unlockref(%itm))#$lg(unlockref(%itm),3) }
		else { do $classmethod($lg(unlockref(%itm),2),$lg(unlockref(%itm)),$lg(unlockref(%itm),3),1,1) }
		set:$g(%0CacheLock($lg(unlockref(%itm),2))) %0CacheLock($lg(unlockref(%itm),2))=%0CacheLock($lg(unlockref(%itm),2))-1
	}
	QUIT
%SQLUpdate(%rowid,%check,%d,%vco,%tstart=1,%mv=0,%polymorphic=0,%soid)
	// SQL UPDATE method for table SQLUser.InsertProcess_MessagesReceived
	new %e,bva,%ele,%itm,%key,%f,%l,%n,%nc,%oper,%pos,%s,icol,omcall,s,sn,sqlcode,subs,t set %oper="UPDATE",sqlcode=0,%ROWID=%rowid,$e(%e,1)=$c(0),%l=$c(0,0,0)
	if '$d(%0CacheSQLRA) { new %0CacheSQLRA set omcall=1 }
	if '$a(%check,7) {
		if '$a(%check),'..%SQLValidateFields(.sqlcode) { set SQLCODE=sqlcode QUIT  }
		do:'$a(%check,8) ..%SQLNormalizeFields()
	}
	if ($d(%d(1))&&($g(%d(1))'=%rowid))||($d(%d(0))&&($g(%d(0))'=$p(%rowid,"||",1)))||($d(%d(3))&&($g(%d(3))'=$p(%rowid,"||",2))) { set SQLCODE=-107,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler17",,"'ID', 'InsertProcess', or 'element_key'","SQLUser"_"."_"InsertProcess_MessagesReceived") QUIT  }
	for icol=2:1:3 { set $e(%e,icol)=$c($d(%d(icol))) }
	set %d(1)=%rowid,%e(1)=%rowid,%d(0)=$p(%d(1),"||",1),%d(3)=$p(%d(1),"||",2),subs(6)=$p(%d(0),"||",1)
	if '$a(%check,2) { new %ls if $tlevel,$i(%0CacheLock("User.InsertProcessMessagesReceived"))>$zu(156,50,1) { lock +^Ens.BusinessProcessD:$zu(115,4) lock:$t -^Ens.BusinessProcessD set %ls=$s($t:2,1:0) } else { lock +^Ens.BusinessProcessD(subs(6),"received",%d(3)):$zu(115,4) set %ls=$t } set:%ls=2 $e(%check,2)=$c(1) set:%ls=1 $e(%l)=$c(1) if '%ls { set SQLCODE=-110,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler40",,%oper,"SQLUser"_"."_"InsertProcess_MessagesReceived",$g(%d(1))) RETURN  }} if %tstart { TSTART:($zu(115,1)=1)||('$TLEVEL&&($zu(115,1)=2))  }
	set $zt="ERRORUpdate"
	if $g(%vco)'="" { do ..%SQLGetOldAll() if sqlcode { set SQLCODE=-109,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler59",,"SQLUser"_"."_"InsertProcess_MessagesReceived",%rowid) do ..%SQLEExit() QUIT  } set:'$d(%d(2)) %d(2)=%e(2) set:%d(2)=%e(2) $e(%e,2)=$c(0)}
	if '$a(%check) {
		do {
			if $g(%vco)'="" { d @%vco quit:sqlcode<0  }
		} while 0
		if sqlcode { set SQLCODE=sqlcode do ..%SQLEExit() QUIT  }
	}
	set:$a(%e,2) ^Ens.BusinessProcessD(subs(6),"received",%d(3))=$g(%d(2))
	do ..%SQLUnlock2()
	do ..%SQLUnlock() TCOMMIT:%tstart&&($zu(115,1)=1)
	set SQLCODE=0 kill:$g(omcall) %0CacheSQLRA
	QUIT
ERRORUpdate	set $zt="",SQLCODE=-415,%msg=$s($g(%msg)'="":%msg_" -- ",1:"")_$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler51",,%oper,"SQLUser"_"."_"InsertProcess_MessagesReceived",$ze) if $ze["<FRAMESTACK>" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler52",,$ze,%oper,"SQLUser"_"."_"InsertProcess_MessagesReceived") do ##Class(%SYS.System).WriteToConsoleLog(%msg) if ($zu(67,10,$j)=1)||($zu(67,10,$j)=3) { write !,%msg h 3 } HALT  } do ..%SQLEExit() QUIT  
	Return
%SQLUpdateComputes(view=0)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLUpdateComputes")
%SQLUpdateStreams(pNew,pOld,pClassname,pProperty,pField,pChangeEmptyToNull,pOIDType,sqlcode,%msg,pAllowOid=0) public {
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLUpdateStreams") }
%SQLValidateCompFields(sqlcode)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLValidateCompFields")
%SQLValidateFields(sqlcode)
	if $g(%d(3))'="",'(($l(%d(3))'>50)) { set sqlcode=..%SQLInvalid(3+1,%d(3)) } 
	QUIT 'sqlcode
%SQLicompView()
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLicompView")
%SQLnBuild() public {
	set %n=$lb("ID","ID","MessagesReceived","element_key")
	QUIT }
%ValidateIndices(idxList="",autoCorrect=0,lockOption=1,multiProcess=1,mapList,verbose=1,errors)
	w !,"There are no indices to validate for class 'User.InsertProcessMessagesReceived'"
	QUIT 1
zIDKEYSQLCheckUnique(pFromOrig=0,%pID,%pVals...)
	 ;---&sql(SELECT InsertProcess,element_key FROM SQLUser.InsertProcess_MessagesReceived WHERE  InsertProcess=:%pVals(1) AND element_key=:%pVals(2) AND (%ID <> :%pID OR :%pID IS NULL)) QUIT SQLCODE=100
 	 ;--- ** SQL PUBLIC Variables: %pID, %pVals, SQLCODE
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xE0unJKxV4ixrRvTRtSRm4fM1s2z","%New") } catch { if $ze["<CLASS DOES NOT EXIST>"&&($ze["%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xE0unJKxV4ixrRvTRtSRm4fM1s2z")||($ze["<ZSQLU>") { d %0dsqlG } else { throw } } QUIT SQLCODE=100
 q
%0dsqlG	n %xxsql
	s %xxsql("S",1)="SELECT InsertProcess , element_key FROM SQLUser . InsertProcess_MessagesReceived WHERE InsertProcess = :%pVals(1) AND element_key = :%pVals(2) AND ( %ID <> :%pID OR :%pID IS NULL )"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","DEBUG")=$c(1),%xxsql("M","FORKNETDMN")=$c(1)
	s %xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1)
	s %xxsql("M","USELOST")=$c(1),%xxsql("M","ZVERSION")=$c(1),%xxsql("I","%occErrors")="",%xxsql("I","%occSqlfunc")="",%xxsql("I","%sySite")=""
	s %xxsql("I","%sySt")="",%xxsql("I","%sySystem")="",%xxsql("I","EnsConstants")="",%xxsql("I","EnsErrors")="",%xxsql("I","EnsUtil")=""
	s %xxsql("I","Ensemble")="",%xxsql("NS")="PROJECT1"
	d BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","User",0,"",),,"User.InsertProcessMessagesReceived.CLS")
	q
zIDKEYSQLExists(pLockOnly=0,pUnlockRef,%pVal...)
	// SQL Foreign Key validation entry point for Key IDKEY.  Called by FKeys that reference this Key to see if the row is defined
	new id set id=..IDKEYSQLFindRowIDByConstraint($lb(%pVal(1),%pVal(2)),1) QUIT:SQLCODE $s('pLockOnly:0,1:1)
	if pLockOnly>=0 { if '..%SQLGetLock(id,1,.pUnlockRef) { set sqlcode=-114,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler39",,"SQLUser"_"."_"InsertProcess_MessagesReceived"_":"_"IDKEY") QUIT 0 } }
	if pLockOnly<1 {
		new qv set qv='..IDKEYSQLCheckUnique(0,,%pVal(1),%pVal(2)) QUIT:pLockOnly=-1 qv
		do:'$g(pUnlockRef) ..%SQLReleaseLock(id,1) quit qv
	}
	else { do:'$g(pUnlockRef) ..%SQLReleaseLock(id,1) QUIT 1 }
	Return
zIDKEYSQLFindRowIDByConstraint(%con,pInternal=0)
	// Get ROWID value for UNIQUE Key IDKEY value given in %con
	new %d,id,rtm set rtm=$zu(115,5,$s(pInternal:0,1:1)) set %d(0)=$lg(%con,1) set %d(3)=$lg(%con,2)
	set %ROWCOUNT=0 set:'pInternal %qrc=0
	 ;---&sql(SELECT %ID INTO :id FROM SQLUser.InsertProcess_MessagesReceived WHERE InsertProcess = :%d(0) AND element_key = :%d(3))
 	 ;--- ** SQL PUBLIC Variables: %d, SQLCODE, id
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xEDbJqNCpCrWwgBQocCrTYUY2bYF","%New") } catch { if $ze["<CLASS DOES NOT EXIST>"&&($ze["%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xEDbJqNCpCrWwgBQocCrTYUY2bYF")||($ze["<ZSQLU>") { d %0dsqlI } else { throw } }
	do $zu(115,5,rtm)
	if pInternal { QUIT:'SQLCODE $g(id) RETURN "" }
	if SQLCODE { set:SQLCODE<0 %qrc=-SQLCODE set:'%ROWCOUNT&&(SQLCODE=100) id="",%qrc=0 } set d=$zobjexport(id,18) QUIT
	Return
 q
%0dsqlI	n %xxsql
	s %xxsql("S",1)="SELECT %ID INTO :id FROM SQLUser . InsertProcess_MessagesReceived WHERE InsertProcess = :%d(0) AND element_key = :%d(3)"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","DEBUG")=$c(1),%xxsql("M","FORKNETDMN")=$c(1)
	s %xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1)
	s %xxsql("M","USELOST")=$c(1),%xxsql("M","ZVERSION")=$c(1),%xxsql("I","%occErrors")="",%xxsql("I","%occSqlfunc")="",%xxsql("I","%sySite")=""
	s %xxsql("I","%sySt")="",%xxsql("I","%sySystem")="",%xxsql("I","EnsConstants")="",%xxsql("I","EnsErrors")="",%xxsql("I","EnsUtil")=""
	s %xxsql("I","Ensemble")="",%xxsql("NS")="PROJECT1"
	d BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Runtime","","","User",0,"",),,"User.InsertProcessMessagesReceived.CLS")
	q
]]></Routine>


<Routine name="User.InsertProcessMessagesSent.1" type="INT" languagemode="0" generated="1" timestamp="65834,40438.857827"><![CDATA[
 ;User.InsertProcessMessagesSent.1
 ;Generated for class User.InsertProcessMessagesSent.  Do NOT edit. 03/31/2021 11:13:58AM
 ;;736A6C71;User.InsertProcessMessagesSent
 ;
SQLUPPER(v,l) { quit $zu(28,v,7,$g(l,32767)) }
ALPHAUP(v,r) { quit $zu(28,v,6) }
STRING(v,l) { quit $zu(28,v,9,$g(l,32767)) }
SQLSTRING(v,l) { quit $zu(28,v,8,$g(l,32767)) }
UPPER(v) { quit $zu(28,v,5) }
MVR(v) { quit $zu(28,v,2) }
TRUNCATE(v,l) { quit $e(v,1,$g(l,3641144)) }
%SQLAcquireLock(%rowid,s=0,unlockref=0)
	new %d,gotlock,subs
	set %d(1)=%rowid,%d(0)=$p(%d(1),"||",1),%d(3)=$p(%d(1),"||",2),subs(6)=$p(%d(0),"||",1) set s=$e("S",s)
	lock +^Ens.BusinessProcessD(subs(6),"sent",%d(3))#s:$zu(115,4) set gotlock=$t
	set:gotlock&&unlockref unlockref=unlockref+1,unlockref(unlockref)=$lb($name(^Ens.BusinessProcessD(subs(6),"sent",%d(3))),"User.InsertProcessMessagesSent",s_"D")
	QUIT gotlock
%SQLAcquireTableLock(s=0,SQLCODE,to="")
	set s=$e("S",s) set:to="" to=$zu(115,4) lock +^Ens.BusinessProcessD#s:to QUIT:$t 1 set SQLCODE=-110 if s="S" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler35",,"SQLUser"_"."_"InsertProcess_MessagesSent") } else { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler36",,"SQLUser"_"."_"InsertProcess_MessagesSent") } QUIT 0
	Return
%SQLAfterTriggers()
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLAfterTriggers")
%SQLBeforeTriggers()
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLBeforeTriggers")
%SQLBuildIndices(pIndices="",pLockFlag=0,pStartID="",pEndID="",pIgnoreIndexList="")
	QUIT ##class(User.InsertProcess).%BuildIndices(pIndices,,pLockFlag,,pStartID,pEndID,pIgnoreIndexList)
%SQLBuildPurgeIndexForRow(pIndices="",pActions="BP",pLockRow=1,%d,%e,pIgnoreIndexList="")
	// Purge and build index nodes for a single row using given values, return Status Code
	new sn,tSC,tLock set tSC=1,pActions=$zcvt(pActions,"U")
	try {
		if $g(%d(1))="" { set tSC=$select(+tSC:$$Error^%apiOBJ(5521,-108,"RowID value must be specified in %d(1) when calling %SQLBuildPurgeIndexForRow for table 'SQLUser.InsertProcess_MessagesSent'"),1:$$AppendStatus^%occSystem(tSC,$$Error^%apiOBJ(5521,-108,"RowID value must be specified in %d(1) when calling %SQLBuildPurgeIndexForRow for table 'SQLUser.InsertProcess_MessagesSent'"))) RETURN tSC }
		if pLockRow { if '..%SQLAcquireLock(%d(1)) { set tSC=$select(+tSC:$$Error^%apiOBJ(5521,-114,"Unable to lock row in table 'SQLUser.InsertProcess_MessagesSent' with %ID = '"_%d(1)_"'"),1:$$AppendStatus^%occSystem(tSC,$$Error^%apiOBJ(5521,-114,"Unable to lock row in table 'SQLUser.InsertProcess_MessagesSent' with %ID = '"_%d(1)_"'"))) RETURN tSC  } else { set tLock=1 }}
		set %d(0)=$p(%d(1),"||",1),%d(3)=$p(%d(1),"||",2)
		set subs(6)=$p(%d(0),"||",1)
		if pLockRow { do ..%SQLReleaseLock(%d(1),0,0) set tLock=0 }
	}
	catch {
		if $g(tLock) { do ..%SQLReleaseLock(%d(1),0,0) }
		set tSC=$select(+tSC:$$Error^%apiOBJ(5594,$ze),1:$$AppendStatus^%occSystem(tSC,$$Error^%apiOBJ(5594,$ze)))
	}
	QUIT tSC
%SQLCheckUnique(pFromOrig=0,%pID,%pVals...)
	 ;---&sql(SELECT ID FROM SQLUser.InsertProcess_MessagesSent WHERE  ID=:%pVals(1) AND (%ID <> :%pID OR :%pID IS NULL)) QUIT SQLCODE=100
 	 ;--- ** SQL PUBLIC Variables: %pID, %pVals, SQLCODE
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xEIHY78sdquctUoAYk4bPjDe7G7T","%New") } catch { if $ze["<CLASS DOES NOT EXIST>"&&($ze["%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xEIHY78sdquctUoAYk4bPjDe7G7T")||($ze["<ZSQLU>") { d %0dsqlA } else { throw } } QUIT SQLCODE=100
 q
%0dsqlA	n %xxsql
	s %xxsql("S",1)="SELECT ID FROM SQLUser . InsertProcess_MessagesSent WHERE ID = :%pVals(1) AND ( %ID <> :%pID OR :%pID IS NULL )"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","DEBUG")=$c(1),%xxsql("M","FORKNETDMN")=$c(1)
	s %xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1)
	s %xxsql("M","USELOST")=$c(1),%xxsql("M","ZVERSION")=$c(1),%xxsql("I","%occErrors")="",%xxsql("I","%occSqlfunc")="",%xxsql("I","%sySite")=""
	s %xxsql("I","%sySt")="",%xxsql("I","%sySystem")="",%xxsql("I","EnsConstants")="",%xxsql("I","EnsErrors")="",%xxsql("I","EnsUtil")=""
	s %xxsql("I","Ensemble")="",%xxsql("NS")="PROJECT1"
	d BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","User",0,"",),,"User.InsertProcessMessagesSent.CLS")
	q
%SQLCheckUniqueIndices(pIndices,pOK)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLCheckUniqueIndices")
%SQLCheckUniqueKeys(pConNumber,pFromOrig=0,pUpdate=0,pVals...)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLCheckUniqueKeys")
%SQLCopyIcolIntoName()
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLCopyIcolIntoName")
%SQLCopyNameIntoIcol()
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLCopyNameToIcol")
%SQLCreateInsDelTables(pInsTrigObj,pDelTrigObj)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLCreateInsDelTables")
%SQLDefineiDjVars(%d,subs,master)
	QUIT
%SQLDelete(%rowid,%check,%tstart=1,%mv=0,%polymorphic=0)
	// SQL DELETE method for table SQLUser.InsertProcess_MessagesSent
	new bva,ce,%d,dc,%e,%ele,%itm,%key,%l,%nc,omcall,%oper,%pos,%s,sn,sqlcode,subs set %oper="DELETE",sqlcode=0,%ROWID=%rowid,%d(1)=%rowid,%e(1)=%rowid,%d(0)=$p(%d(1),"||",1),%d(3)=$p(%d(1),"||",2),subs(6)=$p(%d(0),"||",1),%l=$c(0)
	if '$d(%0CacheSQLRA) { new %0CacheSQLRA set omcall=1 }
	if '$a(%check,2) { new %ls if $tlevel,$i(%0CacheLock("User.InsertProcessMessagesSent"))>$zu(156,50,1) { lock +^Ens.BusinessProcessD:$zu(115,4) lock:$t -^Ens.BusinessProcessD set %ls=$s($t:2,1:0) } else { lock +^Ens.BusinessProcessD(subs(6),"sent",%d(3)):$zu(115,4) set %ls=$t } set:%ls=2 $e(%check,2)=$c(1) set:%ls=1 $e(%l)=$c(1) if '%ls { set SQLCODE=-110,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler40",,%oper,"SQLUser"_"."_"InsertProcess_MessagesSent",$g(%d(1))) RETURN  }} if %tstart { TSTART:($zu(115,1)=1)||('$TLEVEL&&($zu(115,1)=2))  }
	set $zt="ERRORDelete"
	if '$a(%check),'$zu(115,7) do  if sqlcode set SQLCODE=sqlcode do ..%SQLEExit() QUIT  
	. new %fk,%k,%p,%st,%t,%z set %k="",%p("%1")="%d(1),",%p("IDKEY")="%d(0),%d(3),,"
	. for  quit:sqlcode<0  set %k=$o(^rINDEXEXT("F","User.InsertProcessMessagesSent",%k)) quit:%k=""  set %t="" for  set %t=$o(^rINDEXEXT("F","User.InsertProcessMessagesSent",%k,"f",%t)) quit:%t=""  set %st=(%t="User.InsertProcessMessagesSent") set %fk="" for  set %fk=$o(^rINDEXEXT("F","User.InsertProcessMessagesSent",%k,"f",%t,%fk)) quit:%fk=""  x "set %z=$classmethod(%t,%fk_""SQLFKeyRefAction"",%st,%k,$a(%check,2),"_%p(%k)_")" if %z set sqlcode=-124 quit  
	set ce="" for  { set ce=$order(^oddSQL("SQLUser","InsertProcess_MessagesSent","DC",ce)) quit:ce=""   do $classmethod(ce,"%SQLDeleteChildren",%d(1),%check,.sqlcode) quit:sqlcode<0  } if sqlcode<0 { set SQLCODE=sqlcode do ..%SQLEExit() QUIT } // Delete any children
	if '$a(%check,3) {
	}
	k ^Ens.BusinessProcessD(subs(6),"sent",%d(3))
	do ..%SQLUnlock() TCOMMIT:%tstart&&($zu(115,1)=1)
	set SQLCODE=0 kill:$g(omcall) %0CacheSQLRA
	QUIT
ERRORDelete	set $zt="",SQLCODE=-415,%msg=$s($g(%msg)'="":%msg_" -- ",1:"")_$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler51",,%oper,"SQLUser"_"."_"InsertProcess_MessagesSent",$ze) if $ze["<FRAMESTACK>" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler52",,$ze,%oper,"SQLUser"_"."_"InsertProcess_MessagesSent") do ##Class(%SYS.System).WriteToConsoleLog(%msg) if ($zu(67,10,$j)=1)||($zu(67,10,$j)=3) { write !,%msg h 3 } HALT  } do ..%SQLEExit() QUIT
	Return
%SQLDeleteChildren(%parent,%check,sqlcode)
	// Delete all rows where InsertProcess = :%parent
	new %ROWCOUNT,%ROWID,SQLCODE
	set:$a(%check,2)=2 $e(%check,2)=$c(0)
	 ;---&sql(DELETE %USECHECKVARIABLE FROM SQLUser.InsertProcess_MessagesSent WHERE InsertProcess = :%parent)
 	 ;--- ** SQL PUBLIC Variables: %parent, SQLCODE
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xEeWO5JtBhDyQ9f1974ubC1CT6c5","%New") } catch { if $ze["<CLASS DOES NOT EXIST>"&&($ze["%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xEeWO5JtBhDyQ9f1974ubC1CT6c5")||($ze["<ZSQLU>") { d %0dsqlC } else { throw } }
	set:SQLCODE<0 sqlcode=SQLCODE QUIT  
 q
%0dsqlC	n %xxsql
	s %xxsql("S",1)="DELETE %USECHECKVARIABLE FROM SQLUser . InsertProcess_MessagesSent WHERE InsertProcess = :%parent"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","DEBUG")=$c(1),%xxsql("M","FORKNETDMN")=$c(1)
	s %xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1)
	s %xxsql("M","USELOST")=$c(1),%xxsql("M","ZVERSION")=$c(1),%xxsql("I","%occErrors")="",%xxsql("I","%occSqlfunc")="",%xxsql("I","%sySite")=""
	s %xxsql("I","%sySt")="",%xxsql("I","%sySystem")="",%xxsql("I","EnsConstants")="",%xxsql("I","EnsErrors")="",%xxsql("I","EnsUtil")=""
	s %xxsql("I","Ensemble")="",%xxsql("NS")="PROJECT1"
	d BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","User",0,"",),,"User.InsertProcessMessagesSent.CLS")
	q
%SQLDeleteTempStreams()
	// Delete all temporary streams
	QUIT
%SQLEExit()
	do:%oper'="DELETE" ..%SQLUnlock2() do ..%SQLUnlock() 
	do ..%SQLUnlockRef()
	if %tstart,$zu(115,1)=1,$TLEVEL { set %tstart=0 TROLLBACK 1 } kill:$g(omcall) %0CacheSQLRA QUIT  
	Return
%SQLExists(pLockOnly=0,pUnlockRef,%pVal...)
	// SQL Foreign Key validation entry point for Key %1.  Called by FKeys that reference this Key to see if the row is defined
	new id set id=%pVal(1)
	if pLockOnly>=0 { if '..%SQLGetLock(id,1,.pUnlockRef) { set sqlcode=-114,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler39",,"SQLUser"_"."_"InsertProcess_MessagesSent"_":"_"%1") QUIT 0 } }
	if pLockOnly<1 {
		new qv set qv='..%SQLCheckUnique(0,,%pVal(1)) QUIT:pLockOnly=-1 qv
		do:'$g(pUnlockRef) ..%SQLReleaseLock(id,1) quit qv
	}
	else { do:'$g(pUnlockRef) ..%SQLReleaseLock(id,1) QUIT 1 }
	Return
%SQLFKeyDelLock()
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLFKeyDelLock")
%SQLFastInsert(%check)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLFastInsert")
%SQLFieldValidate()
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLFieldValidate")
%SQLGetLock(pRowId,pShared=0,pUnlockRef)
	if $tlevel,$i(%0CacheLock("User.InsertProcessMessagesSent"))>$zu(156,50,1) { new s set s=$e("S",pShared) lock +^Ens.BusinessProcessD#s:$zu(115,4) lock:$t -^Ens.BusinessProcessD#s QUIT $s($t:2,1:0) } 
	QUIT ..%SQLAcquireLock(pRowId,pShared,.pUnlockRef)
%SQLGetOld(%rowid,%d,%e,sqlcode)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLGetOld")
%SQLGetOldAll()
	// Get all old data values
	new SQLCODE,%ROWCOUNT
	 ;---&sql(SELECT MessagesSent INTO :%e() FROM %IGNOREINDEX * SQLUser.InsertProcess_MessagesSent WHERE ID=:%rowid)
 	 ;--- ** SQL PUBLIC Variables: %e, %rowid, SQLCODE
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xE2TQYsg1zDTEozLpLGel1uuRJZG","%New") } catch { if $ze["<CLASS DOES NOT EXIST>"&&($ze["%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xE2TQYsg1zDTEozLpLGel1uuRJZG")||($ze["<ZSQLU>") { d %0dsqlE } else { throw } }
	set sqlcode=SQLCODE QUIT:sqlcode'=0
	QUIT
 q
%0dsqlE	n %xxsql
	s %xxsql("S",1)="SELECT MessagesSent INTO :%e() FROM %IGNOREINDEX * SQLUser . InsertProcess_MessagesSent WHERE ID = :%rowid"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","DEBUG")=$c(1),%xxsql("M","FORKNETDMN")=$c(1)
	s %xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1)
	s %xxsql("M","USELOST")=$c(1),%xxsql("M","ZVERSION")=$c(1),%xxsql("I","%occErrors")="",%xxsql("I","%occSqlfunc")="",%xxsql("I","%sySite")=""
	s %xxsql("I","%sySt")="",%xxsql("I","%sySystem")="",%xxsql("I","EnsConstants")="",%xxsql("I","EnsErrors")="",%xxsql("I","EnsUtil")=""
	s %xxsql("I","Ensemble")="",%xxsql("NS")="PROJECT1"
	d BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","User",0,"",),,"User.InsertProcessMessagesSent.CLS")
	q
%SQLGetOldIndex(%rowid,%d,pF=0,sqlcode)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLGetOldIndex")
%SQLInsert(%d,%check,%inssel,%vco,%tstart=1,%mv=0)
	// SQL INSERT method for table SQLUser.InsertProcess_MessagesSent
	new bva,%ele,%itm,%key,%f,%l,%n,%nc,%oper,%pos,%s,sqlcode,sn,subs,unlockref set %oper="INSERT",sqlcode=0,%l=$c(0,0,0),unlockref=1
	if $a(%check,7) { new %diu merge %diu=%d }
	set:$d(%d(0)) subs(6)=$p(%d(0),"||",1)
	if '$a(%check),'..%SQLValidateFields(.sqlcode) { set SQLCODE=sqlcode RETURN "" }
	do:'$a(%check,8) ..%SQLNormalizeFields()
	if %tstart { TSTART:($zu(115,1)=1)||('$TLEVEL&&($zu(115,1)=2))  } set $zt="ERRORInsert"
	if '$a(%check),$g(%d(0))'="",'##class(User.InsertProcess).%SQLExists($s($a(%check,2)=1:-1,1:0),.unlockref,%d(0)) {
		if sqlcode<0 { set SQLCODE=sqlcode if SQLCODE=-114 { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler56",,%oper,"SQLUser"_"."_"InsertProcess",$g(%d(0))) } } else { set SQLCODE=-104,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler9",,"SQLUser"_"."_"InsertProcess_MessagesSent") }
		do ..%SQLEExit() RETURN ""
	}
	if '$a(%check) { if $g(%d(0))="" { do ..%SQLMissing("InsertProcess") set SQLCODE=sqlcode do ..%SQLEExit() RETURN "" } }
	set:'$d(%d(3)) %d(3)=$i(^Ens.BusinessProcessD(subs(6),"sent")) set %d(1)=%d(0)_"||"_%d(3),subs(6)=$p(%d(0),"||",1)
	if '$a(%check) {
		do {
			if $g(%vco)'="" { d @%vco quit:sqlcode<0  }
				// Constraint IDKEY
				if '$a(%check,2) { lock +^Ens.BusinessProcessD("IDKEY",%d(0),%d(3)):$zu(115,4) if $t { set $e(%l,2)=$c(1) } else { do ..%SQLUnlockError("IDKEY") quit  } }
				if '$a(%check,7) { if '..IDKEYSQLCheckUnique(0,,%d(0),%d(3)) { set sqlcode=-119,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler10",,"SQLUser"_"."_"InsertProcess_MessagesSent","IDKEY","InsertProcess"_"="_$$quoter^%apiSQL($g(%d(0)))_","_"element_key"_"="_$$quoter^%apiSQL($g(%d(3)))) quit  }} // INSERT
				else { new tID set tID=..IDKEYSQLFindRowIDByConstraint($lb(%d(0),%d(3)),1) if tID'="" { kill %d merge %d=%diu kill %diu do ..%SQLUpdate(tID,%check,.%d),..%SQLUnlock2(),..%SQLUnlockRef() set $e(%check,7)=$c(2) quit  }} // INSERT OR UPDATE
		} while 0
		QUIT:$a(%check,7)=2 $s('SQLCODE:tID,1:"")				// INSERT became UPDATE
		if sqlcode<0 { set SQLCODE=sqlcode do ..%SQLEExit() RETURN "" }		// A constraint failed
	}
	if '$a(%check,2) { new %ls if $tlevel,$i(%0CacheLock("User.InsertProcessMessagesSent"))>$zu(156,50,1) { lock +^Ens.BusinessProcessD:$zu(115,4) lock:$t -^Ens.BusinessProcessD set %ls=$s($t:2,1:0) } else { lock +^Ens.BusinessProcessD(subs(6),"sent",%d(3)):$zu(115,4) set %ls=$t } set:%ls=2 $e(%check,2)=$c(1) set:%ls=1 $e(%l)=$c(1) if '%ls set SQLCODE=-110,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler40",,%oper,"SQLUser"_"."_"InsertProcess_MessagesSent",$g(%d(1))) do ..%SQLEExit() RETURN ""  }
	set ^Ens.BusinessProcessD(subs(6),"sent",%d(3))=$g(%d(2))
	lock:$a(%l,2) -^Ens.BusinessProcessD("IDKEY",%d(0),%d(3))#"D" 
	lock:$a(%l) -^Ens.BusinessProcessD(subs(6),"sent",%d(3))
	TCOMMIT:%tstart&&($zu(115,1)=1)
	do ..%SQLUnlockRef()
	set SQLCODE=0
	QUIT %d(1) 			// %SQLInsert
ERRORInsert	set $zt="",SQLCODE=-415,%msg=$s($g(%msg)'="":%msg_" -- ",1:"")_$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler51",,%oper,"SQLUser"_"."_"InsertProcess_MessagesSent",$ze)
	if $ze["<FRAMESTACK>" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler52",,$ze,%oper,"SQLUser"_"."_"InsertProcess_MessagesSent") do ##Class(%SYS.System).WriteToConsoleLog(%msg) if ($zu(67,10,$j)=1)||($zu(67,10,$j)=3) { write !,%msg h 3 } HALT  }
	do ..%SQLEExit()
	RETURN ""
%SQLInsertComputes(view=0)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLInsertComputes")
%SQLInsertStreams(pVal,pClassname,pProperty,pField,pChangeEmptyToNull,pOIDType,sqlcode,%msg) public {
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLInsertStreams") }
%SQLInvalid(pIcol,pVal) public {
	set:$l($g(pVal))>40 pVal=$e(pVal,1,40)_"..." do:'$d(%n) ..%SQLnBuild() set %msg=$s($g(%msg)'="":%msg_$c(13,10),1:"")_$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler37",,"SQLUser"_"."_"InsertProcess_MessagesSent"_"."_$lg(%n,pIcol),$s($g(pVal)'="":$s(pVal="":"<NULL>",pVal=$c(0):"<EMPTY STRING>",1:"'"_pVal_"'"),1:"")),sqlcode=$s(%oper="INSERT":-104,1:-105)
	QUIT sqlcode }
%SQLInvalid2(ficol,val,char) [ sqlcode ] public {
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLInvalid2") }
%SQLMVDelete(oref,flags,%rowid,oldrec)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLMVDelete")
%SQLMVIndexDelete(%e)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLMVIndexDelete")
%SQLMVIndexInsert(%d)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLMVIndexInsert")
%SQLMVIndexUpdate(%d,%e)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLMVIndexUpdate")
%SQLMVInsert(oref,flags,%rowid,newrec)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLMVInsert")
%SQLMVUpdate(oref,flags,%rowid,newrec,oldrec)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLMVUpdate")
%SQLMissing(fname)
	set sqlcode=-108,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler47",,fname,"SQLUser"_"."_"InsertProcess_MessagesSent") quit
%SQLNormalizeCompFields()
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLNormalizeCompFields")
%SQLNormalizeFields()
	set:$g(%d(0))'="" %d(0)=$select(%d(0)=$c(0)&&$zu(115,13):"",1:%d(0)\1)
	QUIT
%SQLPurgeIndices(pIndices="",pLockExtent=0,pIgnoreIndexList="")
	QUIT ##class(User.InsertProcess).%PurgeIndices(pIndices,pLockExtent,pIgnoreIndexList)
%SQLQuickBulkInsert(%nolock=0)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLQuickBulkInsert")
%SQLQuickBulkLoad(%rowidlist,%nolock=0,pkey=0)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLQuickBulkLoad")
%SQLQuickBulkSave(%nolock=0)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLQuickBulkSave")
%SQLQuickBulkUpdate(%nolock=0)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLQuickBulkUpdate")
%SQLQuickDelete(%rowid,%nolock=0,pkey=0)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLQuickDelete")
%SQLQuickDeleteChildren(%parent,%nolock=0,pkey=0)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLQuickDeleteChildren")
%SQLQuickFindPKeyByRowID(%rowid)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLQuickFindPKeyByRowID")
%SQLQuickFindRowIDByPKey(pPKey,pOutput=1,pInternal=0)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLQuickFindRowIDByPKey")
%SQLQuickInsert(d,%nolock=0,pkey=0,parentpkey=0)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLQuickInsert")
%SQLQuickLoad(%rowid,%nolock=0,pkey=0,qq=0)
	// Get fields from row where SQLRowID=%rowid
	new d,i,il,subs set:%nolock=2 %nolock=1
	if %nolock=0 { if '..%SQLAcquireLock(%rowid) { set %qrc=114,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler45",,"SQLUser"_"."_"InsertProcess_MessagesSent",%rowid),%ROWCOUNT=0 QUIT  } set:$zu(115,2) il=$zu(115,2,0) }
	set d(1)=%rowid,d(0)=$p(d(1),"||",1),d(3)=$p(d(1),"||",2),subs(6)=$p(d(0),"||",1)
	new s,ul set ul=0,d(1)=%rowid if $zu(115,2)=1 { lock +^Ens.BusinessProcessD(subs(6),"sent",d(3))#"S":$zu(115,4) if $t { set ul=1 } else { set %qrc=114,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler46",,"SQLUser"_"."_"InsertProcess_MessagesSent",%rowid),%ROWCOUNT=0 quit  } }
	if '$d(^Ens.BusinessProcessD(subs(6),"sent",d(3)),s) { set SQLCODE=100,%qrc=100 if %nolock=0 { do:$g(il) $zu(115,2,il) }} else { set SQLCODE=0
	if %nolock=0 { if $zu(115,1)=1 { TSTART  } elseif '$TLEVEL,$zu(115,1)=2 { TSTART  }} set d(2)=s  }
	do ..%SQLQuickLogicalToOdbc(.d)
	if SQLCODE set %ROWCOUNT=0 set:SQLCODE<0 SQLCODE=-SQLCODE lock:ul -^Ens.BusinessProcessD(subs(6),"sent",d(3))#"SI" set %qrc=SQLCODE QUIT
	set:qq d=$zobjexport("User.InsertProcessMessagesSent",18),d=$zobjexport(4,18) set i=-1 for  { set i=$o(d(i)) quit:i=""  set d=$zobjexport(d(i),18) } set %qrc=0,%ROWCOUNT=1 lock:ul -^Ens.BusinessProcessD(subs(6),"sent",d(3))#"SI" if %nolock=0 { do ..%SQLReleaseLock(%rowid,0,0) do:$g(il) $zu(115,2,il) } QUIT
	Return
%SQLQuickLoadChildren(%parref,%nolock=0,pkey=0,returnpkey=0)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLQuickLoadChildren")
%SQLQuickLogicalToOdbc(%d)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLLogicalToOdbcFields")
%SQLQuickOdbcToLogical(%d)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLQuickOdbcToLogical")
%SQLQuickUpdate(%rowid,d,%nolock=0,pkey=0)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLQuickUpdate")
%SQLReleaseLock(%rowid,s=0,i=0,e="")
	new %d,subs
	set %d(1)=%rowid,%d(0)=$p(%d(1),"||",1),%d(3)=$p(%d(1),"||",2),subs(6)=$p(%d(0),"||",1) set s=$e("S",s)_$e("D",i)
	lock -^Ens.BusinessProcessD(subs(6),"sent",%d(3))#s
	set:i&&($g(%0CacheLock("User.InsertProcessMessagesSent"))) %0CacheLock("User.InsertProcessMessagesSent")=%0CacheLock("User.InsertProcessMessagesSent")-1
	QUIT
%SQLReleaseTableLock(s=0,i=0)
	set s=$e("S",s)_$e("D",i) lock -^Ens.BusinessProcessD#s QUIT 1
	Return
%SQLStorageValidation()
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLStorageValidation")
%SQLTrigDelTab()
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLTrigDelTab")
%SQLTrigInsTab()
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLTrigInsTab")
%SQLUnlock()
	lock:$a(%l) -^Ens.BusinessProcessD(subs(6),"sent",%d(3))
	QUIT
%SQLUnlock2()
	lock:$a(%l,2) -^Ens.BusinessProcessD("IDKEY",%d(0),%d(3))#"D" QUIT
%SQLUnlockError(cname)
	set sqlcode=-110 if %oper="DELETE" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler48",,"SQLUser"_"."_"InsertProcess_MessagesSent",cname) } else { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler49",,"SQLUser"_"."_"InsertProcess_MessagesSent",cname) } quit
	Return
%SQLUnlockRef()
	for %itm=2:1:$g(unlockref) {
		if $lg(unlockref(%itm))'="%UnlockId" { lock -@$lg(unlockref(%itm))#$lg(unlockref(%itm),3) }
		else { do $classmethod($lg(unlockref(%itm),2),$lg(unlockref(%itm)),$lg(unlockref(%itm),3),1,1) }
		set:$g(%0CacheLock($lg(unlockref(%itm),2))) %0CacheLock($lg(unlockref(%itm),2))=%0CacheLock($lg(unlockref(%itm),2))-1
	}
	QUIT
%SQLUpdate(%rowid,%check,%d,%vco,%tstart=1,%mv=0,%polymorphic=0,%soid)
	// SQL UPDATE method for table SQLUser.InsertProcess_MessagesSent
	new %e,bva,%ele,%itm,%key,%f,%l,%n,%nc,%oper,%pos,%s,icol,omcall,s,sn,sqlcode,subs,t set %oper="UPDATE",sqlcode=0,%ROWID=%rowid,$e(%e,1)=$c(0),%l=$c(0,0,0)
	if '$d(%0CacheSQLRA) { new %0CacheSQLRA set omcall=1 }
	if '$a(%check,7) {
		if '$a(%check),'..%SQLValidateFields(.sqlcode) { set SQLCODE=sqlcode QUIT  }
		do:'$a(%check,8) ..%SQLNormalizeFields()
	}
	if ($d(%d(1))&&($g(%d(1))'=%rowid))||($d(%d(0))&&($g(%d(0))'=$p(%rowid,"||",1)))||($d(%d(3))&&($g(%d(3))'=$p(%rowid,"||",2))) { set SQLCODE=-107,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler17",,"'ID', 'InsertProcess', or 'element_key'","SQLUser"_"."_"InsertProcess_MessagesSent") QUIT  }
	for icol=2:1:3 { set $e(%e,icol)=$c($d(%d(icol))) }
	set %d(1)=%rowid,%e(1)=%rowid,%d(0)=$p(%d(1),"||",1),%d(3)=$p(%d(1),"||",2),subs(6)=$p(%d(0),"||",1)
	if '$a(%check,2) { new %ls if $tlevel,$i(%0CacheLock("User.InsertProcessMessagesSent"))>$zu(156,50,1) { lock +^Ens.BusinessProcessD:$zu(115,4) lock:$t -^Ens.BusinessProcessD set %ls=$s($t:2,1:0) } else { lock +^Ens.BusinessProcessD(subs(6),"sent",%d(3)):$zu(115,4) set %ls=$t } set:%ls=2 $e(%check,2)=$c(1) set:%ls=1 $e(%l)=$c(1) if '%ls { set SQLCODE=-110,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler40",,%oper,"SQLUser"_"."_"InsertProcess_MessagesSent",$g(%d(1))) RETURN  }} if %tstart { TSTART:($zu(115,1)=1)||('$TLEVEL&&($zu(115,1)=2))  }
	set $zt="ERRORUpdate"
	if $g(%vco)'="" { do ..%SQLGetOldAll() if sqlcode { set SQLCODE=-109,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler59",,"SQLUser"_"."_"InsertProcess_MessagesSent",%rowid) do ..%SQLEExit() QUIT  } set:'$d(%d(2)) %d(2)=%e(2) set:%d(2)=%e(2) $e(%e,2)=$c(0)}
	if '$a(%check) {
		do {
			if $g(%vco)'="" { d @%vco quit:sqlcode<0  }
		} while 0
		if sqlcode { set SQLCODE=sqlcode do ..%SQLEExit() QUIT  }
	}
	set:$a(%e,2) ^Ens.BusinessProcessD(subs(6),"sent",%d(3))=$g(%d(2))
	do ..%SQLUnlock2()
	do ..%SQLUnlock() TCOMMIT:%tstart&&($zu(115,1)=1)
	set SQLCODE=0 kill:$g(omcall) %0CacheSQLRA
	QUIT
ERRORUpdate	set $zt="",SQLCODE=-415,%msg=$s($g(%msg)'="":%msg_" -- ",1:"")_$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler51",,%oper,"SQLUser"_"."_"InsertProcess_MessagesSent",$ze) if $ze["<FRAMESTACK>" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler52",,$ze,%oper,"SQLUser"_"."_"InsertProcess_MessagesSent") do ##Class(%SYS.System).WriteToConsoleLog(%msg) if ($zu(67,10,$j)=1)||($zu(67,10,$j)=3) { write !,%msg h 3 } HALT  } do ..%SQLEExit() QUIT  
	Return
%SQLUpdateComputes(view=0)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLUpdateComputes")
%SQLUpdateStreams(pNew,pOld,pClassname,pProperty,pField,pChangeEmptyToNull,pOIDType,sqlcode,%msg,pAllowOid=0) public {
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLUpdateStreams") }
%SQLValidateCompFields(sqlcode)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLValidateCompFields")
%SQLValidateFields(sqlcode)
	if $g(%d(3))'="",'(($l(%d(3))'>50)) { set sqlcode=..%SQLInvalid(3+1,%d(3)) } 
	QUIT 'sqlcode
%SQLicompView()
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLicompView")
%SQLnBuild() public {
	set %n=$lb("ID","ID","MessagesSent","element_key")
	QUIT }
%ValidateIndices(idxList="",autoCorrect=0,lockOption=1,multiProcess=1,mapList,verbose=1,errors)
	w !,"There are no indices to validate for class 'User.InsertProcessMessagesSent'"
	QUIT 1
zIDKEYSQLCheckUnique(pFromOrig=0,%pID,%pVals...)
	 ;---&sql(SELECT InsertProcess,element_key FROM SQLUser.InsertProcess_MessagesSent WHERE  InsertProcess=:%pVals(1) AND element_key=:%pVals(2) AND (%ID <> :%pID OR :%pID IS NULL)) QUIT SQLCODE=100
 	 ;--- ** SQL PUBLIC Variables: %pID, %pVals, SQLCODE
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xEtodnKD8NSiYI9fi7aGtTUIXC9k","%New") } catch { if $ze["<CLASS DOES NOT EXIST>"&&($ze["%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xEtodnKD8NSiYI9fi7aGtTUIXC9k")||($ze["<ZSQLU>") { d %0dsqlG } else { throw } } QUIT SQLCODE=100
 q
%0dsqlG	n %xxsql
	s %xxsql("S",1)="SELECT InsertProcess , element_key FROM SQLUser . InsertProcess_MessagesSent WHERE InsertProcess = :%pVals(1) AND element_key = :%pVals(2) AND ( %ID <> :%pID OR :%pID IS NULL )"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","DEBUG")=$c(1),%xxsql("M","FORKNETDMN")=$c(1)
	s %xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1)
	s %xxsql("M","USELOST")=$c(1),%xxsql("M","ZVERSION")=$c(1),%xxsql("I","%occErrors")="",%xxsql("I","%occSqlfunc")="",%xxsql("I","%sySite")=""
	s %xxsql("I","%sySt")="",%xxsql("I","%sySystem")="",%xxsql("I","EnsConstants")="",%xxsql("I","EnsErrors")="",%xxsql("I","EnsUtil")=""
	s %xxsql("I","Ensemble")="",%xxsql("NS")="PROJECT1"
	d BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","User",0,"",),,"User.InsertProcessMessagesSent.CLS")
	q
zIDKEYSQLExists(pLockOnly=0,pUnlockRef,%pVal...)
	// SQL Foreign Key validation entry point for Key IDKEY.  Called by FKeys that reference this Key to see if the row is defined
	new id set id=..IDKEYSQLFindRowIDByConstraint($lb(%pVal(1),%pVal(2)),1) QUIT:SQLCODE $s('pLockOnly:0,1:1)
	if pLockOnly>=0 { if '..%SQLGetLock(id,1,.pUnlockRef) { set sqlcode=-114,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler39",,"SQLUser"_"."_"InsertProcess_MessagesSent"_":"_"IDKEY") QUIT 0 } }
	if pLockOnly<1 {
		new qv set qv='..IDKEYSQLCheckUnique(0,,%pVal(1),%pVal(2)) QUIT:pLockOnly=-1 qv
		do:'$g(pUnlockRef) ..%SQLReleaseLock(id,1) quit qv
	}
	else { do:'$g(pUnlockRef) ..%SQLReleaseLock(id,1) QUIT 1 }
	Return
zIDKEYSQLFindRowIDByConstraint(%con,pInternal=0)
	// Get ROWID value for UNIQUE Key IDKEY value given in %con
	new %d,id,rtm set rtm=$zu(115,5,$s(pInternal:0,1:1)) set %d(0)=$lg(%con,1) set %d(3)=$lg(%con,2)
	set %ROWCOUNT=0 set:'pInternal %qrc=0
	 ;---&sql(SELECT %ID INTO :id FROM SQLUser.InsertProcess_MessagesSent WHERE InsertProcess = :%d(0) AND element_key = :%d(3))
 	 ;--- ** SQL PUBLIC Variables: %d, SQLCODE, id
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xE9at6viIFjQKlj5r3aKI2HoOPNb","%New") } catch { if $ze["<CLASS DOES NOT EXIST>"&&($ze["%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xE9at6viIFjQKlj5r3aKI2HoOPNb")||($ze["<ZSQLU>") { d %0dsqlI } else { throw } }
	do $zu(115,5,rtm)
	if pInternal { QUIT:'SQLCODE $g(id) RETURN "" }
	if SQLCODE { set:SQLCODE<0 %qrc=-SQLCODE set:'%ROWCOUNT&&(SQLCODE=100) id="",%qrc=0 } set d=$zobjexport(id,18) QUIT
	Return
 q
%0dsqlI	n %xxsql
	s %xxsql("S",1)="SELECT %ID INTO :id FROM SQLUser . InsertProcess_MessagesSent WHERE InsertProcess = :%d(0) AND element_key = :%d(3)"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","DEBUG")=$c(1),%xxsql("M","FORKNETDMN")=$c(1)
	s %xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1)
	s %xxsql("M","USELOST")=$c(1),%xxsql("M","ZVERSION")=$c(1),%xxsql("I","%occErrors")="",%xxsql("I","%occSqlfunc")="",%xxsql("I","%sySite")=""
	s %xxsql("I","%sySt")="",%xxsql("I","%sySystem")="",%xxsql("I","EnsConstants")="",%xxsql("I","EnsErrors")="",%xxsql("I","EnsUtil")=""
	s %xxsql("I","Ensemble")="",%xxsql("NS")="PROJECT1"
	d BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Runtime","","","User",0,"",),,"User.InsertProcessMessagesSent.CLS")
	q
]]></Routine>


<Routine name="User.InsertProcessSynchronizedResponses.1" type="INT" languagemode="0" generated="1" timestamp="65834,40438.905728"><![CDATA[
 ;User.InsertProcessSynchronizedResponses.1
 ;Generated for class User.InsertProcessSynchronizedResponses.  Do NOT edit. 03/31/2021 11:13:58AM
 ;;58637A33;User.InsertProcessSynchronizedResponses
 ;
SQLUPPER(v,l) { quit $zu(28,v,7,$g(l,32767)) }
ALPHAUP(v,r) { quit $zu(28,v,6) }
STRING(v,l) { quit $zu(28,v,9,$g(l,32767)) }
SQLSTRING(v,l) { quit $zu(28,v,8,$g(l,32767)) }
UPPER(v) { quit $zu(28,v,5) }
MVR(v) { quit $zu(28,v,2) }
TRUNCATE(v,l) { quit $e(v,1,$g(l,3641144)) }
%SQLAcquireLock(%rowid,s=0,unlockref=0)
	new %d,gotlock,subs
	set %d(1)=%rowid,%d(0)=$p(%d(1),"||",1),%d(3)=$p(%d(1),"||",2),subs(6)=$p(%d(0),"||",1) set s=$e("S",s)
	lock +^Ens.BusinessProcessD(subs(6),"%SynchronizedResponses",%d(3))#s:$zu(115,4) set gotlock=$t
	set:gotlock&&unlockref unlockref=unlockref+1,unlockref(unlockref)=$lb($name(^Ens.BusinessProcessD(subs(6),"%SynchronizedResponses",%d(3))),"User.InsertProcessSynchronizedResponses",s_"D")
	QUIT gotlock
%SQLAcquireTableLock(s=0,SQLCODE,to="")
	set s=$e("S",s) set:to="" to=$zu(115,4) lock +^Ens.BusinessProcessD#s:to QUIT:$t 1 set SQLCODE=-110 if s="S" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler35",,"SQLUser"_"."_"InsertProcess__SynchronizedResponses") } else { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler36",,"SQLUser"_"."_"InsertProcess__SynchronizedResponses") } QUIT 0
	Return
%SQLAfterTriggers()
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLAfterTriggers")
%SQLBeforeTriggers()
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLBeforeTriggers")
%SQLBuildIndices(pIndices="",pLockFlag=0,pStartID="",pEndID="",pIgnoreIndexList="")
	QUIT ##class(User.InsertProcess).%BuildIndices(pIndices,,pLockFlag,,pStartID,pEndID,pIgnoreIndexList)
%SQLBuildPurgeIndexForRow(pIndices="",pActions="BP",pLockRow=1,%d,%e,pIgnoreIndexList="")
	// Purge and build index nodes for a single row using given values, return Status Code
	new sn,tSC,tLock set tSC=1,pActions=$zcvt(pActions,"U")
	try {
		if $g(%d(1))="" { set tSC=$select(+tSC:$$Error^%apiOBJ(5521,-108,"RowID value must be specified in %d(1) when calling %SQLBuildPurgeIndexForRow for table 'SQLUser.InsertProcess__SynchronizedResponses'"),1:$$AppendStatus^%occSystem(tSC,$$Error^%apiOBJ(5521,-108,"RowID value must be specified in %d(1) when calling %SQLBuildPurgeIndexForRow for table 'SQLUser.InsertProcess__SynchronizedResponses'"))) RETURN tSC }
		if pLockRow { if '..%SQLAcquireLock(%d(1)) { set tSC=$select(+tSC:$$Error^%apiOBJ(5521,-114,"Unable to lock row in table 'SQLUser.InsertProcess__SynchronizedResponses' with %ID = '"_%d(1)_"'"),1:$$AppendStatus^%occSystem(tSC,$$Error^%apiOBJ(5521,-114,"Unable to lock row in table 'SQLUser.InsertProcess__SynchronizedResponses' with %ID = '"_%d(1)_"'"))) RETURN tSC  } else { set tLock=1 }}
		set %d(0)=$p(%d(1),"||",1),%d(3)=$p(%d(1),"||",2)
		set subs(6)=$p(%d(0),"||",1)
		if pLockRow { do ..%SQLReleaseLock(%d(1),0,0) set tLock=0 }
	}
	catch {
		if $g(tLock) { do ..%SQLReleaseLock(%d(1),0,0) }
		set tSC=$select(+tSC:$$Error^%apiOBJ(5594,$ze),1:$$AppendStatus^%occSystem(tSC,$$Error^%apiOBJ(5594,$ze)))
	}
	QUIT tSC
%SQLCheckUnique(pFromOrig=0,%pID,%pVals...)
	 ;---&sql(SELECT ID FROM SQLUser.InsertProcess__SynchronizedResponses WHERE  ID=:%pVals(1) AND (%ID <> :%pID OR :%pID IS NULL)) QUIT SQLCODE=100
 	 ;--- ** SQL PUBLIC Variables: %pID, %pVals, SQLCODE
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xEgnF4YAF8VI9CXRw40zIR7dnuDW","%New") } catch { if $ze["<CLASS DOES NOT EXIST>"&&($ze["%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xEgnF4YAF8VI9CXRw40zIR7dnuDW")||($ze["<ZSQLU>") { d %0dsqlA } else { throw } } QUIT SQLCODE=100
 q
%0dsqlA	n %xxsql
	s %xxsql("S",1)="SELECT ID FROM SQLUser . InsertProcess__SynchronizedResponses WHERE ID = :%pVals(1) AND ( %ID <> :%pID OR :%pID IS NULL )"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","DEBUG")=$c(1),%xxsql("M","FORKNETDMN")=$c(1)
	s %xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1)
	s %xxsql("M","USELOST")=$c(1),%xxsql("M","ZVERSION")=$c(1),%xxsql("I","%occErrors")="",%xxsql("I","%occSqlfunc")="",%xxsql("I","%sySite")=""
	s %xxsql("I","%sySt")="",%xxsql("I","%sySystem")="",%xxsql("I","EnsConstants")="",%xxsql("I","EnsErrors")="",%xxsql("I","EnsUtil")=""
	s %xxsql("I","Ensemble")="",%xxsql("NS")="PROJECT1"
	d BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","User",0,"",),,"User.InsertProcessSynchronizedResponses.CLS")
	q
%SQLCheckUniqueIndices(pIndices,pOK)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLCheckUniqueIndices")
%SQLCheckUniqueKeys(pConNumber,pFromOrig=0,pUpdate=0,pVals...)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLCheckUniqueKeys")
%SQLCopyIcolIntoName()
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLCopyIcolIntoName")
%SQLCopyNameIntoIcol()
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLCopyNameToIcol")
%SQLCreateInsDelTables(pInsTrigObj,pDelTrigObj)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLCreateInsDelTables")
%SQLDefineiDjVars(%d,subs,master)
	QUIT
%SQLDelete(%rowid,%check,%tstart=1,%mv=0,%polymorphic=0)
	// SQL DELETE method for table SQLUser.InsertProcess__SynchronizedResponses
	new bva,ce,%d,dc,%e,%ele,%itm,%key,%l,%nc,omcall,%oper,%pos,%s,sn,sqlcode,subs set %oper="DELETE",sqlcode=0,%ROWID=%rowid,%d(1)=%rowid,%e(1)=%rowid,%d(0)=$p(%d(1),"||",1),%d(3)=$p(%d(1),"||",2),subs(6)=$p(%d(0),"||",1),%l=$c(0)
	if '$d(%0CacheSQLRA) { new %0CacheSQLRA set omcall=1 }
	if '$a(%check,2) { new %ls if $tlevel,$i(%0CacheLock("User.InsertProcessSynchronizedResponses"))>$zu(156,50,1) { lock +^Ens.BusinessProcessD:$zu(115,4) lock:$t -^Ens.BusinessProcessD set %ls=$s($t:2,1:0) } else { lock +^Ens.BusinessProcessD(subs(6),"%SynchronizedResponses",%d(3)):$zu(115,4) set %ls=$t } set:%ls=2 $e(%check,2)=$c(1) set:%ls=1 $e(%l)=$c(1) if '%ls { set SQLCODE=-110,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler40",,%oper,"SQLUser"_"."_"InsertProcess__SynchronizedResponses",$g(%d(1))) RETURN  }} if %tstart { TSTART:($zu(115,1)=1)||('$TLEVEL&&($zu(115,1)=2))  }
	set $zt="ERRORDelete"
	if '$a(%check),'$zu(115,7) do  if sqlcode set SQLCODE=sqlcode do ..%SQLEExit() QUIT  
	. new %fk,%k,%p,%st,%t,%z set %k="",%p("%1")="%d(1),",%p("IDKEY")="%d(0),%d(3),,"
	. for  quit:sqlcode<0  set %k=$o(^rINDEXEXT("F","User.InsertProcessSynchronizedResponses",%k)) quit:%k=""  set %t="" for  set %t=$o(^rINDEXEXT("F","User.InsertProcessSynchronizedResponses",%k,"f",%t)) quit:%t=""  set %st=(%t="User.InsertProcessSynchronizedResponses") set %fk="" for  set %fk=$o(^rINDEXEXT("F","User.InsertProcessSynchronizedResponses",%k,"f",%t,%fk)) quit:%fk=""  x "set %z=$classmethod(%t,%fk_""SQLFKeyRefAction"",%st,%k,$a(%check,2),"_%p(%k)_")" if %z set sqlcode=-124 quit  
	set ce="" for  { set ce=$order(^oddSQL("SQLUser","InsertProcess__SynchronizedResponses","DC",ce)) quit:ce=""   do $classmethod(ce,"%SQLDeleteChildren",%d(1),%check,.sqlcode) quit:sqlcode<0  } if sqlcode<0 { set SQLCODE=sqlcode do ..%SQLEExit() QUIT } // Delete any children
	if '$a(%check,3) {
	}
	k ^Ens.BusinessProcessD(subs(6),"%SynchronizedResponses",%d(3))
	do ..%SQLUnlock() TCOMMIT:%tstart&&($zu(115,1)=1)
	set SQLCODE=0 kill:$g(omcall) %0CacheSQLRA
	QUIT
ERRORDelete	set $zt="",SQLCODE=-415,%msg=$s($g(%msg)'="":%msg_" -- ",1:"")_$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler51",,%oper,"SQLUser"_"."_"InsertProcess__SynchronizedResponses",$ze) if $ze["<FRAMESTACK>" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler52",,$ze,%oper,"SQLUser"_"."_"InsertProcess__SynchronizedResponses") do ##Class(%SYS.System).WriteToConsoleLog(%msg) if ($zu(67,10,$j)=1)||($zu(67,10,$j)=3) { write !,%msg h 3 } HALT  } do ..%SQLEExit() QUIT
	Return
%SQLDeleteChildren(%parent,%check,sqlcode)
	// Delete all rows where InsertProcess = :%parent
	new %ROWCOUNT,%ROWID,SQLCODE
	set:$a(%check,2)=2 $e(%check,2)=$c(0)
	 ;---&sql(DELETE %USECHECKVARIABLE FROM SQLUser.InsertProcess__SynchronizedResponses WHERE InsertProcess = :%parent)
 	 ;--- ** SQL PUBLIC Variables: %parent, SQLCODE
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xE5XSbCcOWENz73rOyCRMpyXBg8S","%New") } catch { if $ze["<CLASS DOES NOT EXIST>"&&($ze["%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xE5XSbCcOWENz73rOyCRMpyXBg8S")||($ze["<ZSQLU>") { d %0dsqlC } else { throw } }
	set:SQLCODE<0 sqlcode=SQLCODE QUIT  
 q
%0dsqlC	n %xxsql
	s %xxsql("S",1)="DELETE %USECHECKVARIABLE FROM SQLUser . InsertProcess__SynchronizedResponses WHERE InsertProcess = :%parent"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","DEBUG")=$c(1),%xxsql("M","FORKNETDMN")=$c(1)
	s %xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1)
	s %xxsql("M","USELOST")=$c(1),%xxsql("M","ZVERSION")=$c(1),%xxsql("I","%occErrors")="",%xxsql("I","%occSqlfunc")="",%xxsql("I","%sySite")=""
	s %xxsql("I","%sySt")="",%xxsql("I","%sySystem")="",%xxsql("I","EnsConstants")="",%xxsql("I","EnsErrors")="",%xxsql("I","EnsUtil")=""
	s %xxsql("I","Ensemble")="",%xxsql("NS")="PROJECT1"
	d BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","User",0,"",),,"User.InsertProcessSynchronizedResponses.CLS")
	q
%SQLDeleteTempStreams()
	// Delete all temporary streams
	QUIT
%SQLEExit()
	do:%oper'="DELETE" ..%SQLUnlock2() do ..%SQLUnlock() 
	do ..%SQLUnlockRef()
	if %tstart,$zu(115,1)=1,$TLEVEL { set %tstart=0 TROLLBACK 1 } kill:$g(omcall) %0CacheSQLRA QUIT  
	Return
%SQLExists(pLockOnly=0,pUnlockRef,%pVal...)
	// SQL Foreign Key validation entry point for Key %1.  Called by FKeys that reference this Key to see if the row is defined
	new id set id=%pVal(1)
	if pLockOnly>=0 { if '..%SQLGetLock(id,1,.pUnlockRef) { set sqlcode=-114,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler39",,"SQLUser"_"."_"InsertProcess__SynchronizedResponses"_":"_"%1") QUIT 0 } }
	if pLockOnly<1 {
		new qv set qv='..%SQLCheckUnique(0,,%pVal(1)) QUIT:pLockOnly=-1 qv
		do:'$g(pUnlockRef) ..%SQLReleaseLock(id,1) quit qv
	}
	else { do:'$g(pUnlockRef) ..%SQLReleaseLock(id,1) QUIT 1 }
	Return
%SQLFKeyDelLock()
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLFKeyDelLock")
%SQLFastInsert(%check)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLFastInsert")
%SQLFieldValidate()
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLFieldValidate")
%SQLGetLock(pRowId,pShared=0,pUnlockRef)
	if $tlevel,$i(%0CacheLock("User.InsertProcessSynchronizedResponses"))>$zu(156,50,1) { new s set s=$e("S",pShared) lock +^Ens.BusinessProcessD#s:$zu(115,4) lock:$t -^Ens.BusinessProcessD#s QUIT $s($t:2,1:0) } 
	QUIT ..%SQLAcquireLock(pRowId,pShared,.pUnlockRef)
%SQLGetOld(%rowid,%d,%e,sqlcode)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLGetOld")
%SQLGetOldAll()
	// Get all old data values
	new SQLCODE,%ROWCOUNT
	 ;---&sql(SELECT _SynchronizedResponses INTO :%e() FROM %IGNOREINDEX * SQLUser.InsertProcess__SynchronizedResponses WHERE ID=:%rowid)
 	 ;--- ** SQL PUBLIC Variables: %e, %rowid, SQLCODE
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xE7OalcqA5N6biSUeTFhCgpNJa47","%New") } catch { if $ze["<CLASS DOES NOT EXIST>"&&($ze["%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xE7OalcqA5N6biSUeTFhCgpNJa47")||($ze["<ZSQLU>") { d %0dsqlE } else { throw } }
	set sqlcode=SQLCODE QUIT:sqlcode'=0
	QUIT
 q
%0dsqlE	n %xxsql
	s %xxsql("S",1)="SELECT _SynchronizedResponses INTO :%e() FROM %IGNOREINDEX * SQLUser . InsertProcess__SynchronizedResponses WHERE ID = :%rowid"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","DEBUG")=$c(1),%xxsql("M","FORKNETDMN")=$c(1)
	s %xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1)
	s %xxsql("M","USELOST")=$c(1),%xxsql("M","ZVERSION")=$c(1),%xxsql("I","%occErrors")="",%xxsql("I","%occSqlfunc")="",%xxsql("I","%sySite")=""
	s %xxsql("I","%sySt")="",%xxsql("I","%sySystem")="",%xxsql("I","EnsConstants")="",%xxsql("I","EnsErrors")="",%xxsql("I","EnsUtil")=""
	s %xxsql("I","Ensemble")="",%xxsql("NS")="PROJECT1"
	d BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","User",0,"",),,"User.InsertProcessSynchronizedResponses.CLS")
	q
%SQLGetOldIndex(%rowid,%d,pF=0,sqlcode)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLGetOldIndex")
%SQLInsert(%d,%check,%inssel,%vco,%tstart=1,%mv=0)
	// SQL INSERT method for table SQLUser.InsertProcess__SynchronizedResponses
	new bva,%ele,%itm,%key,%f,%l,%n,%nc,%oper,%pos,%s,sqlcode,sn,subs,unlockref set %oper="INSERT",sqlcode=0,%l=$c(0,0,0),unlockref=1
	if $a(%check,7) { new %diu merge %diu=%d }
	set:$d(%d(0)) subs(6)=$p(%d(0),"||",1)
	if '$a(%check),'..%SQLValidateFields(.sqlcode) { set SQLCODE=sqlcode RETURN "" }
	do:'$a(%check,8) ..%SQLNormalizeFields()
	if %tstart { TSTART:($zu(115,1)=1)||('$TLEVEL&&($zu(115,1)=2))  } set $zt="ERRORInsert"
	if '$a(%check),$g(%d(0))'="",'##class(User.InsertProcess).%SQLExists($s($a(%check,2)=1:-1,1:0),.unlockref,%d(0)) {
		if sqlcode<0 { set SQLCODE=sqlcode if SQLCODE=-114 { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler56",,%oper,"SQLUser"_"."_"InsertProcess",$g(%d(0))) } } else { set SQLCODE=-104,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler9",,"SQLUser"_"."_"InsertProcess__SynchronizedResponses") }
		do ..%SQLEExit() RETURN ""
	}
	if '$a(%check) { if $g(%d(0))="" { do ..%SQLMissing("InsertProcess") set SQLCODE=sqlcode do ..%SQLEExit() RETURN "" } if $g(%d(3))="" { do ..%SQLMissing("element_key") set SQLCODE=sqlcode do ..%SQLEExit() RETURN "" } }
	set %d(1)=%d(0)_"||"_%d(3),subs(6)=$p(%d(0),"||",1)
	if '$a(%check) {
		do {
			if $g(%vco)'="" { d @%vco quit:sqlcode<0  }
				// Constraint IDKEY
				if '$a(%check,2) { lock +^Ens.BusinessProcessD("IDKEY",%d(0),%d(3)):$zu(115,4) if $t { set $e(%l,2)=$c(1) } else { do ..%SQLUnlockError("IDKEY") quit  } }
				if '$a(%check,7) { if '..IDKEYSQLCheckUnique(0,,%d(0),%d(3)) { set sqlcode=-119,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler10",,"SQLUser"_"."_"InsertProcess__SynchronizedResponses","IDKEY","InsertProcess"_"="_$$quoter^%apiSQL($g(%d(0)))_","_"element_key"_"="_$$quoter^%apiSQL($g(%d(3)))) quit  }} // INSERT
				else { new tID set tID=..IDKEYSQLFindRowIDByConstraint($lb(%d(0),%d(3)),1) if tID'="" { kill %d merge %d=%diu kill %diu do ..%SQLUpdate(tID,%check,.%d),..%SQLUnlock2(),..%SQLUnlockRef() set $e(%check,7)=$c(2) quit  }} // INSERT OR UPDATE
		} while 0
		QUIT:$a(%check,7)=2 $s('SQLCODE:tID,1:"")				// INSERT became UPDATE
		if sqlcode<0 { set SQLCODE=sqlcode do ..%SQLEExit() RETURN "" }		// A constraint failed
	}
	if '$a(%check,2) { new %ls if $tlevel,$i(%0CacheLock("User.InsertProcessSynchronizedResponses"))>$zu(156,50,1) { lock +^Ens.BusinessProcessD:$zu(115,4) lock:$t -^Ens.BusinessProcessD set %ls=$s($t:2,1:0) } else { lock +^Ens.BusinessProcessD(subs(6),"%SynchronizedResponses",%d(3)):$zu(115,4) set %ls=$t } set:%ls=2 $e(%check,2)=$c(1) set:%ls=1 $e(%l)=$c(1) if '%ls set SQLCODE=-110,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler40",,%oper,"SQLUser"_"."_"InsertProcess__SynchronizedResponses",$g(%d(1))) do ..%SQLEExit() RETURN ""  }
	set ^Ens.BusinessProcessD(subs(6),"%SynchronizedResponses",%d(3))=$g(%d(2))
	lock:$a(%l,2) -^Ens.BusinessProcessD("IDKEY",%d(0),%d(3))#"D" 
	lock:$a(%l) -^Ens.BusinessProcessD(subs(6),"%SynchronizedResponses",%d(3))
	TCOMMIT:%tstart&&($zu(115,1)=1)
	do ..%SQLUnlockRef()
	set SQLCODE=0
	QUIT %d(1) 			// %SQLInsert
ERRORInsert	set $zt="",SQLCODE=-415,%msg=$s($g(%msg)'="":%msg_" -- ",1:"")_$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler51",,%oper,"SQLUser"_"."_"InsertProcess__SynchronizedResponses",$ze)
	if $ze["<FRAMESTACK>" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler52",,$ze,%oper,"SQLUser"_"."_"InsertProcess__SynchronizedResponses") do ##Class(%SYS.System).WriteToConsoleLog(%msg) if ($zu(67,10,$j)=1)||($zu(67,10,$j)=3) { write !,%msg h 3 } HALT  }
	do ..%SQLEExit()
	RETURN ""
%SQLInsertComputes(view=0)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLInsertComputes")
%SQLInsertStreams(pVal,pClassname,pProperty,pField,pChangeEmptyToNull,pOIDType,sqlcode,%msg) public {
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLInsertStreams") }
%SQLInvalid(pIcol,pVal) public {
	set:$l($g(pVal))>40 pVal=$e(pVal,1,40)_"..." do:'$d(%n) ..%SQLnBuild() set %msg=$s($g(%msg)'="":%msg_$c(13,10),1:"")_$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler37",,"SQLUser"_"."_"InsertProcess__SynchronizedResponses"_"."_$lg(%n,pIcol),$s($g(pVal)'="":$s(pVal="":"<NULL>",pVal=$c(0):"<EMPTY STRING>",1:"'"_pVal_"'"),1:"")),sqlcode=$s(%oper="INSERT":-104,1:-105)
	QUIT sqlcode }
%SQLInvalid2(ficol,val,char) [ sqlcode ] public {
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLInvalid2") }
%SQLMVDelete(oref,flags,%rowid,oldrec)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLMVDelete")
%SQLMVIndexDelete(%e)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLMVIndexDelete")
%SQLMVIndexInsert(%d)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLMVIndexInsert")
%SQLMVIndexUpdate(%d,%e)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLMVIndexUpdate")
%SQLMVInsert(oref,flags,%rowid,newrec)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLMVInsert")
%SQLMVUpdate(oref,flags,%rowid,newrec,oldrec)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLMVUpdate")
%SQLMissing(fname)
	set sqlcode=-108,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler47",,fname,"SQLUser"_"."_"InsertProcess__SynchronizedResponses") quit
%SQLNormalizeCompFields()
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLNormalizeCompFields")
%SQLNormalizeFields()
	set:$g(%d(0))'="" %d(0)=$select(%d(0)=$c(0)&&$zu(115,13):"",1:%d(0)\1)
	QUIT
%SQLPurgeIndices(pIndices="",pLockExtent=0,pIgnoreIndexList="")
	QUIT ##class(User.InsertProcess).%PurgeIndices(pIndices,pLockExtent,pIgnoreIndexList)
%SQLQuickBulkInsert(%nolock=0)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLQuickBulkInsert")
%SQLQuickBulkLoad(%rowidlist,%nolock=0,pkey=0)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLQuickBulkLoad")
%SQLQuickBulkSave(%nolock=0)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLQuickBulkSave")
%SQLQuickBulkUpdate(%nolock=0)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLQuickBulkUpdate")
%SQLQuickDelete(%rowid,%nolock=0,pkey=0)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLQuickDelete")
%SQLQuickDeleteChildren(%parent,%nolock=0,pkey=0)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLQuickDeleteChildren")
%SQLQuickFindPKeyByRowID(%rowid)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLQuickFindPKeyByRowID")
%SQLQuickFindRowIDByPKey(pPKey,pOutput=1,pInternal=0)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLQuickFindRowIDByPKey")
%SQLQuickInsert(d,%nolock=0,pkey=0,parentpkey=0)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLQuickInsert")
%SQLQuickLoad(%rowid,%nolock=0,pkey=0,qq=0)
	// Get fields from row where SQLRowID=%rowid
	new d,i,il,subs set:%nolock=2 %nolock=1
	if %nolock=0 { if '..%SQLAcquireLock(%rowid) { set %qrc=114,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler45",,"SQLUser"_"."_"InsertProcess__SynchronizedResponses",%rowid),%ROWCOUNT=0 QUIT  } set:$zu(115,2) il=$zu(115,2,0) }
	set d(1)=%rowid,d(0)=$p(d(1),"||",1),d(3)=$p(d(1),"||",2),subs(6)=$p(d(0),"||",1)
	new s,ul set ul=0,d(1)=%rowid if $zu(115,2)=1 { lock +^Ens.BusinessProcessD(subs(6),"%SynchronizedResponses",d(3))#"S":$zu(115,4) if $t { set ul=1 } else { set %qrc=114,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler46",,"SQLUser"_"."_"InsertProcess__SynchronizedResponses",%rowid),%ROWCOUNT=0 quit  } }
	if '$d(^Ens.BusinessProcessD(subs(6),"%SynchronizedResponses",d(3)),s) { set SQLCODE=100,%qrc=100 if %nolock=0 { do:$g(il) $zu(115,2,il) }} else { set SQLCODE=0
	if %nolock=0 { if $zu(115,1)=1 { TSTART  } elseif '$TLEVEL,$zu(115,1)=2 { TSTART  }} set d(2)=s  }
	do ..%SQLQuickLogicalToOdbc(.d)
	if SQLCODE set %ROWCOUNT=0 set:SQLCODE<0 SQLCODE=-SQLCODE lock:ul -^Ens.BusinessProcessD(subs(6),"%SynchronizedResponses",d(3))#"SI" set %qrc=SQLCODE QUIT
	set:qq d=$zobjexport("User.InsertProcessSynchronizedResponses",18),d=$zobjexport(4,18) set i=-1 for  { set i=$o(d(i)) quit:i=""  set d=$zobjexport(d(i),18) } set %qrc=0,%ROWCOUNT=1 lock:ul -^Ens.BusinessProcessD(subs(6),"%SynchronizedResponses",d(3))#"SI" if %nolock=0 { do ..%SQLReleaseLock(%rowid,0,0) do:$g(il) $zu(115,2,il) } QUIT
	Return
%SQLQuickLoadChildren(%parref,%nolock=0,pkey=0,returnpkey=0)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLQuickLoadChildren")
%SQLQuickLogicalToOdbc(%d)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLLogicalToOdbcFields")
%SQLQuickOdbcToLogical(%d)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLQuickOdbcToLogical")
%SQLQuickUpdate(%rowid,d,%nolock=0,pkey=0)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLQuickUpdate")
%SQLReleaseLock(%rowid,s=0,i=0,e="")
	new %d,subs
	set %d(1)=%rowid,%d(0)=$p(%d(1),"||",1),%d(3)=$p(%d(1),"||",2),subs(6)=$p(%d(0),"||",1) set s=$e("S",s)_$e("D",i)
	lock -^Ens.BusinessProcessD(subs(6),"%SynchronizedResponses",%d(3))#s
	set:i&&($g(%0CacheLock("User.InsertProcessSynchronizedResponses"))) %0CacheLock("User.InsertProcessSynchronizedResponses")=%0CacheLock("User.InsertProcessSynchronizedResponses")-1
	QUIT
%SQLReleaseTableLock(s=0,i=0)
	set s=$e("S",s)_$e("D",i) lock -^Ens.BusinessProcessD#s QUIT 1
	Return
%SQLStorageValidation()
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLStorageValidation")
%SQLTrigDelTab()
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLTrigDelTab")
%SQLTrigInsTab()
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLTrigInsTab")
%SQLUnlock()
	lock:$a(%l) -^Ens.BusinessProcessD(subs(6),"%SynchronizedResponses",%d(3))
	QUIT
%SQLUnlock2()
	lock:$a(%l,2) -^Ens.BusinessProcessD("IDKEY",%d(0),%d(3))#"D" QUIT
%SQLUnlockError(cname)
	set sqlcode=-110 if %oper="DELETE" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler48",,"SQLUser"_"."_"InsertProcess__SynchronizedResponses",cname) } else { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler49",,"SQLUser"_"."_"InsertProcess__SynchronizedResponses",cname) } quit
	Return
%SQLUnlockRef()
	for %itm=2:1:$g(unlockref) {
		if $lg(unlockref(%itm))'="%UnlockId" { lock -@$lg(unlockref(%itm))#$lg(unlockref(%itm),3) }
		else { do $classmethod($lg(unlockref(%itm),2),$lg(unlockref(%itm)),$lg(unlockref(%itm),3),1,1) }
		set:$g(%0CacheLock($lg(unlockref(%itm),2))) %0CacheLock($lg(unlockref(%itm),2))=%0CacheLock($lg(unlockref(%itm),2))-1
	}
	QUIT
%SQLUpdate(%rowid,%check,%d,%vco,%tstart=1,%mv=0,%polymorphic=0,%soid)
	// SQL UPDATE method for table SQLUser.InsertProcess__SynchronizedResponses
	new %e,bva,%ele,%itm,%key,%f,%l,%n,%nc,%oper,%pos,%s,icol,omcall,s,sn,sqlcode,subs,t set %oper="UPDATE",sqlcode=0,%ROWID=%rowid,$e(%e,1)=$c(0),%l=$c(0,0,0)
	if '$d(%0CacheSQLRA) { new %0CacheSQLRA set omcall=1 }
	if '$a(%check,7) {
		if '$a(%check),'..%SQLValidateFields(.sqlcode) { set SQLCODE=sqlcode QUIT  }
		do:'$a(%check,8) ..%SQLNormalizeFields()
	}
	if ($d(%d(1))&&($g(%d(1))'=%rowid))||($d(%d(0))&&($g(%d(0))'=$p(%rowid,"||",1)))||($d(%d(3))&&($g(%d(3))'=$p(%rowid,"||",2))) { set SQLCODE=-107,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler17",,"'ID', 'InsertProcess', or 'element_key'","SQLUser"_"."_"InsertProcess__SynchronizedResponses") QUIT  }
	for icol=2:1:3 { set $e(%e,icol)=$c($d(%d(icol))) }
	set %d(1)=%rowid,%e(1)=%rowid,%d(0)=$p(%d(1),"||",1),%d(3)=$p(%d(1),"||",2),subs(6)=$p(%d(0),"||",1)
	if '$a(%check,2) { new %ls if $tlevel,$i(%0CacheLock("User.InsertProcessSynchronizedResponses"))>$zu(156,50,1) { lock +^Ens.BusinessProcessD:$zu(115,4) lock:$t -^Ens.BusinessProcessD set %ls=$s($t:2,1:0) } else { lock +^Ens.BusinessProcessD(subs(6),"%SynchronizedResponses",%d(3)):$zu(115,4) set %ls=$t } set:%ls=2 $e(%check,2)=$c(1) set:%ls=1 $e(%l)=$c(1) if '%ls { set SQLCODE=-110,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler40",,%oper,"SQLUser"_"."_"InsertProcess__SynchronizedResponses",$g(%d(1))) RETURN  }} if %tstart { TSTART:($zu(115,1)=1)||('$TLEVEL&&($zu(115,1)=2))  }
	set $zt="ERRORUpdate"
	if $g(%vco)'="" { do ..%SQLGetOldAll() if sqlcode { set SQLCODE=-109,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler59",,"SQLUser"_"."_"InsertProcess__SynchronizedResponses",%rowid) do ..%SQLEExit() QUIT  } set:'$d(%d(2)) %d(2)=%e(2) set:%d(2)=%e(2) $e(%e,2)=$c(0)}
	if '$a(%check) {
		do {
			if $g(%vco)'="" { d @%vco quit:sqlcode<0  }
		} while 0
		if sqlcode { set SQLCODE=sqlcode do ..%SQLEExit() QUIT  }
	}
	set:$a(%e,2) ^Ens.BusinessProcessD(subs(6),"%SynchronizedResponses",%d(3))=$g(%d(2))
	do ..%SQLUnlock2()
	do ..%SQLUnlock() TCOMMIT:%tstart&&($zu(115,1)=1)
	set SQLCODE=0 kill:$g(omcall) %0CacheSQLRA
	QUIT
ERRORUpdate	set $zt="",SQLCODE=-415,%msg=$s($g(%msg)'="":%msg_" -- ",1:"")_$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler51",,%oper,"SQLUser"_"."_"InsertProcess__SynchronizedResponses",$ze) if $ze["<FRAMESTACK>" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler52",,$ze,%oper,"SQLUser"_"."_"InsertProcess__SynchronizedResponses") do ##Class(%SYS.System).WriteToConsoleLog(%msg) if ($zu(67,10,$j)=1)||($zu(67,10,$j)=3) { write !,%msg h 3 } HALT  } do ..%SQLEExit() QUIT  
	Return
%SQLUpdateComputes(view=0)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLUpdateComputes")
%SQLUpdateStreams(pNew,pOld,pClassname,pProperty,pField,pChangeEmptyToNull,pOIDType,sqlcode,%msg,pAllowOid=0) public {
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLUpdateStreams") }
%SQLValidateCompFields(sqlcode)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLValidateCompFields")
%SQLValidateFields(sqlcode)
	new %f for %f=2,3 { if $g(%d(%f))'="",'(($l(%d(%f))'>50)) set sqlcode=..%SQLInvalid(%f+1,$g(%d(%f))) quit  } 
	QUIT 'sqlcode
%SQLicompView()
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLicompView")
%SQLnBuild() public {
	set %n=$lb("ID","ID","_SynchronizedResponses","element_key")
	QUIT }
%ValidateIndices(idxList="",autoCorrect=0,lockOption=1,multiProcess=1,mapList,verbose=1,errors)
	w !,"There are no indices to validate for class 'User.InsertProcessSynchronizedResponses'"
	QUIT 1
zIDKEYSQLCheckUnique(pFromOrig=0,%pID,%pVals...)
	 ;---&sql(SELECT InsertProcess,element_key FROM SQLUser.InsertProcess__SynchronizedResponses WHERE  InsertProcess=:%pVals(1) AND element_key=:%pVals(2) AND (%ID <> :%pID OR :%pID IS NULL)) QUIT SQLCODE=100
 	 ;--- ** SQL PUBLIC Variables: %pID, %pVals, SQLCODE
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xE5llXdCbDTzR878xpMwVYMO2T0S","%New") } catch { if $ze["<CLASS DOES NOT EXIST>"&&($ze["%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xE5llXdCbDTzR878xpMwVYMO2T0S")||($ze["<ZSQLU>") { d %0dsqlG } else { throw } } QUIT SQLCODE=100
 q
%0dsqlG	n %xxsql
	s %xxsql("S",1)="SELECT InsertProcess , element_key FROM SQLUser . InsertProcess__SynchronizedResponses WHERE InsertProcess = :%pVals(1) AND element_key = :%pVals(2) AND ( %ID <> :%pID OR :%pID IS NULL )"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","DEBUG")=$c(1),%xxsql("M","FORKNETDMN")=$c(1)
	s %xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1)
	s %xxsql("M","USELOST")=$c(1),%xxsql("M","ZVERSION")=$c(1),%xxsql("I","%occErrors")="",%xxsql("I","%occSqlfunc")="",%xxsql("I","%sySite")=""
	s %xxsql("I","%sySt")="",%xxsql("I","%sySystem")="",%xxsql("I","EnsConstants")="",%xxsql("I","EnsErrors")="",%xxsql("I","EnsUtil")=""
	s %xxsql("I","Ensemble")="",%xxsql("NS")="PROJECT1"
	d BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","User",0,"",),,"User.InsertProcessSynchronizedResponses.CLS")
	q
zIDKEYSQLExists(pLockOnly=0,pUnlockRef,%pVal...)
	// SQL Foreign Key validation entry point for Key IDKEY.  Called by FKeys that reference this Key to see if the row is defined
	new id set id=..IDKEYSQLFindRowIDByConstraint($lb(%pVal(1),%pVal(2)),1) QUIT:SQLCODE $s('pLockOnly:0,1:1)
	if pLockOnly>=0 { if '..%SQLGetLock(id,1,.pUnlockRef) { set sqlcode=-114,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler39",,"SQLUser"_"."_"InsertProcess__SynchronizedResponses"_":"_"IDKEY") QUIT 0 } }
	if pLockOnly<1 {
		new qv set qv='..IDKEYSQLCheckUnique(0,,%pVal(1),%pVal(2)) QUIT:pLockOnly=-1 qv
		do:'$g(pUnlockRef) ..%SQLReleaseLock(id,1) quit qv
	}
	else { do:'$g(pUnlockRef) ..%SQLReleaseLock(id,1) QUIT 1 }
	Return
zIDKEYSQLFindRowIDByConstraint(%con,pInternal=0)
	// Get ROWID value for UNIQUE Key IDKEY value given in %con
	new %d,id,rtm set rtm=$zu(115,5,$s(pInternal:0,1:1)) set %d(0)=$lg(%con,1) set %d(3)=$lg(%con,2)
	set %ROWCOUNT=0 set:'pInternal %qrc=0
	 ;---&sql(SELECT %ID INTO :id FROM SQLUser.InsertProcess__SynchronizedResponses WHERE InsertProcess = :%d(0) AND element_key = :%d(3))
 	 ;--- ** SQL PUBLIC Variables: %d, SQLCODE, id
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xETi8wfJ2BiehLkmyoLtj5Vujtp8","%New") } catch { if $ze["<CLASS DOES NOT EXIST>"&&($ze["%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xETi8wfJ2BiehLkmyoLtj5Vujtp8")||($ze["<ZSQLU>") { d %0dsqlI } else { throw } }
	do $zu(115,5,rtm)
	if pInternal { QUIT:'SQLCODE $g(id) RETURN "" }
	if SQLCODE { set:SQLCODE<0 %qrc=-SQLCODE set:'%ROWCOUNT&&(SQLCODE=100) id="",%qrc=0 } set d=$zobjexport(id,18) QUIT
	Return
 q
%0dsqlI	n %xxsql
	s %xxsql("S",1)="SELECT %ID INTO :id FROM SQLUser . InsertProcess__SynchronizedResponses WHERE InsertProcess = :%d(0) AND element_key = :%d(3)"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","DEBUG")=$c(1),%xxsql("M","FORKNETDMN")=$c(1)
	s %xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1)
	s %xxsql("M","USELOST")=$c(1),%xxsql("M","ZVERSION")=$c(1),%xxsql("I","%occErrors")="",%xxsql("I","%occSqlfunc")="",%xxsql("I","%sySite")=""
	s %xxsql("I","%sySt")="",%xxsql("I","%sySystem")="",%xxsql("I","EnsConstants")="",%xxsql("I","EnsErrors")="",%xxsql("I","EnsUtil")=""
	s %xxsql("I","Ensemble")="",%xxsql("NS")="PROJECT1"
	d BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Runtime","","","User",0,"",),,"User.InsertProcessSynchronizedResponses.CLS")
	q
]]></Routine>


<Routine name="User.NewProduction.1" type="INT" languagemode="0" generated="1" timestamp="65833,51782.17002"><![CDATA[
 ;User.NewProduction.1
 ;Generated for class User.NewProduction.  Do NOT edit. 03/30/2021 02:23:02PM
 ;;6B575159;User.NewProduction
 ;
zGetSettingRow(pSettingName="",pSourceClass="") public {
	Set tRow = ""
	// Check if the class has been compiled with the new generator
	If (pSourceClass = "User.NewProduction") {
		Set tRow = $case(pSettingName,
			"AlertActionWindow": $LB("AlertActionWindow","The default number of minutes within which a Managed Alert should be acted upon.","%Library.Integer",##class(Ens.Alerting.Utils).#DEFAULTACTIONWINDOW,"","","","","",0,"Alert Action Window","Alerting","Alerting Control",""),
			"AlertNotificationManager": $LB("AlertNotificationManager","The default Alert Notification Manager for use by the Managed Alert framework.","Ens.DataType.ConfigName","",128,"","","","",0,"Alert Notification Manager","Alerting","Alerting Control","selector?context={Ens.ContextSearch/ProductionItems?targets=1&productionName=@productionId}"),
			"AlertNotificationOperation": $LB("AlertNotificationOperation","The default Alert Notification Operation for use by the Managed Alert framework."_$char(13,10)_"The Notification Manager can be configured to send notifications to other hosts within the production,"_$char(13,10)_"but this setting provides a fallback for situations which are not captured by the logic in the Notification Manager.","Ens.DataType.ConfigName","",128,"","","","",0,"Alert Notification Operation","Alerting","Alerting Control","selector?context={Ens.ContextSearch/ProductionItems?targets=1&productionName=@productionId}"),
			"AlertNotificationRecipients": $LB("AlertNotificationRecipients","A comma-separated list of recipients that should be used for alert notifications"_$char(13,10)_"when no other recipients have been specified by the notification framework.","%Library.String","",2048,"","","","",0,"Alert Notification Recipients","Alerting","Alerting Control",""),
			"ShutdownTimeout": $LB("ShutdownTimeout","Amount of time to wait for a click on Stop Production to succeed","%Library.Numeric",120,"","","","","",0,"Shutdown Timeout","Additional","Additional Settings",""),
			"UpdateTimeout": $LB("UpdateTimeout","Amount of time to wait for Production updates to succeed <br>"_$char(13,10)_"This means both clicking UpdateProduction and clicking Apply for changes to a configuration item in a running production.","%Library.Numeric",10,"","","","","",0,"Update Timeout","Additional","Additional Settings",""),
			: "")
	}
	Else { // Fall back on getting the data dynamically 
		Set tRow = ..GetDynamicSettingRow(pSettingName,pSourceClass)
	}
	Quit tRow }
zEnumerateSettingsGetInfo(colinfo,parminfo,idinfo,qHandle,extoption=0,extinfo) public {
	Set colinfo=$lb($lb("Name",10,"Name"),$lb("Description",10,"Description"),$lb("Type",10,"Type"),$lb("Default",10,"Default"),$lb("MAXLEN",10,"MAXLEN"),$lb("MINVAL",10,"MINVAL"),$lb("MAXVAL",10,"MAXVAL"),$lb("VALUELIST",10,"VALUELIST"),$lb("DISPLAYLIST",10,"DISPLAYLIST"),$lb("IsRequired",10,"IsRequired"),$lb("LocalizedName",10,"LocalizedName"),$lb("Category",10,"Category"),$lb("LocalizedCategory",10,"LocalizedCategory"),$lb("EditorContext",10,"EditorContext"))
	Set parminfo=""
	Set idinfo=$lb(0,"")
	If extoption {
		Set extinfo=$lb("",$lb($lb("",""),$lb("",""),$lb("",""),$lb("",""),$lb("",""),$lb("",""),$lb("",""),$lb("",""),$lb("",""),$lb("",""),$lb("",""),$lb("",""),$lb("",""),$lb("","")))
	}
	Quit 1 }
zEnumerateSettingsGetODBCInfo(colinfo,parminfo,qHandle) public {
	set version = $Select($Get(%protocol,41)>40:4,1:3)
	Set metadata=$lb(1,14,"Name",12,50,0,2,"Name","NewProduction","SQLUser","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"Description",12,50,0,2,"Description","NewProduction","SQLUser","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"Type",12,50,0,2,"Type","NewProduction","SQLUser","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"Default",12,50,0,2,"Default","NewProduction","SQLUser","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"MAXLEN",12,50,0,2,"MAXLEN","NewProduction","SQLUser","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"MINVAL",12,50,0,2,"MINVAL","NewProduction","SQLUser","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"MAXVAL",12,50,0,2,"MAXVAL","NewProduction","SQLUser","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"VALUELIST",12,50,0,2,"VALUELIST","NewProduction","SQLUser","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"DISPLAYLIST",12,50,0,2,"DISPLAYLIST","NewProduction","SQLUser","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"IsRequired",12,50,0,2,"IsRequired","NewProduction","SQLUser","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"LocalizedName",12,50,0,2,"LocalizedName","NewProduction","SQLUser","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"Category",12,50,0,2,"Category","NewProduction","SQLUser","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"LocalizedCategory",12,50,0,2,"LocalizedCategory","NewProduction","SQLUser","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"EditorContext",12,50,0,2,"EditorContext","NewProduction","SQLUser","",$c(0,0,0,0,0,0,0,0,0,0,0,0),0)
	Set colcount=$li(metadata,2),cmdlen=colcount*10,parmcount=$li(metadata,3+cmdlen),pmdlen=parmcount*6,parminfo=$li(metadata,cmdlen+3,cmdlen+pmdlen+3)
	If version=4 {
		Set colinfo=$li(metadata,2,2+cmdlen)
	} Else {
		Set colinfo=$li(metadata,2,2)
		For i=0:1:colcount-1 Set colinfo=colinfo_$list(metadata,3+(i*10),11+(i*10))
	}
	Quit 1 }
]]></Routine>


<Class name="User.NewProduction">
<Super>Ens.Production</Super>
<TimeChanged>65846,51897.638994</TimeChanged>
<TimeCreated>65822,30969.059258</TimeCreated>

<XData name="ProductionDefinition">
<Data><![CDATA[
<Production Name="User.NewProduction" TestingEnabled="true" LogGeneralTraceEvents="false">
  <Description></Description>
  <ActorPoolSize>2</ActorPoolSize>
  <Item Name="User.Operation" Category="" ClassName="User.Operation" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="false" Schedule="">
  </Item>
  <Item Name="User.Select" Category="" ClassName="User.Select" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="false" Schedule="">
  </Item>
  <Item Name="Update" Category="" ClassName="User.UpdateOperation" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="false" Schedule="">
  </Item>
  <Item Name="Delete" Category="" ClassName="User.DeleteOperation" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="false" Schedule="">
  </Item>
  <Item Name="User.ALLUPDATE" Category="" ClassName="User.ALLUPDATE" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="false" Schedule="">
  </Item>
  <Item Name="InsertPerson" Category="" ClassName="User.InsertProcess" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="false" Schedule="">
  </Item>
</Production>
]]></Data>
</XData>
</Class>


<Routine name="User.Operation.1" type="INT" languagemode="0" generated="1" timestamp="65846,51888.426615"><![CDATA[
 ;User.Operation.1
 ;Generated for class User.Operation.  Do NOT edit. 04/12/2021 02:24:48PM
 ;;4C6E6C55;User.Operation
 ;
zGetRequestClassList() public {
 Set tList=""
 Set tList=tList_$lb("User.Request")
 Quit tList }
zGetResponseClassList(pRequest="") public {
 If pRequest="User.Request" Quit $lb("User.selectResponse")
 If pRequest="" Quit $lb("User.selectResponse")
 Quit "" }
zGetSettingRow(pSettingName="",pSourceClass="") public {
	Set tRow = ""
	// Check if the class has been compiled with the new generator
	If (pSourceClass = "User.Operation") {
		Set tRow = $case(pSettingName,
			"AlertGroups": $LB("AlertGroups","The Alert Groups to which this item belongs.","%Library.String","",2500,"","","","",0,"Alert Groups","Alerting","Alerting Control","selector?multiSelect=1&context={Ens.ContextSearch/ProductionAlertGroups?productionName=@productionId}"),
			"AlertOnError": $LB("AlertOnError","Send an Alert message whenever an error occurs here","%Library.Boolean",0,"","","","","",0,"Alert On Error","Alerting","Alerting Control",""),
			"AlertRetryGracePeriod": $LB("AlertRetryGracePeriod","When AlertOnError is True, and the Operation is retrying,"_$char(13,10)_"refrain from alerting if the Operation succeeds within this number of seconds after an error","%Library.Numeric",0,"",0,"","","",0,"Alert Retry Grace Period","Alerting","Alerting Control",""),
			"ArchiveIO": $LB("ArchiveIO","If set, the Adapter will log in the InterSystems IRIS I/O archive each input and output communication it has with its external system.","%Library.Boolean",0,"","","","","",0,"Archive IO","Dev","Development and Debugging",""),
			"BusinessPartner": $LB("BusinessPartner","Name of a Business Partner Profile associated with this item","%Library.String","",128,"","","","",0,"Business Partner","Info","Informational Settings","partnerSelector"),
			"FailureTimeout": $LB("FailureTimeout","Total number of seconds to keep trying to deliver the message. <br>"_$char(13,10)_"After this number of seconds has elapsed, the business operation discards the message data and returns an error code. <br>"_$char(13,10)_"To ensure that no message is ever skipped, enter a Failure Timeout value of -1, which means 'Never time out'. <br>"_$char(13,10)_"Use a setting of -1 when complete data delivery is critical, for example in health care applications. ","%Library.Numeric",15,"",-1,"","","",0,"Failure Timeout","Additional","Additional Settings",""),
			"InactivityTimeout": $LB("InactivityTimeout","Send an Alert message if this number of seconds elapses with no messages being processed by this item. <br/>"_$char(13,10)_"Note that this alert will be sent even if AlertOnError is False. <br/>"_$char(13,10)_"Zero means no alerts of this type will be sent.","%Library.Numeric",0,"",0,"","","",0,"Inactivity Timeout","Alerting","Alerting Control",""),
			"QueueCountAlert": $LB("QueueCountAlert","Number of messages on this item's queue needed to trigger an Alert message to be sent. Note that no further"_$char(13,10)_"alerts will be sent unless the number of messages on the queue drops below 80% of this number and then rises again to this number. <br/>"_$char(13,10)_"Note that this alert will be sent even if AlertOnError is False. <br/>"_$char(13,10)_"Zero means no alerts of this type will be sent.","%Library.Numeric",0,"",0,"","","",0,"Queue Count Alert","Alerting","Alerting Control",""),
			"QueueWaitAlert": $LB("QueueWaitAlert","The number of seconds a message at the front of the queue may have waited since being queued before an alert is triggered.<br/>"_$char(13,10)_"Only one alert will be raised per host item per sequential trigger of the queue wait threshold. <br/>"_$char(13,10)_"Note that this alert will be sent even if AlertOnError is False. <br/>"_$char(13,10)_"Zero means no alerts of this type will be sent.","%Library.Numeric",0,"",0,"","","",0,"Queue Wait Alert","Alerting","Alerting Control",""),
			"ReplyCodeActions": $LB("ReplyCodeActions","<p>A comma-separated list of codes specifying what action this Operation will take on various reply status conditions. "_$char(13,10)_"The format of the list is: <br/> &lt;code&gt;=&lt;actions&gt;,(&lt;code&gt;,&lt;code&gt;)=&lt;actions&gt;,...<br/>"_$char(13,10)_"Types of reply status condition are identified by a specification code:"_$char(13,10)_"<ul style=""list-style-type: none;"">"_$char(13,10)_"<li><b>E</b> - Error status returned from message handler</li>"_$char(13,10)_"<li><b>E#&lt;statuscode&gt;</b> - Error status returned from message handler has status code equal to &lt;statuscode&gt;</li>"_$char(13,10)_"<li><b>E*&lt;text&gt;</b> - Error status returned from message handler contains text string &lt;text&gt;</li>"_$char(13,10)_"<li><b>X</b> - there is no reply message at all</li>"_$char(13,10)_"</ul></p>"_$char(13,10)_"<p>The following values for &lt;actions&gt; may be used alone or in combinations: "_$char(13,10)_"<ul style=""list-style-type: none;"">"_$char(13,10)_"<li><b>C</b> - Treat the message as Completed OK.</li>"_$char(13,10)_"<li><b>W</b> - Log a warning. If no other non-warning &lt;actions&gt; are triggered, the message will be treated as Completed OK.</li>"_$char(13,10)_"<li><b>R</b> - Retry the message according to the configured RetryInterval and FailureTimeout; finally Fail unless a "_$char(13,10)_"different action is also specified.</li>"_$char(13,10)_"<li><b>S</b> - Suspend the message, log an error, and move on to try the next message.</li>"_$char(13,10)_"<li><b>D</b> - Disable the Operation, log an error and restore the message to the front of the Operation's queue.</li>"_$char(13,10)_"<li><b>F</b> - Fail with an error and move on to try the next message from the Operation's queue.</li></ul>"_$char(13,10)_"An example of a valid ReplyCodeActions specification is 'E#6301=R,E#&lt;Ens&gt;ErrGeneral=RD,E=F'. This specification will result in a "_$char(13,10)_"retry when error code 6301 is encountered. When error code &lt;Ens&gt;ErrGeneral is encountered, the Operation first retries to send "_$char(13,10)_"the message until FailureTimeout and then, if the error continues, it disables the Operation instead of failing. Any other errors will "_$char(13,10)_"cause the Operation to fail processing of the current message and return the error status to the caller, without retrying first.</p>"_$char(13,10)_"<p><b>The default behavior is 'E=F'.</b> Thus any error status will result in the error being logged and returned to the caller,"_$char(13,10)_"no retries will be attempted, and the Operation will move on to try the next message from its queue.</p>"_$char(13,10)_"<p>All codes where &lt;actions&gt; consists of only 'W' (for 'log a Warning') will be evaluated, and a warning will be"_$char(13,10)_"generated for each matching &lt;code&gt;. Other &lt;code&gt; values will be evaluated in left-to-right order, executing the"_$char(13,10)_"first matching &lt;code&gt; that has a non-warning &lt;actions&gt; value. As noted in the details for the 'W' flag, an error"_$char(13,10)_"that only triggers 'W' &lt;actions&gt; will be treated as Completed OK.</p>","%Library.String","",1000,"","","","",0,"Reply Code Actions","Additional","Additional Settings",""),
			"RetryInterval": $LB("RetryInterval","How frequently to retry access to the output system","%Library.Numeric",5,"",0,"","","",0,"Retry Interval","Additional","Additional Settings",""),
			"SendSuperSession": $LB("SendSuperSession","<p>Flag whether the  %SuperSession property ought to be included in the outbound message.</p>"_$char(13,10)_"<p>Including the Super Session in the outbound message depends on the transport mechanism.</p>"_$char(13,10)_"<p>InterSystems IRIS supports automatically including the %SuperSession in the HTTP Headers for"_$char(13,10)_"both the HTTP and SOAP Outbound Adapters based on this setting.</p>"_$char(13,10)_"<p>For other transport mechanisms custom code can call the host operation API: <METHOD>IncludeSuperSession</METHOD>(.tSC)"_$char(13,10)_"and then use as appropriate the host property value of <PROPERTY>%SuperSession</PROPERTY> if IncludeSuperSession"_$char(13,10)_"API returns true.</p>"_$char(13,10)_"<p>The IncludeSuperSession() API returns true if the operation ought to send a super session based on this"_$char(13,10)_"host setting of SendSuperSession and the %SuperSession property is not empty.</p>"_$char(13,10)_"<p>The IncludeSuperSession() API will populate the host property <PROPERTY>%SuperSession</PROPERTY>"_$char(13,10)_"with either a generated Super Session or leave it with the Super Session passed to it with the request.</p>"_$char(13,10)_"<p>The IncludeSuperSession() API will return false if either SendSuperSession"_$char(13,10)_"is false or there was an error generating the super session (tSC will be populated accordingly).</p>"_$char(13,10)_"Example use in custom adapter Code: <br>"_$char(13,10)_"<pre>"_$char(13,10)_"#dim tSC As %Status = $$$OK"_$char(13,10)_"If ..BusinessHost.IncludeSuperSession(.tSC) {"_$char(13,10)_" /*"_$char(13,10)_"	  code to include ..BusinessHost.%SuperSession in output"_$char(13,10)_"	  based on transport mechanism."_$char(13,10)_" */	"_$char(13,10)_"}</pre>"_$char(13,10)_"<p>See also Host methods <method>GenerateSuperSession</method> and <method>OnGenerateSuperSession</method></p>","%Library.Boolean","","","","","","",0,"Send SuperSession","Additional","Additional Settings",""),
			"ThrottleDelay": $LB("ThrottleDelay","Duration of forced idleness before processing the next message, in milliseconds","%Library.Numeric",0,"","","","","",0,"Throttle Delay","Additional","Additional Settings",""),
			: "")
	}
	Else { // Fall back on getting the data dynamically 
		Set tRow = ..GetDynamicSettingRow(pSettingName,pSourceClass)
	}
	Quit tRow }
zMake(pRequest,pResponse) public {
	set Data = ##class(User.Peter).%New()
	set tsc = 1
	set pResponse = ##class(User.selectResponse).%New()
	try {
		set sql = "INSERT INTO SQLUser.Peters(Age, DOB, Gender, Name, Race, Surname) VALUES (?,?,?,?,?,?)"
		set statement = ##class(%SQL.Statement).%New()
		set tsc = statement.%Prepare(sql)
		set result = statement.%Execute(pRequest.Age, pRequest.DOB, pRequest.Gender, pRequest.Name, pRequest.Race, pRequest.Surname)
		set pResponse.Age = pRequest.Age
		set pResponse.Name = pRequest.Name
		set pResponse.Surname = pRequest.Surname
		set pResponse.Race = pRequest.Race
		set pResponse.Gender = pRequest.Gender
		set pResponse.DOB = pRequest.DOB
		set pResponse.Status = "Success"
		return result
	}
	catch ex {
		set tsc = ex.AsStatus()
	}
	set pResponse.Status = "Please enter Valid information"
	return tsc }
zMessageHandler(pRequest,pResponse) public {
 Set $ZT="Trap",$EC="",tSC=1
 do {
 If pRequest.%IsA("User.Request") {
  Do:..ArchiveIO ..NewIOLogEntry(0,1,"","Make",..%SessionId,pRequest)
  Set ^IRIS.Temp.EnsJobMonitor($namespace,"sys"_":"_$Job,..%ConfigName,"%Method")="Make",^IRIS.Temp.EnsJobMonitor($namespace,"sys"_":"_$Job,..%ConfigName,"%LastActivity")=$zdatetime($ztimestamp,3,,3)
  Set tSC=..Make(.pRequest,.pResponse)
  Set ^IRIS.Temp.EnsJobMonitor($namespace,"sys"_":"_$Job,..%ConfigName,"%Method")="",^IRIS.Temp.EnsJobMonitor($namespace,"sys"_":"_$Job,..%ConfigName,"%LastActivity")=$zdatetime($ztimestamp,3,,3)
  Do:$S($D(%Ensemble("DoTrace")):%Ensemble("DoTrace"),1:##class(Ens.Util.Trace).DoTrace()) ##class(Ens.Util.Trace).WriteTrace("system",$classname(),"MessageHandler","Make() returned with status "_$$getAllErrorTexts^EnsUtil(tSC)_", Retry="_..Retry_", SuspendMessage="_..SuspendMessage_", DeferResponse="_..DeferResponse_", Response="_$S('($Data(pResponse)#2&&$IsObject(pResponse)):"", 1:pResponse_"/"_$S('pResponse.%Extends("%Persistent"):"", 1:pResponse.%Id())))
  Do:$IsObject(..IOLogEntry) ..CloseIOLogEntry(tSC,"",$G(pResponse))
  Quit
 }
 Do:..ArchiveIO ..NewIOLogEntry(0,1,"","OnMessage",..%SessionId,pRequest)
 Set ^IRIS.Temp.EnsJobMonitor($namespace,"sys"_":"_$Job,..%ConfigName,"%Method")="OnMessage",^IRIS.Temp.EnsJobMonitor($namespace,"sys"_":"_$Job,..%ConfigName,"%LastActivity")=$zdatetime($ztimestamp,3,,3)
 Set tSC=..OnMessage(.pRequest,.pResponse)
 Set ^IRIS.Temp.EnsJobMonitor($namespace,"sys"_":"_$Job,..%ConfigName,"%Method")="",^IRIS.Temp.EnsJobMonitor($namespace,"sys"_":"_$Job,..%ConfigName,"%LastActivity")=$zdatetime($ztimestamp,3,,3)
 Do:$S($D(%Ensemble("DoTrace")):%Ensemble("DoTrace"),1:##class(Ens.Util.Trace).DoTrace()) ##class(Ens.Util.Trace).WriteTrace("system",$classname(),"MessageHandler","OnMessage() returned with status "_$$getAllErrorTexts^EnsUtil(tSC)_", Retry="_..Retry_", SuspendMessage="_..SuspendMessage_", DeferResponse="_..DeferResponse_", Response="_$S('($Data(pResponse)#2&&$IsObject(pResponse)):"", 1:pResponse_"/"_$S('pResponse.%Extends("%Persistent"):"", 1:pResponse.%Id())))
 Do:$IsObject(..IOLogEntry) ..CloseIOLogEntry(tSC,"",pResponse)
 } While 0
Exit
 If $TLevel>0 Set tTL=$TLevel  While $TLevel>0 { TCommit } Do ##class(Ens.Util.Log).LogWarning($classname(),"MessageHandler",tTL_" open user transaction"_$S(tTL>1:"s",1:"")_" found after BO MessageHandler method; committing before proceeding")
 Quit tSC
Trap
 Set $ZT="",tSC=##class(Ens.Util.Error).ExceptionStatus()
 Goto Exit }
zMessageHeaderHandler(pRequestHeader,pResponseHeader) public {
	Set $EC="",(tSC,tSCSuspend)=1, tAborted=0, pResponseHeader="", tDoAlert=""
	try {
		Set ..%RequestHeader=pRequestHeader, %Ensemble("CurrentHeaderId") = pRequestHeader.%Id()
		If pRequestHeader.MessageBodyClassName'="" {
			Set tRequest = $classmethod(pRequestHeader.MessageBodyClassName,"%OpenId",pRequestHeader.MessageBodyId,,.tSC)
			If '$IsObject(tRequest) Set tSC=$$Error^%apiOBJ("<Ens>ErrGeneral","Could not open MessageBody "_pRequestHeader.MessageBodyId_" for MessageHeader #"_pRequestHeader.%Id()_" with body class "_pRequestHeader.MessageBodyClassName_":"_$$getAllErrorTexts^EnsUtil(tSC))  Quit
		} Else {
			Set tRequest="", tSC=$$Error^%apiOBJ("<Ens>ErrGeneral","No MessageBody classname for MessageHeader #"_pRequestHeader.%Id())  Quit
		}
		Do ##class(Ens.Util.Statistics).InitStats(..%ConfigName)
		Set tConfigName = ..%ConfigName, tResponse = ""
		Do pRequestHeader.SetStatus(3)
		Set (..%SessionId,%Ensemble("SessionId")) = pRequestHeader.SessionId
		Set ..%SuperSession=pRequestHeader.SuperSession
		Set (tEndTime,..%LastReportedError)="", ..RetryCount=1, (..Retry,..SuspendMessage,..DeferResponse,..%AlertStartTime,tFailureTimedOut,tTerminate)=0
		While 1 { ; Retry loop
			Set tTimeCalled=$ZH, tDoAlert=""
			Set:'tEndTime tEndTime = tTimeCalled + ..FailureTimeout
			If $D(^Ens.Runtime("CrashedMessage",pRequestHeader.%Id())) {
				Kill ^Ens.Runtime("CrashedMessage",pRequestHeader.%Id())
				Set tSC=##class(Ens.Util.Error).EnsError($classname(),"MessageHeaderHandler","<Ens>ErrPreviouslyCrashedMessage",pRequestHeader.%Id())
			} Else {
				Set tSC=..MessageHandler(tRequest,.tResponse)
			}
			If ('tSC) {
				Set $EC=""  try {
					Do:$S($D(%Ensemble("DoTrace")):%Ensemble("DoTrace"),1:##class(Ens.Util.Trace).DoTrace()) ##class(Ens.Util.Trace).WriteTrace("system",$classname(),"MessageHeaderHandler","calling OnError R")
					Set tDoAlert=..OnError(.tSC)
				} catch {
					Set tSC=$select(+tSC:##class(Ens.Util.Error).EnsSystemError($classname(),"MessageHeaderHandler"),1:$$AppendStatus^%occSystem(tSC,##class(Ens.Util.Error).EnsSystemError($classname(),"MessageHeaderHandler"))), tDoAlert=1
				}
				If $TLevel>0 Set tTL=$TLevel  While $TLevel>0 { TCommit } Do ##class(Ens.Util.Log).LogWarning($classname(),"MessageHeaderHandler",tTL_" open user transaction"_$S(tTL>1:"s",1:"")_" found after OnError() R; committing before proceeding")
			}
			Set $EC=""  try {
				Set tMHSC=tSC
				Set tAction=..OnGetReplyAction(tRequest,.tResponse,.tSC)
				Set:""'=tAction tSC=..doReplyAction(tAction, tRequest,.tResponse,tSC)
				If tSC'=tMHSC&&('tSC) {
					Do:$S($D(%Ensemble("DoTrace")):%Ensemble("DoTrace"),1:##class(Ens.Util.Trace).DoTrace()) ##class(Ens.Util.Trace).WriteTrace("system",$classname(),"MessageHeaderHandler","calling OnError A")
					Set tDoAlert=..OnError(.tSC)
				}
			} catch {
				Set tSC=$select(+tSC:##class(Ens.Util.Error).EnsSystemError($classname(),"MessageHeaderHandler"),1:$$AppendStatus^%occSystem(tSC,##class(Ens.Util.Error).EnsSystemError($classname(),"MessageHeaderHandler"))), tDoAlert=1
			}
			If $TLevel>0 Set tTL=$TLevel  While $TLevel>0 { TCommit } Do ##class(Ens.Util.Log).LogWarning($classname(),"MessageHeaderHandler",tTL_" open user transaction"_$S(tTL>1:"s",1:"")_" found after ReplyAction OnError() A; committing before proceeding")
			If ..SuspendMessage {
				Set tSCSuspend=tSC
				Set tSC=$$Error^%apiOBJ("<Ens>ErrSuspending",pRequestHeader.%Id(),$$getAllErrorTexts^EnsUtil(tSC))
				Quit
			}
			Quit:..DeferResponse
			Quit:'..Retry
			Set ..Retry=0
			If ('tSC) {
				Set tTxt=$P($$getAllErrorTexts^EnsUtil(tSC)," -- ") ; strip off "logged as" varying text
				Set:'..%AlertStartTime&&..AlertOnError&&..AlertRetryGracePeriod&&(tTxt'=..%LastReportedError) ..%AlertStartTime=$ZH
				If ..%AlertStartTime {
					If $ZH>=(..%AlertStartTime+..AlertRetryGracePeriod) {
						Set ..%AlertStartTime=0
						If tTxt'=..%LastReportedError { Do ##class(Ens.Util.Log).LogError($classname(),"MessageHeaderHandler","Alerting at expiration of retry grace period ("_..AlertRetryGracePeriod_") for "_tTxt) }
						Else { Do ##class(Ens.Util.Log).LogInfo($classname(),"MessageHeaderHandler","Alerting at expiration of retry grace period ("_..AlertRetryGracePeriod_") for "_tTxt) }
					} Else {
						Set tDoAlert=0
						If tTxt'=..%LastReportedError { Do ##class(Ens.Util.Log).LogError($classname(),"MessageHeaderHandler","Not Alerting during retry grace period ("_..AlertRetryGracePeriod_") for "_tTxt) }
						Else { Do ##class(Ens.Util.Log).LogInfo($classname(),"MessageHeaderHandler","Not Alerting during retry grace period ("_..AlertRetryGracePeriod_") for "_tTxt) }
					}
				} Else {
					If tTxt'=..%LastReportedError { Do ##class(Ens.Util.Log).LogStatus($classname(),"MessageHeaderHandler",tSC) }
					Else { Set tDoAlert=0 }
				}
				Do:tDoAlert&&..AlertOnError ..SendAlert(##class(Ens.AlertRequest).%New($LB(..%ConfigName,$$getAllErrorTexts^EnsUtil(tSC))))
				Set tDoAlert=0
			} Else { Set ..%AlertStartTime=0, tTxt="" }
			Set ..%LastReportedError=tTxt
			If ..%QuitTask { Set tTerminate=1 }
			Else {
				If ..FailureTimeout'=-1 {
					Set tNow=$ZH
					If ..NoFailWhileDisconnected {
						try { Set tStayConnected=..Adapter.StayConnected }
						catch { Set tStayConnected=1 }
						If tStayConnected {
							try { Set tConnected=..Adapter.Connected }
							catch { Set tConnected=1 }
							If 'tConnected {
								If tNow>tEndTime Do:$S($D(%Ensemble("DoTrace")):%Ensemble("DoTrace"),1:##class(Ens.Util.Trace).DoTrace()) ##class(Ens.Util.Trace).WriteTrace("system",$classname(),"MessageHeaderHandler","Ignoring FailureTimeout while disconnected")
								Set:$G(tLast) tEndTime=tEndTime+(tNow-tLast) ; keep up with our disconnected time
								Set tLast=tNow
							} ElseIf $G(tLast) {
								Set tMinInterval=..RetryInterval+1  Set:..FailureTimeout<..RetryInterval&&(..FailureTimeout>0) tMinInterval=..FailureTimeout+1
								If tEndTime-tNow<tMinInterval Do:$S($D(%Ensemble("DoTrace")):%Ensemble("DoTrace"),1:##class(Ens.Util.Trace).DoTrace()) ##class(Ens.Util.Trace).WriteTrace("system",$classname(),"MessageHeaderHandler","Extending FailureTimeout by "_(tNow+tMinInterval-tEndTime)_" after reconnecting")  Set tEndTime=tNow+tMinInterval
								Kill tLast
							}
						}
					}
					If tNow>tEndTime {
						Set tFailureTimedOut=1, tSC=$$Error^%apiOBJ("<Ens>ErrFailureTimeout", ..FailureTimeout, $$getAllErrorTexts^EnsUtil(tSC), $classname()), tDoAlert=""
						Set $EC=""  try {
							Set tMHSC=tSC
							Set tDoDefault=..OnFailureTimeout(tRequest,.tResponse,.tSC)
							Set:tDoDefault tSC=$S(""=tAction:tSC,1:..finalReplyAction(tAction,tSC,1))
							Set:tSC'=tMHSC&&('tSC) tDoAlert=""
						} catch {
							Set tSC=$select(+tSC:##class(Ens.Util.Error).EnsSystemError($classname(),"MessageHeaderHandler"),1:$$AppendStatus^%occSystem(tSC,##class(Ens.Util.Error).EnsSystemError($classname(),"MessageHeaderHandler"))), tDoAlert=""
						}
						If $TLevel>0 Set tTL=$TLevel  While $TLevel>0 { TCommit } Do ##class(Ens.Util.Log).LogWarning($classname(),"MessageHeaderHandler",tTL_" open user transaction"_$S(tTL>1:"s",1:"")_" found after OnFailureTimeout(); committing before proceeding")
						Set:..SuspendMessage tSCSuspend=tSC
						Quit:'..%QuitTask
					}
				}
				If ..%QuitTask { Set tTerminate=1 }
				Else {
					Set ^IRIS.Temp.EnsHostMonitor($namespace,tConfigName,"%Status")="Retry",^IRIS.Temp.EnsHostMonitor($namespace,tConfigName,"%LastActivity")=$zdatetime($ztimestamp,3,,3)
					Set ^IRIS.Temp.EnsJobMonitor($namespace,"sys"_":"_$Job,tConfigName,"%Status")="Retry",^IRIS.Temp.EnsJobMonitor($namespace,"sys"_":"_$Job,tConfigName,"%LastActivity")=$zdatetime($ztimestamp,3,,3)
					Set tWaitTime = tTimeCalled + ..RetryInterval - $ZH
					Set tSC1=##class(Ens.Queue).DeQueue("SystemSignal:"_$Job,,$S(tWaitTime<0:0, 1:tWaitTime),,0)  If ('tSC1) Set tSC=$select(+tSC:tSC1,1:$$AppendStatus^%occSystem(tSC,tSC1))  Quit
					Set tTerminate=##class(Ens.Job).ShouldTerminate()
				} ; %QuitTask
			} ; %QuitTask
			Set tSBQ=##class(Ens.Job).ShouldBeQuiescent()
			If tSBQ || tTerminate {
				If pRequestHeader.Priority>2||tTerminate {
					Set tTerminate=1
					If 'tFailureTimedOut||(..%QuitTask>1) {
						If pRequestHeader.TargetQueueName="" {
							/* 
								If no target queue name then we cannot put back to queue.
								Double check invocation InProc and mark so we will RecoverActiveMessage() later			
							*/
							If pRequestHeader.Invocation=2 {
								If $Data(^Ens.ActiveMessage("sys"_":"_$Job),tActiveID) {
									Do ##class(Ens.Util.Log).LogInfo($classname(),"MessageHeaderHandler","Retry loop exited due to shutdown request for message "_..%RequestHeader.%Id()_" ; re-queueing corresponding Active Message:"_tActiveID_$S((''tSC):"",1:" - original error: "_$$getAllErrorTexts^EnsUtil(tSC)))								
									Set tSCActive = ##class(Ens.Job).RecoverActiveMessage(tActiveID,$Job,0)
									If (''tSCActive) Kill ^Ens.ActiveMessage("sys"_":"_$Job)
								} Else {
									Do ##class(Ens.Util.Log).LogError($classname(),"MessageHeaderHandler","Retry loop exited due to shutdown request for message "_..%RequestHeader.%Id()_" ; cannot re-queue corresponding Active Message since it is not defined"_$S((''tSC):"",1:" - original error: "_$$getAllErrorTexts^EnsUtil(tSC)))
								}
							} Else {
								Do ##class(Ens.Util.Log).LogError($classname(),"MessageHeaderHandler","Retry loop exited due to shutdown request for message "_..%RequestHeader.%Id()_" ; cannot re-queue since no target queue name and not InProc"_$S((''tSC):"",1:" - original error: "_$$getAllErrorTexts^EnsUtil(tSC)))
							}
						} Else {
							Set tSCx=tSC, tSC=##class(Ens.Queue).PutBackToQueue(pRequestHeader)
							Do ##class(Ens.Util.Log).LogInfo($classname(),"MessageHeaderHandler","Retry loop exited due to shutdown request for message "_..%RequestHeader.%Id()_" ; re-queueing"_$S((''tSCx):"",1:" - original error: "_$$getAllErrorTexts^EnsUtil(tSCx)))
						}
					} Else {
						Do ##class(Ens.Util.Log).LogInfo($classname(),"MessageHeaderHandler","Retry loop exited due to shutdown request for message "_..%RequestHeader.%Id()_" ; quitting with status "_$$getAllErrorTexts^EnsUtil(tSC))
					}
					Quit
				}
				Do ##class(Ens.Util.Log).LogInfo($classname(),"MessageHeaderHandler","Ignoring "_$S(tSBQ:"Quiescent",1:"Terminate")_" request while processing high priority (i.e. synchronous) request "_..%RequestHeader.%Id())
			}
			If ##class(Ens.Job).ShouldAbort() {
				Do ##class(Ens.Util.Log).LogWarning($classname(),"MessageHeaderHandler","Message "_..%RequestHeader.%Id()_" aborted as requested by signal for job "_$J_$S((''tSC):"",1:" - original error: "_$$getAllErrorTexts^EnsUtil(tSC)))
				Set tSC=1, tAborted=1
				Quit
			}
			If ##class(Ens.Job).ShouldSuspend() {
				Do ##class(Ens.Util.Log).LogWarning($classname(),"MessageHeaderHandler","Message "_pRequestHeader.%Id()_" suspended as requested by signal for job "_$J_$S((''tSC):"", 1:" - original error: "_$$getAllErrorTexts^EnsUtil(tSC)))
				Set tSC=1, ..SuspendMessage=1
				Quit
			}
			Set ..RetryCount=..RetryCount+1
			Set ^IRIS.Temp.EnsJobMonitor($namespace,"sys"_":"_$Job,tConfigName,"%Retry")=..RetryCount,^IRIS.Temp.EnsJobMonitor($namespace,"sys"_":"_$Job,tConfigName,"%LastActivity")=$zdatetime($ztimestamp,3,,3)
			Do:$S($D(%Ensemble("DoTrace")):%Ensemble("DoTrace"),1:##class(Ens.Util.Trace).DoTrace()) ##class(Ens.Util.Trace).WriteTrace("system",$classname(),"MessageHeaderHandler","Retrying Request Header Id "_pRequestHeader.%Id()_" - try #"_..RetryCount)
		} ; Retry loop
		Set ^IRIS.Temp.EnsJobMonitor($namespace,"sys"_":"_$Job,tConfigName,"%Retry")="",^IRIS.Temp.EnsJobMonitor($namespace,"sys"_":"_$Job,tConfigName,"%LastActivity")=$zdatetime($ztimestamp,3,,3)
		If ('tSC) {
			If ""=tDoAlert {
				Set $EC=""  try {
					Do:$S($D(%Ensemble("DoTrace")):%Ensemble("DoTrace"),1:##class(Ens.Util.Trace).DoTrace()) ##class(Ens.Util.Trace).WriteTrace("system",$classname(),"MessageHeaderHandler","calling OnError E")
					Set tDoAlert=..OnError(.tSC)
				} catch {
					Set tSC=$select(+tSC:##class(Ens.Util.Error).EnsSystemError($classname(),"MessageHeaderHandler"),1:$$AppendStatus^%occSystem(tSC,##class(Ens.Util.Error).EnsSystemError($classname(),"MessageHeaderHandler"))), tDoAlert=1
				}
				If $TLevel>0 Set tTL=$TLevel  While $TLevel>0 { TCommit } Do ##class(Ens.Util.Log).LogWarning($classname(),"MessageHeaderHandler",tTL_" open user transaction"_$S(tTL>1:"s",1:"")_" found after OnError() E; committing before proceeding")
			}
			Quit:'..SuspendMessage&&'..DeferResponse
		}
		Quit:tTerminate
		Set tConfigName=..%ConfigName
		Set tUTCH=$ztimestamp If $I(^IRIS.Temp.EnsHostMonitor($namespace,tConfigName,"%Count")),$I(^IRIS.Temp.EnsHostCounter($namespace,tConfigName,+tUTCH,$P(tUTCH,",",2)\10)) {} Set ^IRIS.Temp.EnsHostMonitor($namespace,tConfigName,"%Status")="OK",^IRIS.Temp.EnsHostMonitor($namespace,tConfigName,"%LastActivity")=$zdatetime($ztimestamp,3,,3)
		If $I(^IRIS.Temp.EnsJobMonitor($namespace,"sys"_":"_$Job,tConfigName,"%Count")) {} Set ^IRIS.Temp.EnsJobMonitor($namespace,"sys"_":"_$Job,tConfigName,"%Status")="OK",^IRIS.Temp.EnsJobMonitor($namespace,"sys"_":"_$Job,tConfigName,"%LastActivity")=$zdatetime($ztimestamp,3,,3)
		If tAborted {
			Do pRequestHeader.SetStatus(7)
			Quit
		}
		If ..SuspendMessage {
			Do pRequestHeader.SetStatus(5)
			If ('tSC) {
				If ('tSCSuspend) { Do ##class(Ens.Util.Log).LogStatus($classname(),"MessageHeaderHandler",tSC) }
				Else { Do ##class(Ens.Util.Log).LogWarning($classname(),"MessageHeaderHandler",$$GetOneStatusText^%apiOBJ(tSC)) }
			}
			Set tSC=1
			Quit
		}
		If ..DeferResponse {
			Do pRequestHeader.SetStatus(6)
			If ('tSC) {
				Do ##class(Ens.Util.Log).LogWarning($classname(),"MessageHeaderHandler","Deferring Response to Request "_pRequestHeader.%Id()_"; Operation returned error "_$$getAllErrorTexts^EnsUtil(tSC))
				Set tSC=1
			} Else {
				Do:$S($D(%Ensemble("DoTrace")):%Ensemble("DoTrace"),1:##class(Ens.Util.Trace).DoTrace()) ##class(Ens.Util.Trace).WriteTrace("system",$classname(),"MessageHeaderHandler","Deferring Response to Request "_pRequestHeader.%Id())
			}
			Quit
		}
		Do pRequestHeader.SetStatus(9)
		If (''tSC) && pRequestHeader.needsReply() {
			Set tSC=pRequestHeader.NewResponseMessage(.pResponseHeader,tResponse,..%SuperSession)
		}
	} catch {
		Set tSC=##class(Ens.Util.Error).EnsSystemError($classname(),"MessageHeaderHandler"), tDoAlert=1
	}
	If ('tSC) {
		Set:(tDoAlert="") tDoAlert = ..OnError(tSC)
		Set tTxt=$P($$getAllErrorTexts^EnsUtil(tSC)," -- ") ; strip off "logged as" varying text
		If tTxt'=..%LastReportedError { Do ##class(Ens.Util.Log).LogStatus($classname(),"MessageHeaderHandler",tSC) }
		Set ..%LastReportedError=tTxt
		Set tConfigName=..%ConfigName
		Set ^IRIS.Temp.EnsHostMonitor($namespace,tConfigName,"%Status")="Error",^IRIS.Temp.EnsHostMonitor($namespace,tConfigName,"%LastActivity")=$zdatetime($ztimestamp,3,,3)
		Set ^IRIS.Temp.EnsJobMonitor($namespace,"sys"_":"_$Job,tConfigName,"%Status")="Error",^IRIS.Temp.EnsJobMonitor($namespace,"sys"_":"_$Job,tConfigName,"%LastActivity")=$zdatetime($ztimestamp,3,,3)
		Do:'tAborted pRequestHeader.SetStatus(8)
		Do:tDoAlert&&..AlertOnError ..SendAlert(##class(Ens.AlertRequest).%New($LB(..%ConfigName,$$getAllErrorTexts^EnsUtil(tSC))))
	} ElseIf ..SuspendMessage&&('tSCSuspend) {
		Do:tDoAlert&&..AlertOnError ..SendAlert(##class(Ens.AlertRequest).%New($LB(..%ConfigName,$$getAllErrorTexts^EnsUtil(tSCSuspend))))
	}
	Set ..%SessionId=""
	Set ..%SuperSession=""
	Do ##class(Ens.Util.Statistics).RecordStats(3,..%ConfigName)
	Kill %Ensemble("SessionId")
	Kill %Ensemble("CurrentHeaderId")
	Set ..%RequestHeader=""
	Quit tSC
cleanNum(str)
	Set f=0  For { Set f=$F(str,"#",f)  Quit:'f
		For i=f:1 { Quit:$E(str,i)'?1N  Set $E(str,i)="",i=i-1 }
	}
	Quit str }
zOnKeepalive(pAdapterStatus) public {
	Set tSC=pAdapterStatus
	If ('tSC) {
		Do:$S($D(%Ensemble("DoTrace")):%Ensemble("DoTrace"),1:##class(Ens.Util.Trace).DoTrace()) ##class(Ens.Util.Trace).WriteTrace("system",$classname(),"OnKeepalive","calling OnError K")
		Set tDoAlert=..OnError(.tSC)
		If ('tSC) {
			Set tTxt=$P($$getAllErrorTexts^EnsUtil(tSC)," -- ") ; strip off "logged as" varying text
			Set:'..%AlertStartTime&&..AlertOnError&&..AlertRetryGracePeriod&&(tTxt'=..%LastReportedError) ..%AlertStartTime=$ZH
			If ..%AlertStartTime {
				If $ZH>=(..%AlertStartTime+..AlertRetryGracePeriod) {
					Set ..%AlertStartTime=0
					If tTxt'=..%LastReportedError { Do ##class(Ens.Util.Log).LogError($classname(),"OnKeepalive","Alerting at expiration of retry grace period ("_..AlertRetryGracePeriod_") for "_tTxt) }
					Else { Do ##class(Ens.Util.Log).LogInfo($classname(),"OnKeepalive","Alerting at expiration of retry grace period ("_..AlertRetryGracePeriod_") for "_tTxt) }
				} Else {
					Set tDoAlert=0
					If tTxt'=..%LastReportedError { Do ##class(Ens.Util.Log).LogError($classname(),"OnKeepalive","Not Alerting during retry grace period ("_..AlertRetryGracePeriod_") for "_tTxt) }
					Else { Do ##class(Ens.Util.Log).LogInfo($classname(),"OnKeepalive","Not Alerting during retry grace period ("_..AlertRetryGracePeriod_") for "_tTxt) }
				}
			} Else {
				If tTxt'=..%LastReportedError { Do ##class(Ens.Util.Log).LogStatus($classname(),"OnKeepalive",tSC) }
				Else { Set tDoAlert=0 }
			}
			Do:tDoAlert&&..AlertOnError ..SendAlert(##class(Ens.AlertRequest).%New($LB(..%ConfigName,$$getAllErrorTexts^EnsUtil(tSC))))
			Set tConfigName=..%ConfigName
			Set ^IRIS.Temp.EnsHostMonitor($namespace,tConfigName,"%Status")="Error",^IRIS.Temp.EnsHostMonitor($namespace,tConfigName,"%LastActivity")=$zdatetime($ztimestamp,3,,3)
			Set ^IRIS.Temp.EnsJobMonitor($namespace,"sys"_":"_$Job,tConfigName,"%Status")="Error",^IRIS.Temp.EnsJobMonitor($namespace,"sys"_":"_$Job,tConfigName,"%LastActivity")=$zdatetime($ztimestamp,3,,3)
			Set:'..%QuitTask tSC=1
		} Else { Set ..%AlertStartTime=0, tTxt="" }
	} Else { Set ..%AlertStartTime=0, tTxt="" }
	Set ..%LastReportedError=tTxt
	Quit tSC }
zfinalReplyAction(pAction,pSC,pFixError) public {
	If pAction["S" {
		Set ..SuspendMessage=1, tActionDesc="Suspending on"
	} ElseIf pAction["D" {
		Set:($ZS<(2**31)) $ZS=(2**31)
		Set tActionDesc="Disabling on"
		Do ##class(Ens.Job).Stop($Job)
		Do ##Class(Ens.Director).EnableConfigItem(..%ConfigName,0,0)
		Do ..SendRequestAsync("Ens.ScheduleHandler","")
		Set ..%QuitTask=1+(pAction'["F"), ..Retry=1 ; we are quitting but the retry flag will force us to requeue the current message
	} ElseIf pAction["F" {
		// No work required here ; just quit with error
		Set tActionDesc="Discarding message on"
		Set ..SuspendMessage=0
	} Else { ; ??
		Do ##class(Ens.Util.Log).LogWarning($classname(),"finalReplyAction",$$getAllErrorTexts^EnsUtil(pSC))
		Set pSC=1, pFixError=0
	}
	Set:pFixError pSC=$$Error^%apiOBJ("<Ens>ErrGeneral",tActionDesc_" "_$$getAllErrorTexts^EnsUtil(pSC))
	Quit pSC }
zEnumerateSettingsGetInfo(colinfo,parminfo,idinfo,qHandle,extoption=0,extinfo) public {
	Set colinfo=$lb($lb("Name",10,"Name"),$lb("Description",10,"Description"),$lb("Type",10,"Type"),$lb("Default",10,"Default"),$lb("MAXLEN",10,"MAXLEN"),$lb("MINVAL",10,"MINVAL"),$lb("MAXVAL",10,"MAXVAL"),$lb("VALUELIST",10,"VALUELIST"),$lb("DISPLAYLIST",10,"DISPLAYLIST"),$lb("IsRequired",10,"IsRequired"),$lb("LocalizedName",10,"LocalizedName"),$lb("Category",10,"Category"),$lb("LocalizedCategory",10,"LocalizedCategory"),$lb("EditorContext",10,"EditorContext"))
	Set parminfo=""
	Set idinfo=$lb(0,"")
	If extoption {
		Set extinfo=$lb("",$lb($lb("",""),$lb("",""),$lb("",""),$lb("",""),$lb("",""),$lb("",""),$lb("",""),$lb("",""),$lb("",""),$lb("",""),$lb("",""),$lb("",""),$lb("",""),$lb("","")))
	}
	Quit 1 }
zEnumerateSettingsGetODBCInfo(colinfo,parminfo,qHandle) public {
	set version = $Select($Get(%protocol,41)>40:4,1:3)
	Set metadata=$lb(1,14,"Name",12,50,0,2,"Name","Operation","SQLUser","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"Description",12,50,0,2,"Description","Operation","SQLUser","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"Type",12,50,0,2,"Type","Operation","SQLUser","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"Default",12,50,0,2,"Default","Operation","SQLUser","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"MAXLEN",12,50,0,2,"MAXLEN","Operation","SQLUser","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"MINVAL",12,50,0,2,"MINVAL","Operation","SQLUser","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"MAXVAL",12,50,0,2,"MAXVAL","Operation","SQLUser","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"VALUELIST",12,50,0,2,"VALUELIST","Operation","SQLUser","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"DISPLAYLIST",12,50,0,2,"DISPLAYLIST","Operation","SQLUser","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"IsRequired",12,50,0,2,"IsRequired","Operation","SQLUser","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"LocalizedName",12,50,0,2,"LocalizedName","Operation","SQLUser","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"Category",12,50,0,2,"Category","Operation","SQLUser","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"LocalizedCategory",12,50,0,2,"LocalizedCategory","Operation","SQLUser","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"EditorContext",12,50,0,2,"EditorContext","Operation","SQLUser","",$c(0,0,0,0,0,0,0,0,0,0,0,0),0)
	Set colcount=$li(metadata,2),cmdlen=colcount*10,parmcount=$li(metadata,3+cmdlen),pmdlen=parmcount*6,parminfo=$li(metadata,cmdlen+3,cmdlen+pmdlen+3)
	If version=4 {
		Set colinfo=$li(metadata,2,2+cmdlen)
	} Else {
		Set colinfo=$li(metadata,2,2)
		For i=0:1:colcount-1 Set colinfo=colinfo_$list(metadata,3+(i*10),11+(i*10))
	}
	Quit 1 }
]]></Routine>


<Class name="User.Operation">
<Super>Ens.BusinessOperation</Super>
<TimeChanged>65846,51886.210577</TimeChanged>
<TimeCreated>65822,29947.777976</TimeCreated>

<Method name="Make">
<FormalSpec>pRequest:User.Request,*pResponse:User.selectResponse</FormalSpec>
<Implementation><![CDATA[
	
	set Data = ##class(User.Peter).%New()
	
	set tsc = $$$OK

	set pResponse = ##class(User.selectResponse).%New()
	
	
	try {
		set sql = "INSERT INTO SQLUser.Peters(Age, DOB, Gender, Name, Race, Surname) VALUES (?,?,?,?,?,?)"
		set statement = ##class(%SQL.Statement).%New()
		set tsc = statement.%Prepare(sql)
		set result = statement.%Execute(pRequest.Age, pRequest.DOB, pRequest.Gender, pRequest.Name, pRequest.Race, pRequest.Surname)
		set pResponse.Age = pRequest.Age
		set pResponse.Name = pRequest.Name
		set pResponse.Surname = pRequest.Surname
		set pResponse.Race = pRequest.Race
		set pResponse.Gender = pRequest.Gender
		set pResponse.DOB = pRequest.DOB
		set pResponse.Status = "Success"
		return result
		
	}
	catch ex {
		set tsc = ex.AsStatus()
			
	}
	set pResponse.Status = "Please enter Valid information"
	return tsc
]]></Implementation>
</Method>

<XData name="MessageMap">
<Data><![CDATA[
<MapItems>
	<MapItem MessageType="User.Request">
	<Method>Make</Method>
	</MapItem>
	</MapItems>
]]></Data>
</XData>
</Class>


<Routine name="User.Person.1" type="INT" languagemode="0" generated="1" timestamp="65833,51591.717185"><![CDATA[
 ;User.Person.1
 ;Generated for class User.Person.  Do NOT edit. 03/30/2021 02:19:51PM
 ;;48433152;User.Person
 ;
zAgeDisplayToLogical(%val) public {
	Q $select(%val="":"",%val=$c(0)&&$zu(115,13):"",1:$s($in(%val,"","")'="":+$in(%val,"",%val),1:%val)) }
zAgeIsValid(%val) public {
	Quit $select(%val=$c(0)&&$zu(115,13):1,$isvalidnum(%val,0):1,1:$$Error^%apiOBJ(7207,%val)) }
zAgeNormalize(%val) public {
	Quit $select(%val=$c(0)&&$zu(115,13):"",1:%val\1) }
]]></Routine>


<Class name="User.Person">
<TimeChanged>65833,51590.588631</TimeChanged>
<TimeCreated>65828,47297.470273</TimeCreated>

<Property name="Name">
<Type>%String</Type>
</Property>

<Property name="Surname">
<Type>%String</Type>
</Property>

<Property name="Age">
<Type>%Integer</Type>
</Property>

<Property name="Gender">
<Type>%String</Type>
</Property>

<Property name="Race">
<Type>%String</Type>
</Property>

<Property name="DOB">
<Type>%Integer</Type>
</Property>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DefaultData>PersonDefaultData</DefaultData>
<Data name="PersonDefaultData">
<Subscript>"Person"</Subscript>
<Value name="1">
<Value>Name</Value>
</Value>
<Value name="2">
<Value>Surname</Value>
</Value>
<Value name="3">
<Value>Age</Value>
</Value>
<Value name="4">
<Value>Gender</Value>
</Value>
<Value name="5">
<Value>Race</Value>
</Value>
<Value name="6">
<Value>DOB</Value>
</Value>
</Data>
</Storage>
</Class>


<Routine name="User.PersonProcess.1" type="INT" languagemode="0" generated="1" timestamp="65833,52873.959375"><![CDATA[
 ;User.PersonProcess.1
 ;Generated for class User.PersonProcess.  Do NOT edit. 03/30/2021 02:41:13PM
 ;;66436D72;User.PersonProcess
 ;
SQLUPPER(v,l) { quit $zu(28,v,7,$g(l,32767)) }
ALPHAUP(v,r) { quit $zu(28,v,6) }
STRING(v,l) { quit $zu(28,v,9,$g(l,32767)) }
SQLSTRING(v,l) { quit $zu(28,v,8,$g(l,32767)) }
UPPER(v) { quit $zu(28,v,5) }
MVR(v) { quit $zu(28,v,2) }
TRUNCATE(v,l) { quit $e(v,1,$g(l,3641144)) }
%CheckConstraintsForExtent(pConstraintList="",pCheckDisabled=0,pErrorLog) [ SQLCODE,tID ] public { New %ROWCOUNT,%ROWID,%msg,SQLCODE,tID 
	kill pErrorLog set tStatusAll = 1, pErrorLog = 0 if '$listvalid(pConstraintList) { set pConstraintList = $listfromstring(pConstraintList) }
	 ;---&sql(declare ext cursor for select %ID into :tID FROM SQLUser.PersonProcess)
 	 ;--- ** SQL PUBLIC Variables: SQLCODE, tID
	 
	 ;---&sql(open ext)
	try { s %ext0157="",%ext0157=$classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xElczhaRlMEyT5rASjXJgOJwEXhc","%New") if '$isobject(%ext0157) s %ext0157=$$%0dsqlA() } catch { if $ze["<CLASS DOES NOT EXIST>"&&($ze["%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xElczhaRlMEyT5rASjXJgOJwEXhc")||($ze["<ZSQLU>") { s %ext0157=$$%0dsqlA() } else { throw } }
	if SQLCODE '< 0 {
		for {
			 ;---&sql(fetch ext)
 			 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE
			if $isobject($g(%ext0157))'=1 { s SQLCODE=-102 } else { do %ext0157.FET() if SQLCODE=0 { } }
			if SQLCODE { if SQLCODE=100 { quit } elseif SQLCODE<0 { set tStatusAll = $select(+tStatusAll:$$Error^%apiOBJ(5521,SQLCODE,$Get(%msg)),1:$$AppendStatus^%occSystem(tStatusAll,$$Error^%apiOBJ(5521,SQLCODE,$Get(%msg)))) quit } }
			set tStatus = ..%CheckConstraints(tID,pConstraintList,pCheckDisabled,.tErrorInfo)
			if ('tStatus) { set tStatusAll = $select(+tStatusAll:tStatus,1:$$AppendStatus^%occSystem(tStatusAll,tStatus)) set:pErrorLog<1000 pErrorLog = pErrorLog + 1, pErrorLog(pErrorLog) = tErrorInfo _ $Listbuild(tStatus) }
		}
		 ;---&sql(close ext)
		if '$isobject($get(%ext0157)) { set SQLCODE=-102 } else { set SQLCODE=0 kill %ext0157 }
	}
	quit tStatusAll }
 q
%0dsqlA()	n %xxsql
	s %xxsql("S",1)="DECLARE ext CURSOR FOR SELECT %ID INTO :tID FROM SQLUser . PersonProcess"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","DEBUG")=$c(1),%xxsql("M","FORKNETDMN")=$c(1)
	s %xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1)
	s %xxsql("M","USELOST")=$c(1),%xxsql("M","ZVERSION")=$c(1),%xxsql("I","%occErrors")="",%xxsql("I","%occSqlfunc")="",%xxsql("I","%sySite")=""
	s %xxsql("I","%sySt")="",%xxsql("I","%sySystem")="",%xxsql("I","EnsConstants")="",%xxsql("I","EnsErrors")="",%xxsql("I","EnsUtil")=""
	s %xxsql("I","Ensemble")="",%xxsql("NS")="PROJECT1"
	return $$BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","User",0,"",),",0,ext,","User.PersonProcess.CLS",1)
%FileIndices(id,pIndexHandle=0) public {
	Set $ZTrap="CatchError",sc=1
	Set bsv0N2=$Get(^Ens.BusinessProcessD(id))
	Set bsv0N3=$listget(bsv0N2,1)
	Quit:$select(bsv0N3="":1,bsv0N3'[($extract(bsv0N3)_"PersonProcess"_$extract(bsv0N3)):1,1:0) 1
	If bsv0N3'="~Ens.BusinessProcessBPL~PersonProcess~" {
		Set bsv0N1=$piece(bsv0N3,$extract(bsv0N3),*-1)
		Set:bsv0N1'["." bsv0N1="User."_bsv0N1
		If bsv0N1'="" {
			Quit $classmethod(bsv0N1,"%FileIndices",id,.pIndexHandle)
		}
	}
	Set bsv0N4=..%TimeCreatedStorageToLogical($listget(bsv0N2,13))
	Set bsv0N5=..%TimeCompletedStorageToLogical($listget(bsv0N2,12))
	Set bsv0N6=$listget(bsv0N2,22)
	Set bsv0N7=$listget(bsv0N2,21)
	Set bsv0N8=$listget(bsv0N2,4)
	If ('pIndexHandle)||($Ascii($Get(pIndexHandle("Ens.BusinessProcess")),1)=1) {
		Set bsv0N9=$listget(bsv0N2,11)
		Set bsv0N10=$s(bsv0N9'="":bsv0N9,1:-1E14)
		Set ^Ens.BusinessProcessI("SessionId",bsv0N10,id)=$listget(bsv0N2,1)
	}
	If ('pIndexHandle)||($Ascii($Get(pIndexHandle("Ens.BusinessProcess")),2)=1) {
		Set bsv0N11=$s(bsv0N4'="":bsv0N4,1:-1E14)
		Set ^Ens.BusinessProcessI("TimeCreated",bsv0N11,id)=$listget(bsv0N2,1)
	}
	QUIT 1
CatchError	s $ZTrap="" i $ZE'="" { s sc = $$Error^%apiOBJ(5002,$ZE) } q sc }
%SQLAcquireLock(%rowid,s=0,unlockref=0)
	new %d,gotlock
	set %d(1)=%rowid set s=$e("E",'unlockref)_$e("S",s)
	lock +^Ens.BusinessProcessD(%d(1))#s:$zu(115,4) set gotlock=$t
	if gotlock,'unlockref { set:$case($SYSTEM.Lock.ReturnCode(),2:1,4:1,:0)&&($tlevel) %0CacheLock("User.PersonProcess","E")=1 }
	set:gotlock&&unlockref unlockref=unlockref+1,unlockref(unlockref)=$lb($name(^Ens.BusinessProcessD(%d(1))),"User.PersonProcess",s_"D")
	QUIT gotlock
%SQLAcquireTableLock(s=0,SQLCODE,to="")
	set s=$e("S",s) set:to="" to=$zu(115,4) lock +^Ens.BusinessProcessD#s:to QUIT:$t 1 set SQLCODE=-110 if s="S" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler35",,"SQLUser"_"."_"PersonProcess") } else { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler36",,"SQLUser"_"."_"PersonProcess") } QUIT 0
	Return
%SQLBeforeTriggers()
	new %ok,pChanged,pNew,pOld set %ok=1 //  'BEFORE' trigger(s)
	if %oper="INSERT" {
		set pNew(4)=%d(4),pNew(1)=%d(1)
	}
	if %oper="UPDATE" {
		set pNew(4)=$g(%d(4)),pNew(1)=$g(%d(1))
	}
	if %oper="DELETE" {
		set pNew(4)=$g(%e(4)),pNew(1)=%d(1)
	}
	do:("DELETE"[%oper)&&('$a(%check,6)) ..OnDeleteExecute(%oper,.pNew,.pOld,.pChanged,.%ok,.%msg) if '%ok { set sqlcode=-13_$s(%oper="INSERT":0,%oper="UPDATE":2,1:4) quit  }	// Call Trigger OnDelete
	QUIT
%SQLBuildIndices(pIndices="",pLockFlag=0,pStartID="",pEndID="",pIgnoreIndexList="")
	QUIT ..%BuildIndices(pIndices,,pLockFlag,,pStartID,pEndID,pIgnoreIndexList)
%SQLBuildPurgeIndexForRow(pIndices="",pActions="BP",pLockRow=1,%d,%e,pIgnoreIndexList="")
	// Purge and build index nodes for a single row using given values, return Status Code
	new sn,tSC,tLock set tSC=1,pActions=$zcvt(pActions,"U")
	try {
		if $g(%d(1))="" { set tSC=$select(+tSC:$$Error^%apiOBJ(5521,-108,"RowID value must be specified in %d(1) when calling %SQLBuildPurgeIndexForRow for table 'SQLUser.PersonProcess'"),1:$$AppendStatus^%occSystem(tSC,$$Error^%apiOBJ(5521,-108,"RowID value must be specified in %d(1) when calling %SQLBuildPurgeIndexForRow for table 'SQLUser.PersonProcess'"))) RETURN tSC }
		if pLockRow { if '..%SQLAcquireLock(%d(1)) { set tSC=$select(+tSC:$$Error^%apiOBJ(5521,-114,"Unable to lock row in table 'SQLUser.PersonProcess' with %ID = '"_%d(1)_"'"),1:$$AppendStatus^%occSystem(tSC,$$Error^%apiOBJ(5521,-114,"Unable to lock row in table 'SQLUser.PersonProcess' with %ID = '"_%d(1)_"'"))) RETURN tSC  } else { set tLock=1 }}
		if ((pIndices="")||($lf(pIndices,"SessionId"))),'$listfind(pIgnoreIndexList,"SessionId") {
			if pActions["P" {
				set sn(1)=%e(16) set:sn(1)="" sn(1)=-1E14 set sn(2)=%d(1) k ^Ens.BusinessProcessI("SessionId",sn(1),sn(2))
			}
			if pActions["B" {
				set sn(1)=%d(16) set:sn(1)="" sn(1)=-1E14 set sn(2)=%d(1) set ^Ens.BusinessProcessI("SessionId",sn(1),sn(2))=%d(38)
			}
		}
		if ((pIndices="")||($lf(pIndices,"TimeCreated"))),'$listfind(pIgnoreIndexList,"TimeCreated") {
			if pActions["P" {
				set sn(1)=%e(21) set:sn(1)="" sn(1)=-1E14 set sn(2)=%d(1) k ^Ens.BusinessProcessI("TimeCreated",sn(1),sn(2))
			}
			if pActions["B" {
				set sn(1)=%d(21) set:sn(1)="" sn(1)=-1E14 set sn(2)=%d(1) set ^Ens.BusinessProcessI("TimeCreated",sn(1),sn(2))=%d(38)
			}
		}
		if pLockRow { do ..%SQLReleaseLock(%d(1),0,0) set tLock=0 }
	}
	catch {
		if $g(tLock) { do ..%SQLReleaseLock(%d(1),0,0) }
		set tSC=$select(+tSC:$$Error^%apiOBJ(5594,$ze),1:$$AppendStatus^%occSystem(tSC,$$Error^%apiOBJ(5594,$ze)))
	}
	QUIT tSC
%SQLCheckUnique(pFromOrig=0,%pID,%pVals...)
	 ;---&sql(SELECT ID FROM SQLUser.PersonProcess WHERE  ID=:%pVals(1) AND (%ID <> :%pID OR :%pID IS NULL)) QUIT SQLCODE=100
 	 ;--- ** SQL PUBLIC Variables: %pID, %pVals, SQLCODE
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xE3bRc0ghalgcHhdCnaek17Bsmnb","%New") } catch { if $ze["<CLASS DOES NOT EXIST>"&&($ze["%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xE3bRc0ghalgcHhdCnaek17Bsmnb")||($ze["<ZSQLU>") { d %0dsqlD } else { throw } } QUIT SQLCODE=100
 q
%0dsqlD	n %xxsql
	s %xxsql("S",1)="SELECT ID FROM SQLUser . PersonProcess WHERE ID = :%pVals(1) AND ( %ID <> :%pID OR :%pID IS NULL )"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","DEBUG")=$c(1),%xxsql("M","FORKNETDMN")=$c(1)
	s %xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1)
	s %xxsql("M","USELOST")=$c(1),%xxsql("M","ZVERSION")=$c(1),%xxsql("I","%occErrors")="",%xxsql("I","%occSqlfunc")="",%xxsql("I","%sySite")=""
	s %xxsql("I","%sySt")="",%xxsql("I","%sySystem")="",%xxsql("I","EnsConstants")="",%xxsql("I","EnsErrors")="",%xxsql("I","EnsUtil")=""
	s %xxsql("I","Ensemble")="",%xxsql("NS")="PROJECT1"
	d BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","User",0,"",),,"User.PersonProcess.CLS")
	q
%SQLCopyIcolIntoName()
	if %oper="DELETE" {
		set:$d(%d(1)) %f("ID")=%d(1)
		QUIT
	}
	set:$d(%d(1)) %f("ID")=%d(1) set:$a(%e,2)&&$d(%d(2)) %f("%ConfigName")=%d(2) set:$a(%e,3)&&$d(%d(3)) %f("%ConfigQueueName")=%d(3) set:$a(%e,4)&&$d(%d(4)) %f("%Context")=%d(4) set:$a(%e,5)&&$d(%d(5)) %f("%Counter")=%d(5) set:$a(%e,6)&&$d(%d(6)) %f("%IsCompleted")=%d(6) set:$a(%e,7)&&$d(%d(7)) %f("%IsTerminated")=%d(7) set:$a(%e,8)&&$d(%d(8)) %f("%IsTimerInterrupted")=%d(8) set:$a(%e,9)&&$d(%d(9)) %f("%MasterPendingResponsesOld")=%d(9) set:$a(%e,10)&&$d(%d(10)) %f("%MessagesReceivedOld")=%d(10) set:$a(%e,11)&&$d(%d(11)) %f("%MessagesSentOld")=%d(11) set:$a(%e,12)&&$d(%d(12)) %f("%PrimaryRequestHeader")=%d(12) set:$a(%e,13)&&$d(%d(13)) %f("%PrimaryResponseHeader")=%d(13) set:$a(%e,14)&&$d(%d(14)) %f("%QuitTask")=%d(14) set:$a(%e,15)&&$d(%d(15)) %f("%RepliedStatus")=%d(15) set:$a(%e,16)&&$d(%d(16)) %f("%SessionId")=%d(16) set:$a(%e,17)&&$d(%d(17)) %f("%StatusCode")=%d(17) set:$a(%e,18)&&$d(%d(18)) %f("%SuperSession")=%d(18) set:$a(%e,19)&&$d(%d(19)) %f("%Thread")=%d(19) set:$a(%e,20)&&$d(%d(20)) %f("%TimeCompleted")=%d(20) set:$a(%e,21)&&$d(%d(21)) %f("%TimeCreated")=%d(21) set:$a(%e,22)&&$d(%d(22)) %f("%responseClassName")=%d(22) set:$a(%e,23)&&$d(%d(23)) %f("%responseId")=%d(23) set:$a(%e,24)&&$d(%d(24)) %f("Adapter")=%d(24) set:$a(%e,25)&&$d(%d(25)) %f("AlertGroups")=%d(25) set:$a(%e,26)&&$d(%d(26)) %f("AlertOnError")=%d(26) set:$a(%e,27)&&$d(%d(27)) %f("AlertRetryGracePeriod")=%d(27) set:$a(%e,28)&&$d(%d(28)) %f("BusinessPartner")=%d(28) set:$a(%e,29)&&$d(%d(29)) %f("FailureTimeout")=%d(29) set:$a(%e,30)&&$d(%d(30)) %f("InactivityTimeout")=%d(30) set:$a(%e,31)&&$d(%d(31)) %f("QueueCountAlert")=%d(31) set:$a(%e,32)&&$d(%d(32)) %f("QueueWaitAlert")=%d(32) set:$a(%e,33)&&$d(%d(33)) %f("ReplyCodeActions")=%d(33) set:$a(%e,34)&&$d(%d(34)) %f("Retry")=%d(34) set:$a(%e,35)&&$d(%d(35)) %f("RetryInterval")=%d(35) set:$a(%e,36)&&$d(%d(36)) %f("RuleLogging")=%d(36) set:$a(%e,37)&&$d(%d(37)) %f("SuspendMessage")=%d(37) set:$a(%e,38)&&$d(%d(38)) %f("x__classname")=%d(38)
	QUIT
%SQLCopyNameIntoIcol()
	k %d,%e set:$d(%f("ID"))#2 %d(1)=%f("ID") set:$d(%f("%ConfigName"))#2 %d(2)=%f("%ConfigName") set:$d(%f("%ConfigQueueName"))#2 %d(3)=%f("%ConfigQueueName") set:$d(%f("%Context"))#2 %d(4)=%f("%Context") set:$d(%f("%Counter"))#2 %d(5)=%f("%Counter") set:$d(%f("%IsCompleted"))#2 %d(6)=%f("%IsCompleted") set:$d(%f("%IsTerminated"))#2 %d(7)=%f("%IsTerminated") set:$d(%f("%IsTimerInterrupted"))#2 %d(8)=%f("%IsTimerInterrupted") set:$d(%f("%MasterPendingResponsesOld"))#2 %d(9)=%f("%MasterPendingResponsesOld") set:$d(%f("%MessagesReceivedOld"))#2 %d(10)=%f("%MessagesReceivedOld") set:$d(%f("%MessagesSentOld"))#2 %d(11)=%f("%MessagesSentOld") set:$d(%f("%PrimaryRequestHeader"))#2 %d(12)=%f("%PrimaryRequestHeader") set:$d(%f("%PrimaryResponseHeader"))#2 %d(13)=%f("%PrimaryResponseHeader") set:$d(%f("%QuitTask"))#2 %d(14)=%f("%QuitTask") set:$d(%f("%RepliedStatus"))#2 %d(15)=%f("%RepliedStatus") set:$d(%f("%SessionId"))#2 %d(16)=%f("%SessionId") set:$d(%f("%StatusCode"))#2 %d(17)=%f("%StatusCode") set:$d(%f("%SuperSession"))#2 %d(18)=%f("%SuperSession") set:$d(%f("%Thread"))#2 %d(19)=%f("%Thread") set:$d(%f("%TimeCompleted"))#2 %d(20)=%f("%TimeCompleted") set:$d(%f("%TimeCreated"))#2 %d(21)=%f("%TimeCreated") set:$d(%f("%responseClassName"))#2 %d(22)=%f("%responseClassName") set:$d(%f("%responseId"))#2 %d(23)=%f("%responseId") set:$d(%f("Adapter"))#2 %d(24)=%f("Adapter") set:$d(%f("AlertGroups"))#2 %d(25)=%f("AlertGroups") set:$d(%f("AlertOnError"))#2 %d(26)=%f("AlertOnError") set:$d(%f("AlertRetryGracePeriod"))#2 %d(27)=%f("AlertRetryGracePeriod") set:$d(%f("BusinessPartner"))#2 %d(28)=%f("BusinessPartner") set:$d(%f("FailureTimeout"))#2 %d(29)=%f("FailureTimeout") set:$d(%f("InactivityTimeout"))#2 %d(30)=%f("InactivityTimeout") set:$d(%f("QueueCountAlert"))#2 %d(31)=%f("QueueCountAlert") set:$d(%f("QueueWaitAlert"))#2 %d(32)=%f("QueueWaitAlert") set:$d(%f("ReplyCodeActions"))#2 %d(33)=%f("ReplyCodeActions") set:$d(%f("Retry"))#2 %d(34)=%f("Retry") set:$d(%f("RetryInterval"))#2 %d(35)=%f("RetryInterval") set:$d(%f("RuleLogging"))#2 %d(36)=%f("RuleLogging") set:$d(%f("SuspendMessage"))#2 %d(37)=%f("SuspendMessage") set:$d(%f("x__classname"))#2 %d(38)=%f("x__classname")  kill %f QUIT
%SQLDefineiDjVars(%d,subs,master)
	QUIT
%SQLDelete(%rowid,%check,%tstart=1,%mv=0,%polymorphic=0)
	// SQL DELETE method for table SQLUser.PersonProcess
	if %polymorphic { do ..%SQLCopyNameIntoIcol() set %d(1)=%rowid,%e(1)=%rowid  goto %SQLDeletePD }
	new bva,ce,%d,dc,%e,%ele,%itm,%key,%l,%nc,omcall,%oper,%pos,%s,sn,sqlcode,subs,%SkipFiling set %oper="DELETE",sqlcode=0,%ROWID=%rowid,%d(1)=%rowid,%e(1)=%rowid,%l=$c(0)
	if '$d(%0CacheSQLRA) { new %0CacheSQLRA set omcall=1 }
	if '$a(%check,2) {
		new %ls lock +^Ens.BusinessProcessD(%d(1))#"E":$zu(115,4) set %ls=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,4:2,2:2,1:3,:""))
		set:%ls=2 $e(%check,2)=$c(1) set:%ls=2&&($tlevel) %0CacheLock("User.PersonProcess","E")=1 set:$case(%ls,1:1,2:1,:0) $e(%l)=$c(1)
		if '%ls||(%ls=3) { set SQLCODE=-110,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer",$s('%ls:"SQLFiler40",1:"SQLFiler55"),,%oper,"SQLUser"_"."_"PersonProcess",$g(%d(1))) RETURN  }
	}
	if %tstart { TSTART:($zu(115,1)=1)||('$TLEVEL&&($zu(115,1)=2))  }
	set $zt="ERRORDelete"
%SQLDeletePD	// Entry point for Polymorphic Dispatch from a super-table
	do ..%SQLGetOld(%rowid,.%d,.%e,.sqlcode) if sqlcode { set SQLCODE=-106,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler58",,"SQLUser"_"."_"PersonProcess",%rowid) do ..%SQLEExit() QUIT  }
	if %e(38)'="" { set sn=$p(%e(38),$e(%e(38)),$l(%e(38),$e(%e(38)))-1) if "PersonProcess"'=sn { new %f do ..%SQLCopyIcolIntoName() do $classmethod(sn,"%SQLDelete",%rowid,%check,%tstart,%mv,1) QUIT  }}
	if '$a(%check),'$zu(115,7) do  if sqlcode set SQLCODE=sqlcode do ..%SQLEExit() QUIT  
	. new %fk,%k,%p,%st,%t,%z set %k="",%p("%1")="%d(1),",%p("IDKEY")="%d(1),"
	. for  quit:sqlcode<0  set %k=$o(^rINDEXEXT("F","User.PersonProcess",%k)) quit:%k=""  set %t="" for  set %t=$o(^rINDEXEXT("F","User.PersonProcess",%k,"f",%t)) quit:%t=""  set %st=(%t="User.PersonProcess") set %fk="" for  set %fk=$o(^rINDEXEXT("F","User.PersonProcess",%k,"f",%t,%fk)) quit:%fk=""  x "set %z=$classmethod(%t,%fk_""SQLFKeyRefAction"",%st,%k,$a(%check,2),"_%p(%k)_")" if %z set sqlcode=-124 quit  
	if '$a(%check,4) { do ..%SQLBeforeTriggers() if sqlcode { set SQLCODE=sqlcode do ..%SQLEExit() QUIT }}
	set ce="" for  { set ce=$order(^oddSQL("SQLUser","PersonProcess","DC",ce)) quit:ce=""   do $classmethod(ce,"%SQLDeleteChildren",%d(1),%check,.sqlcode) quit:sqlcode<0  } if sqlcode<0 { set SQLCODE=sqlcode do ..%SQLEExit() QUIT } // Delete any children
	set ce="" for  { set ce=$order(^oddSQL("Ens","BusinessProcessBPL","DC",ce)) quit:ce=""   do $classmethod(ce,"%SQLDeleteChildren",%d(1),%check,.sqlcode) quit:sqlcode<0  } if sqlcode<0 { set SQLCODE=sqlcode do ..%SQLEExit() QUIT } // Delete any children of the root extent
	set ce="" for  { set ce=$order(^oddSQL("Ens","BusinessProcess","DC",ce)) quit:ce=""   do $classmethod(ce,"%SQLDeleteChildren",%d(1),%check,.sqlcode) quit:sqlcode<0  } if sqlcode<0 { set SQLCODE=sqlcode do ..%SQLEExit() QUIT } // Delete any children of the root extent
	if '$a(%check,3),'$g(%SkipFiling) {
		set sn(1)=%e(16) set:sn(1)="" sn(1)=-1E14 set sn(2)=%d(1) k ^Ens.BusinessProcessI("SessionId",sn(1),sn(2))
		set sn(1)=%e(21) set:sn(1)="" sn(1)=-1E14 set sn(2)=%d(1) k ^Ens.BusinessProcessI("TimeCreated",sn(1),sn(2))
	}
	goto:$g(%SkipFiling) %SQLDeleteSkip
	k ^Ens.BusinessProcessD(%d(1))
%SQLDeleteSkip	//
	do ..%SQLUnlock() TCOMMIT:%tstart&&($zu(115,1)=1)
	set SQLCODE=0 kill:$g(omcall) %0CacheSQLRA
	QUIT
ERRORDelete	set $zt="",SQLCODE=-415,%msg=$s($g(%msg)'="":%msg_" -- ",1:"")_$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler51",,%oper,"SQLUser"_"."_"PersonProcess",$ze) if $ze["<FRAMESTACK>" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler52",,$ze,%oper,"SQLUser"_"."_"PersonProcess") do ##Class(%SYS.System).WriteToConsoleLog(%msg) if ($zu(67,10,$j)=1)||($zu(67,10,$j)=3) { write !,%msg h 3 } HALT  } do ..%SQLEExit() QUIT
	Return
%SQLDeleteTempStreams()
	// Delete all temporary streams
	QUIT
%SQLEExit()
	do ..%SQLUnlock() 
	if %tstart,$zu(115,1)=1,$TLEVEL { set %tstart=0 TROLLBACK 1 } kill:$g(omcall) %0CacheSQLRA QUIT  
	Return
%SQLExists(pLockOnly=0,pUnlockRef,%pVal...)
	// SQL Foreign Key validation entry point for Key %1.  Called by FKeys that reference this Key to see if the row is defined
	new id set id=%pVal(1)
	if pLockOnly>=0 { if '..%SQLGetLock(id,1,.pUnlockRef) { set sqlcode=-114,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler39",,"SQLUser"_"."_"PersonProcess"_":"_"%1") QUIT 0 } }
	if pLockOnly<1 {
		new qv set qv='..%SQLCheckUnique(0,,%pVal(1)) QUIT:pLockOnly=-1 qv
		do:'$g(pUnlockRef) ..%SQLReleaseLock(id,1) quit qv
	}
	else { do:'$g(pUnlockRef) ..%SQLReleaseLock(id,1) QUIT 1 }
	Return
%SQLGetLock(pRowId,pShared=0,pUnlockRef)
	QUIT ..%SQLAcquireLock(pRowId,pShared,.pUnlockRef)
%SQLGetOld(%rowid,%d,%e,sqlcode)
	// Get old data values
	new SQLCODE,%ROWCOUNT
	 ;---&sql(SELECT x__classname,%SessionId,%TimeCreated,%Context INTO :%e() FROM %IGNOREINDEX * SQLUser.PersonProcess WHERE ID=:%rowid)
 	 ;--- ** SQL PUBLIC Variables: %e, %rowid, SQLCODE
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xEjsKhFikODYD7TUn6gZrqAHgWNm","%New") } catch { if $ze["<CLASS DOES NOT EXIST>"&&($ze["%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xEjsKhFikODYD7TUn6gZrqAHgWNm")||($ze["<ZSQLU>") { d %0dsqlF } else { throw } }
	set sqlcode=SQLCODE QUIT:sqlcode'=0
	QUIT
 q
%0dsqlF	n %xxsql
	s %xxsql("S",1)="SELECT x__classname , %SessionId , %TimeCreated , %Context INTO :%e() FROM %IGNOREINDEX * SQLUser . PersonProcess WHERE ID = :%rowid"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","DEBUG")=$c(1),%xxsql("M","FORKNETDMN")=$c(1)
	s %xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1)
	s %xxsql("M","USELOST")=$c(1),%xxsql("M","ZVERSION")=$c(1),%xxsql("I","%occErrors")="",%xxsql("I","%occSqlfunc")="",%xxsql("I","%sySite")=""
	s %xxsql("I","%sySt")="",%xxsql("I","%sySystem")="",%xxsql("I","EnsConstants")="",%xxsql("I","EnsErrors")="",%xxsql("I","EnsUtil")=""
	s %xxsql("I","Ensemble")="",%xxsql("NS")="PROJECT1"
	d BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","User",0,"",),,"User.PersonProcess.CLS")
	q
%SQLGetOldAll()
	// Get all old data values
	new SQLCODE,%ROWCOUNT
	 ;---&sql(SELECT %ConfigName,%ConfigQueueName,%Context,%Counter,%IsCompleted,%IsTerminated,%IsTimerInterrupted,%MasterPendingResponsesOld,%MessagesReceivedOld,%MessagesSentOld,%PrimaryRequestHeader,%PrimaryResponseHeader,%QuitTask,%RepliedStatus,%SessionId,%StatusCode,%SuperSession,%Thread,%TimeCompleted,%TimeCreated,%responseClassName,%responseId,Adapter,AlertGroups,AlertOnError,AlertRetryGracePeriod,BusinessPartner,FailureTimeout,InactivityTimeout,QueueCountAlert,QueueWaitAlert,ReplyCodeActions,Retry,RetryInterval,RuleLogging,SuspendMessage,x__classname INTO :%e() FROM %IGNOREINDEX * SQLUser.PersonProcess WHERE ID=:%rowid)
 	 ;--- ** SQL PUBLIC Variables: %e, %rowid, SQLCODE
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xEIGm8OTLfzz82gy0zQbXlf8spD5","%New") } catch { if $ze["<CLASS DOES NOT EXIST>"&&($ze["%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xEIGm8OTLfzz82gy0zQbXlf8spD5")||($ze["<ZSQLU>") { d %0dsqlH } else { throw } }
	set sqlcode=SQLCODE QUIT:sqlcode'=0
	QUIT
 q
%0dsqlH	n %xxsql
	s %xxsql("S",1)="SELECT %ConfigName , %ConfigQueueName , %Context , %Counter , %IsCompleted , %IsTerminated , %IsTimerInterrupted , %MasterPendingResponsesOld , %MessagesReceivedOld , %MessagesSentOld , %PrimaryRequestHeader , %PrimaryResponseHeader , %QuitTask , %RepliedStatus , %SessionId , %StatusCode , %SuperSession , %Thread , %TimeCompleted , %TimeCreated , %responseClassName , %responseId , Adapter , AlertGroups , AlertOnError , AlertRetryGracePeriod , BusinessPartner , FailureTimeout , InactivityTimeout , QueueCountAlert , QueueWaitAlert , ReplyCodeActions , Retry , RetryInterval , RuleLogging , SuspendMessage , x__classname INTO :%e() FROM %IGNOREINDEX * SQLUser . PersonProcess WHERE ID = :%rowid"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","DEBUG")=$c(1),%xxsql("M","FORKNETDMN")=$c(1)
	s %xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1)
	s %xxsql("M","USELOST")=$c(1),%xxsql("M","ZVERSION")=$c(1),%xxsql("I","%occErrors")="",%xxsql("I","%occSqlfunc")="",%xxsql("I","%sySite")=""
	s %xxsql("I","%sySt")="",%xxsql("I","%sySystem")="",%xxsql("I","EnsConstants")="",%xxsql("I","EnsErrors")="",%xxsql("I","EnsUtil")=""
	s %xxsql("I","Ensemble")="",%xxsql("NS")="PROJECT1"
	d BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","User",0,"",),,"User.PersonProcess.CLS")
	q
%SQLGetOldIndex(%rowid,%d,pF=0,sqlcode)
	try {
		new tClass,tF,tOid,tSC
		set tOid=..%ComposeOid(%rowid)
		if ''..%OnDetermineClass(tOid,.tClass),tClass'=$classname() {
			set tF=1 do $classmethod(tClass,"%SQLGetOldIndex",%rowid,,.tF,.sqlcode)
			set:$d(tF("%SessionId")) %d(16)=tF("%SessionId") set:$d(tF("x__classname")) %d(38)=tF("x__classname") set:$d(tF("%TimeCreated")) %d(21)=tF("%TimeCreated") 
			RETURN
		}
	}
	catch { }
	// Get index old data values
	new SQLCODE,%ROWCOUNT
	 ;---&sql(SELECT %SessionId,x__classname,%TimeCreated INTO :%d() FROM %IGNOREINDEX * SQLUser.PersonProcess WHERE ID=:%rowid)
 	 ;--- ** SQL PUBLIC Variables: %d, %rowid, SQLCODE
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xEKgs7eapbDuHKuamnDPrugLYT1I","%New") } catch { if $ze["<CLASS DOES NOT EXIST>"&&($ze["%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xEKgs7eapbDuHKuamnDPrugLYT1I")||($ze["<ZSQLU>") { d %0dsqlJ } else { throw } }
	if pF { set:$d(%d(16)) pF("%SessionId")=%d(16) set:$d(%d(38)) pF("x__classname")=%d(38) set:$d(%d(21)) pF("%TimeCreated")=%d(21)  }
	set sqlcode=SQLCODE QUIT:sqlcode'=0
	QUIT
 q
%0dsqlJ	n %xxsql
	s %xxsql("S",1)="SELECT %SessionId , x__classname , %TimeCreated INTO :%d() FROM %IGNOREINDEX * SQLUser . PersonProcess WHERE ID = :%rowid"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","DEBUG")=$c(1),%xxsql("M","FORKNETDMN")=$c(1)
	s %xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1)
	s %xxsql("M","USELOST")=$c(1),%xxsql("M","ZVERSION")=$c(1),%xxsql("I","%occErrors")="",%xxsql("I","%occSqlfunc")="",%xxsql("I","%sySite")=""
	s %xxsql("I","%sySt")="",%xxsql("I","%sySystem")="",%xxsql("I","EnsConstants")="",%xxsql("I","EnsErrors")="",%xxsql("I","EnsUtil")=""
	s %xxsql("I","Ensemble")="",%xxsql("NS")="PROJECT1"
	d BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","User",0,"",),,"User.PersonProcess.CLS")
	q
%SQLInsert(%d,%check,%inssel,%vco,%tstart=1,%mv=0)
	// SQL INSERT method for table SQLUser.PersonProcess
	new bva,%ele,%itm,%key,%f,%l,%n,%nc,%oper,%pos,%s,sqlcode,sn,subs,icol set %oper="INSERT",sqlcode=0,%l=$c(0,0,0)
	if $a(%check,7) { new %diu merge %diu=%d }
	if $d(%d(1)),'$zu(115,11) { if %d(1)'="" { set SQLCODE=-111,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler6",,"ID","SQLUser"_"."_"PersonProcess") RETURN ""  } kill %d(1) } 
	if '$a(%check),'..%SQLValidateFields(.sqlcode) { set SQLCODE=sqlcode RETURN "" }
	do:'$a(%check,8) ..%SQLNormalizeFields()
	if %tstart { TSTART:($zu(115,1)=1)||('$TLEVEL&&($zu(115,1)=2))  } set $zt="ERRORInsert"
	set:'$d(%d(6)) %d(6)=0 set:'$d(%d(7)) %d(7)=0 set:'$d(%d(8)) %d(8)=0 set:'$d(%d(14)) %d(14)=0 set:'$d(%d(15)) %d(15)=1 set:'$d(%d(17)) %d(17)=1 set:'$d(%d(26)) %d(26)=0 set:'$d(%d(27)) %d(27)=0 set:'$d(%d(29)) %d(29)=15 set:'$d(%d(30)) %d(30)=0 set:'$d(%d(31)) %d(31)=0 set:'$d(%d(32)) %d(32)=0 set:'$d(%d(34)) %d(34)=0 set:'$d(%d(35)) %d(35)=5 set:'$d(%d(36)) %d(36)="r" set:'$d(%d(37)) %d(37)=0 set:'$d(%d(38)) %d(38)="~Ens.BusinessProcessBPL~PersonProcess~"
	if '$a(%check) {
		do {
			if $g(%vco)'="" { d @%vco quit:sqlcode<0  }
		} while 0
		if sqlcode<0 { set SQLCODE=sqlcode do ..%SQLEExit() RETURN "" }		// A constraint failed
	}
	if '$d(%d(1)) { set %d(1)=$i(^Ens.BusinessProcessD) } elseif %d(1)>$g(^Ens.BusinessProcessD) { if $i(^Ens.BusinessProcessD,$zabs(%d(1)-$g(^Ens.BusinessProcessD))) {}} elseif $d(^Ens.BusinessProcessD(%d(1))) { set SQLCODE=-119,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler33",,"ID",%d(1),"SQLUser"_"."_"PersonProcess"_"."_"ID") do ..%SQLEExit() RETURN "" }
	for icol=38,16,21,4 { set:'($d(%d(icol))#2) %d(icol)="" }
	if '$a(%check,2) {
		new %ls lock +^Ens.BusinessProcessD(%d(1))#"E":$zu(115,4) set %ls=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,4:2,2:2,1:3,:""))
		set:%ls=2 $e(%check,2)=$c(1) set:%ls=2&&($tlevel) %0CacheLock("User.PersonProcess","E")=1 set:$case(%ls,1:1,2:1,:0) $e(%l)=$c(1)
		if '%ls||(%ls=3) { set SQLCODE=-110,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer",$s('%ls:"SQLFiler40",1:"SQLFiler55"),,%oper,"SQLUser"_"."_"PersonProcess",$g(%d(1))) do ..%SQLEExit() RETURN ""  }
	}
	set ^Ens.BusinessProcessD(%d(1))=$lb(%d(38),%d(3),%d(6),%d(9),,%d(12),%d(13),%d(15),%d(23),%d(24),%d(16),%d(20),%d(21),%d(2),%d(14),%d(26),%d(22),%d(8),%d(7),%d(17),%d(10),%d(11),%d(33),%d(35),%d(27),%d(29),%d(34),%d(37),%d(31),%d(32),%d(30),%d(28),%d(25),%d(18))
	set:$s((%d(4)'=""):1,($g(%d(5))'=""):1,($g(%d(19))'=""):1,1:($g(%d(36))'="")) ^Ens.BusinessProcessD(%d(1),"BusinessProcessBPL")=$lb(%d(4),%d(19),%d(5),%d(36))
	if '$a(%check,3) {
		set sn(1)=%d(16) set:sn(1)="" sn(1)=-1E14 set sn(2)=%d(1) set ^Ens.BusinessProcessI("SessionId",sn(1),sn(2))=%d(38)
		set sn(1)=%d(21) set:sn(1)="" sn(1)=-1E14 set sn(2)=%d(1) set ^Ens.BusinessProcessI("TimeCreated",sn(1),sn(2))=%d(38)
	}
	lock:$a(%l) -^Ens.BusinessProcessD(%d(1))#"E"
	TCOMMIT:%tstart&&($zu(115,1)=1)
	set SQLCODE=0
	QUIT %d(1) 			// %SQLInsert
ERRORInsert	set $zt="",SQLCODE=-415,%msg=$s($g(%msg)'="":%msg_" -- ",1:"")_$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler51",,%oper,"SQLUser"_"."_"PersonProcess",$ze)
	if $ze["<FRAMESTACK>" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler52",,$ze,%oper,"SQLUser"_"."_"PersonProcess") do ##Class(%SYS.System).WriteToConsoleLog(%msg) if ($zu(67,10,$j)=1)||($zu(67,10,$j)=3) { write !,%msg h 3 } HALT  }
	do ..%SQLEExit()
	RETURN ""
%SQLInvalid(pIcol,pVal) public {
	set:$l($g(pVal))>40 pVal=$e(pVal,1,40)_"..." do:'$d(%n) ..%SQLnBuild() set %msg=$s($g(%msg)'="":%msg_$c(13,10),1:"")_$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler37",,"SQLUser"_"."_"PersonProcess"_"."_$lg(%n,pIcol),$s($g(pVal)'="":$s(pVal="":"<NULL>",pVal=$c(0):"<EMPTY STRING>",1:"'"_pVal_"'"),1:"")),sqlcode=$s(%oper="INSERT":-104,1:-105)
	QUIT sqlcode }
%SQLMissing(fname)
	set sqlcode=-108,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler47",,fname,"SQLUser"_"."_"PersonProcess") quit
%SQLNormalizeFields()
	set:$g(%d(20))'="" %d(20)=$$NormalizeField20(%d(20))
	set:$g(%d(21))'="" %d(21)=$$NormalizeField21(%d(21))
	new %f for %f=6,7,8,26,34,37 { set:$g(%d(%f))'="" %d(%f)=$s(%d(%f)="":"",1:%d(%f)\1) }
	for %f=27,29,30,31,32,35 { set:$g(%d(%f))'="" %d(%f)=$select($zu(115,13)&&(%d(%f)=$c(0)):"",1:$normalize($decimal(%d(%f)),2)) }
	for %f=4,5,12,13,14,15,16,19 { set:$g(%d(%f))'="" %d(%f)=$select(%d(%f)=$c(0)&&$zu(115,13):"",1:%d(%f)\1) }
	QUIT
NormalizeField20(%val) {	if $p(%val,":",3)'["." quit %val
	for i=1:1:3 quit:$e(%val,*)'="0"  set %val=$e(%val,1,*-1)
	if $e(%val,*)="." set %val=$e(%val,1,*-1)
	quit %val
}
NormalizeField21(%val) {	if $p(%val,":",3)'["." quit %val
	for i=1:1:3 quit:$e(%val,*)'="0"  set %val=$e(%val,1,*-1)
	if $e(%val,*)="." set %val=$e(%val,1,*-1)
	quit %val
}
	Return
%SQLPurgeIndices(pIndices="",pLockExtent=0,pIgnoreIndexList="")
	QUIT ..%PurgeIndices(pIndices,pLockExtent,pIgnoreIndexList)
%SQLQuickLoad(%rowid,%nolock=0,pkey=0,qq=0)
	// Get fields from row where SQLRowID=%rowid
	new d,i,il,subs set:%nolock=2 %nolock=1
	if %nolock=0 { if '..%SQLAcquireLock(%rowid) { set %qrc=114,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler45",,"SQLUser"_"."_"PersonProcess",%rowid),%ROWCOUNT=0 QUIT  } set:$zu(115,2) il=$zu(115,2,0) }
	 ;---&sql(SELECT %INTERNAL(ID),%ConfigName,%ConfigQueueName,%INTERNAL(%Context),%Counter,%IsCompleted,%IsTerminated,%IsTimerInterrupted,%INTERNAL(%MasterPendingResponsesOld),%INTERNAL(%MessagesReceivedOld),%INTERNAL(%MessagesSentOld),%INTERNAL(%PrimaryRequestHeader),%INTERNAL(%PrimaryResponseHeader),%QuitTask,%RepliedStatus,%SessionId,%StatusCode,%SuperSession,%INTERNAL(%Thread),%TimeCompleted,%TimeCreated,%responseClassName,%responseId,Adapter,AlertGroups,AlertOnError,AlertRetryGracePeriod,BusinessPartner,FailureTimeout,InactivityTimeout,QueueCountAlert,QueueWaitAlert,ReplyCodeActions,Retry,RetryInterval,RuleLogging,SuspendMessage,x__classname INTO :d(1),:d(2),:d(3),:d(4),:d(5),:d(6),:d(7),:d(8),:d(9),:d(10),:d(11),:d(12),:d(13),:d(14),:d(15),:d(16),:d(17),:d(18),:d(19),:d(20),:d(21),:d(22),:d(23),:d(24),:d(25),:d(26),:d(27),:d(28),:d(29),:d(30),:d(31),:d(32),:d(33),:d(34),:d(35),:d(36),:d(37),:d(38) FROM SQLUser.PersonProcess WHERE %ID = :%rowid)
 	 ;--- ** SQL PUBLIC Variables: %rowid, SQLCODE, d
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xElimBpXYTijmgQkRLI152CFXH3w","%New") } catch { if $ze["<CLASS DOES NOT EXIST>"&&($ze["%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xElimBpXYTijmgQkRLI152CFXH3w")||($ze["<ZSQLU>") { d %0dsqlL } else { throw } }
	if SQLCODE { if %nolock=0 { do ..%SQLReleaseLock(%rowid,0,1) do:$g(il) $zu(115,2,il) } set %ROWCOUNT=0 set:SQLCODE<0 SQLCODE=-SQLCODE set %qrc=SQLCODE QUIT  }
	if qq,d(38)'="" { new sn set sn=$p(d(38),$e(d(38)),$l(d(38),$e(d(38)))-1) if "PersonProcess"'=sn { if %nolock=0 { do ..%SQLReleaseLock(%rowid,0,1) do:$g(il) $zu(115,2,il) } kill d set:sn'["." sn="User."_sn  do $classmethod(sn,"%SQLQuickLoad",%rowid,%nolock,0,1) QUIT  }}
	if %nolock=0 { if $zu(115,1)=1 { TSTART  } elseIf '$TLEVEL,$zu(115,1)=2 { TSTART  }}
	set:qq d=$zobjexport("User.PersonProcess",18),d=$zobjexport(38,18) set i=-1 for  { set i=$o(d(i)) quit:i=""  set d=$zobjexport(d(i),18) } set %qrc=0,%ROWCOUNT=1 if %nolock=0 { d ..%SQLReleaseLock(%rowid,0,0) do:$g(il) $zu(115,2,il) } quit
	Return
 q
%0dsqlL	n %xxsql
	s %xxsql("S",1)="SELECT %INTERNAL ( ID ) , %ConfigName , %ConfigQueueName , %INTERNAL ( %Context ) , %Counter , %IsCompleted , %IsTerminated , %IsTimerInterrupted , %INTERNAL ( %MasterPendingResponsesOld ) , %INTERNAL ( %MessagesReceivedOld ) , %INTERNAL ( %MessagesSentOld ) , %INTERNAL ( %PrimaryRequestHeader ) , %INTERNAL ( %PrimaryResponseHeader ) , %QuitTask , %RepliedStatus , %SessionId , %StatusCode , %SuperSession , %INTERNAL ( %Thread ) , %TimeCompleted , %TimeCreated , %responseClassName , %responseId , Adapter , AlertGroups , AlertOnError , AlertRetryGracePeriod , BusinessPartner , FailureTimeout , InactivityTimeout , QueueCountAlert , QueueWaitAlert , ReplyCodeActions , Retry , RetryInterval , RuleLogging , SuspendMessage , x__classname INTO :d(1) , :d(2) , :d(3) , :d(4) , :d(5) , :d(6) , :d(7) , :d(8) , :d(9) , :d(10) , :d(11) , :d(12) , :d(13) , :d(14) , :d(15) , :d(16) , :d(17) , :d(18) , :d(19) , :d(20) , :d(21) , :d(22) , :d(23) , :d(24) , :d(25) , :d(26) , :d(27) , :d(28) , :d(29) , :d(30) , :d(31) , :d(32) ,"
	s %xxsql("S",1)=%xxsql("S",1)_" :d(33) , :d(34) , :d(35) , :d(36) , :d(37) , :d(38) FROM SQLUser . PersonProcess WHERE %ID = :%rowid"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","DEBUG")=$c(1),%xxsql("M","FORKNETDMN")=$c(1)
	s %xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1)
	s %xxsql("M","USELOST")=$c(1),%xxsql("M","ZVERSION")=$c(1),%xxsql("I","%occErrors")="",%xxsql("I","%occSqlfunc")="",%xxsql("I","%sySite")=""
	s %xxsql("I","%sySt")="",%xxsql("I","%sySystem")="",%xxsql("I","EnsConstants")="",%xxsql("I","EnsErrors")="",%xxsql("I","EnsUtil")=""
	s %xxsql("I","Ensemble")="",%xxsql("NS")="PROJECT1"
	d BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("ODBC","","","User",0,"",),,"User.PersonProcess.CLS")
	q
%SQLReleaseLock(%rowid,s=0,i=0,e="")
	new %d
	set:e="" e=1 set %d(1)=%rowid set s=$e("E",e)_$e("S",s)_$e("D",i)
	lock -^Ens.BusinessProcessD(%d(1))#s
	QUIT
%SQLReleaseTableLock(s=0,i=0)
	set s=$e("S",s)_$e("D",i) lock -^Ens.BusinessProcessD#s QUIT 1
	Return
%SQLUnlock()
	lock:$a(%l) -^Ens.BusinessProcessD(%d(1))#"E"
	QUIT
%SQLUnlockError(cname)
	set sqlcode=-110 if %oper="DELETE" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler48",,"SQLUser"_"."_"PersonProcess",cname) } else { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler49",,"SQLUser"_"."_"PersonProcess",cname) } quit
	Return
%SQLUpdate(%rowid,%check,%d,%vco,%tstart=1,%mv=0,%polymorphic=0,%soid)
	// SQL UPDATE method for table SQLUser.PersonProcess
	if %polymorphic { do ..%SQLCopyNameIntoIcol() set %d(1)=%rowid,%e(1)=%rowid,$e(%e,1)=$c(0) new icol for icol=2:1:38 { set $e(%e,icol)=$c($d(%d(icol))) }  goto %SQLUpdatePD }
	new %e,bva,%ele,%itm,%key,%f,%l,%n,%nc,%oper,%pos,%s,icol,omcall,s,sn,sqlcode,subs,t set %oper="UPDATE",sqlcode=0,%ROWID=%rowid,$e(%e,1)=$c(0),%l=$c(0,0,0)
	if '$d(%0CacheSQLRA) { new %0CacheSQLRA set omcall=1 }
	if '$a(%check,7) {
		if '$a(%check),'..%SQLValidateFields(.sqlcode) { set SQLCODE=sqlcode QUIT  }
		do:'$a(%check,8) ..%SQLNormalizeFields()
	}
	if $d(%d(1)),%d(1)'=%rowid { set SQLCODE=-107,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler16",,"ID","SQLUser"_"."_"PersonProcess") QUIT  }
	for icol=2:1:38 { set $e(%e,icol)=$c($d(%d(icol))) }
	set %d(1)=%rowid,%e(1)=%rowid
	if '$a(%check,2) {
		new %ls lock +^Ens.BusinessProcessD(%d(1))#"E":$zu(115,4) set %ls=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,4:2,2:2,1:3,:""))
		set:%ls=2 $e(%check,2)=$c(1) set:%ls=2&&($tlevel) %0CacheLock("User.PersonProcess","E")=1 set:$case(%ls,1:1,2:1,:0) $e(%l)=$c(1)
		if '%ls||(%ls=3) { set SQLCODE=-110,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer",$s('%ls:"SQLFiler40",1:"SQLFiler55"),,%oper,"SQLUser"_"."_"PersonProcess",$g(%d(1))) RETURN  }
	}
	if %tstart { TSTART:($zu(115,1)=1)||('$TLEVEL&&($zu(115,1)=2))  }
	set $zt="ERRORUpdate"
%SQLUpdatePD		// Entry point for Polymorphic Dispatch from a super-table
	if $g(%vco)="" { do ..%SQLGetOld(%rowid,.%d,.%e,.sqlcode) i sqlcode { s SQLCODE=-109,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler59",,"SQLUser"_"."_"PersonProcess",%rowid) do ..%SQLEExit() QUIT  } for icol=38,16,21,4 { set:'$d(%d(icol)) %d(icol)=%e(icol) set:%d(icol)=%e(icol) $e(%e,icol)=$c(0) }} else { do ..%SQLGetOldAll() if sqlcode { set SQLCODE=-109,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler59",,"SQLUser"_"."_"PersonProcess",%rowid) do ..%SQLEExit() QUIT  } for icol=2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38 { set:'$d(%d(icol)) %d(icol)=%e(icol) set:%d(icol)=%e(icol) $e(%e,icol)=$c(0) }}
	if %e(38)'="" set sn=$p(%e(38),$e(%e(38)),$l(%e(38),$e(%e(38)))-1) if "PersonProcess"'=sn new %f do ..%SQLCopyIcolIntoName() do $classmethod(sn,"%SQLUpdate",%rowid,%check,.%d,$g(%vco),%tstart,%mv,1) QUIT
	if '$a(%check) {
		do {
			if $g(%vco)'="" { d @%vco quit:sqlcode<0  }
		} while 0
		if sqlcode { set SQLCODE=sqlcode do ..%SQLEExit() QUIT  }
	}
	if ($zboolean(%e,$c(0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1),1)[$c(1)) {
		set ^Ens.BusinessProcessD(%d(1))=$listupdate($g(^Ens.BusinessProcessD(%d(1))),1,$a(%e,38):%d(38),$a(%e,3):%d(3),$a(%e,6):%d(6),$a(%e,9):%d(9),,$a(%e,12):%d(12),$a(%e,13):%d(13),$a(%e,15):%d(15),$a(%e,23):%d(23),$a(%e,24):%d(24),$a(%e,16):%d(16),$a(%e,20):%d(20),$a(%e,21):%d(21),$a(%e,2):%d(2),$a(%e,14):%d(14),$a(%e,26):%d(26),$a(%e,22):%d(22),$a(%e,8):%d(8),$a(%e,7):%d(7),$a(%e,17):%d(17),$a(%e,10):%d(10),$a(%e,11):%d(11),$a(%e,33):%d(33),$a(%e,35):%d(35),$a(%e,27):%d(27),$a(%e,29):%d(29),$a(%e,34):%d(34),$a(%e,37):%d(37),$a(%e,31):%d(31),$a(%e,32):%d(32),$a(%e,30):%d(30),$a(%e,28):%d(28),$a(%e,25):%d(25),$a(%e,18):%d(18))
	}
	if $s($a(%e,4):1,$a(%e,5):1,$a(%e,19):1,1:$a(%e,36)) {
		set ^Ens.BusinessProcessD(%d(1),"BusinessProcessBPL")=$listupdate($g(^Ens.BusinessProcessD(%d(1),"BusinessProcessBPL")),1,$a(%e,4):%d(4),$a(%e,19):%d(19),$a(%e,5):%d(5),$a(%e,36):%d(36))
	}
	if '$a(%check,3) { 
		if $a(%e,16)||$a(%e,38) {	// SessionId index map
			if $a(%e,16) { set sn(1)=%e(16) set:sn(1)="" sn(1)=-1E14 set sn(2)=%d(1) k ^Ens.BusinessProcessI("SessionId",sn(1),sn(2)) }
			set sn(1)=%d(16) set:sn(1)="" sn(1)=-1E14 set sn(2)=%d(1) set ^Ens.BusinessProcessI("SessionId",sn(1),sn(2))=%d(38)
		}
		if $a(%e,21)||$a(%e,38) {	// TimeCreated index map
			if $a(%e,21) { set sn(1)=%e(21) set:sn(1)="" sn(1)=-1E14 set sn(2)=%d(1) k ^Ens.BusinessProcessI("TimeCreated",sn(1),sn(2)) }
			set sn(1)=%d(21) set:sn(1)="" sn(1)=-1E14 set sn(2)=%d(1) set ^Ens.BusinessProcessI("TimeCreated",sn(1),sn(2))=%d(38)
		}
	}
	do ..%SQLUnlock() TCOMMIT:%tstart&&($zu(115,1)=1)
	set SQLCODE=0 kill:$g(omcall) %0CacheSQLRA
	QUIT
ERRORUpdate	set $zt="",SQLCODE=-415,%msg=$s($g(%msg)'="":%msg_" -- ",1:"")_$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler51",,%oper,"SQLUser"_"."_"PersonProcess",$ze) if $ze["<FRAMESTACK>" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler52",,$ze,%oper,"SQLUser"_"."_"PersonProcess") do ##Class(%SYS.System).WriteToConsoleLog(%msg) if ($zu(67,10,$j)=1)||($zu(67,10,$j)=3) { write !,%msg h 3 } HALT  } do ..%SQLEExit() QUIT  
	Return
%SQLValidateFields(sqlcode)
	if $g(%d(26))'="",'($$ValidateField26(%d(26))) { set sqlcode=..%SQLInvalid(26+1,%d(26)) } 
	if $g(%d(34))'="",'($$ValidateField34(%d(34))) { set sqlcode=..%SQLInvalid(34+1,%d(34)) } 
	if $g(%d(37))'="",'($$ValidateField37(%d(37))) { set sqlcode=..%SQLInvalid(37+1,%d(37)) } 
	if $g(%d(6))'="",'($$ValidateField6(%d(6))) { set sqlcode=..%SQLInvalid(6+1,%d(6)) } 
	if $g(%d(7))'="",'($$ValidateField7(%d(7))) { set sqlcode=..%SQLInvalid(7+1,%d(7)) } 
	if $g(%d(8))'="",'($$ValidateField8(%d(8))) { set sqlcode=..%SQLInvalid(8+1,%d(8)) } 
	if $g(%d(29))'="",'($select($zu(115,13)&&(%d(29)=$c(0)):1,$isvalidnum(%d(29),2,-1,):1,'$isvalidnum(%d(29)):$$Error^%apiOBJ(7207,%d(29)),1:$$Error^%apiOBJ(7204,%d(29),-1))) { set sqlcode=..%SQLInvalid(29+1,%d(29)) } 
	new %f for %f=27,30,31,32,35 { if $g(%d(%f))'="",'($select($zu(115,13)&&(%d(%f)=$c(0)):1,$isvalidnum(%d(%f),2,0,):1,'$isvalidnum(%d(%f)):$$Error^%apiOBJ(7207,%d(%f)),1:$$Error^%apiOBJ(7204,%d(%f),0))) set sqlcode=..%SQLInvalid(%f+1,$g(%d(%f))) quit  } 
	for %f=5,14,15,16 { if $g(%d(%f))'="",'($select(%d(%f)=$c(0)&&$zu(115,13):1,$isvalidnum(%d(%f),0):1,1:$$Error^%apiOBJ(7207,%d(%f)))) set sqlcode=..%SQLInvalid(%f+1,$g(%d(%f))) quit  } 
	if $g(%d(33))'="",'(($l(%d(33))'>1000)) { set sqlcode=..%SQLInvalid(33+1,%d(33)) } 
	for %f=2,3,22,28 { if $g(%d(%f))'="",'(($l(%d(%f))'>128)) set sqlcode=..%SQLInvalid(%f+1,$g(%d(%f))) quit  } 
	if $g(%d(25))'="",'(($l(%d(25))'>2500)) { set sqlcode=..%SQLInvalid(25+1,%d(25)) } 
	if $g(%d(18))'="",'(($l(%d(18))'>300)) { set sqlcode=..%SQLInvalid(18+1,%d(18)) } 
	if $g(%d(36))'="",'(($l(%d(36))'>50)) { set sqlcode=..%SQLInvalid(36+1,%d(36)) } 
	QUIT 'sqlcode
ValidateField6(%val="") {	Quit $isvalidnum(%val,0,0,2)&&(+%val'=2)
}
ValidateField7(%val="") {	Quit $isvalidnum(%val,0,0,2)&&(+%val'=2)
}
ValidateField8(%val="") {	Quit $isvalidnum(%val,0,0,2)&&(+%val'=2)
}
ValidateField26(%val="") {	Quit $isvalidnum(%val,0,0,2)&&(+%val'=2)
}
ValidateField34(%val="") {	Quit $isvalidnum(%val,0,0,2)&&(+%val'=2)
}
ValidateField37(%val="") {	Quit $isvalidnum(%val,0,0,2)&&(+%val'=2)
}
	Return
%SQLnBuild() public {
	set %n=$lb(,"ID","%ConfigName","%ConfigQueueName","%Context","%Counter","%IsCompleted","%IsTerminated","%IsTimerInterrupted","%MasterPendingResponsesOld","%MessagesReceivedOld","%MessagesSentOld","%PrimaryRequestHeader","%PrimaryResponseHeader","%QuitTask","%RepliedStatus","%SessionId","%StatusCode","%SuperSession","%Thread","%TimeCompleted","%TimeCreated","%responseClassName","%responseId","Adapter","AlertGroups","AlertOnError","AlertRetryGracePeriod","BusinessPartner","FailureTimeout","InactivityTimeout","QueueCountAlert","QueueWaitAlert","ReplyCodeActions","Retry","RetryInterval","RuleLogging","SuspendMessage","x__classname")
	QUIT }
%SaveData(id) public {
	try {
		set id=$listget(i%"%%OID") if id'="" { set insert=0,idassigned=1 } else { set insert=1,idassigned=0 }
		set lock=0,lockok=0,tSharedLock=0
		if 'idassigned { set id=$i(^Ens.BusinessProcessD) do ..%IdSet(id) set:$g(%objtxSTATUS)=2 %objtxOIDASSIGNED(+$this)="" }
		set zzc10v1=$s(i%%TimeCreated'="":i%%TimeCreated,1:-1E14)
		set zzc10v2=$s(i%%SessionId'="":i%%SessionId,1:-1E14)
		try {
			set tInnerException = ""
			;
			if 'insert {
				if (i%%Concurrency<4)&&(i%%Concurrency) { lock +(^Ens.BusinessProcessD(id)#"E"):$zu(115,4) set lockok=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,2:2,4:2,:0)) set:lockok=2&&($tlevel) %0CacheLock($classname(),"E")=1 if lockok { set lock=1 } else { Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5803,$classname())) } }
				if ('$Data(^Ens.BusinessProcessD(id))) {
					set insert=1
					if lock { lock -(^Ens.BusinessProcessD(id)#"E") set (lock,lockok) = 0 }
				}
			}
			if insert {
				set zzc20v1="",ptr="" for  set ptr=$order(i%%MessagesSentOld(ptr),1,val) Quit:ptr=""  set zzc20v1=zzc20v1_$listbuild(val)
				set zzc20v2="",ptr="" for  set ptr=$order(i%%MessagesReceivedOld(ptr),1,val) Quit:ptr=""  set zzc20v2=zzc20v2_$listbuild(val)
				set zzc20v3="",ptr="" for  set ptr=$order(i%%MasterPendingResponsesOld(ptr),1,val) Quit:ptr=""  set zzc20v3=zzc20v3_$listbuild(val)
				if i%%Concurrency&&$tlevel {  lock +(^Ens.BusinessProcessD(id)#"E"):$zu(115,4) set lockok=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,2:2,4:2,:0)) set:(lockok=2&&(i%%Concurrency'=4)) %0CacheLock($classname(),"E")=1 set:lockok lock=1 if 'lockok { Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5803,$classname())) } }
				if i%%Concurrency=3 { lock +(^Ens.BusinessProcessD(id)#"ES") set tSharedLock=1 }
				set:i%%Concurrency=4 lock=0
				set zzc39v1="" For counter=0:1 { Set zzc39v1 = $Order(i%%MasterPendingResponses(zzc39v1),1,val) Quit:zzc39v1=""  Set ^Ens.BusinessProcessD(id,"pending",zzc39v1)=val }
				Set:counter>0 ^Ens.BusinessProcessD(id,"pending")=counter
				set zzc39v2="" For counter=0:1 { Set zzc39v2 = $Order(i%%MessagesReceived(zzc39v2),1,val) Quit:zzc39v2=""  Set ^Ens.BusinessProcessD(id,"received",zzc39v2)=val }
				Set:counter>0 ^Ens.BusinessProcessD(id,"received")=counter
				set zzc39v3="" For counter=0:1 { Set zzc39v3 = $Order(i%%MessagesSent(zzc39v3),1,val) Quit:zzc39v3=""  Set ^Ens.BusinessProcessD(id,"sent",zzc39v3)=val }
				Set:counter>0 ^Ens.BusinessProcessD(id,"sent")=counter
				set zzc39v4="" For  { Set zzc39v4 = $Order(i%%SynchronizedResponses(zzc39v4),1,val) Quit:zzc39v4=""  Set ^Ens.BusinessProcessD(id,"%SynchronizedResponses",zzc39v4)=val }
				set ^Ens.BusinessProcessD(id,"BusinessProcessBPL")=$lb(i%%Context,i%%Thread,i%%Counter,i%RuleLogging)
				set ^Ens.BusinessProcessD(id)=$lb("~Ens.BusinessProcessBPL~PersonProcess~",i%%ConfigQueueName,i%%IsCompleted,zzc20v3,,i%%PrimaryRequestHeader,i%%PrimaryResponseHeader,i%%RepliedStatus,i%%responseId,i%Adapter,i%%SessionId,i%%TimeCompleted,i%%TimeCreated,i%%ConfigName,i%%QuitTask,i%AlertOnError,i%%responseClassName,i%%IsTimerInterrupted,i%%IsTerminated,i%%StatusCode,zzc20v2,zzc20v1,i%ReplyCodeActions,i%RetryInterval,i%AlertRetryGracePeriod,i%FailureTimeout,i%Retry,i%SuspendMessage,i%QueueCountAlert,i%QueueWaitAlert,i%InactivityTimeout,i%BusinessPartner,i%AlertGroups,i%%SuperSession)
				set ^Ens.BusinessProcessI("SessionId",zzc10v2,id)="~Ens.BusinessProcessBPL~PersonProcess~"
				set ^Ens.BusinessProcessI("TimeCreated",zzc10v1,id)="~Ens.BusinessProcessBPL~PersonProcess~"
			}
			else {
				set zzc31v1=$G(^Ens.BusinessProcessD(id))
				set zzc31v2=..%TimeCreatedStorageToLogical($listget(zzc31v1,13))
				set zzc31v3=$listget(zzc31v1,11)
				if (i%%SessionId'=zzc31v3) {
					kill ^Ens.BusinessProcessI("SessionId",$s(zzc31v3'="":zzc31v3,1:-1E14),id)
					set ^Ens.BusinessProcessI("SessionId",zzc10v2,id)="~Ens.BusinessProcessBPL~PersonProcess~"
				}
				if (i%%TimeCreated'=zzc31v2) {
					kill ^Ens.BusinessProcessI("TimeCreated",$s(zzc31v2'="":zzc31v2,1:-1E14),id)
					set ^Ens.BusinessProcessI("TimeCreated",zzc10v1,id)="~Ens.BusinessProcessBPL~PersonProcess~"
				}
				set zzc40v5="",ptr="" for  set ptr=$order(i%%MessagesSentOld(ptr),1,val) Quit:ptr=""  set zzc40v5=zzc40v5_$listbuild(val)
				set zzc40v6="",ptr="" for  set ptr=$order(i%%MessagesReceivedOld(ptr),1,val) Quit:ptr=""  set zzc40v6=zzc40v6_$listbuild(val)
				set zzc40v7="",ptr="" for  set ptr=$order(i%%MasterPendingResponsesOld(ptr),1,val) Quit:ptr=""  set zzc40v7=zzc40v7_$listbuild(val)
				kill nodes merge nodes=i%%MasterPendingResponses
				set counter=0,zzc40v1="" for { set zzc40v1 = $Order(^Ens.BusinessProcessD(id,"pending",zzc40v1),1,data) Quit:zzc40v1=""  if $data(nodes(zzc40v1),val) { if data=val kill nodes(zzc40v1)  set counter=counter+1 } else { kill ^Ens.BusinessProcessD(id,"pending",zzc40v1) } }
				set zzc40v1="" for { set zzc40v1 = $Order(nodes(zzc40v1),1,val) Quit:zzc40v1=""  set ^Ens.BusinessProcessD(id,"pending",zzc40v1)=val,counter=counter+1 }
				if counter=0 { zkill ^Ens.BusinessProcessD(id,"pending") } else { Set ^Ens.BusinessProcessD(id,"pending")=counter }
				kill nodes merge nodes=i%%MessagesReceived
				set counter=0,zzc40v2="" for { set zzc40v2 = $Order(^Ens.BusinessProcessD(id,"received",zzc40v2),1,data) Quit:zzc40v2=""  if $data(nodes(zzc40v2),val) { if data=val kill nodes(zzc40v2)  set counter=counter+1 } else { kill ^Ens.BusinessProcessD(id,"received",zzc40v2) } }
				set zzc40v2="" for { set zzc40v2 = $Order(nodes(zzc40v2),1,val) Quit:zzc40v2=""  set ^Ens.BusinessProcessD(id,"received",zzc40v2)=val,counter=counter+1 }
				if counter=0 { zkill ^Ens.BusinessProcessD(id,"received") } else { Set ^Ens.BusinessProcessD(id,"received")=counter }
				kill nodes merge nodes=i%%MessagesSent
				set counter=0,zzc40v3="" for { set zzc40v3 = $Order(^Ens.BusinessProcessD(id,"sent",zzc40v3),1,data) Quit:zzc40v3=""  if $data(nodes(zzc40v3),val) { if data=val kill nodes(zzc40v3)  set counter=counter+1 } else { kill ^Ens.BusinessProcessD(id,"sent",zzc40v3) } }
				set zzc40v3="" for { set zzc40v3 = $Order(nodes(zzc40v3),1,val) Quit:zzc40v3=""  set ^Ens.BusinessProcessD(id,"sent",zzc40v3)=val,counter=counter+1 }
				if counter=0 { zkill ^Ens.BusinessProcessD(id,"sent") } else { Set ^Ens.BusinessProcessD(id,"sent")=counter }
				kill nodes merge nodes=i%%SynchronizedResponses
				set zzc40v4="" for { set zzc40v4 = $Order(^Ens.BusinessProcessD(id,"%SynchronizedResponses",zzc40v4),1,data) Quit:zzc40v4=""  if $data(nodes(zzc40v4),val) { if data=val kill nodes(zzc40v4) } else { kill ^Ens.BusinessProcessD(id,"%SynchronizedResponses",zzc40v4) } }
				merge ^Ens.BusinessProcessD(id,"%SynchronizedResponses")=nodes
				set ^Ens.BusinessProcessD(id,"BusinessProcessBPL")=$lb(i%%Context,i%%Thread,i%%Counter,i%RuleLogging)
				set ^Ens.BusinessProcessD(id)=$lb("~Ens.BusinessProcessBPL~PersonProcess~",i%%ConfigQueueName,i%%IsCompleted,zzc40v7,,i%%PrimaryRequestHeader,i%%PrimaryResponseHeader,i%%RepliedStatus,i%%responseId,i%Adapter,i%%SessionId,i%%TimeCompleted,i%%TimeCreated,i%%ConfigName,i%%QuitTask,i%AlertOnError,i%%responseClassName,i%%IsTimerInterrupted,i%%IsTerminated,i%%StatusCode,zzc40v6,zzc40v5,i%ReplyCodeActions,i%RetryInterval,i%AlertRetryGracePeriod,i%FailureTimeout,i%Retry,i%SuspendMessage,i%QueueCountAlert,i%QueueWaitAlert,i%InactivityTimeout,i%BusinessPartner,i%AlertGroups,i%%SuperSession)
			}
			set tStatus = 1
		}
		catch tInnerException {
			if ('idassigned) { Set $zobjoid("",$listget(i%"%%OID"))="",i%"%%OID"="" kill:$g(%objtxSTATUS)=2 %objtxOIDASSIGNED(+$this) }
			if (tSharedLock) {  lock -(^Ens.BusinessProcessD(id)#"ES") } elseif (lockok=1)&&(insert)&&(i%%Concurrency=4) {  lock -(^Ens.BusinessProcessD(id)) }
		}
		if lock lock -(^Ens.BusinessProcessD(id)#"E")
		if $Isobject(tInnerException) { throw tInnerException }
	}
	catch tException {
		set tStatus = tException.AsStatus()
	}
	quit tStatus }
%ValidateIndices(idxList="",autoCorrect=0,lockOption=1,multiProcess=1,mapList,verbose=1,errors)
	w !,"There are no indices to validate for class 'User.PersonProcess'"
	QUIT 1
zGetRequestClassList() public {
 Quit $lb("User.Request") }
zGetResponseClassList(pRequest="") public {
 If pRequest=""||(pRequest="User.Request") Quit $lb("User.selectResponse")
 Quit "" }
zGetSettingRow(pSettingName="",pSourceClass="") public {
	Set tRow = ""
	// Check if the class has been compiled with the new generator
	If (pSourceClass = "User.PersonProcess") {
		Set tRow = $case(pSettingName,
			"AlertGroups": $LB("AlertGroups","The Alert Groups to which this item belongs.","%Library.String","",2500,"","","","",0,"Alert Groups","Alerting","Alerting Control","selector?multiSelect=1&context={Ens.ContextSearch/ProductionAlertGroups?productionName=@productionId}"),
			"AlertOnError": $LB("AlertOnError","Send an Alert message whenever an error occurs here","%Library.Boolean",0,"","","","","",0,"Alert On Error","Alerting","Alerting Control",""),
			"AlertRetryGracePeriod": $LB("AlertRetryGracePeriod","When AlertOnError is True and the Process is retrying, refrain from alerting if the Process succeeds within this number of seconds after an error","%Library.Numeric",0,"",0,"","","",0,"Alert Retry Grace Period","Alerting","Alerting Control",""),
			"BusinessPartner": $LB("BusinessPartner","Name of a Business Partner Profile associated with this item","%Library.String","",128,"","","","",0,"Business Partner","Info","Informational Settings","partnerSelector"),
			"FailureTimeout": $LB("FailureTimeout","How long to keep retrying before giving up and returning an error code. <br/>"_$char(13,10)_"-1 means never give up.","%Library.Numeric",15,"",-1,"","","",0,"Failure Timeout","Additional","Additional Settings",""),
			"InactivityTimeout": $LB("InactivityTimeout","Send an Alert message if this number of seconds elapses with no messages being processed by this item. <br/>"_$char(13,10)_"Note that this alert will be sent even if AlertOnError is False. <br/>"_$char(13,10)_"Zero means no alerts of this type will be sent.","%Library.Numeric",0,"",0,"","","",0,"Inactivity Timeout","Alerting","Alerting Control",""),
			"QueueCountAlert": $LB("QueueCountAlert","Number of messages on this item's queue needed to trigger an Alert message to be sent. Note that no further"_$char(13,10)_"alerts will be sent unless the number of messages on the queue drops below 80% of this number and then rises again to this number. <br/>"_$char(13,10)_"Note that this alert will be sent even if AlertOnError is False. <br/>"_$char(13,10)_"Zero means no alerts of this type will be sent.","%Library.Numeric",0,"",0,"","","",0,"Queue Count Alert","Alerting","Alerting Control",""),
			"QueueWaitAlert": $LB("QueueWaitAlert","The number of seconds a message at the front of the queue may have waited since being queued before an alert is triggered.<br/>"_$char(13,10)_"Only one alert will be raised per host item per sequential trigger of the queue wait threshold. <br/>"_$char(13,10)_"Note that this alert will be sent even if AlertOnError is False. <br/>"_$char(13,10)_"Zero means no alerts of this type will be sent.","%Library.Numeric",0,"",0,"","","",0,"Queue Wait Alert","Alerting","Alerting Control",""),
			"ReplyCodeActions": $LB("ReplyCodeActions","<p>A comma-separated list of codes specifying what action this Process will take on various reply status conditions."_$char(13,10)_"The format of the list is: <br /> &lt;code&gt;=&lt;actions&gt;,(&lt;code&gt;,&lt;code&gt;)=&lt;actions&gt;,...<br/>"_$char(13,10)_"Types of reply status condition are identified by a specification code:"_$char(13,10)_"<ul style=""list-style-type: none;"">"_$char(13,10)_"<li><b>E</b> - Error status returned from message handler</li>"_$char(13,10)_"<li><b>E#&lt;statuscode&gt;</b> - Error status returned from message handler has status code equal to &lt;statuscode&gt;</li>"_$char(13,10)_"<li><b>E*&lt;text&gt;</b> - Error status returned from message handler contains text string &lt;text&gt;</li>"_$char(13,10)_"<li><b>X</b> - there is no reply message at all</li>"_$char(13,10)_"</ul></p>"_$char(13,10)_"<p>The following values for &lt;actions&gt; may be used alone or in combinations:"_$char(13,10)_"<ul style=""list-style-type: none;"">"_$char(13,10)_"<li><b>C</b> - Treat the message as Completed OK.</li>"_$char(13,10)_"<li><b>W</b> - Log a warning. If no other non-warning &lt;actions&gt; are triggered, the message will be treated as Completed OK.</li>"_$char(13,10)_"<li><b>R</b> - Retry the message according to the configured RetryInterval and FailureTimeout; finally Fail unless a "_$char(13,10)_"different action is also specified.</li>"_$char(13,10)_"<li><b>S</b> - Suspend the message, log an error, and move on to try the next message.</li>"_$char(13,10)_"<li><b>D</b> - Disable the Process, log an error and restore the original incoming message to the front of the Process's queue.</li>"_$char(13,10)_"<li><b>F</b> - Fail with an error and move on to try the next message from the Process's queue.</li></ul>"_$char(13,10)_"<b>NOTE:</b> the D action can only immediately stop all instances of a Business Process if the BP is configured with PoolSize=1."_$char(13,10)_"If PoolSize=0 this action will disable all Business Processes that share the Actor pool.</p>"_$char(13,10)_"<p>An example of a valid ReplyCodeActions specification is 'E#6301=R,E#&lt;Ens&gt;ErrGeneral=RD,E=F'. This specification will result in a "_$char(13,10)_"retry when error code 6301 is encountered. When error code &lt;Ens&gt;ErrGeneral is encountered, the Operation first retries to send "_$char(13,10)_"the message until FailureTimeout and then, if the error continues, it disables the Operation instead of failing. Any other errors will "_$char(13,10)_"cause the Operation to fail processing of the current message and return the error status to the caller, without retrying first.</p>"_$char(13,10)_"<p><b>The default behavior is 'E=F'.</b> Thus any error status will result in the error being logged and returned to the caller, "_$char(13,10)_"no retries will be attempted, and the Process will move on to try the next message from its queue.</p>"_$char(13,10)_"<p>All codes where &lt;actions&gt; consists of only 'W' (for 'log a Warning') will be evaluated, and a warning will be"_$char(13,10)_"generated for each matching &lt;code&gt;. Other &lt;code&gt; values will be evaluated in left-to-right order, executing the"_$char(13,10)_"first matching &lt;code&gt; that has a non-warning &lt;actions&gt; value. As noted in the details for the 'W' flag, an error"_$char(13,10)_"that only triggers 'W' &lt;actions&gt; will be treated as Completed OK.</p>","%Library.String","",1000,"","","","",0,"Reply Code Actions","Additional","Additional Settings",""),
			"RetryInterval": $LB("RetryInterval","How frequently to retry access to the output system","%Library.Numeric",5,"",0,"","","",0,"Retry Interval","Additional","Additional Settings",""),
			"RuleLogging": $LB("RuleLogging","This set of flags controls the logging performed by the rule engine whenever a Rule activity is executed."_$char(13,10)_"The following flags are available:"_$char(13,10)_"<ul><li>'e' - log errors only. All errors will be logged irrespective of other flags, so "_$char(13,10)_"setting the value to 'e' or leaving the value empty will only log errors.</li>"_$char(13,10)_"<li>'r' - log return values. This is the default value for the setting, and is "_$char(13,10)_"also automatic whenever the 'd' or 'c' flags are specified.</li>"_$char(13,10)_"<li>'d' - log user-defined debug actions in the rule. This will also include 'r'.</li>"_$char(13,10)_"<li>'c' - log details of the conditions that are evaluated in the rule. This will also include 'r'.</li>"_$char(13,10)_"<li>'a' - log all available information. This is equivalent to 'rcd'.</li></ul>","%Library.String","r",50,"","","","",0,"RuleLogging","Dev","Development and Debugging",""),
			: "")
	}
	Else { // Fall back on getting the data dynamically 
		Set tRow = ..GetDynamicSettingRow(pSettingName,pSourceClass)
	}
	Quit tRow }
zMessageHeaderHandler(pRequestHeader,pResponseHeader,pResponseIsError) public {
 Set tSC=1, pResponseIsError=""
 Set $EC=""  try {
	If '..#SKIPMESSAGEHISTORY Do ..%MessagesReceived.Insert(pRequestHeader.%Id())
	If pRequestHeader.Type = 1 {
		If '(..%PrimaryRequestHeader="") { Do ##class(Ens.Util.Log).LogAssert($classname(),"MessageHeaderHandler","Assert Condition Failed: "_"..%PrimaryRequestHeader="""""_$char(13,10)) BREAK }
		Set ..%PrimaryRequestHeader=pRequestHeader, %Ensemble("CurrentHeaderId")=pRequestHeader.%Id()
		Set ..%Concurrency=4
		Set tSC=..%Save()  Quit:('tSC)
		Set (..%SessionId,%Ensemble("SessionId"))=pRequestHeader.SessionId
		Set ..%SuperSession=pRequestHeader.SuperSession
		Set ..%TimeCreated = $zdatetime($ztimestamp,3,,3)
		Do pRequestHeader.SetStatus(3)
		Set tResponse=""
		If $D(^Ens.Runtime("CrashedMessage",pRequestHeader.%Id())) {
			Kill ^Ens.Runtime("CrashedMessage",pRequestHeader.%Id())
			Set tSC=##class(Ens.Util.Error).EnsError($classname(),"MessageHeaderHandler","<Ens>ErrPreviouslyCrashedMessage",pRequestHeader.%Id())
		} Else {
			Set $EC=""  try {
				Set tSC=..OnRequest(..%request,.tResponse)
			} catch ex {
				Set tSC=$Select($ZE="":ex.AsStatus(),1:##class(Ens.Util.Error).EnsSystemError($classname(),"MessageHeaderHandler"))
			}
			If $TLevel>0 Set tTL=$TLevel  While $TLevel>0 { TCommit } Do ##class(Ens.Util.Log).LogWarning($classname(),"MessageHeaderHandler",tTL_" open user transaction"_$S(tTL>1:"s",1:"")_" found after OnRequest(); committing before proceeding")
		}
		Set:(''tSC) tSC=..%responseSet(tResponse)
		Quit:('tSC)
	} ElseIf pRequestHeader.Type = 3 {
		Set %Ensemble("CurrentHeaderId")=pRequestHeader.%Id()
		Do pRequestHeader.SetStatus(3)
		Do ..%MasterPendingResponses.Clear()
		Set ..%IsTerminated=1
		Set tSC=$classmethod(pRequestHeader.MessageBodyClassName,"%OpenId",pRequestHeader.MessageBodyId).StringValue
	} Else {
		Set ..%CurrentResponseHeader=pRequestHeader, %Ensemble("CurrentHeaderId")=pRequestHeader.%Id()
		Set %Ensemble("SessionId")=..%SessionId
		If ..%IsCompleted {
			Do:$S($D(%Ensemble("DoTrace")):%Ensemble("DoTrace"),1:##class(Ens.Util.Trace).DoTrace()) ##class(Ens.Util.Trace).WriteTrace("system",$classname(),"MessageHeaderHandler","Discarding response '"_pRequestHeader.%Id()_"' to already-completed process "_..%Id())
			Do pRequestHeader.SetStatus(4)
			Quit
		}
		Set tCallRequestHeader = ##class(Ens.MessageHeader).%OpenId(pRequestHeader.CorrespondingMessageId)
		If tCallRequestHeader.MessageBodyClassName'="" {
			Set tCallRequest = $classmethod(tCallRequestHeader.MessageBodyClassName,"%OpenId",tCallRequestHeader.MessageBodyId,,.tSC)
			If '$IsObject(tCallRequest) Set tSC=$$Error^%apiOBJ("<Ens>ErrGeneral","Could not open callrequest MessageBody "_tCallRequestHeader.MessageBodyId_" for MessageHeader #"_tCallRequestHeader.%Id()_" with body class "_tCallRequestHeader.MessageBodyClassName_":"_$$getAllErrorTexts^EnsUtil(tSC))  Quit
		} Else {
			Set tCallRequest=""
		}
		Set tIndex=0 For i=1:1:..%MasterPendingResponses.Count() {
			Set tEntry=..%MasterPendingResponses.GetAt(i)
			If $li(tEntry,1)=pRequestHeader.CorrespondingMessageId Set tIndex=i,tCompletionKey=$li(tEntry,2),tIsTimer=$li(tEntry,3),pControlledCompletionKeys=$li(tEntry,4) Quit
		}
		If tIndex=0 {
			Do:$S($D(%Ensemble("DoTrace")):%Ensemble("DoTrace"),1:##class(Ens.Util.Trace).DoTrace()) ##class(Ens.Util.Trace).WriteTrace("system",$classname(),"MessageHeaderHandler","Discarding response '"_pRequestHeader.%Id()_"' belonging to message '"_pRequestHeader.CorrespondingMessageId_"' while in process "_..%Id())
			Do pRequestHeader.SetStatus(4)
			Quit
		}
		Do pRequestHeader.SetStatus(3)
		Set pResponseIsError = pRequestHeader.IsError
		If pResponseIsError {
			Set tResponse=..%response
			Set tErroredResponseStatus=pRequestHeader.ErrorStatus
			Set $EC=""  try {
				Set tSC=..OnError(..%request,.tResponse,tCallRequest,tErroredResponseStatus,tCompletionKey)
				If ..WillHandleErroredResponse() {
					Set tSC=1
				} Else {
					Set:(''tSC) pResponseIsError=0
				}
			} catch ex {
				Set tSC=$Select($ZE="":ex.AsStatus(),1:##class(Ens.Util.Error).EnsSystemError($classname(),"MessageHeaderHandler")), pResponseIsError="" ; new tSC for which OnError() has not been called
			}
			If $TLevel>0 Set tTL=$TLevel  While $TLevel>0 { TCommit } Do ##class(Ens.Util.Log).LogWarning($classname(),"MessageHeaderHandler",tTL_" open user transaction"_$S(tTL>1:"s",1:"")_" found after OnError(); committing before proceeding")
			Quit:('tSC)
			Set tSC=..%responseSet(tResponse)  If ('tSC) Set pResponseIsError=""  Quit
		}
		Do ..%MasterPendingResponses.RemoveAt(tIndex)
		If tIsTimer {
			Set tResponse=..%response
			Do:$S($D(%Ensemble("DoTrace")):%Ensemble("DoTrace"),1:##class(Ens.Util.Trace).DoTrace()) ##class(Ens.Util.Trace).WriteTrace("bproc",$classname(),"MessageHeaderHandler","calling OnTimeout")
			Set $EC=""  try {
				Set tSC=..OnTimeout(..%request,.tResponse,tCallRequest,tCompletionKey)
			} catch ex {
				Set tSC=$Select($ZE="":ex.AsStatus(),1:##class(Ens.Util.Error).EnsSystemError($classname(),"MessageHeaderHandler"))
			}
			If $TLevel>0 Set tTL=$TLevel  While $TLevel>0 { TCommit } Do ##class(Ens.Util.Log).LogWarning($classname(),"MessageHeaderHandler",tTL_" open user transaction"_$S(tTL>1:"s",1:"")_" found after OnTimeout(); committing before proceeding")
			Do:$S($D(%Ensemble("DoTrace")):%Ensemble("DoTrace"),1:##class(Ens.Util.Trace).DoTrace()) ##class(Ens.Util.Trace).WriteTrace("bproc",$classname(),"MessageHeaderHandler","returned from OnTimeout")
			Set:(''tSC) tSC=..%responseSet(tResponse)
			Quit:('tSC)
			For i=..%MasterPendingResponses.Count():-1:1 {
				Set tEntry=..%MasterPendingResponses.GetAt(i)
				If (pControlledCompletionKeys="*")||$listfind(pControlledCompletionKeys,$li(tEntry,2)) {
					Do ..%MasterPendingResponses.RemoveAt(i)
					Set tRequestHeader=##class(Ens.MessageHeader).%OpenId($li(tEntry,1))
					If tRequestHeader.MessageBodyClassName'="" {
						Set tMessageBody=$classmethod(tRequestHeader.MessageBodyClassName,"%OpenId",tRequestHeader.MessageBodyId,,.tSC1)
						If '$IsObject(tMessageBody) {
							Do ##class(Ens.Util.Log).LogWarning($classname(),"MessageHeaderHandler","Could not open pending MessageBody "_tRequestHeader.MessageBodyId_" for MessageHeader #"_tRequestHeader.%Id()_" with body class "_tRequestHeader.MessageBodyClassName_":"_$$getAllErrorTexts^EnsUtil(tSC1))
						} Else {
							Do:$S($D(%Ensemble("DoTrace")):%Ensemble("DoTrace"),1:##class(Ens.Util.Trace).DoTrace()) ##class(Ens.Util.Trace).WriteTrace("bproc",$classname(),"MessageHeaderHandler","calling body %OnTimeout")
							Set $EC=""  try {
								Set tSC1 = tMessageBody.%OnTimeout()
								If ('tSC1) Do ##class(Ens.Util.Log).LogStatus($classname(),"MessageHeaderHandler",tSC1)
								Do:$S($D(%Ensemble("DoTrace")):%Ensemble("DoTrace"),1:##class(Ens.Util.Trace).DoTrace()) ##class(Ens.Util.Trace).WriteTrace("bproc",$classname(),"MessageHeaderHandler","returned from body %OnTimeout")
							} catch ex {
								If ex.Name '= "<METHOD DOES NOT EXIST>" Do ##class(Ens.Util.Error).EnsSystemError($classname(),"MessageHeaderHandler")
							}
							If $TLevel>0 Set tTL=$TLevel  While $TLevel>0 { TCommit } Do ##class(Ens.Util.Log).LogWarning($classname(),"MessageHeaderHandler",tTL_" open user transaction"_$S(tTL>1:"s",1:"")_" found after body %OnTimeout(); committing before proceeding")
						}
					}
				}
			}
		}
		If ..%MasterPendingResponses.Count()>0 {
			Set tHasNonTimer=0
			For i=1:1:..%MasterPendingResponses.Count() {
				Set tEntry=..%MasterPendingResponses.GetAt(i)
				If $li(tEntry,3)=0 Set tHasNonTimer=1 Quit
			}
			If tHasNonTimer=0 Do ..%MasterPendingResponses.Clear()
		}
		If 'pResponseIsError {
			Set tResponse=..%response, pResponseIsError="" ; new tSC coming up for which OnError() has not been called
			If pRequestHeader.MessageBodyClassName'="" {
				Set tMessageBody = $classmethod(pRequestHeader.MessageBodyClassName,"%OpenId",pRequestHeader.MessageBodyId,,.tSC)
				If '$IsObject(tMessageBody) Set tSC=$$Error^%apiOBJ("<Ens>ErrGeneral","Could not open request MessageBody "_pRequestHeader.MessageBodyId_" for MessageHeader #"_pRequestHeader.%Id()_" with body class "_pRequestHeader.MessageBodyClassName_":"_$$getAllErrorTexts^EnsUtil(tSC))  Quit
				Set:tIsTimer ..%IsTimerInterrupted=tMessageBody.IsInterrupted
			} Else {
				Set tMessageBody = ""
			}
			If $D(^Ens.Runtime("CrashedMessage",pRequestHeader.%Id())) {
				Kill ^Ens.Runtime("CrashedMessage",pRequestHeader.%Id())
				Set tSC=##class(Ens.Util.Error).EnsError($classname(),"MessageHeaderHandler","<Ens>ErrPreviouslyCrashedMessage",pRequestHeader.%Id())
			} Else {
				Do:$S($D(%Ensemble("DoTrace")):%Ensemble("DoTrace"),1:##class(Ens.Util.Trace).DoTrace()) ##class(Ens.Util.Trace).WriteTrace("bproc",$classname(),"MessageHeaderHandler","calling OnResponse")
				Set $EC=""  try {
					Set tSC=..OnResponse(..%request,.tResponse,tCallRequest,tMessageBody,tCompletionKey)
				} catch ex {
					Set tSC=$Select($ZE="":ex.AsStatus(),1:##class(Ens.Util.Error).EnsSystemError($classname(),"MessageHeaderHandler"))
				}
			If $TLevel>0 Set tTL=$TLevel  While $TLevel>0 { TCommit } Do ##class(Ens.Util.Log).LogWarning($classname(),"MessageHeaderHandler",tTL_" open user transaction"_$S(tTL>1:"s",1:"")_" found after OnResponse(); committing before proceeding")
				Do:$S($D(%Ensemble("DoTrace")):%Ensemble("DoTrace"),1:##class(Ens.Util.Trace).DoTrace()) ##class(Ens.Util.Trace).WriteTrace("bproc",$classname(),"MessageHeaderHandler","returned from OnResponse")
			}
			Set:(''tSC) tSC=..%responseSet(tResponse)
		} Else {
			Set tResponse=..%response
			Do:$S($D(%Ensemble("DoTrace")):%Ensemble("DoTrace"),1:##class(Ens.Util.Trace).DoTrace()) ##class(Ens.Util.Trace).WriteTrace("bproc",$classname(),"MessageHeaderHandler","calling OnErroredResponse")
			Set $EC=""  try {
				Set tSC=..OnErroredResponse(tErroredResponseStatus,..%request,.tResponse,tCompletionKey)
				Set pResponseIsError=('tSC)
			} catch ex {
				Set tSC=$Select($ZE="":ex.AsStatus(),1:##class(Ens.Util.Error).EnsSystemError($classname(),"MessageHeaderHandler")), pResponseIsError="" ; new tSC for which OnError() has not been called
			}
			If $TLevel>0 Set tTL=$TLevel  While $TLevel>0 { TCommit } Do ##class(Ens.Util.Log).LogWarning($classname(),"MessageHeaderHandler",tTL_" open user transaction"_$S(tTL>1:"s",1:"")_" found after OnErroredResponse(); committing before proceeding")
			Do:$S($D(%Ensemble("DoTrace")):%Ensemble("DoTrace"),1:##class(Ens.Util.Trace).DoTrace()) ##class(Ens.Util.Trace).WriteTrace("bproc",$classname(),"MessageHeaderHandler","returned from OnErroredResponse")
			Quit:('tSC)
			Set tSC=..%responseSet(tResponse)
		}
		Quit:('tSC)
	} ; Else
	Do pRequestHeader.SetStatus(9)
	If ..%MasterPendingResponses.Count()=0 {
		Set tResponse=..%response
		Do:$S($D(%Ensemble("DoTrace")):%Ensemble("DoTrace"),1:##class(Ens.Util.Trace).DoTrace()) ##class(Ens.Util.Trace).WriteTrace("bproc",$classname(),"MessageHeaderHandler","calling OnComplete")
		Set $EC=""  try {
			Set tSC=..OnComplete(..%request,.tResponse)
		} catch ex {
			Set tSC=$Select($ZE="":ex.AsStatus(),1:##class(Ens.Util.Error).EnsSystemError($classname(),"MessageHeaderHandler"))
		}
		If $TLevel>0 Set tTL=$TLevel  While $TLevel>0 { TCommit } Do ##class(Ens.Util.Log).LogWarning($classname(),"MessageHeaderHandler",tTL_" open user transaction"_$S(tTL>1:"s",1:"")_" found after OnComplete(); committing before proceeding")
		Do:$S($D(%Ensemble("DoTrace")):%Ensemble("DoTrace"),1:##class(Ens.Util.Trace).DoTrace()) ##class(Ens.Util.Trace).WriteTrace("bproc",$classname(),"MessageHeaderHandler","returned from OnComplete")
		Set:(''tSC) tSC=..%responseSet(tResponse)
		Quit:('tSC)
		If ..%MasterPendingResponses.Count()=0 {
			Set ..%IsCompleted = 1, ..%TimeCompleted = $zdatetime($ztimestamp,3,,3)
			If ..%RepliedStatus=1 Set tSC=..Reply(..%response)
		}
	}
 } catch {
	Set tSC=##class(Ens.Util.Error).EnsSystemError($classname(),"MessageHeaderHandler")
 }
 If ('tSC)&&(pRequestHeader.Type=2)&&(pRequestHeader.Status=3) {
	Do pRequestHeader.SetStatus(8)
 }
 Quit tSC }
zOnErroredResponse(pErroredResponseStatus,request,response,pCompletionKey) public {
 Set $ZT="Trap",tSC=1 do {
 Set tSC=..%Thread.AnyHandlerActive(.tActive)
 If ('tSC)
 If tActive = 0 Set tSC=pErroredResponseStatus Quit
 Set ..%Context.%LastError=pErroredResponseStatus
 Set tSC=..%Thread.SwitchState(.tStatus,request,.response,pCompletionKey,1)
 Kill %BPLVARS
 If ('tSC) Quit
 If '(tStatus=2||(tStatus=3)) { Do ##class(Ens.Util.Log).LogAssert($classname(),"OnErroredResponse","Assert Condition Failed: "_"tStatus=2||(tStatus=3)"_$char(13,10)) BREAK }
 Set tSC=..UpdateSynchronizedResponses()
 If ('tSC) Quit
 } while (0)
Exit Quit tSC
Trap Set $ZT="",tSC=##class(Ens.Util.Error).EnsSystemError($classname(),"OnErroredResponse") Goto Exit }
zOnGetReplyAction(pRequest,pResponse,pSC) public {
 	Set (tFullAction,tText)="", nActions=$S(""=$ZStrip(..ReplyCodeActions,"<>W"):0, 1:$L(..ReplyCodeActions,","))
	For i=1:1:nActions { Set tType=$P(..ReplyCodeActions,",",i)  Continue:""=tType
		Set tAction="", tCode=$ZStrip($P(tType,"="),"<>W"), tCodeU=$ZCVT(tCode,"U")
		Set tKnown=$Case($E(tCodeU)
						,"E":$Case($E(tCode,2)
								,"#":1
								,"*":1
								,"":1
								,:0)
						,"X":$Case($E(tCode,2),"":1, :0)
						,:0
						)
		If 'tKnown {
			Do ##class(Ens.Util.Log).LogWarning($classname(),"OnGetReplyAction","Unrecognized reply code:'"_tType_"'")
			Continue
		}
		Set tMatch=$Case($E(tCodeU)
						,"E":('pSC)
						,"X":'($Data(pResponse)#2&&$IsObject(pResponse))
						,:0)
				 && $Case($E(tCode,2)
						,"#":$$StatusEquals^%apiOBJ(pSC,$E(tCode,3,*))
						,"*":$$getAllErrorTexts^EnsUtil(pSC)[$E(tCode,3,*)
						,:1)
		If tMatch {
			If $E(tCodeU)="X" {
				Set tMatchText="Empty Response object matched ReplyCodeAction "_i_" : ':"_tType_"'"
			} Else {
				Set tMatchText="Status '"_$$getAllErrorTexts^EnsUtil(pSC)_"' matched ReplyCodeAction "_i_" : '"_tType_"'"
			}
			Set tAction=$ZCVT($ZStrip($P(tType,"=",2),"<>W"),"U")
			Set:tAction'?1.(1"R",1"C",1"W",1"S",1"D",1"F") tAction=""
			If ""=tAction {
				Do ##class(Ens.Util.Log).LogWarning($classname(),"OnGetReplyAction","Unrecognized reply code action:'"_tType_"'")
				Continue
			}
			Set:""'=tMatchText tText=tText_$S(""'=tText:" and ",1:"")_tMatchText
			Set:tAction["W" tFullAction=""
			Set tFullAction=tAction_$S(tAction["W":"",1:tFullAction)
			Quit:tFullAction'?1."W"
		}
	}
	Set:""'=tText ..%ActionHint("CodeReason")=
		"Message body "_pRequest_" / "_pRequest.%Id()_" because "_
		$S('$IsObject(pResponse):"",1:"response "_pResponse_$S(""=pResponse.%Id():"",1:" / "_pResponse.%Id())_" ")_
		tText_" resulting in Action code "_tFullAction
	Quit tFullAction }
zOnRequest(request,response) public {
 Set $ZT="Trap",tSC=1 do {
 Set ..%Thread=$zobjclassmethod("User.PersonProcess.Thread1","%New",$this)
 If '($IsObject(..%Thread)) { Do ##class(Ens.Util.Log).LogAssert($classname(),"OnRequest","Assert Condition Failed: "_"$IsObject(..%Thread)"_$char(13,10)) BREAK }
 Set response=$zobjclassmethod("User.selectResponse","%New")
 If '($IsObject(response)) { Do ##class(Ens.Util.Log).LogAssert($classname(),"OnRequest","Assert Condition Failed: "_"$IsObject(response)"_$char(13,10)) BREAK }
 Set ..%Context=$zobjclassmethod("User.PersonProcess.Context","%New",$this)
 If '($IsObject(..%Context)) { Do ##class(Ens.Util.Log).LogAssert($classname(),"OnRequest","Assert Condition Failed: "_"$IsObject(..%Context)"_$char(13,10)) BREAK }
 Set tSC=..%Thread.SwitchState(.tStatus,request,.response,"",0)
 Kill %BPLVARS
 If ('tSC) Quit
 If '(tStatus=2||(tStatus=3)||(tStatus=4)) { Do ##class(Ens.Util.Log).LogAssert($classname(),"OnRequest","Assert Condition Failed: "_"tStatus=2||(tStatus=3)||(tStatus=4)"_$char(13,10)) BREAK }
 If tStatus'=3&&(..%Context.%Id()'="")&&(..%SessionId'="") Kill ^Ens.BPL.Milestone(..%SessionId,..%Context.%Id())
 } while (0)
Exit Quit tSC
Trap Set $ZT="",tSC=##class(Ens.Util.Error).EnsSystemError($classname(),"OnRequest") Goto Exit }
zOnResponse(request,response,callrequest,callresponse,pCompletionKey) public {
 Set $ZT="Trap",tSC=1 do {
   If pCompletionKey'="" {
     Set tResponseHandler=..%Context.%ResponseHandlers.GetAt(pCompletionKey)
     If tResponseHandler'="" {
       Set tSC=$zobjmethod(..%Context,tResponseHandler,$this,..%Context,request,.response,callrequest,callresponse,pCompletionKey)
       If ('tSC) Quit
    }
  }
  Set tSC=..%Thread.SwitchState(.tStatus,request,.response,pCompletionKey,0,callresponse)
  Kill %BPLVARS
  If ('tSC) Quit
  If '(tStatus=2||(tStatus=3)) { Do ##class(Ens.Util.Log).LogAssert($classname(),"OnResponse","Assert Condition Failed: "_"tStatus=2||(tStatus=3)"_$char(13,10)) BREAK }
  Set tSC=..UpdateSynchronizedResponses()
  If ('tSC) Quit
  If tStatus=2&&(..%Context.%Id()'="")&&(..%SessionId'="") Kill ^Ens.BPL.Milestone(..%SessionId,..%Context.%Id())
 } while (0)
Exit Quit tSC
Trap Set $ZT="",tSC=##class(Ens.Util.Error).EnsSystemError($classname(),"OnResponse") Goto Exit }
%MasterPendingResponsesGetSwizz(noswizzle=0) public {
	Set oref=##class(%Collection.ListOfDT).%New() If oref="" Quit ""
	Set modstate=$system.CLS.GetModifiedBits() Set r%%MasterPendingResponses=oref Do $system.CLS.SetModifiedBits(modstate)
	Set oref.ElementType="User.PersonProcess:%MasterPendingResponses",oref.ElementClassType="datatype",oref.Owner=+$this,oref.Storage=$this."%MasterPendingResponses%i"(),oref.OrefStorage=oref.Storage+1
	Do $system.CLS.SetModified(oref,0)
	Quit oref }
%MasterPendingResponsesOldGetSw(noswizzle=0) public {
	Set oref=##class(%Collection.ListOfDT).%New() If oref="" Quit ""
	Set modstate=$system.CLS.GetModifiedBits() Set r%%MasterPendingResponsesOld=oref Do $system.CLS.SetModifiedBits(modstate)
	Set oref.ElementType="User.PersonProcess:%MasterPendingResponsesOld",oref.ElementClassType="datatype",oref.Owner=+$this,oref.Storage=$this."%MasterPendingResponsesOld%i"(),oref.OrefStorage=oref.Storage+1
	Do $system.CLS.SetModified(oref,0)
	Quit oref }
%MessagesReceivedGetSwizzled(noswizzle=0) public {
	Set oref=##class(%Collection.ListOfDT).%New() If oref="" Quit ""
	Set modstate=$system.CLS.GetModifiedBits() Set r%%MessagesReceived=oref Do $system.CLS.SetModifiedBits(modstate)
	Set oref.ElementType="User.PersonProcess:%MessagesReceived",oref.ElementClassType="datatype",oref.Owner=+$this,oref.Storage=$this."%MessagesReceived%i"(),oref.OrefStorage=oref.Storage+1
	Do $system.CLS.SetModified(oref,0)
	Quit oref }
%MessagesReceivedOldGetSwizzled(noswizzle=0) public {
	Set oref=##class(%Collection.ListOfDT).%New() If oref="" Quit ""
	Set modstate=$system.CLS.GetModifiedBits() Set r%%MessagesReceivedOld=oref Do $system.CLS.SetModifiedBits(modstate)
	Set oref.ElementType="User.PersonProcess:%MessagesReceivedOld",oref.ElementClassType="datatype",oref.Owner=+$this,oref.Storage=$this."%MessagesReceivedOld%i"(),oref.OrefStorage=oref.Storage+1
	Do $system.CLS.SetModified(oref,0)
	Quit oref }
%MessagesSentGetSwizzled(noswizzle=0) public {
	Set oref=##class(%Collection.ListOfDT).%New() If oref="" Quit ""
	Set modstate=$system.CLS.GetModifiedBits() Set r%%MessagesSent=oref Do $system.CLS.SetModifiedBits(modstate)
	Set oref.ElementType="User.PersonProcess:%MessagesSent",oref.ElementClassType="datatype",oref.Owner=+$this,oref.Storage=$this."%MessagesSent%i"(),oref.OrefStorage=oref.Storage+1
	Do $system.CLS.SetModified(oref,0)
	Quit oref }
%MessagesSentOldGetSwizzled(noswizzle=0) public {
	Set oref=##class(%Collection.ListOfDT).%New() If oref="" Quit ""
	Set modstate=$system.CLS.GetModifiedBits() Set r%%MessagesSentOld=oref Do $system.CLS.SetModifiedBits(modstate)
	Set oref.ElementType="User.PersonProcess:%MessagesSentOld",oref.ElementClassType="datatype",oref.Owner=+$this,oref.Storage=$this."%MessagesSentOld%i"(),oref.OrefStorage=oref.Storage+1
	Do $system.CLS.SetModified(oref,0)
	Quit oref }
%SynchronizedResponsesGetSwizzl(noswizzle=0) public {
	Set oref=##class(%Collection.ArrayOfDT).%New() If oref="" Quit ""
	Set modstate=$system.CLS.GetModifiedBits() Set r%%SynchronizedResponses=oref Do $system.CLS.SetModifiedBits(modstate)
	Set oref.ElementType="User.PersonProcess:%SynchronizedResponses",oref.ElementClassType="datatype",oref.Owner=+$this,oref.Storage=$this."%SynchronizedResponses%i"(),oref.OrefStorage=oref.Storage+1
	Do $system.CLS.SetModified(oref,0)
	Quit oref }
zEnumerateSettingsGetInfo(colinfo,parminfo,idinfo,qHandle,extoption=0,extinfo) public {
	Set colinfo=$lb($lb("Name",10,"Name"),$lb("Description",10,"Description"),$lb("Type",10,"Type"),$lb("Default",10,"Default"),$lb("MAXLEN",10,"MAXLEN"),$lb("MINVAL",10,"MINVAL"),$lb("MAXVAL",10,"MAXVAL"),$lb("VALUELIST",10,"VALUELIST"),$lb("DISPLAYLIST",10,"DISPLAYLIST"),$lb("IsRequired",10,"IsRequired"),$lb("LocalizedName",10,"LocalizedName"),$lb("Category",10,"Category"),$lb("LocalizedCategory",10,"LocalizedCategory"),$lb("EditorContext",10,"EditorContext"))
	Set parminfo=""
	Set idinfo=$lb(0,"")
	If extoption {
		Set extinfo=$lb("",$lb($lb("",""),$lb("",""),$lb("",""),$lb("",""),$lb("",""),$lb("",""),$lb("",""),$lb("",""),$lb("",""),$lb("",""),$lb("",""),$lb("",""),$lb("",""),$lb("","")))
	}
	Quit 1 }
zEnumerateSettingsGetODBCInfo(colinfo,parminfo,qHandle) public {
	set version = $Select($Get(%protocol,41)>40:4,1:3)
	Set metadata=$lb(1,14,"Name",12,50,0,2,"Name","PersonProcess","SQLUser","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"Description",12,50,0,2,"Description","PersonProcess","SQLUser","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"Type",12,50,0,2,"Type","PersonProcess","SQLUser","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"Default",12,50,0,2,"Default","PersonProcess","SQLUser","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"MAXLEN",12,50,0,2,"MAXLEN","PersonProcess","SQLUser","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"MINVAL",12,50,0,2,"MINVAL","PersonProcess","SQLUser","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"MAXVAL",12,50,0,2,"MAXVAL","PersonProcess","SQLUser","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"VALUELIST",12,50,0,2,"VALUELIST","PersonProcess","SQLUser","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"DISPLAYLIST",12,50,0,2,"DISPLAYLIST","PersonProcess","SQLUser","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"IsRequired",12,50,0,2,"IsRequired","PersonProcess","SQLUser","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"LocalizedName",12,50,0,2,"LocalizedName","PersonProcess","SQLUser","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"Category",12,50,0,2,"Category","PersonProcess","SQLUser","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"LocalizedCategory",12,50,0,2,"LocalizedCategory","PersonProcess","SQLUser","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"EditorContext",12,50,0,2,"EditorContext","PersonProcess","SQLUser","",$c(0,0,0,0,0,0,0,0,0,0,0,0),0)
	Set colcount=$li(metadata,2),cmdlen=colcount*10,parmcount=$li(metadata,3+cmdlen),pmdlen=parmcount*6,parminfo=$li(metadata,cmdlen+3,cmdlen+pmdlen+3)
	If version=4 {
		Set colinfo=$li(metadata,2,2+cmdlen)
	} Else {
		Set colinfo=$li(metadata,2,2)
		For i=0:1:colcount-1 Set colinfo=colinfo_$list(metadata,3+(i*10),11+(i*10))
	}
	Quit 1 }
zExtentExecute(%qHandle) [ SQLCODE ] public { New %ROWCOUNT,%ROWID,%msg,SQLCODE 
	Set sc=1
	 ;---&sql(DECLARE QExtent CURSOR FOR
 	 ;---		 SELECT ID FROM SQLUser.PersonProcess)
 	 ;--- ** SQL PUBLIC Variables: SQLCODE
	 
	 ;---&sql(OPEN QExtent)
	try { s %qHandle="",%qHandle=$classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xEeNbsh89z7DMDQga7KlqxJbLEgy","%New") if '$isobject(%qHandle) s %qHandle=$$%0dsqlN() } catch { if $ze["<CLASS DOES NOT EXIST>"&&($ze["%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xEeNbsh89z7DMDQga7KlqxJbLEgy")||($ze["<ZSQLU>") { s %qHandle=$$%0dsqlN() } else { throw } }
	If SQLCODE { Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.%Message=$g(%msg) Set sc=$$Error^%apiOBJ(5821,"SQLCODE = "_SQLCODE) } Else { Set sc=1 }
	Quit sc }
zExtentFetch(%qHandle,Row,AtEnd=0) [ SQLCODE ] public { New %ROWCOUNT,%ROWID,%msg,SQLCODE 
	Set Row="",AtEnd=0
	 ;---&sql(FETCH QExtent INTO :c1)
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE
	if $isobject($g(%qHandle))'=1 { s SQLCODE=-102 } else { do %qHandle.FET() if SQLCODE=0 { s c1=%qHandle.sqlcol1 } }
	If 'SQLCODE { Set Row=$lb(c1) Set sc=1 }
	ElseIf SQLCODE=100 { Set AtEnd=1,sc=1 Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.%ROWCOUNT=$g(%ROWCOUNT) }
	Else { Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.Message=$g(%msg) Set AtEnd=1,sc=$$Error^%apiOBJ(5540,SQLCODE,$get(%msg)) }
	QUIT sc }
zExtentFetchRows(%qHandle,FetchCount=0,RowSet,ReturnCount,AtEnd) [ SQLCODE ] public { New %ROWCOUNT,%ROWID,%msg,SQLCODE 
	Set RowSet="",ReturnCount=0,AtEnd=0
	For {
		 ;---&sql(FETCH QExtent INTO :c1)
 		 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE
		if $isobject($g(%qHandle))'=1 { s SQLCODE=-102 } else { do %qHandle.FET() if SQLCODE=0 { s c1=%qHandle.sqlcol1 } }
		If 'SQLCODE { Set RowSet=RowSet_$lb(c1),ReturnCount=ReturnCount+1 Quit:(ReturnCount=FetchCount)||(($l(RowSet)+($l(RowSet)\ReturnCount))>24000) } Else { Set AtEnd=1 Quit }
	}
	If 'SQLCODE { Set sc=1 } ElseIf SQLCODE=100 { Set sc=1 Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.%ROWCOUNT=$g(%ROWCOUNT) } Else { Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.Message=$g(%msg) Set sc=$$Error^%apiOBJ(5540,SQLCODE,$get(%msg)) }
	Quit sc }
zExtentSendODBC(%qHandle,array,qacn,%qrc,piece,ColumnCount) [ SQLCODE ] public { New %ROWCOUNT,%ROWID,%msg,SQLCODE 
	set %qrc=0,piece=0
	for {
		set rc=..ExtentFetch(.%qHandle,.row,.atend)
		if ('rc) { set %qrc=-400 set:$isobject($get(%sqlcontext)) %sqlcontext.SQLCode=-400,%sqlcontext.Message=$g(%msg) do ProcessError^%ourProcedure(rc,$get(%sqlcontext),.%qrc,.%msg),Logerr^%SYS.SQLSRV(%qrc,"","SP",.%msg) RETURN  }
		if row="" { set %qrc=100 set:$isobject($get(%sqlcontext)) %sqlcontext.SQLCode=100 RETURN  }
		if $g(%protocol)>50 { RETURN:$zobjexport(row,60) }
		else {
			if %protocol>46 { for piece=1:1:ColumnCount { goto:$zobjexport($lg(row,piece),50) SPDone } }
			else { for piece=1:1:ColumnCount { goto:$zobjexport($lg(row,piece),7) SPDone } }
		}
	}
	QUIT
SPDone	set:%protocol>46 piece=piece+1
	kill array(qacn)
	for i=piece:1:ColumnCount { set array(qacn,i)=$lg(row,i) }
	QUIT }
 q
%0dsqlN()	n %xxsql
	s %xxsql("S",1)="DECLARE QExtent CURSOR FOR SELECT ID "
	s %xxsql("S",2)="INTO  :i%sqlcol1"
	s %xxsql("S",3)="FROM SQLUser . PersonProcess"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","DEBUG")=$c(1),%xxsql("M","FORKNETDMN")=$c(1)
	s %xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1)
	s %xxsql("M","USELOST")=$c(1),%xxsql("M","ZVERSION")=$c(1),%xxsql("I","%occErrors")="",%xxsql("I","%occSqlfunc")="",%xxsql("I","%sySite")=""
	s %xxsql("I","%sySt")="",%xxsql("I","%sySystem")="",%xxsql("I","EnsConstants")="",%xxsql("I","EnsErrors")="",%xxsql("I","EnsUtil")=""
	s %xxsql("I","Ensemble")="",%xxsql("NS")="PROJECT1"
	return $$BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Runtime","","","User",0,"",),",1,QExtent,","User.PersonProcess.CLS",1)
zExtentFunc() public {
	try {
		set tSchemaPath = ##class(%SQL.Statement).%ClassPath($classname())
			set tStatement = ##class(%SQL.Statement).%New(,tSchemaPath)
			do tStatement.prepare(" SELECT ID FROM SQLUser . PersonProcess")
		set tResult = tStatement.%Execute()
	}
	catch tException { if '$Isobject($Get(tResult)) { set tResult = ##class(%SQL.StatementResult).%New() } set tResult.%SQLCODE=tException.AsSQLCODE(),tResult.%Message=tException.AsSQLMessage() }
	Quit tResult }
zExtentGetODBCInfo(colinfo,parminfo,qHandle) public {
	set version = $Select($Get(%protocol,41)>40:4,1:3)
	Set metadata=$lb(1,1,"ID",4,10,0,2,"ID","PersonProcess","SQLUser","",$c(0,0,0,0,0,0,0,0,0,0,0,1),0)
	Set colcount=$li(metadata,2),cmdlen=colcount*10,parmcount=$li(metadata,3+cmdlen),pmdlen=parmcount*6,parminfo=$li(metadata,cmdlen+3,cmdlen+pmdlen+3)
	If version=4 {
		Set colinfo=$li(metadata,2,2+cmdlen)
	} Else {
		Set colinfo=$li(metadata,2,2)
		For i=0:1:colcount-1 Set colinfo=colinfo_$list(metadata,3+(i*10),11+(i*10))
	}
	Quit 1 }
zIDKEYSQLCheckUnique(pFromOrig=0,%pID,%pVals...)
	 ;---if pFromOrig &sql(SELECT ID FROM Ens.BusinessProcess WHERE  ID=:%pVals(1) AND (%ID <> :%pID OR :%pID IS NULL)) QUIT SQLCODE=100
 	 ;--- ** SQL PUBLIC Variables: %pID, %pVals, SQLCODE
	if pFromOrig try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xEh4w3RYvdIuKxdcH6L4TBizAPZ1","%New") } catch { if $ze["<CLASS DOES NOT EXIST>"&&($ze["%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xEh4w3RYvdIuKxdcH6L4TBizAPZ1")||($ze["<ZSQLU>") { d %0dsqlR } else { throw } } QUIT SQLCODE=100
	 ;---&sql(SELECT ID FROM SQLUser.PersonProcess WHERE  ID=:%pVals(1) AND (%ID <> :%pID OR :%pID IS NULL)) QUIT SQLCODE=100
 	 ;--- ** SQL PUBLIC Variables: %pID, %pVals, SQLCODE
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xE3bRc0ghalgcHhdCnaek17Bsmnb","%New") } catch { if $ze["<CLASS DOES NOT EXIST>"&&($ze["%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xE3bRc0ghalgcHhdCnaek17Bsmnb")||($ze["<ZSQLU>") { d %0dsqlT } else { throw } } QUIT SQLCODE=100
 q
%0dsqlR	n %xxsql
	s %xxsql("S",1)="SELECT ID FROM Ens . BusinessProcess WHERE ID = :%pVals(1) AND ( %ID <> :%pID OR :%pID IS NULL )"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","DEBUG")=$c(1),%xxsql("M","FORKNETDMN")=$c(1)
	s %xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1)
	s %xxsql("M","USELOST")=$c(1),%xxsql("M","ZVERSION")=$c(1),%xxsql("I","%occErrors")="",%xxsql("I","%occSqlfunc")="",%xxsql("I","%sySite")=""
	s %xxsql("I","%sySt")="",%xxsql("I","%sySystem")="",%xxsql("I","EnsConstants")="",%xxsql("I","EnsErrors")="",%xxsql("I","EnsUtil")=""
	s %xxsql("I","Ensemble")="",%xxsql("NS")="PROJECT1"
	d BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","User",0,"",),,"User.PersonProcess.CLS")
	q
%0dsqlT	n %xxsql
	s %xxsql("S",1)="SELECT ID FROM SQLUser . PersonProcess WHERE ID = :%pVals(1) AND ( %ID <> :%pID OR :%pID IS NULL )"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","DEBUG")=$c(1),%xxsql("M","FORKNETDMN")=$c(1)
	s %xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1)
	s %xxsql("M","USELOST")=$c(1),%xxsql("M","ZVERSION")=$c(1),%xxsql("I","%occErrors")="",%xxsql("I","%occSqlfunc")="",%xxsql("I","%sySite")=""
	s %xxsql("I","%sySt")="",%xxsql("I","%sySystem")="",%xxsql("I","EnsConstants")="",%xxsql("I","EnsErrors")="",%xxsql("I","EnsUtil")=""
	s %xxsql("I","Ensemble")="",%xxsql("NS")="PROJECT1"
	d BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","User",0,"",),,"User.PersonProcess.CLS")
	q
zIDKEYSQLExists(pLockOnly=0,pUnlockRef,%pVal...)
	// SQL Foreign Key validation entry point for Key IDKEY.  Called by FKeys that reference this Key to see if the row is defined
	new id set id=%pVal(1)
	if pLockOnly>=0 { if '..%SQLGetLock(id,1,.pUnlockRef) { set sqlcode=-114,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler39",,"SQLUser"_"."_"PersonProcess"_":"_"IDKEY") QUIT 0 } }
	if pLockOnly<1 {
		new qv set qv='..IDKEYSQLCheckUnique(0,,%pVal(1)) QUIT:pLockOnly=-1 qv
		do:'$g(pUnlockRef) ..%SQLReleaseLock(id,1) quit qv
	}
	else { do:'$g(pUnlockRef) ..%SQLReleaseLock(id,1) QUIT 1 }
	Return
zSessionIdExists(K1,id="") [ K1,SQLCODE,id ] public { New SQLCODE 
	 ;---&sql(SELECT %ID INTO :id FROM SQLUser.PersonProcess WHERE (:K1 is not null and %SessionId = :K1) OR (:K1 IS NULL AND %SessionId IS NULL))
 	 ;--- ** SQL PUBLIC Variables: K1, SQLCODE, id
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xE61cRyiVDnHKiAcOuhYxau6ttlR","%New") } catch { if $ze["<CLASS DOES NOT EXIST>"&&($ze["%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xE61cRyiVDnHKiAcOuhYxau6ttlR")||($ze["<ZSQLU>") { d %0dsqlV } else { throw } }
	Quit $select('SQLCODE:1,1:0) }
 q
%0dsqlV	n %xxsql
	s %xxsql("S",1)="SELECT %ID INTO :id FROM SQLUser . PersonProcess WHERE ( :K1 IS NOT NULL AND %SessionId = :K1 ) OR ( :K1 IS NULL AND %SessionId IS NULL )"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","DEBUG")=$c(1),%xxsql("M","FORKNETDMN")=$c(1)
	s %xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1)
	s %xxsql("M","USELOST")=$c(1),%xxsql("M","ZVERSION")=$c(1),%xxsql("I","%occErrors")="",%xxsql("I","%occSqlfunc")="",%xxsql("I","%sySite")=""
	s %xxsql("I","%sySt")="",%xxsql("I","%sySystem")="",%xxsql("I","EnsConstants")="",%xxsql("I","EnsErrors")="",%xxsql("I","EnsUtil")=""
	s %xxsql("I","Ensemble")="",%xxsql("NS")="PROJECT1"
	d BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","User",0,"",),,"User.PersonProcess.CLS")
	q
zTimeCreatedExists(K1,id="") [ K1,SQLCODE,id ] public { New SQLCODE 
	 ;---&sql(SELECT %ID INTO :id FROM SQLUser.PersonProcess WHERE (:K1 is not null and %TimeCreated = :K1) OR (:K1 IS NULL AND %TimeCreated IS NULL))
 	 ;--- ** SQL PUBLIC Variables: K1, SQLCODE, id
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xE5oY3mjocT5pgtgmg0iVFT6NxhY","%New") } catch { if $ze["<CLASS DOES NOT EXIST>"&&($ze["%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xE5oY3mjocT5pgtgmg0iVFT6NxhY")||($ze["<ZSQLU>") { d %0dsqlX } else { throw } }
	Quit $select('SQLCODE:1,1:0) }
 q
%0dsqlX	n %xxsql
	s %xxsql("S",1)="SELECT %ID INTO :id FROM SQLUser . PersonProcess WHERE ( :K1 IS NOT NULL AND %TimeCreated = :K1 ) OR ( :K1 IS NULL AND %TimeCreated IS NULL )"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","DEBUG")=$c(1),%xxsql("M","FORKNETDMN")=$c(1)
	s %xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1)
	s %xxsql("M","USELOST")=$c(1),%xxsql("M","ZVERSION")=$c(1),%xxsql("I","%occErrors")="",%xxsql("I","%occSqlfunc")="",%xxsql("I","%sySite")=""
	s %xxsql("I","%sySt")="",%xxsql("I","%sySystem")="",%xxsql("I","EnsConstants")="",%xxsql("I","EnsErrors")="",%xxsql("I","EnsUtil")=""
	s %xxsql("I","Ensemble")="",%xxsql("NS")="PROJECT1"
	d BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","User",0,"",),,"User.PersonProcess.CLS")
	q
zOnDeleteExecute(%oper=0,pNew,pOld,pChanged,%ok,%msg)
     ;---&sql(DELETE from Ens_BP.Context where %ID = :pNew(4) )
      ;--- ** SQL PUBLIC Variables: SQLCODE, pNew
    try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xEgnKbaKbX0bqhpxm1Y7X0SVn3aP","%New") } catch { if $ze["<CLASS DOES NOT EXIST>"&&($ze["%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xEgnKbaKbX0bqhpxm1Y7X0SVn3aP")||($ze["<ZSQLU>") { d %0dsqlZ } else { throw } }
     ;---&sql(DELETE from Ens_BP.Thread where %Process = :pNew(1))
      ;--- ** SQL PUBLIC Variables: SQLCODE, pNew
    try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xEyRbJYG0x88B1mPZ6qfNiwvq8YP","%New") } catch { if $ze["<CLASS DOES NOT EXIST>"&&($ze["%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xEyRbJYG0x88B1mPZ6qfNiwvq8YP")||($ze["<ZSQLU>") { d %0dsql1 } else { throw } }
	QUIT
 q
%0dsqlZ	n %xxsql
	s %xxsql("S",1)="DELETE FROM Ens_BP . Context WHERE %ID = :pNew(4)"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","DEBUG")=$c(1),%xxsql("M","FORKNETDMN")=$c(1)
	s %xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1)
	s %xxsql("M","USELOST")=$c(1),%xxsql("M","ZVERSION")=$c(1),%xxsql("I","%occErrors")="",%xxsql("I","%occSqlfunc")="",%xxsql("I","%sySite")=""
	s %xxsql("I","%sySt")="",%xxsql("I","%sySystem")="",%xxsql("I","EnsConstants")="",%xxsql("I","EnsErrors")="",%xxsql("I","EnsUtil")=""
	s %xxsql("I","Ensemble")="",%xxsql("NS")="PROJECT1"
	d BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","Ens,User",0,"",),,"User.PersonProcess.CLS")
	q
%0dsql1	n %xxsql
	s %xxsql("S",1)="DELETE FROM Ens_BP . Thread WHERE %Process = :pNew(1)"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","DEBUG")=$c(1),%xxsql("M","FORKNETDMN")=$c(1)
	s %xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1)
	s %xxsql("M","USELOST")=$c(1),%xxsql("M","ZVERSION")=$c(1),%xxsql("I","%occErrors")="",%xxsql("I","%occSqlfunc")="",%xxsql("I","%sySite")=""
	s %xxsql("I","%sySt")="",%xxsql("I","%sySystem")="",%xxsql("I","EnsConstants")="",%xxsql("I","EnsErrors")="",%xxsql("I","EnsUtil")=""
	s %xxsql("I","Ensemble")="",%xxsql("NS")="PROJECT1"
	d BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","Ens,User",0,"",),,"User.PersonProcess.CLS")
	q
]]></Routine>


<Class name="User.PersonProcess.Context">
<Description>
This class is generated by the User.PersonProcess BPL class.
This class should not be edited or modified in any way.
Do not make direct use of this class in your application.</Description>
<ClassType>persistent</ClassType>
<CompileAfter>User.PersonProcess</CompileAfter>
<IncludeCode/>
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.BP.Context</Super>
<TimeChanged>65833,52873.748311</TimeChanged>
<TimeCreated>65828,37204.503705</TimeCreated>
<GeneratedBy>Ens.BPL.Compiler.CLS</GeneratedBy>

<Method name="OnResponse1">
<Description>
Response Handler for call to User.Operation</Description>
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,request:User.Request,response:User.selectResponse,callrequest:User.Request,callresponse:User.selectResponse,callname:%String</FormalSpec>
<Language>objectscript</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Set status=$$$OK,response.Status=callresponse.Status
 If $$$ISERR(status) Quit
 } while (0)
Exit Quit status
Trap Set $ZT="",status=##class(Ens.Util.Error).EnsSystemError("User.PersonProcess.Thread1","OnResponse1")
 Goto Exit
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
</Storage>
</Class>


<Class name="User.PersonProcess.Thread1">
<Description>
This class is generated by the User.PersonProcess BPL class.
This class should not be edited or modified in any way.
Do not make direct use of this class in your application.</Description>
<ClassType>persistent</ClassType>
<CompileAfter>User.PersonProcess</CompileAfter>
<IncludeCode/>
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.BP.Thread</Super>
<TimeChanged>65833,52874.225606</TimeChanged>
<TimeCreated>65833,52873.737201</TimeCreated>
<GeneratedBy>Ens.BPL.Compiler.CLS</GeneratedBy>

<Method name="S1">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>objectscript</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 #; --- Begin Call Verify ---
 #; --- Begin Request ---
 Set callrequest=##class(User.Request).%New()
 If '$IsObject(callrequest) Set status=%objlasterror Quit
 Set status=$$$OK,callrequest=request
 If $$$ISERR(status) Quit
 Set status=..MakeAsyncCall("OnResponse1","User.Operation",callrequest,"Verify",1,0,"Verify",1)
 If $$$ISERR(status) Quit
 Kill callrequest
 #; --- End Request ---
 #; --- End Call Verify ---
 Do ..%PendingResponses.Clear(),..%SyncResponses.Clear()
 Set ..%SyncTimedOut=0,..%PendingTimeout="",..%PendingAlarmHandle="",..%SyncName=""
 If ..%Process.IsResponsePending("Verify") Do ..%PendingResponses.SetAt("","Verify")
 If ..%PendingResponses.Count()>0 {
    Set %name="",%alarmhandle=""
    Set status=..%Process.MakeTimerCall("_Timeout",.%name,5,"Verify",.%alarmhandle,"")
    If $$$ISERR(status) Quit
    Do ..%PendingResponses.SetAt("",%name) Set ..%PendingTimeout=%name,..%PendingAlarmHandle=%alarmhandle,..%SyncName=""
 }
 If ..%PendingResponses.Count()=0 {
    Set ..%NextState="S3"
 } else {
    Set ..%NextState="S2",..%Wait=1
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S1") Goto Exit
]]></Implementation>
</Method>

<Method name="S2">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>objectscript</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 If ..%PendingResponses.Count()=0 {
    Set ..%NextState="S3"
 } else {
    Set ..%NextState="S2",..%Wait=1
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S2") Goto Exit
]]></Implementation>
</Method>

<Method name="S3">
<FormalSpec>process:Ens.BusinessProcess,context:Ens.BP.Context,synctimedout:%Boolean,syncresponses:%ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"),request:%Library.Persistent,response:%Library.Persistent</FormalSpec>
<Language>objectscript</Language>
<PublicList>process,context</PublicList>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set $ZT="Trap",status=$$$OK do {
 Do process.ClearAllPendingResponses()
 Set ..%NextState="Stop"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S3") Goto Exit
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
</Storage>
</Class>


<Class name="User.PersonProcess">
<Description>
</Description>
<Super>Ens.BusinessProcessBPL</Super>
<TimeChanged>65834,37082.049441</TimeChanged>
<TimeCreated>65828,36932.078795</TimeCreated>

<XData name="BPLError">
<Description>
This BPLError block indicates that a BPL Diagram 
containing errors was saved.
To correct this class:
* Open it using the Studio BPL Editor,
* Correct the errors, and,
* Save the diagram.
Do not edit the contents of the BPLError block
or you may lose your diagram.</Description>
<Data><![CDATA[
<diagram Name="User.PersonProcess" Width="2000" Height="2000" Layout="automatic" Language="objectscript" Request="User.Request" Response="User.selectResponse" LastModified="" Version="" Includes="" ShowAnnotation="0">
<context>
<property name='Sc' type='%Boolean' instantiate='0' />
</context>
<shape _index="0" _Type="start" Name="" xPos="200" yPos="150" />
<shape _index="1" _Type="call" Name="Verify" xPos="200" yPos="250" Async="0" Target="User.Operation" Timeout="5" >
<request type='User.Request' >
<assign property="callrequest" value="request" action="set" />
</request>
<response type='User.selectResponse' >
<assign property="response.Status" value="callresponse.Status" action="set" />
</response>
</shape>
<shape _index="2" _Type="end" Name="" xPos="200" yPos="350" />
<shape _index="3" _Type="code" Name="" xPos="201" yPos="196" >
<code><![CDATA[ set obj = ##class(User.Validation).%New()
 
set context.Sc = obj.Validation(request)]]]]><![CDATA[></code>
</shape>
<connection _Type="connector" Name="" from="0" to="3"/>
<connection _Type="connector" Name="" from="1" to="2"/>
</diagram>
]]></Data>
</XData>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
</Storage>
</Class>




<Routine name="User.PersonProcessMasterPendingResponses.1" type="INT" languagemode="0" generated="1" timestamp="65833,52874.018084"><![CDATA[
 ;User.PersonProcessMasterPendingResponses.1
 ;Generated for class User.PersonProcessMasterPendingResponses.  Do NOT edit. 03/30/2021 02:41:13PM
 ;;394E6E76;User.PersonProcessMasterPendingResponses
 ;
SQLUPPER(v,l) { quit $zu(28,v,7,$g(l,32767)) }
ALPHAUP(v,r) { quit $zu(28,v,6) }
STRING(v,l) { quit $zu(28,v,9,$g(l,32767)) }
SQLSTRING(v,l) { quit $zu(28,v,8,$g(l,32767)) }
UPPER(v) { quit $zu(28,v,5) }
MVR(v) { quit $zu(28,v,2) }
TRUNCATE(v,l) { quit $e(v,1,$g(l,3641144)) }
%SQLAcquireLock(%rowid,s=0,unlockref=0)
	new %d,gotlock,subs
	set %d(1)=%rowid,%d(0)=$p(%d(1),"||",1),%d(3)=$p(%d(1),"||",2),subs(6)=$p(%d(0),"||",1) set s=$e("S",s)
	lock +^Ens.BusinessProcessD(subs(6),"pending",%d(3))#s:$zu(115,4) set gotlock=$t
	set:gotlock&&unlockref unlockref=unlockref+1,unlockref(unlockref)=$lb($name(^Ens.BusinessProcessD(subs(6),"pending",%d(3))),"User.PersonProcessMasterPendingResponses",s_"D")
	QUIT gotlock
%SQLAcquireTableLock(s=0,SQLCODE,to="")
	set s=$e("S",s) set:to="" to=$zu(115,4) lock +^Ens.BusinessProcessD#s:to QUIT:$t 1 set SQLCODE=-110 if s="S" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler35",,"SQLUser"_"."_"PersonProcess_MasterPendingResponses") } else { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler36",,"SQLUser"_"."_"PersonProcess_MasterPendingResponses") } QUIT 0
	Return
%SQLAfterTriggers()
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLAfterTriggers")
%SQLBeforeTriggers()
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLBeforeTriggers")
%SQLBuildIndices(pIndices="",pLockFlag=0,pStartID="",pEndID="",pIgnoreIndexList="")
	QUIT ##class(User.PersonProcess).%BuildIndices(pIndices,,pLockFlag,,pStartID,pEndID,pIgnoreIndexList)
%SQLBuildPurgeIndexForRow(pIndices="",pActions="BP",pLockRow=1,%d,%e,pIgnoreIndexList="")
	// Purge and build index nodes for a single row using given values, return Status Code
	new sn,tSC,tLock set tSC=1,pActions=$zcvt(pActions,"U")
	try {
		if $g(%d(1))="" { set tSC=$select(+tSC:$$Error^%apiOBJ(5521,-108,"RowID value must be specified in %d(1) when calling %SQLBuildPurgeIndexForRow for table 'SQLUser.PersonProcess_MasterPendingResponses'"),1:$$AppendStatus^%occSystem(tSC,$$Error^%apiOBJ(5521,-108,"RowID value must be specified in %d(1) when calling %SQLBuildPurgeIndexForRow for table 'SQLUser.PersonProcess_MasterPendingResponses'"))) RETURN tSC }
		if pLockRow { if '..%SQLAcquireLock(%d(1)) { set tSC=$select(+tSC:$$Error^%apiOBJ(5521,-114,"Unable to lock row in table 'SQLUser.PersonProcess_MasterPendingResponses' with %ID = '"_%d(1)_"'"),1:$$AppendStatus^%occSystem(tSC,$$Error^%apiOBJ(5521,-114,"Unable to lock row in table 'SQLUser.PersonProcess_MasterPendingResponses' with %ID = '"_%d(1)_"'"))) RETURN tSC  } else { set tLock=1 }}
		set %d(0)=$p(%d(1),"||",1),%d(3)=$p(%d(1),"||",2)
		set subs(6)=$p(%d(0),"||",1)
		if pLockRow { do ..%SQLReleaseLock(%d(1),0,0) set tLock=0 }
	}
	catch {
		if $g(tLock) { do ..%SQLReleaseLock(%d(1),0,0) }
		set tSC=$select(+tSC:$$Error^%apiOBJ(5594,$ze),1:$$AppendStatus^%occSystem(tSC,$$Error^%apiOBJ(5594,$ze)))
	}
	QUIT tSC
%SQLCheckUnique(pFromOrig=0,%pID,%pVals...)
	 ;---&sql(SELECT ID FROM SQLUser.PersonProcess_MasterPendingResponses WHERE  ID=:%pVals(1) AND (%ID <> :%pID OR :%pID IS NULL)) QUIT SQLCODE=100
 	 ;--- ** SQL PUBLIC Variables: %pID, %pVals, SQLCODE
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xED9ZwIIwLPsPYBAY1SDymGp1OiM","%New") } catch { if $ze["<CLASS DOES NOT EXIST>"&&($ze["%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xED9ZwIIwLPsPYBAY1SDymGp1OiM")||($ze["<ZSQLU>") { d %0dsqlA } else { throw } } QUIT SQLCODE=100
 q
%0dsqlA	n %xxsql
	s %xxsql("S",1)="SELECT ID FROM SQLUser . PersonProcess_MasterPendingResponses WHERE ID = :%pVals(1) AND ( %ID <> :%pID OR :%pID IS NULL )"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","DEBUG")=$c(1),%xxsql("M","FORKNETDMN")=$c(1)
	s %xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1)
	s %xxsql("M","USELOST")=$c(1),%xxsql("M","ZVERSION")=$c(1),%xxsql("I","%occErrors")="",%xxsql("I","%occSqlfunc")="",%xxsql("I","%sySite")=""
	s %xxsql("I","%sySt")="",%xxsql("I","%sySystem")="",%xxsql("I","EnsConstants")="",%xxsql("I","EnsErrors")="",%xxsql("I","EnsUtil")=""
	s %xxsql("I","Ensemble")="",%xxsql("NS")="PROJECT1"
	d BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","User",0,"",),,"User.PersonProcessMasterPendingResponses.CLS")
	q
%SQLCheckUniqueIndices(pIndices,pOK)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLCheckUniqueIndices")
%SQLCheckUniqueKeys(pConNumber,pFromOrig=0,pUpdate=0,pVals...)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLCheckUniqueKeys")
%SQLCopyIcolIntoName()
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLCopyIcolIntoName")
%SQLCopyNameIntoIcol()
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLCopyNameToIcol")
%SQLCreateInsDelTables(pInsTrigObj,pDelTrigObj)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLCreateInsDelTables")
%SQLDefineiDjVars(%d,subs,master)
	QUIT
%SQLDelete(%rowid,%check,%tstart=1,%mv=0,%polymorphic=0)
	// SQL DELETE method for table SQLUser.PersonProcess_MasterPendingResponses
	new bva,ce,%d,dc,%e,%ele,%itm,%key,%l,%nc,omcall,%oper,%pos,%s,sn,sqlcode,subs set %oper="DELETE",sqlcode=0,%ROWID=%rowid,%d(1)=%rowid,%e(1)=%rowid,%d(0)=$p(%d(1),"||",1),%d(3)=$p(%d(1),"||",2),subs(6)=$p(%d(0),"||",1),%l=$c(0)
	if '$d(%0CacheSQLRA) { new %0CacheSQLRA set omcall=1 }
	if '$a(%check,2) { new %ls if $tlevel,$i(%0CacheLock("User.PersonProcessMasterPendingResponses"))>$zu(156,50,1) { lock +^Ens.BusinessProcessD:$zu(115,4) lock:$t -^Ens.BusinessProcessD set %ls=$s($t:2,1:0) } else { lock +^Ens.BusinessProcessD(subs(6),"pending",%d(3)):$zu(115,4) set %ls=$t } set:%ls=2 $e(%check,2)=$c(1) set:%ls=1 $e(%l)=$c(1) if '%ls { set SQLCODE=-110,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler40",,%oper,"SQLUser"_"."_"PersonProcess_MasterPendingResponses",$g(%d(1))) RETURN  }} if %tstart { TSTART:($zu(115,1)=1)||('$TLEVEL&&($zu(115,1)=2))  }
	set $zt="ERRORDelete"
	if '$a(%check),'$zu(115,7) do  if sqlcode set SQLCODE=sqlcode do ..%SQLEExit() QUIT  
	. new %fk,%k,%p,%st,%t,%z set %k="",%p("%1")="%d(1),",%p("IDKEY")="%d(0),%d(3),,"
	. for  quit:sqlcode<0  set %k=$o(^rINDEXEXT("F","User.PersonProcessMasterPendingResponses",%k)) quit:%k=""  set %t="" for  set %t=$o(^rINDEXEXT("F","User.PersonProcessMasterPendingResponses",%k,"f",%t)) quit:%t=""  set %st=(%t="User.PersonProcessMasterPendingResponses") set %fk="" for  set %fk=$o(^rINDEXEXT("F","User.PersonProcessMasterPendingResponses",%k,"f",%t,%fk)) quit:%fk=""  x "set %z=$classmethod(%t,%fk_""SQLFKeyRefAction"",%st,%k,$a(%check,2),"_%p(%k)_")" if %z set sqlcode=-124 quit  
	set ce="" for  { set ce=$order(^oddSQL("SQLUser","PersonProcess_MasterPendingResponses","DC",ce)) quit:ce=""   do $classmethod(ce,"%SQLDeleteChildren",%d(1),%check,.sqlcode) quit:sqlcode<0  } if sqlcode<0 { set SQLCODE=sqlcode do ..%SQLEExit() QUIT } // Delete any children
	if '$a(%check,3) {
	}
	k ^Ens.BusinessProcessD(subs(6),"pending",%d(3))
	do ..%SQLUnlock() TCOMMIT:%tstart&&($zu(115,1)=1)
	set SQLCODE=0 kill:$g(omcall) %0CacheSQLRA
	QUIT
ERRORDelete	set $zt="",SQLCODE=-415,%msg=$s($g(%msg)'="":%msg_" -- ",1:"")_$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler51",,%oper,"SQLUser"_"."_"PersonProcess_MasterPendingResponses",$ze) if $ze["<FRAMESTACK>" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler52",,$ze,%oper,"SQLUser"_"."_"PersonProcess_MasterPendingResponses") do ##Class(%SYS.System).WriteToConsoleLog(%msg) if ($zu(67,10,$j)=1)||($zu(67,10,$j)=3) { write !,%msg h 3 } HALT  } do ..%SQLEExit() QUIT
	Return
%SQLDeleteChildren(%parent,%check,sqlcode)
	// Delete all rows where PersonProcess = :%parent
	new %ROWCOUNT,%ROWID,SQLCODE
	set:$a(%check,2)=2 $e(%check,2)=$c(0)
	 ;---&sql(DELETE %USECHECKVARIABLE FROM SQLUser.PersonProcess_MasterPendingResponses WHERE PersonProcess = :%parent)
 	 ;--- ** SQL PUBLIC Variables: %parent, SQLCODE
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xEGUEwNCR7PfBnLg49EngED3xDFV","%New") } catch { if $ze["<CLASS DOES NOT EXIST>"&&($ze["%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xEGUEwNCR7PfBnLg49EngED3xDFV")||($ze["<ZSQLU>") { d %0dsqlC } else { throw } }
	set:SQLCODE<0 sqlcode=SQLCODE QUIT  
 q
%0dsqlC	n %xxsql
	s %xxsql("S",1)="DELETE %USECHECKVARIABLE FROM SQLUser . PersonProcess_MasterPendingResponses WHERE PersonProcess = :%parent"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","DEBUG")=$c(1),%xxsql("M","FORKNETDMN")=$c(1)
	s %xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1)
	s %xxsql("M","USELOST")=$c(1),%xxsql("M","ZVERSION")=$c(1),%xxsql("I","%occErrors")="",%xxsql("I","%occSqlfunc")="",%xxsql("I","%sySite")=""
	s %xxsql("I","%sySt")="",%xxsql("I","%sySystem")="",%xxsql("I","EnsConstants")="",%xxsql("I","EnsErrors")="",%xxsql("I","EnsUtil")=""
	s %xxsql("I","Ensemble")="",%xxsql("NS")="PROJECT1"
	d BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","User",0,"",),,"User.PersonProcessMasterPendingResponses.CLS")
	q
%SQLDeleteTempStreams()
	// Delete all temporary streams
	QUIT
%SQLEExit()
	do:%oper'="DELETE" ..%SQLUnlock2() do ..%SQLUnlock() 
	do ..%SQLUnlockRef()
	if %tstart,$zu(115,1)=1,$TLEVEL { set %tstart=0 TROLLBACK 1 } kill:$g(omcall) %0CacheSQLRA QUIT  
	Return
%SQLExists(pLockOnly=0,pUnlockRef,%pVal...)
	// SQL Foreign Key validation entry point for Key %1.  Called by FKeys that reference this Key to see if the row is defined
	new id set id=%pVal(1)
	if pLockOnly>=0 { if '..%SQLGetLock(id,1,.pUnlockRef) { set sqlcode=-114,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler39",,"SQLUser"_"."_"PersonProcess_MasterPendingResponses"_":"_"%1") QUIT 0 } }
	if pLockOnly<1 {
		new qv set qv='..%SQLCheckUnique(0,,%pVal(1)) QUIT:pLockOnly=-1 qv
		do:'$g(pUnlockRef) ..%SQLReleaseLock(id,1) quit qv
	}
	else { do:'$g(pUnlockRef) ..%SQLReleaseLock(id,1) QUIT 1 }
	Return
%SQLFKeyDelLock()
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLFKeyDelLock")
%SQLFastInsert(%check)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLFastInsert")
%SQLFieldValidate()
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLFieldValidate")
%SQLGetLock(pRowId,pShared=0,pUnlockRef)
	if $tlevel,$i(%0CacheLock("User.PersonProcessMasterPendingResponses"))>$zu(156,50,1) { new s set s=$e("S",pShared) lock +^Ens.BusinessProcessD#s:$zu(115,4) lock:$t -^Ens.BusinessProcessD#s QUIT $s($t:2,1:0) } 
	QUIT ..%SQLAcquireLock(pRowId,pShared,.pUnlockRef)
%SQLGetOld(%rowid,%d,%e,sqlcode)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLGetOld")
%SQLGetOldAll()
	// Get all old data values
	new SQLCODE,%ROWCOUNT
	 ;---&sql(SELECT MasterPendingResponses INTO :%e() FROM %IGNOREINDEX * SQLUser.PersonProcess_MasterPendingResponses WHERE ID=:%rowid)
 	 ;--- ** SQL PUBLIC Variables: %e, %rowid, SQLCODE
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xEgowyZeA1yXOYhYchMissF8Dzxg","%New") } catch { if $ze["<CLASS DOES NOT EXIST>"&&($ze["%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xEgowyZeA1yXOYhYchMissF8Dzxg")||($ze["<ZSQLU>") { d %0dsqlE } else { throw } }
	set sqlcode=SQLCODE QUIT:sqlcode'=0
	QUIT
 q
%0dsqlE	n %xxsql
	s %xxsql("S",1)="SELECT MasterPendingResponses INTO :%e() FROM %IGNOREINDEX * SQLUser . PersonProcess_MasterPendingResponses WHERE ID = :%rowid"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","DEBUG")=$c(1),%xxsql("M","FORKNETDMN")=$c(1)
	s %xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1)
	s %xxsql("M","USELOST")=$c(1),%xxsql("M","ZVERSION")=$c(1),%xxsql("I","%occErrors")="",%xxsql("I","%occSqlfunc")="",%xxsql("I","%sySite")=""
	s %xxsql("I","%sySt")="",%xxsql("I","%sySystem")="",%xxsql("I","EnsConstants")="",%xxsql("I","EnsErrors")="",%xxsql("I","EnsUtil")=""
	s %xxsql("I","Ensemble")="",%xxsql("NS")="PROJECT1"
	d BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","User",0,"",),,"User.PersonProcessMasterPendingResponses.CLS")
	q
%SQLGetOldIndex(%rowid,%d,pF=0,sqlcode)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLGetOldIndex")
%SQLInsert(%d,%check,%inssel,%vco,%tstart=1,%mv=0)
	// SQL INSERT method for table SQLUser.PersonProcess_MasterPendingResponses
	new bva,%ele,%itm,%key,%f,%l,%n,%nc,%oper,%pos,%s,sqlcode,sn,subs,unlockref set %oper="INSERT",sqlcode=0,%l=$c(0,0,0),unlockref=1
	if $a(%check,7) { new %diu merge %diu=%d }
	set:$d(%d(0)) subs(6)=$p(%d(0),"||",1)
	if '$a(%check),'..%SQLValidateFields(.sqlcode) { set SQLCODE=sqlcode RETURN "" }
	do:'$a(%check,8) ..%SQLNormalizeFields()
	if %tstart { TSTART:($zu(115,1)=1)||('$TLEVEL&&($zu(115,1)=2))  } set $zt="ERRORInsert"
	if '$a(%check),$g(%d(0))'="",'##class(User.PersonProcess).%SQLExists($s($a(%check,2)=1:-1,1:0),.unlockref,%d(0)) {
		if sqlcode<0 { set SQLCODE=sqlcode if SQLCODE=-114 { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler56",,%oper,"SQLUser"_"."_"PersonProcess",$g(%d(0))) } } else { set SQLCODE=-104,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler9",,"SQLUser"_"."_"PersonProcess_MasterPendingResponses") }
		do ..%SQLEExit() RETURN ""
	}
	if '$a(%check) { if $g(%d(0))="" { do ..%SQLMissing("PersonProcess") set SQLCODE=sqlcode do ..%SQLEExit() RETURN "" } }
	set:'$d(%d(3)) %d(3)=$i(^Ens.BusinessProcessD(subs(6),"pending")) set %d(1)=%d(0)_"||"_%d(3),subs(6)=$p(%d(0),"||",1)
	if '$a(%check) {
		do {
			if $g(%vco)'="" { d @%vco quit:sqlcode<0  }
				// Constraint IDKEY
				if '$a(%check,2) { lock +^Ens.BusinessProcessD("IDKEY",%d(0),%d(3)):$zu(115,4) if $t { set $e(%l,2)=$c(1) } else { do ..%SQLUnlockError("IDKEY") quit  } }
				if '$a(%check,7) { if '..IDKEYSQLCheckUnique(0,,%d(0),%d(3)) { set sqlcode=-119,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler10",,"SQLUser"_"."_"PersonProcess_MasterPendingResponses","IDKEY","PersonProcess"_"="_$$quoter^%apiSQL($g(%d(0)))_","_"element_key"_"="_$$quoter^%apiSQL($g(%d(3)))) quit  }} // INSERT
				else { new tID set tID=..IDKEYSQLFindRowIDByConstraint($lb(%d(0),%d(3)),1) if tID'="" { kill %d merge %d=%diu kill %diu do ..%SQLUpdate(tID,%check,.%d),..%SQLUnlock2(),..%SQLUnlockRef() set $e(%check,7)=$c(2) quit  }} // INSERT OR UPDATE
		} while 0
		QUIT:$a(%check,7)=2 $s('SQLCODE:tID,1:"")				// INSERT became UPDATE
		if sqlcode<0 { set SQLCODE=sqlcode do ..%SQLEExit() RETURN "" }		// A constraint failed
	}
	if '$a(%check,2) { new %ls if $tlevel,$i(%0CacheLock("User.PersonProcessMasterPendingResponses"))>$zu(156,50,1) { lock +^Ens.BusinessProcessD:$zu(115,4) lock:$t -^Ens.BusinessProcessD set %ls=$s($t:2,1:0) } else { lock +^Ens.BusinessProcessD(subs(6),"pending",%d(3)):$zu(115,4) set %ls=$t } set:%ls=2 $e(%check,2)=$c(1) set:%ls=1 $e(%l)=$c(1) if '%ls set SQLCODE=-110,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler40",,%oper,"SQLUser"_"."_"PersonProcess_MasterPendingResponses",$g(%d(1))) do ..%SQLEExit() RETURN ""  }
	set ^Ens.BusinessProcessD(subs(6),"pending",%d(3))=$g(%d(2))
	lock:$a(%l,2) -^Ens.BusinessProcessD("IDKEY",%d(0),%d(3))#"D" 
	lock:$a(%l) -^Ens.BusinessProcessD(subs(6),"pending",%d(3))
	TCOMMIT:%tstart&&($zu(115,1)=1)
	do ..%SQLUnlockRef()
	set SQLCODE=0
	QUIT %d(1) 			// %SQLInsert
ERRORInsert	set $zt="",SQLCODE=-415,%msg=$s($g(%msg)'="":%msg_" -- ",1:"")_$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler51",,%oper,"SQLUser"_"."_"PersonProcess_MasterPendingResponses",$ze)
	if $ze["<FRAMESTACK>" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler52",,$ze,%oper,"SQLUser"_"."_"PersonProcess_MasterPendingResponses") do ##Class(%SYS.System).WriteToConsoleLog(%msg) if ($zu(67,10,$j)=1)||($zu(67,10,$j)=3) { write !,%msg h 3 } HALT  }
	do ..%SQLEExit()
	RETURN ""
%SQLInsertComputes(view=0)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLInsertComputes")
%SQLInsertStreams(pVal,pClassname,pProperty,pField,pChangeEmptyToNull,pOIDType,sqlcode,%msg) public {
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLInsertStreams") }
%SQLInvalid(pIcol,pVal) public {
	set:$l($g(pVal))>40 pVal=$e(pVal,1,40)_"..." do:'$d(%n) ..%SQLnBuild() set %msg=$s($g(%msg)'="":%msg_$c(13,10),1:"")_$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler37",,"SQLUser"_"."_"PersonProcess_MasterPendingResponses"_"."_$lg(%n,pIcol),$s($g(pVal)'="":$s(pVal="":"<NULL>",pVal=$c(0):"<EMPTY STRING>",1:"'"_pVal_"'"),1:"")),sqlcode=$s(%oper="INSERT":-104,1:-105)
	QUIT sqlcode }
%SQLInvalid2(ficol,val,char) [ sqlcode ] public {
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLInvalid2") }
%SQLMVDelete(oref,flags,%rowid,oldrec)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLMVDelete")
%SQLMVIndexDelete(%e)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLMVIndexDelete")
%SQLMVIndexInsert(%d)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLMVIndexInsert")
%SQLMVIndexUpdate(%d,%e)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLMVIndexUpdate")
%SQLMVInsert(oref,flags,%rowid,newrec)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLMVInsert")
%SQLMVUpdate(oref,flags,%rowid,newrec,oldrec)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLMVUpdate")
%SQLMissing(fname)
	set sqlcode=-108,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler47",,fname,"SQLUser"_"."_"PersonProcess_MasterPendingResponses") quit
%SQLNormalizeCompFields()
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLNormalizeCompFields")
%SQLNormalizeFields()
	set:$g(%d(0))'="" %d(0)=$select(%d(0)=$c(0)&&$zu(115,13):"",1:%d(0)\1)
	QUIT
%SQLPurgeIndices(pIndices="",pLockExtent=0,pIgnoreIndexList="")
	QUIT ##class(User.PersonProcess).%PurgeIndices(pIndices,pLockExtent,pIgnoreIndexList)
%SQLQuickBulkInsert(%nolock=0)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLQuickBulkInsert")
%SQLQuickBulkLoad(%rowidlist,%nolock=0,pkey=0)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLQuickBulkLoad")
%SQLQuickBulkSave(%nolock=0)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLQuickBulkSave")
%SQLQuickBulkUpdate(%nolock=0)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLQuickBulkUpdate")
%SQLQuickDelete(%rowid,%nolock=0,pkey=0)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLQuickDelete")
%SQLQuickDeleteChildren(%parent,%nolock=0,pkey=0)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLQuickDeleteChildren")
%SQLQuickFindPKeyByRowID(%rowid)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLQuickFindPKeyByRowID")
%SQLQuickFindRowIDByPKey(pPKey,pOutput=1,pInternal=0)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLQuickFindRowIDByPKey")
%SQLQuickInsert(d,%nolock=0,pkey=0,parentpkey=0)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLQuickInsert")
%SQLQuickLoad(%rowid,%nolock=0,pkey=0,qq=0)
	// Get fields from row where SQLRowID=%rowid
	new d,i,il,subs set:%nolock=2 %nolock=1
	if %nolock=0 { if '..%SQLAcquireLock(%rowid) { set %qrc=114,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler45",,"SQLUser"_"."_"PersonProcess_MasterPendingResponses",%rowid),%ROWCOUNT=0 QUIT  } set:$zu(115,2) il=$zu(115,2,0) }
	set d(1)=%rowid,d(0)=$p(d(1),"||",1),d(3)=$p(d(1),"||",2),subs(6)=$p(d(0),"||",1)
	new s,ul set ul=0,d(1)=%rowid if $zu(115,2)=1 { lock +^Ens.BusinessProcessD(subs(6),"pending",d(3))#"S":$zu(115,4) if $t { set ul=1 } else { set %qrc=114,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler46",,"SQLUser"_"."_"PersonProcess_MasterPendingResponses",%rowid),%ROWCOUNT=0 quit  } }
	if '$d(^Ens.BusinessProcessD(subs(6),"pending",d(3)),s) { set SQLCODE=100,%qrc=100 if %nolock=0 { do:$g(il) $zu(115,2,il) }} else { set SQLCODE=0
	if %nolock=0 { if $zu(115,1)=1 { TSTART  } elseif '$TLEVEL,$zu(115,1)=2 { TSTART  }} set d(2)=s  }
	do ..%SQLQuickLogicalToOdbc(.d)
	if SQLCODE set %ROWCOUNT=0 set:SQLCODE<0 SQLCODE=-SQLCODE lock:ul -^Ens.BusinessProcessD(subs(6),"pending",d(3))#"SI" set %qrc=SQLCODE QUIT
	set:qq d=$zobjexport("User.PersonProcessMasterPendingResponses",18),d=$zobjexport(4,18) set i=-1 for  { set i=$o(d(i)) quit:i=""  set d=$zobjexport(d(i),18) } set %qrc=0,%ROWCOUNT=1 lock:ul -^Ens.BusinessProcessD(subs(6),"pending",d(3))#"SI" if %nolock=0 { do ..%SQLReleaseLock(%rowid,0,0) do:$g(il) $zu(115,2,il) } QUIT
	Return
%SQLQuickLoadChildren(%parref,%nolock=0,pkey=0,returnpkey=0)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLQuickLoadChildren")
%SQLQuickLogicalToOdbc(%d)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLLogicalToOdbcFields")
%SQLQuickOdbcToLogical(%d)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLQuickOdbcToLogical")
%SQLQuickUpdate(%rowid,d,%nolock=0,pkey=0)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLQuickUpdate")
%SQLReleaseLock(%rowid,s=0,i=0,e="")
	new %d,subs
	set %d(1)=%rowid,%d(0)=$p(%d(1),"||",1),%d(3)=$p(%d(1),"||",2),subs(6)=$p(%d(0),"||",1) set s=$e("S",s)_$e("D",i)
	lock -^Ens.BusinessProcessD(subs(6),"pending",%d(3))#s
	set:i&&($g(%0CacheLock("User.PersonProcessMasterPendingResponses"))) %0CacheLock("User.PersonProcessMasterPendingResponses")=%0CacheLock("User.PersonProcessMasterPendingResponses")-1
	QUIT
%SQLReleaseTableLock(s=0,i=0)
	set s=$e("S",s)_$e("D",i) lock -^Ens.BusinessProcessD#s QUIT 1
	Return
%SQLStorageValidation()
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLStorageValidation")
%SQLTrigDelTab()
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLTrigDelTab")
%SQLTrigInsTab()
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLTrigInsTab")
%SQLUnlock()
	lock:$a(%l) -^Ens.BusinessProcessD(subs(6),"pending",%d(3))
	QUIT
%SQLUnlock2()
	lock:$a(%l,2) -^Ens.BusinessProcessD("IDKEY",%d(0),%d(3))#"D" QUIT
%SQLUnlockError(cname)
	set sqlcode=-110 if %oper="DELETE" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler48",,"SQLUser"_"."_"PersonProcess_MasterPendingResponses",cname) } else { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler49",,"SQLUser"_"."_"PersonProcess_MasterPendingResponses",cname) } quit
	Return
%SQLUnlockRef()
	for %itm=2:1:$g(unlockref) {
		if $lg(unlockref(%itm))'="%UnlockId" { lock -@$lg(unlockref(%itm))#$lg(unlockref(%itm),3) }
		else { do $classmethod($lg(unlockref(%itm),2),$lg(unlockref(%itm)),$lg(unlockref(%itm),3),1,1) }
		set:$g(%0CacheLock($lg(unlockref(%itm),2))) %0CacheLock($lg(unlockref(%itm),2))=%0CacheLock($lg(unlockref(%itm),2))-1
	}
	QUIT
%SQLUpdate(%rowid,%check,%d,%vco,%tstart=1,%mv=0,%polymorphic=0,%soid)
	// SQL UPDATE method for table SQLUser.PersonProcess_MasterPendingResponses
	new %e,bva,%ele,%itm,%key,%f,%l,%n,%nc,%oper,%pos,%s,icol,omcall,s,sn,sqlcode,subs,t set %oper="UPDATE",sqlcode=0,%ROWID=%rowid,$e(%e,1)=$c(0),%l=$c(0,0,0)
	if '$d(%0CacheSQLRA) { new %0CacheSQLRA set omcall=1 }
	if '$a(%check,7) {
		if '$a(%check),'..%SQLValidateFields(.sqlcode) { set SQLCODE=sqlcode QUIT  }
		do:'$a(%check,8) ..%SQLNormalizeFields()
	}
	if ($d(%d(1))&&($g(%d(1))'=%rowid))||($d(%d(0))&&($g(%d(0))'=$p(%rowid,"||",1)))||($d(%d(3))&&($g(%d(3))'=$p(%rowid,"||",2))) { set SQLCODE=-107,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler17",,"'ID', 'PersonProcess', or 'element_key'","SQLUser"_"."_"PersonProcess_MasterPendingResponses") QUIT  }
	for icol=2:1:3 { set $e(%e,icol)=$c($d(%d(icol))) }
	set %d(1)=%rowid,%e(1)=%rowid,%d(0)=$p(%d(1),"||",1),%d(3)=$p(%d(1),"||",2),subs(6)=$p(%d(0),"||",1)
	if '$a(%check,2) { new %ls if $tlevel,$i(%0CacheLock("User.PersonProcessMasterPendingResponses"))>$zu(156,50,1) { lock +^Ens.BusinessProcessD:$zu(115,4) lock:$t -^Ens.BusinessProcessD set %ls=$s($t:2,1:0) } else { lock +^Ens.BusinessProcessD(subs(6),"pending",%d(3)):$zu(115,4) set %ls=$t } set:%ls=2 $e(%check,2)=$c(1) set:%ls=1 $e(%l)=$c(1) if '%ls { set SQLCODE=-110,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler40",,%oper,"SQLUser"_"."_"PersonProcess_MasterPendingResponses",$g(%d(1))) RETURN  }} if %tstart { TSTART:($zu(115,1)=1)||('$TLEVEL&&($zu(115,1)=2))  }
	set $zt="ERRORUpdate"
	if $g(%vco)'="" { do ..%SQLGetOldAll() if sqlcode { set SQLCODE=-109,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler59",,"SQLUser"_"."_"PersonProcess_MasterPendingResponses",%rowid) do ..%SQLEExit() QUIT  } set:'$d(%d(2)) %d(2)=%e(2) set:%d(2)=%e(2) $e(%e,2)=$c(0)}
	if '$a(%check) {
		do {
			if $g(%vco)'="" { d @%vco quit:sqlcode<0  }
		} while 0
		if sqlcode { set SQLCODE=sqlcode do ..%SQLEExit() QUIT  }
	}
	set:$a(%e,2) ^Ens.BusinessProcessD(subs(6),"pending",%d(3))=$g(%d(2))
	do ..%SQLUnlock2()
	do ..%SQLUnlock() TCOMMIT:%tstart&&($zu(115,1)=1)
	set SQLCODE=0 kill:$g(omcall) %0CacheSQLRA
	QUIT
ERRORUpdate	set $zt="",SQLCODE=-415,%msg=$s($g(%msg)'="":%msg_" -- ",1:"")_$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler51",,%oper,"SQLUser"_"."_"PersonProcess_MasterPendingResponses",$ze) if $ze["<FRAMESTACK>" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler52",,$ze,%oper,"SQLUser"_"."_"PersonProcess_MasterPendingResponses") do ##Class(%SYS.System).WriteToConsoleLog(%msg) if ($zu(67,10,$j)=1)||($zu(67,10,$j)=3) { write !,%msg h 3 } HALT  } do ..%SQLEExit() QUIT  
	Return
%SQLUpdateComputes(view=0)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLUpdateComputes")
%SQLUpdateStreams(pNew,pOld,pClassname,pProperty,pField,pChangeEmptyToNull,pOIDType,sqlcode,%msg,pAllowOid=0) public {
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLUpdateStreams") }
%SQLValidateCompFields(sqlcode)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLValidateCompFields")
%SQLValidateFields(sqlcode)
	if $g(%d(3))'="",'(($l(%d(3))'>50)) { set sqlcode=..%SQLInvalid(3+1,%d(3)) } 
	QUIT 'sqlcode
%SQLicompView()
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLicompView")
%SQLnBuild() public {
	set %n=$lb("ID","ID","MasterPendingResponses","element_key")
	QUIT }
%ValidateIndices(idxList="",autoCorrect=0,lockOption=1,multiProcess=1,mapList,verbose=1,errors)
	w !,"There are no indices to validate for class 'User.PersonProcessMasterPendingResponses'"
	QUIT 1
zIDKEYSQLCheckUnique(pFromOrig=0,%pID,%pVals...)
	 ;---&sql(SELECT PersonProcess,element_key FROM SQLUser.PersonProcess_MasterPendingResponses WHERE  PersonProcess=:%pVals(1) AND element_key=:%pVals(2) AND (%ID <> :%pID OR :%pID IS NULL)) QUIT SQLCODE=100
 	 ;--- ** SQL PUBLIC Variables: %pID, %pVals, SQLCODE
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xEcriORoWarur2I94PRPFJP11bx5","%New") } catch { if $ze["<CLASS DOES NOT EXIST>"&&($ze["%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xEcriORoWarur2I94PRPFJP11bx5")||($ze["<ZSQLU>") { d %0dsqlG } else { throw } } QUIT SQLCODE=100
 q
%0dsqlG	n %xxsql
	s %xxsql("S",1)="SELECT PersonProcess , element_key FROM SQLUser . PersonProcess_MasterPendingResponses WHERE PersonProcess = :%pVals(1) AND element_key = :%pVals(2) AND ( %ID <> :%pID OR :%pID IS NULL )"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","DEBUG")=$c(1),%xxsql("M","FORKNETDMN")=$c(1)
	s %xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1)
	s %xxsql("M","USELOST")=$c(1),%xxsql("M","ZVERSION")=$c(1),%xxsql("I","%occErrors")="",%xxsql("I","%occSqlfunc")="",%xxsql("I","%sySite")=""
	s %xxsql("I","%sySt")="",%xxsql("I","%sySystem")="",%xxsql("I","EnsConstants")="",%xxsql("I","EnsErrors")="",%xxsql("I","EnsUtil")=""
	s %xxsql("I","Ensemble")="",%xxsql("NS")="PROJECT1"
	d BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","User",0,"",),,"User.PersonProcessMasterPendingResponses.CLS")
	q
zIDKEYSQLExists(pLockOnly=0,pUnlockRef,%pVal...)
	// SQL Foreign Key validation entry point for Key IDKEY.  Called by FKeys that reference this Key to see if the row is defined
	new id set id=..IDKEYSQLFindRowIDByConstraint($lb(%pVal(1),%pVal(2)),1) QUIT:SQLCODE $s('pLockOnly:0,1:1)
	if pLockOnly>=0 { if '..%SQLGetLock(id,1,.pUnlockRef) { set sqlcode=-114,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler39",,"SQLUser"_"."_"PersonProcess_MasterPendingResponses"_":"_"IDKEY") QUIT 0 } }
	if pLockOnly<1 {
		new qv set qv='..IDKEYSQLCheckUnique(0,,%pVal(1),%pVal(2)) QUIT:pLockOnly=-1 qv
		do:'$g(pUnlockRef) ..%SQLReleaseLock(id,1) quit qv
	}
	else { do:'$g(pUnlockRef) ..%SQLReleaseLock(id,1) QUIT 1 }
	Return
zIDKEYSQLFindRowIDByConstraint(%con,pInternal=0)
	// Get ROWID value for UNIQUE Key IDKEY value given in %con
	new %d,id,rtm set rtm=$zu(115,5,$s(pInternal:0,1:1)) set %d(0)=$lg(%con,1) set %d(3)=$lg(%con,2)
	set %ROWCOUNT=0 set:'pInternal %qrc=0
	 ;---&sql(SELECT %ID INTO :id FROM SQLUser.PersonProcess_MasterPendingResponses WHERE PersonProcess = :%d(0) AND element_key = :%d(3))
 	 ;--- ** SQL PUBLIC Variables: %d, SQLCODE, id
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xE6WmnyWripxtXinLgmhaEusVuGA","%New") } catch { if $ze["<CLASS DOES NOT EXIST>"&&($ze["%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xE6WmnyWripxtXinLgmhaEusVuGA")||($ze["<ZSQLU>") { d %0dsqlI } else { throw } }
	do $zu(115,5,rtm)
	if pInternal { QUIT:'SQLCODE $g(id) RETURN "" }
	if SQLCODE { set:SQLCODE<0 %qrc=-SQLCODE set:'%ROWCOUNT&&(SQLCODE=100) id="",%qrc=0 } set d=$zobjexport(id,18) QUIT
	Return
 q
%0dsqlI	n %xxsql
	s %xxsql("S",1)="SELECT %ID INTO :id FROM SQLUser . PersonProcess_MasterPendingResponses WHERE PersonProcess = :%d(0) AND element_key = :%d(3)"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","DEBUG")=$c(1),%xxsql("M","FORKNETDMN")=$c(1)
	s %xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1)
	s %xxsql("M","USELOST")=$c(1),%xxsql("M","ZVERSION")=$c(1),%xxsql("I","%occErrors")="",%xxsql("I","%occSqlfunc")="",%xxsql("I","%sySite")=""
	s %xxsql("I","%sySt")="",%xxsql("I","%sySystem")="",%xxsql("I","EnsConstants")="",%xxsql("I","EnsErrors")="",%xxsql("I","EnsUtil")=""
	s %xxsql("I","Ensemble")="",%xxsql("NS")="PROJECT1"
	d BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Runtime","","","User",0,"",),,"User.PersonProcessMasterPendingResponses.CLS")
	q
]]></Routine>


<Routine name="User.PersonProcessMessagesReceived.1" type="INT" languagemode="0" generated="1" timestamp="65833,52874.070544"><![CDATA[
 ;User.PersonProcessMessagesReceived.1
 ;Generated for class User.PersonProcessMessagesReceived.  Do NOT edit. 03/30/2021 02:41:14PM
 ;;7352726C;User.PersonProcessMessagesReceived
 ;
SQLUPPER(v,l) { quit $zu(28,v,7,$g(l,32767)) }
ALPHAUP(v,r) { quit $zu(28,v,6) }
STRING(v,l) { quit $zu(28,v,9,$g(l,32767)) }
SQLSTRING(v,l) { quit $zu(28,v,8,$g(l,32767)) }
UPPER(v) { quit $zu(28,v,5) }
MVR(v) { quit $zu(28,v,2) }
TRUNCATE(v,l) { quit $e(v,1,$g(l,3641144)) }
%SQLAcquireLock(%rowid,s=0,unlockref=0)
	new %d,gotlock,subs
	set %d(1)=%rowid,%d(0)=$p(%d(1),"||",1),%d(3)=$p(%d(1),"||",2),subs(6)=$p(%d(0),"||",1) set s=$e("S",s)
	lock +^Ens.BusinessProcessD(subs(6),"received",%d(3))#s:$zu(115,4) set gotlock=$t
	set:gotlock&&unlockref unlockref=unlockref+1,unlockref(unlockref)=$lb($name(^Ens.BusinessProcessD(subs(6),"received",%d(3))),"User.PersonProcessMessagesReceived",s_"D")
	QUIT gotlock
%SQLAcquireTableLock(s=0,SQLCODE,to="")
	set s=$e("S",s) set:to="" to=$zu(115,4) lock +^Ens.BusinessProcessD#s:to QUIT:$t 1 set SQLCODE=-110 if s="S" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler35",,"SQLUser"_"."_"PersonProcess_MessagesReceived") } else { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler36",,"SQLUser"_"."_"PersonProcess_MessagesReceived") } QUIT 0
	Return
%SQLAfterTriggers()
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLAfterTriggers")
%SQLBeforeTriggers()
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLBeforeTriggers")
%SQLBuildIndices(pIndices="",pLockFlag=0,pStartID="",pEndID="",pIgnoreIndexList="")
	QUIT ##class(User.PersonProcess).%BuildIndices(pIndices,,pLockFlag,,pStartID,pEndID,pIgnoreIndexList)
%SQLBuildPurgeIndexForRow(pIndices="",pActions="BP",pLockRow=1,%d,%e,pIgnoreIndexList="")
	// Purge and build index nodes for a single row using given values, return Status Code
	new sn,tSC,tLock set tSC=1,pActions=$zcvt(pActions,"U")
	try {
		if $g(%d(1))="" { set tSC=$select(+tSC:$$Error^%apiOBJ(5521,-108,"RowID value must be specified in %d(1) when calling %SQLBuildPurgeIndexForRow for table 'SQLUser.PersonProcess_MessagesReceived'"),1:$$AppendStatus^%occSystem(tSC,$$Error^%apiOBJ(5521,-108,"RowID value must be specified in %d(1) when calling %SQLBuildPurgeIndexForRow for table 'SQLUser.PersonProcess_MessagesReceived'"))) RETURN tSC }
		if pLockRow { if '..%SQLAcquireLock(%d(1)) { set tSC=$select(+tSC:$$Error^%apiOBJ(5521,-114,"Unable to lock row in table 'SQLUser.PersonProcess_MessagesReceived' with %ID = '"_%d(1)_"'"),1:$$AppendStatus^%occSystem(tSC,$$Error^%apiOBJ(5521,-114,"Unable to lock row in table 'SQLUser.PersonProcess_MessagesReceived' with %ID = '"_%d(1)_"'"))) RETURN tSC  } else { set tLock=1 }}
		set %d(0)=$p(%d(1),"||",1),%d(3)=$p(%d(1),"||",2)
		set subs(6)=$p(%d(0),"||",1)
		if pLockRow { do ..%SQLReleaseLock(%d(1),0,0) set tLock=0 }
	}
	catch {
		if $g(tLock) { do ..%SQLReleaseLock(%d(1),0,0) }
		set tSC=$select(+tSC:$$Error^%apiOBJ(5594,$ze),1:$$AppendStatus^%occSystem(tSC,$$Error^%apiOBJ(5594,$ze)))
	}
	QUIT tSC
%SQLCheckUnique(pFromOrig=0,%pID,%pVals...)
	 ;---&sql(SELECT ID FROM SQLUser.PersonProcess_MessagesReceived WHERE  ID=:%pVals(1) AND (%ID <> :%pID OR :%pID IS NULL)) QUIT SQLCODE=100
 	 ;--- ** SQL PUBLIC Variables: %pID, %pVals, SQLCODE
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xE26A9Dwxm024cVuxgcghA4g29ib","%New") } catch { if $ze["<CLASS DOES NOT EXIST>"&&($ze["%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xE26A9Dwxm024cVuxgcghA4g29ib")||($ze["<ZSQLU>") { d %0dsqlA } else { throw } } QUIT SQLCODE=100
 q
%0dsqlA	n %xxsql
	s %xxsql("S",1)="SELECT ID FROM SQLUser . PersonProcess_MessagesReceived WHERE ID = :%pVals(1) AND ( %ID <> :%pID OR :%pID IS NULL )"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","DEBUG")=$c(1),%xxsql("M","FORKNETDMN")=$c(1)
	s %xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1)
	s %xxsql("M","USELOST")=$c(1),%xxsql("M","ZVERSION")=$c(1),%xxsql("I","%occErrors")="",%xxsql("I","%occSqlfunc")="",%xxsql("I","%sySite")=""
	s %xxsql("I","%sySt")="",%xxsql("I","%sySystem")="",%xxsql("I","EnsConstants")="",%xxsql("I","EnsErrors")="",%xxsql("I","EnsUtil")=""
	s %xxsql("I","Ensemble")="",%xxsql("NS")="PROJECT1"
	d BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","User",0,"",),,"User.PersonProcessMessagesReceived.CLS")
	q
%SQLCheckUniqueIndices(pIndices,pOK)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLCheckUniqueIndices")
%SQLCheckUniqueKeys(pConNumber,pFromOrig=0,pUpdate=0,pVals...)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLCheckUniqueKeys")
%SQLCopyIcolIntoName()
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLCopyIcolIntoName")
%SQLCopyNameIntoIcol()
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLCopyNameToIcol")
%SQLCreateInsDelTables(pInsTrigObj,pDelTrigObj)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLCreateInsDelTables")
%SQLDefineiDjVars(%d,subs,master)
	QUIT
%SQLDelete(%rowid,%check,%tstart=1,%mv=0,%polymorphic=0)
	// SQL DELETE method for table SQLUser.PersonProcess_MessagesReceived
	new bva,ce,%d,dc,%e,%ele,%itm,%key,%l,%nc,omcall,%oper,%pos,%s,sn,sqlcode,subs set %oper="DELETE",sqlcode=0,%ROWID=%rowid,%d(1)=%rowid,%e(1)=%rowid,%d(0)=$p(%d(1),"||",1),%d(3)=$p(%d(1),"||",2),subs(6)=$p(%d(0),"||",1),%l=$c(0)
	if '$d(%0CacheSQLRA) { new %0CacheSQLRA set omcall=1 }
	if '$a(%check,2) { new %ls if $tlevel,$i(%0CacheLock("User.PersonProcessMessagesReceived"))>$zu(156,50,1) { lock +^Ens.BusinessProcessD:$zu(115,4) lock:$t -^Ens.BusinessProcessD set %ls=$s($t:2,1:0) } else { lock +^Ens.BusinessProcessD(subs(6),"received",%d(3)):$zu(115,4) set %ls=$t } set:%ls=2 $e(%check,2)=$c(1) set:%ls=1 $e(%l)=$c(1) if '%ls { set SQLCODE=-110,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler40",,%oper,"SQLUser"_"."_"PersonProcess_MessagesReceived",$g(%d(1))) RETURN  }} if %tstart { TSTART:($zu(115,1)=1)||('$TLEVEL&&($zu(115,1)=2))  }
	set $zt="ERRORDelete"
	if '$a(%check),'$zu(115,7) do  if sqlcode set SQLCODE=sqlcode do ..%SQLEExit() QUIT  
	. new %fk,%k,%p,%st,%t,%z set %k="",%p("%1")="%d(1),",%p("IDKEY")="%d(0),%d(3),,"
	. for  quit:sqlcode<0  set %k=$o(^rINDEXEXT("F","User.PersonProcessMessagesReceived",%k)) quit:%k=""  set %t="" for  set %t=$o(^rINDEXEXT("F","User.PersonProcessMessagesReceived",%k,"f",%t)) quit:%t=""  set %st=(%t="User.PersonProcessMessagesReceived") set %fk="" for  set %fk=$o(^rINDEXEXT("F","User.PersonProcessMessagesReceived",%k,"f",%t,%fk)) quit:%fk=""  x "set %z=$classmethod(%t,%fk_""SQLFKeyRefAction"",%st,%k,$a(%check,2),"_%p(%k)_")" if %z set sqlcode=-124 quit  
	set ce="" for  { set ce=$order(^oddSQL("SQLUser","PersonProcess_MessagesReceived","DC",ce)) quit:ce=""   do $classmethod(ce,"%SQLDeleteChildren",%d(1),%check,.sqlcode) quit:sqlcode<0  } if sqlcode<0 { set SQLCODE=sqlcode do ..%SQLEExit() QUIT } // Delete any children
	if '$a(%check,3) {
	}
	k ^Ens.BusinessProcessD(subs(6),"received",%d(3))
	do ..%SQLUnlock() TCOMMIT:%tstart&&($zu(115,1)=1)
	set SQLCODE=0 kill:$g(omcall) %0CacheSQLRA
	QUIT
ERRORDelete	set $zt="",SQLCODE=-415,%msg=$s($g(%msg)'="":%msg_" -- ",1:"")_$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler51",,%oper,"SQLUser"_"."_"PersonProcess_MessagesReceived",$ze) if $ze["<FRAMESTACK>" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler52",,$ze,%oper,"SQLUser"_"."_"PersonProcess_MessagesReceived") do ##Class(%SYS.System).WriteToConsoleLog(%msg) if ($zu(67,10,$j)=1)||($zu(67,10,$j)=3) { write !,%msg h 3 } HALT  } do ..%SQLEExit() QUIT
	Return
%SQLDeleteChildren(%parent,%check,sqlcode)
	// Delete all rows where PersonProcess = :%parent
	new %ROWCOUNT,%ROWID,SQLCODE
	set:$a(%check,2)=2 $e(%check,2)=$c(0)
	 ;---&sql(DELETE %USECHECKVARIABLE FROM SQLUser.PersonProcess_MessagesReceived WHERE PersonProcess = :%parent)
 	 ;--- ** SQL PUBLIC Variables: %parent, SQLCODE
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xEctac4ufqWA3mZCg5zkM5hNvjiG","%New") } catch { if $ze["<CLASS DOES NOT EXIST>"&&($ze["%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xEctac4ufqWA3mZCg5zkM5hNvjiG")||($ze["<ZSQLU>") { d %0dsqlC } else { throw } }
	set:SQLCODE<0 sqlcode=SQLCODE QUIT  
 q
%0dsqlC	n %xxsql
	s %xxsql("S",1)="DELETE %USECHECKVARIABLE FROM SQLUser . PersonProcess_MessagesReceived WHERE PersonProcess = :%parent"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","DEBUG")=$c(1),%xxsql("M","FORKNETDMN")=$c(1)
	s %xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1)
	s %xxsql("M","USELOST")=$c(1),%xxsql("M","ZVERSION")=$c(1),%xxsql("I","%occErrors")="",%xxsql("I","%occSqlfunc")="",%xxsql("I","%sySite")=""
	s %xxsql("I","%sySt")="",%xxsql("I","%sySystem")="",%xxsql("I","EnsConstants")="",%xxsql("I","EnsErrors")="",%xxsql("I","EnsUtil")=""
	s %xxsql("I","Ensemble")="",%xxsql("NS")="PROJECT1"
	d BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","User",0,"",),,"User.PersonProcessMessagesReceived.CLS")
	q
%SQLDeleteTempStreams()
	// Delete all temporary streams
	QUIT
%SQLEExit()
	do:%oper'="DELETE" ..%SQLUnlock2() do ..%SQLUnlock() 
	do ..%SQLUnlockRef()
	if %tstart,$zu(115,1)=1,$TLEVEL { set %tstart=0 TROLLBACK 1 } kill:$g(omcall) %0CacheSQLRA QUIT  
	Return
%SQLExists(pLockOnly=0,pUnlockRef,%pVal...)
	// SQL Foreign Key validation entry point for Key %1.  Called by FKeys that reference this Key to see if the row is defined
	new id set id=%pVal(1)
	if pLockOnly>=0 { if '..%SQLGetLock(id,1,.pUnlockRef) { set sqlcode=-114,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler39",,"SQLUser"_"."_"PersonProcess_MessagesReceived"_":"_"%1") QUIT 0 } }
	if pLockOnly<1 {
		new qv set qv='..%SQLCheckUnique(0,,%pVal(1)) QUIT:pLockOnly=-1 qv
		do:'$g(pUnlockRef) ..%SQLReleaseLock(id,1) quit qv
	}
	else { do:'$g(pUnlockRef) ..%SQLReleaseLock(id,1) QUIT 1 }
	Return
%SQLFKeyDelLock()
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLFKeyDelLock")
%SQLFastInsert(%check)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLFastInsert")
%SQLFieldValidate()
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLFieldValidate")
%SQLGetLock(pRowId,pShared=0,pUnlockRef)
	if $tlevel,$i(%0CacheLock("User.PersonProcessMessagesReceived"))>$zu(156,50,1) { new s set s=$e("S",pShared) lock +^Ens.BusinessProcessD#s:$zu(115,4) lock:$t -^Ens.BusinessProcessD#s QUIT $s($t:2,1:0) } 
	QUIT ..%SQLAcquireLock(pRowId,pShared,.pUnlockRef)
%SQLGetOld(%rowid,%d,%e,sqlcode)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLGetOld")
%SQLGetOldAll()
	// Get all old data values
	new SQLCODE,%ROWCOUNT
	 ;---&sql(SELECT MessagesReceived INTO :%e() FROM %IGNOREINDEX * SQLUser.PersonProcess_MessagesReceived WHERE ID=:%rowid)
 	 ;--- ** SQL PUBLIC Variables: %e, %rowid, SQLCODE
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xEcE8HyHgP4Gz2wLXceBSXKdAMrY","%New") } catch { if $ze["<CLASS DOES NOT EXIST>"&&($ze["%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xEcE8HyHgP4Gz2wLXceBSXKdAMrY")||($ze["<ZSQLU>") { d %0dsqlE } else { throw } }
	set sqlcode=SQLCODE QUIT:sqlcode'=0
	QUIT
 q
%0dsqlE	n %xxsql
	s %xxsql("S",1)="SELECT MessagesReceived INTO :%e() FROM %IGNOREINDEX * SQLUser . PersonProcess_MessagesReceived WHERE ID = :%rowid"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","DEBUG")=$c(1),%xxsql("M","FORKNETDMN")=$c(1)
	s %xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1)
	s %xxsql("M","USELOST")=$c(1),%xxsql("M","ZVERSION")=$c(1),%xxsql("I","%occErrors")="",%xxsql("I","%occSqlfunc")="",%xxsql("I","%sySite")=""
	s %xxsql("I","%sySt")="",%xxsql("I","%sySystem")="",%xxsql("I","EnsConstants")="",%xxsql("I","EnsErrors")="",%xxsql("I","EnsUtil")=""
	s %xxsql("I","Ensemble")="",%xxsql("NS")="PROJECT1"
	d BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","User",0,"",),,"User.PersonProcessMessagesReceived.CLS")
	q
%SQLGetOldIndex(%rowid,%d,pF=0,sqlcode)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLGetOldIndex")
%SQLInsert(%d,%check,%inssel,%vco,%tstart=1,%mv=0)
	// SQL INSERT method for table SQLUser.PersonProcess_MessagesReceived
	new bva,%ele,%itm,%key,%f,%l,%n,%nc,%oper,%pos,%s,sqlcode,sn,subs,unlockref set %oper="INSERT",sqlcode=0,%l=$c(0,0,0),unlockref=1
	if $a(%check,7) { new %diu merge %diu=%d }
	set:$d(%d(0)) subs(6)=$p(%d(0),"||",1)
	if '$a(%check),'..%SQLValidateFields(.sqlcode) { set SQLCODE=sqlcode RETURN "" }
	do:'$a(%check,8) ..%SQLNormalizeFields()
	if %tstart { TSTART:($zu(115,1)=1)||('$TLEVEL&&($zu(115,1)=2))  } set $zt="ERRORInsert"
	if '$a(%check),$g(%d(0))'="",'##class(User.PersonProcess).%SQLExists($s($a(%check,2)=1:-1,1:0),.unlockref,%d(0)) {
		if sqlcode<0 { set SQLCODE=sqlcode if SQLCODE=-114 { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler56",,%oper,"SQLUser"_"."_"PersonProcess",$g(%d(0))) } } else { set SQLCODE=-104,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler9",,"SQLUser"_"."_"PersonProcess_MessagesReceived") }
		do ..%SQLEExit() RETURN ""
	}
	if '$a(%check) { if $g(%d(0))="" { do ..%SQLMissing("PersonProcess") set SQLCODE=sqlcode do ..%SQLEExit() RETURN "" } }
	set:'$d(%d(3)) %d(3)=$i(^Ens.BusinessProcessD(subs(6),"received")) set %d(1)=%d(0)_"||"_%d(3),subs(6)=$p(%d(0),"||",1)
	if '$a(%check) {
		do {
			if $g(%vco)'="" { d @%vco quit:sqlcode<0  }
				// Constraint IDKEY
				if '$a(%check,2) { lock +^Ens.BusinessProcessD("IDKEY",%d(0),%d(3)):$zu(115,4) if $t { set $e(%l,2)=$c(1) } else { do ..%SQLUnlockError("IDKEY") quit  } }
				if '$a(%check,7) { if '..IDKEYSQLCheckUnique(0,,%d(0),%d(3)) { set sqlcode=-119,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler10",,"SQLUser"_"."_"PersonProcess_MessagesReceived","IDKEY","PersonProcess"_"="_$$quoter^%apiSQL($g(%d(0)))_","_"element_key"_"="_$$quoter^%apiSQL($g(%d(3)))) quit  }} // INSERT
				else { new tID set tID=..IDKEYSQLFindRowIDByConstraint($lb(%d(0),%d(3)),1) if tID'="" { kill %d merge %d=%diu kill %diu do ..%SQLUpdate(tID,%check,.%d),..%SQLUnlock2(),..%SQLUnlockRef() set $e(%check,7)=$c(2) quit  }} // INSERT OR UPDATE
		} while 0
		QUIT:$a(%check,7)=2 $s('SQLCODE:tID,1:"")				// INSERT became UPDATE
		if sqlcode<0 { set SQLCODE=sqlcode do ..%SQLEExit() RETURN "" }		// A constraint failed
	}
	if '$a(%check,2) { new %ls if $tlevel,$i(%0CacheLock("User.PersonProcessMessagesReceived"))>$zu(156,50,1) { lock +^Ens.BusinessProcessD:$zu(115,4) lock:$t -^Ens.BusinessProcessD set %ls=$s($t:2,1:0) } else { lock +^Ens.BusinessProcessD(subs(6),"received",%d(3)):$zu(115,4) set %ls=$t } set:%ls=2 $e(%check,2)=$c(1) set:%ls=1 $e(%l)=$c(1) if '%ls set SQLCODE=-110,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler40",,%oper,"SQLUser"_"."_"PersonProcess_MessagesReceived",$g(%d(1))) do ..%SQLEExit() RETURN ""  }
	set ^Ens.BusinessProcessD(subs(6),"received",%d(3))=$g(%d(2))
	lock:$a(%l,2) -^Ens.BusinessProcessD("IDKEY",%d(0),%d(3))#"D" 
	lock:$a(%l) -^Ens.BusinessProcessD(subs(6),"received",%d(3))
	TCOMMIT:%tstart&&($zu(115,1)=1)
	do ..%SQLUnlockRef()
	set SQLCODE=0
	QUIT %d(1) 			// %SQLInsert
ERRORInsert	set $zt="",SQLCODE=-415,%msg=$s($g(%msg)'="":%msg_" -- ",1:"")_$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler51",,%oper,"SQLUser"_"."_"PersonProcess_MessagesReceived",$ze)
	if $ze["<FRAMESTACK>" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler52",,$ze,%oper,"SQLUser"_"."_"PersonProcess_MessagesReceived") do ##Class(%SYS.System).WriteToConsoleLog(%msg) if ($zu(67,10,$j)=1)||($zu(67,10,$j)=3) { write !,%msg h 3 } HALT  }
	do ..%SQLEExit()
	RETURN ""
%SQLInsertComputes(view=0)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLInsertComputes")
%SQLInsertStreams(pVal,pClassname,pProperty,pField,pChangeEmptyToNull,pOIDType,sqlcode,%msg) public {
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLInsertStreams") }
%SQLInvalid(pIcol,pVal) public {
	set:$l($g(pVal))>40 pVal=$e(pVal,1,40)_"..." do:'$d(%n) ..%SQLnBuild() set %msg=$s($g(%msg)'="":%msg_$c(13,10),1:"")_$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler37",,"SQLUser"_"."_"PersonProcess_MessagesReceived"_"."_$lg(%n,pIcol),$s($g(pVal)'="":$s(pVal="":"<NULL>",pVal=$c(0):"<EMPTY STRING>",1:"'"_pVal_"'"),1:"")),sqlcode=$s(%oper="INSERT":-104,1:-105)
	QUIT sqlcode }
%SQLInvalid2(ficol,val,char) [ sqlcode ] public {
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLInvalid2") }
%SQLMVDelete(oref,flags,%rowid,oldrec)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLMVDelete")
%SQLMVIndexDelete(%e)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLMVIndexDelete")
%SQLMVIndexInsert(%d)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLMVIndexInsert")
%SQLMVIndexUpdate(%d,%e)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLMVIndexUpdate")
%SQLMVInsert(oref,flags,%rowid,newrec)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLMVInsert")
%SQLMVUpdate(oref,flags,%rowid,newrec,oldrec)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLMVUpdate")
%SQLMissing(fname)
	set sqlcode=-108,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler47",,fname,"SQLUser"_"."_"PersonProcess_MessagesReceived") quit
%SQLNormalizeCompFields()
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLNormalizeCompFields")
%SQLNormalizeFields()
	set:$g(%d(0))'="" %d(0)=$select(%d(0)=$c(0)&&$zu(115,13):"",1:%d(0)\1)
	QUIT
%SQLPurgeIndices(pIndices="",pLockExtent=0,pIgnoreIndexList="")
	QUIT ##class(User.PersonProcess).%PurgeIndices(pIndices,pLockExtent,pIgnoreIndexList)
%SQLQuickBulkInsert(%nolock=0)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLQuickBulkInsert")
%SQLQuickBulkLoad(%rowidlist,%nolock=0,pkey=0)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLQuickBulkLoad")
%SQLQuickBulkSave(%nolock=0)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLQuickBulkSave")
%SQLQuickBulkUpdate(%nolock=0)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLQuickBulkUpdate")
%SQLQuickDelete(%rowid,%nolock=0,pkey=0)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLQuickDelete")
%SQLQuickDeleteChildren(%parent,%nolock=0,pkey=0)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLQuickDeleteChildren")
%SQLQuickFindPKeyByRowID(%rowid)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLQuickFindPKeyByRowID")
%SQLQuickFindRowIDByPKey(pPKey,pOutput=1,pInternal=0)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLQuickFindRowIDByPKey")
%SQLQuickInsert(d,%nolock=0,pkey=0,parentpkey=0)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLQuickInsert")
%SQLQuickLoad(%rowid,%nolock=0,pkey=0,qq=0)
	// Get fields from row where SQLRowID=%rowid
	new d,i,il,subs set:%nolock=2 %nolock=1
	if %nolock=0 { if '..%SQLAcquireLock(%rowid) { set %qrc=114,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler45",,"SQLUser"_"."_"PersonProcess_MessagesReceived",%rowid),%ROWCOUNT=0 QUIT  } set:$zu(115,2) il=$zu(115,2,0) }
	set d(1)=%rowid,d(0)=$p(d(1),"||",1),d(3)=$p(d(1),"||",2),subs(6)=$p(d(0),"||",1)
	new s,ul set ul=0,d(1)=%rowid if $zu(115,2)=1 { lock +^Ens.BusinessProcessD(subs(6),"received",d(3))#"S":$zu(115,4) if $t { set ul=1 } else { set %qrc=114,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler46",,"SQLUser"_"."_"PersonProcess_MessagesReceived",%rowid),%ROWCOUNT=0 quit  } }
	if '$d(^Ens.BusinessProcessD(subs(6),"received",d(3)),s) { set SQLCODE=100,%qrc=100 if %nolock=0 { do:$g(il) $zu(115,2,il) }} else { set SQLCODE=0
	if %nolock=0 { if $zu(115,1)=1 { TSTART  } elseif '$TLEVEL,$zu(115,1)=2 { TSTART  }} set d(2)=s  }
	do ..%SQLQuickLogicalToOdbc(.d)
	if SQLCODE set %ROWCOUNT=0 set:SQLCODE<0 SQLCODE=-SQLCODE lock:ul -^Ens.BusinessProcessD(subs(6),"received",d(3))#"SI" set %qrc=SQLCODE QUIT
	set:qq d=$zobjexport("User.PersonProcessMessagesReceived",18),d=$zobjexport(4,18) set i=-1 for  { set i=$o(d(i)) quit:i=""  set d=$zobjexport(d(i),18) } set %qrc=0,%ROWCOUNT=1 lock:ul -^Ens.BusinessProcessD(subs(6),"received",d(3))#"SI" if %nolock=0 { do ..%SQLReleaseLock(%rowid,0,0) do:$g(il) $zu(115,2,il) } QUIT
	Return
%SQLQuickLoadChildren(%parref,%nolock=0,pkey=0,returnpkey=0)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLQuickLoadChildren")
%SQLQuickLogicalToOdbc(%d)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLLogicalToOdbcFields")
%SQLQuickOdbcToLogical(%d)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLQuickOdbcToLogical")
%SQLQuickUpdate(%rowid,d,%nolock=0,pkey=0)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLQuickUpdate")
%SQLReleaseLock(%rowid,s=0,i=0,e="")
	new %d,subs
	set %d(1)=%rowid,%d(0)=$p(%d(1),"||",1),%d(3)=$p(%d(1),"||",2),subs(6)=$p(%d(0),"||",1) set s=$e("S",s)_$e("D",i)
	lock -^Ens.BusinessProcessD(subs(6),"received",%d(3))#s
	set:i&&($g(%0CacheLock("User.PersonProcessMessagesReceived"))) %0CacheLock("User.PersonProcessMessagesReceived")=%0CacheLock("User.PersonProcessMessagesReceived")-1
	QUIT
%SQLReleaseTableLock(s=0,i=0)
	set s=$e("S",s)_$e("D",i) lock -^Ens.BusinessProcessD#s QUIT 1
	Return
%SQLStorageValidation()
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLStorageValidation")
%SQLTrigDelTab()
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLTrigDelTab")
%SQLTrigInsTab()
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLTrigInsTab")
%SQLUnlock()
	lock:$a(%l) -^Ens.BusinessProcessD(subs(6),"received",%d(3))
	QUIT
%SQLUnlock2()
	lock:$a(%l,2) -^Ens.BusinessProcessD("IDKEY",%d(0),%d(3))#"D" QUIT
%SQLUnlockError(cname)
	set sqlcode=-110 if %oper="DELETE" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler48",,"SQLUser"_"."_"PersonProcess_MessagesReceived",cname) } else { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler49",,"SQLUser"_"."_"PersonProcess_MessagesReceived",cname) } quit
	Return
%SQLUnlockRef()
	for %itm=2:1:$g(unlockref) {
		if $lg(unlockref(%itm))'="%UnlockId" { lock -@$lg(unlockref(%itm))#$lg(unlockref(%itm),3) }
		else { do $classmethod($lg(unlockref(%itm),2),$lg(unlockref(%itm)),$lg(unlockref(%itm),3),1,1) }
		set:$g(%0CacheLock($lg(unlockref(%itm),2))) %0CacheLock($lg(unlockref(%itm),2))=%0CacheLock($lg(unlockref(%itm),2))-1
	}
	QUIT
%SQLUpdate(%rowid,%check,%d,%vco,%tstart=1,%mv=0,%polymorphic=0,%soid)
	// SQL UPDATE method for table SQLUser.PersonProcess_MessagesReceived
	new %e,bva,%ele,%itm,%key,%f,%l,%n,%nc,%oper,%pos,%s,icol,omcall,s,sn,sqlcode,subs,t set %oper="UPDATE",sqlcode=0,%ROWID=%rowid,$e(%e,1)=$c(0),%l=$c(0,0,0)
	if '$d(%0CacheSQLRA) { new %0CacheSQLRA set omcall=1 }
	if '$a(%check,7) {
		if '$a(%check),'..%SQLValidateFields(.sqlcode) { set SQLCODE=sqlcode QUIT  }
		do:'$a(%check,8) ..%SQLNormalizeFields()
	}
	if ($d(%d(1))&&($g(%d(1))'=%rowid))||($d(%d(0))&&($g(%d(0))'=$p(%rowid,"||",1)))||($d(%d(3))&&($g(%d(3))'=$p(%rowid,"||",2))) { set SQLCODE=-107,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler17",,"'ID', 'PersonProcess', or 'element_key'","SQLUser"_"."_"PersonProcess_MessagesReceived") QUIT  }
	for icol=2:1:3 { set $e(%e,icol)=$c($d(%d(icol))) }
	set %d(1)=%rowid,%e(1)=%rowid,%d(0)=$p(%d(1),"||",1),%d(3)=$p(%d(1),"||",2),subs(6)=$p(%d(0),"||",1)
	if '$a(%check,2) { new %ls if $tlevel,$i(%0CacheLock("User.PersonProcessMessagesReceived"))>$zu(156,50,1) { lock +^Ens.BusinessProcessD:$zu(115,4) lock:$t -^Ens.BusinessProcessD set %ls=$s($t:2,1:0) } else { lock +^Ens.BusinessProcessD(subs(6),"received",%d(3)):$zu(115,4) set %ls=$t } set:%ls=2 $e(%check,2)=$c(1) set:%ls=1 $e(%l)=$c(1) if '%ls { set SQLCODE=-110,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler40",,%oper,"SQLUser"_"."_"PersonProcess_MessagesReceived",$g(%d(1))) RETURN  }} if %tstart { TSTART:($zu(115,1)=1)||('$TLEVEL&&($zu(115,1)=2))  }
	set $zt="ERRORUpdate"
	if $g(%vco)'="" { do ..%SQLGetOldAll() if sqlcode { set SQLCODE=-109,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler59",,"SQLUser"_"."_"PersonProcess_MessagesReceived",%rowid) do ..%SQLEExit() QUIT  } set:'$d(%d(2)) %d(2)=%e(2) set:%d(2)=%e(2) $e(%e,2)=$c(0)}
	if '$a(%check) {
		do {
			if $g(%vco)'="" { d @%vco quit:sqlcode<0  }
		} while 0
		if sqlcode { set SQLCODE=sqlcode do ..%SQLEExit() QUIT  }
	}
	set:$a(%e,2) ^Ens.BusinessProcessD(subs(6),"received",%d(3))=$g(%d(2))
	do ..%SQLUnlock2()
	do ..%SQLUnlock() TCOMMIT:%tstart&&($zu(115,1)=1)
	set SQLCODE=0 kill:$g(omcall) %0CacheSQLRA
	QUIT
ERRORUpdate	set $zt="",SQLCODE=-415,%msg=$s($g(%msg)'="":%msg_" -- ",1:"")_$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler51",,%oper,"SQLUser"_"."_"PersonProcess_MessagesReceived",$ze) if $ze["<FRAMESTACK>" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler52",,$ze,%oper,"SQLUser"_"."_"PersonProcess_MessagesReceived") do ##Class(%SYS.System).WriteToConsoleLog(%msg) if ($zu(67,10,$j)=1)||($zu(67,10,$j)=3) { write !,%msg h 3 } HALT  } do ..%SQLEExit() QUIT  
	Return
%SQLUpdateComputes(view=0)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLUpdateComputes")
%SQLUpdateStreams(pNew,pOld,pClassname,pProperty,pField,pChangeEmptyToNull,pOIDType,sqlcode,%msg,pAllowOid=0) public {
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLUpdateStreams") }
%SQLValidateCompFields(sqlcode)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLValidateCompFields")
%SQLValidateFields(sqlcode)
	if $g(%d(3))'="",'(($l(%d(3))'>50)) { set sqlcode=..%SQLInvalid(3+1,%d(3)) } 
	QUIT 'sqlcode
%SQLicompView()
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLicompView")
%SQLnBuild() public {
	set %n=$lb("ID","ID","MessagesReceived","element_key")
	QUIT }
%ValidateIndices(idxList="",autoCorrect=0,lockOption=1,multiProcess=1,mapList,verbose=1,errors)
	w !,"There are no indices to validate for class 'User.PersonProcessMessagesReceived'"
	QUIT 1
zIDKEYSQLCheckUnique(pFromOrig=0,%pID,%pVals...)
	 ;---&sql(SELECT PersonProcess,element_key FROM SQLUser.PersonProcess_MessagesReceived WHERE  PersonProcess=:%pVals(1) AND element_key=:%pVals(2) AND (%ID <> :%pID OR :%pID IS NULL)) QUIT SQLCODE=100
 	 ;--- ** SQL PUBLIC Variables: %pID, %pVals, SQLCODE
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xEn33umWi8DYIwitk2x2Xn1B6o5l","%New") } catch { if $ze["<CLASS DOES NOT EXIST>"&&($ze["%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xEn33umWi8DYIwitk2x2Xn1B6o5l")||($ze["<ZSQLU>") { d %0dsqlG } else { throw } } QUIT SQLCODE=100
 q
%0dsqlG	n %xxsql
	s %xxsql("S",1)="SELECT PersonProcess , element_key FROM SQLUser . PersonProcess_MessagesReceived WHERE PersonProcess = :%pVals(1) AND element_key = :%pVals(2) AND ( %ID <> :%pID OR :%pID IS NULL )"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","DEBUG")=$c(1),%xxsql("M","FORKNETDMN")=$c(1)
	s %xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1)
	s %xxsql("M","USELOST")=$c(1),%xxsql("M","ZVERSION")=$c(1),%xxsql("I","%occErrors")="",%xxsql("I","%occSqlfunc")="",%xxsql("I","%sySite")=""
	s %xxsql("I","%sySt")="",%xxsql("I","%sySystem")="",%xxsql("I","EnsConstants")="",%xxsql("I","EnsErrors")="",%xxsql("I","EnsUtil")=""
	s %xxsql("I","Ensemble")="",%xxsql("NS")="PROJECT1"
	d BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","User",0,"",),,"User.PersonProcessMessagesReceived.CLS")
	q
zIDKEYSQLExists(pLockOnly=0,pUnlockRef,%pVal...)
	// SQL Foreign Key validation entry point for Key IDKEY.  Called by FKeys that reference this Key to see if the row is defined
	new id set id=..IDKEYSQLFindRowIDByConstraint($lb(%pVal(1),%pVal(2)),1) QUIT:SQLCODE $s('pLockOnly:0,1:1)
	if pLockOnly>=0 { if '..%SQLGetLock(id,1,.pUnlockRef) { set sqlcode=-114,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler39",,"SQLUser"_"."_"PersonProcess_MessagesReceived"_":"_"IDKEY") QUIT 0 } }
	if pLockOnly<1 {
		new qv set qv='..IDKEYSQLCheckUnique(0,,%pVal(1),%pVal(2)) QUIT:pLockOnly=-1 qv
		do:'$g(pUnlockRef) ..%SQLReleaseLock(id,1) quit qv
	}
	else { do:'$g(pUnlockRef) ..%SQLReleaseLock(id,1) QUIT 1 }
	Return
zIDKEYSQLFindRowIDByConstraint(%con,pInternal=0)
	// Get ROWID value for UNIQUE Key IDKEY value given in %con
	new %d,id,rtm set rtm=$zu(115,5,$s(pInternal:0,1:1)) set %d(0)=$lg(%con,1) set %d(3)=$lg(%con,2)
	set %ROWCOUNT=0 set:'pInternal %qrc=0
	 ;---&sql(SELECT %ID INTO :id FROM SQLUser.PersonProcess_MessagesReceived WHERE PersonProcess = :%d(0) AND element_key = :%d(3))
 	 ;--- ** SQL PUBLIC Variables: %d, SQLCODE, id
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xEl5Pvl0G8fyYFM3XEv5OljkKzzA","%New") } catch { if $ze["<CLASS DOES NOT EXIST>"&&($ze["%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xEl5Pvl0G8fyYFM3XEv5OljkKzzA")||($ze["<ZSQLU>") { d %0dsqlI } else { throw } }
	do $zu(115,5,rtm)
	if pInternal { QUIT:'SQLCODE $g(id) RETURN "" }
	if SQLCODE { set:SQLCODE<0 %qrc=-SQLCODE set:'%ROWCOUNT&&(SQLCODE=100) id="",%qrc=0 } set d=$zobjexport(id,18) QUIT
	Return
 q
%0dsqlI	n %xxsql
	s %xxsql("S",1)="SELECT %ID INTO :id FROM SQLUser . PersonProcess_MessagesReceived WHERE PersonProcess = :%d(0) AND element_key = :%d(3)"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","DEBUG")=$c(1),%xxsql("M","FORKNETDMN")=$c(1)
	s %xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1)
	s %xxsql("M","USELOST")=$c(1),%xxsql("M","ZVERSION")=$c(1),%xxsql("I","%occErrors")="",%xxsql("I","%occSqlfunc")="",%xxsql("I","%sySite")=""
	s %xxsql("I","%sySt")="",%xxsql("I","%sySystem")="",%xxsql("I","EnsConstants")="",%xxsql("I","EnsErrors")="",%xxsql("I","EnsUtil")=""
	s %xxsql("I","Ensemble")="",%xxsql("NS")="PROJECT1"
	d BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Runtime","","","User",0,"",),,"User.PersonProcessMessagesReceived.CLS")
	q
]]></Routine>


<Routine name="User.PersonProcessMessagesSent.1" type="INT" languagemode="0" generated="1" timestamp="65833,52874.120588"><![CDATA[
 ;User.PersonProcessMessagesSent.1
 ;Generated for class User.PersonProcessMessagesSent.  Do NOT edit. 03/30/2021 02:41:14PM
 ;;5A477A43;User.PersonProcessMessagesSent
 ;
SQLUPPER(v,l) { quit $zu(28,v,7,$g(l,32767)) }
ALPHAUP(v,r) { quit $zu(28,v,6) }
STRING(v,l) { quit $zu(28,v,9,$g(l,32767)) }
SQLSTRING(v,l) { quit $zu(28,v,8,$g(l,32767)) }
UPPER(v) { quit $zu(28,v,5) }
MVR(v) { quit $zu(28,v,2) }
TRUNCATE(v,l) { quit $e(v,1,$g(l,3641144)) }
%SQLAcquireLock(%rowid,s=0,unlockref=0)
	new %d,gotlock,subs
	set %d(1)=%rowid,%d(0)=$p(%d(1),"||",1),%d(3)=$p(%d(1),"||",2),subs(6)=$p(%d(0),"||",1) set s=$e("S",s)
	lock +^Ens.BusinessProcessD(subs(6),"sent",%d(3))#s:$zu(115,4) set gotlock=$t
	set:gotlock&&unlockref unlockref=unlockref+1,unlockref(unlockref)=$lb($name(^Ens.BusinessProcessD(subs(6),"sent",%d(3))),"User.PersonProcessMessagesSent",s_"D")
	QUIT gotlock
%SQLAcquireTableLock(s=0,SQLCODE,to="")
	set s=$e("S",s) set:to="" to=$zu(115,4) lock +^Ens.BusinessProcessD#s:to QUIT:$t 1 set SQLCODE=-110 if s="S" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler35",,"SQLUser"_"."_"PersonProcess_MessagesSent") } else { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler36",,"SQLUser"_"."_"PersonProcess_MessagesSent") } QUIT 0
	Return
%SQLAfterTriggers()
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLAfterTriggers")
%SQLBeforeTriggers()
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLBeforeTriggers")
%SQLBuildIndices(pIndices="",pLockFlag=0,pStartID="",pEndID="",pIgnoreIndexList="")
	QUIT ##class(User.PersonProcess).%BuildIndices(pIndices,,pLockFlag,,pStartID,pEndID,pIgnoreIndexList)
%SQLBuildPurgeIndexForRow(pIndices="",pActions="BP",pLockRow=1,%d,%e,pIgnoreIndexList="")
	// Purge and build index nodes for a single row using given values, return Status Code
	new sn,tSC,tLock set tSC=1,pActions=$zcvt(pActions,"U")
	try {
		if $g(%d(1))="" { set tSC=$select(+tSC:$$Error^%apiOBJ(5521,-108,"RowID value must be specified in %d(1) when calling %SQLBuildPurgeIndexForRow for table 'SQLUser.PersonProcess_MessagesSent'"),1:$$AppendStatus^%occSystem(tSC,$$Error^%apiOBJ(5521,-108,"RowID value must be specified in %d(1) when calling %SQLBuildPurgeIndexForRow for table 'SQLUser.PersonProcess_MessagesSent'"))) RETURN tSC }
		if pLockRow { if '..%SQLAcquireLock(%d(1)) { set tSC=$select(+tSC:$$Error^%apiOBJ(5521,-114,"Unable to lock row in table 'SQLUser.PersonProcess_MessagesSent' with %ID = '"_%d(1)_"'"),1:$$AppendStatus^%occSystem(tSC,$$Error^%apiOBJ(5521,-114,"Unable to lock row in table 'SQLUser.PersonProcess_MessagesSent' with %ID = '"_%d(1)_"'"))) RETURN tSC  } else { set tLock=1 }}
		set %d(0)=$p(%d(1),"||",1),%d(3)=$p(%d(1),"||",2)
		set subs(6)=$p(%d(0),"||",1)
		if pLockRow { do ..%SQLReleaseLock(%d(1),0,0) set tLock=0 }
	}
	catch {
		if $g(tLock) { do ..%SQLReleaseLock(%d(1),0,0) }
		set tSC=$select(+tSC:$$Error^%apiOBJ(5594,$ze),1:$$AppendStatus^%occSystem(tSC,$$Error^%apiOBJ(5594,$ze)))
	}
	QUIT tSC
%SQLCheckUnique(pFromOrig=0,%pID,%pVals...)
	 ;---&sql(SELECT ID FROM SQLUser.PersonProcess_MessagesSent WHERE  ID=:%pVals(1) AND (%ID <> :%pID OR :%pID IS NULL)) QUIT SQLCODE=100
 	 ;--- ** SQL PUBLIC Variables: %pID, %pVals, SQLCODE
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xE4lhpUPuZRg8IAulRJcbETaQbwG","%New") } catch { if $ze["<CLASS DOES NOT EXIST>"&&($ze["%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xE4lhpUPuZRg8IAulRJcbETaQbwG")||($ze["<ZSQLU>") { d %0dsqlA } else { throw } } QUIT SQLCODE=100
 q
%0dsqlA	n %xxsql
	s %xxsql("S",1)="SELECT ID FROM SQLUser . PersonProcess_MessagesSent WHERE ID = :%pVals(1) AND ( %ID <> :%pID OR :%pID IS NULL )"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","DEBUG")=$c(1),%xxsql("M","FORKNETDMN")=$c(1)
	s %xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1)
	s %xxsql("M","USELOST")=$c(1),%xxsql("M","ZVERSION")=$c(1),%xxsql("I","%occErrors")="",%xxsql("I","%occSqlfunc")="",%xxsql("I","%sySite")=""
	s %xxsql("I","%sySt")="",%xxsql("I","%sySystem")="",%xxsql("I","EnsConstants")="",%xxsql("I","EnsErrors")="",%xxsql("I","EnsUtil")=""
	s %xxsql("I","Ensemble")="",%xxsql("NS")="PROJECT1"
	d BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","User",0,"",),,"User.PersonProcessMessagesSent.CLS")
	q
%SQLCheckUniqueIndices(pIndices,pOK)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLCheckUniqueIndices")
%SQLCheckUniqueKeys(pConNumber,pFromOrig=0,pUpdate=0,pVals...)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLCheckUniqueKeys")
%SQLCopyIcolIntoName()
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLCopyIcolIntoName")
%SQLCopyNameIntoIcol()
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLCopyNameToIcol")
%SQLCreateInsDelTables(pInsTrigObj,pDelTrigObj)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLCreateInsDelTables")
%SQLDefineiDjVars(%d,subs,master)
	QUIT
%SQLDelete(%rowid,%check,%tstart=1,%mv=0,%polymorphic=0)
	// SQL DELETE method for table SQLUser.PersonProcess_MessagesSent
	new bva,ce,%d,dc,%e,%ele,%itm,%key,%l,%nc,omcall,%oper,%pos,%s,sn,sqlcode,subs set %oper="DELETE",sqlcode=0,%ROWID=%rowid,%d(1)=%rowid,%e(1)=%rowid,%d(0)=$p(%d(1),"||",1),%d(3)=$p(%d(1),"||",2),subs(6)=$p(%d(0),"||",1),%l=$c(0)
	if '$d(%0CacheSQLRA) { new %0CacheSQLRA set omcall=1 }
	if '$a(%check,2) { new %ls if $tlevel,$i(%0CacheLock("User.PersonProcessMessagesSent"))>$zu(156,50,1) { lock +^Ens.BusinessProcessD:$zu(115,4) lock:$t -^Ens.BusinessProcessD set %ls=$s($t:2,1:0) } else { lock +^Ens.BusinessProcessD(subs(6),"sent",%d(3)):$zu(115,4) set %ls=$t } set:%ls=2 $e(%check,2)=$c(1) set:%ls=1 $e(%l)=$c(1) if '%ls { set SQLCODE=-110,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler40",,%oper,"SQLUser"_"."_"PersonProcess_MessagesSent",$g(%d(1))) RETURN  }} if %tstart { TSTART:($zu(115,1)=1)||('$TLEVEL&&($zu(115,1)=2))  }
	set $zt="ERRORDelete"
	if '$a(%check),'$zu(115,7) do  if sqlcode set SQLCODE=sqlcode do ..%SQLEExit() QUIT  
	. new %fk,%k,%p,%st,%t,%z set %k="",%p("%1")="%d(1),",%p("IDKEY")="%d(0),%d(3),,"
	. for  quit:sqlcode<0  set %k=$o(^rINDEXEXT("F","User.PersonProcessMessagesSent",%k)) quit:%k=""  set %t="" for  set %t=$o(^rINDEXEXT("F","User.PersonProcessMessagesSent",%k,"f",%t)) quit:%t=""  set %st=(%t="User.PersonProcessMessagesSent") set %fk="" for  set %fk=$o(^rINDEXEXT("F","User.PersonProcessMessagesSent",%k,"f",%t,%fk)) quit:%fk=""  x "set %z=$classmethod(%t,%fk_""SQLFKeyRefAction"",%st,%k,$a(%check,2),"_%p(%k)_")" if %z set sqlcode=-124 quit  
	set ce="" for  { set ce=$order(^oddSQL("SQLUser","PersonProcess_MessagesSent","DC",ce)) quit:ce=""   do $classmethod(ce,"%SQLDeleteChildren",%d(1),%check,.sqlcode) quit:sqlcode<0  } if sqlcode<0 { set SQLCODE=sqlcode do ..%SQLEExit() QUIT } // Delete any children
	if '$a(%check,3) {
	}
	k ^Ens.BusinessProcessD(subs(6),"sent",%d(3))
	do ..%SQLUnlock() TCOMMIT:%tstart&&($zu(115,1)=1)
	set SQLCODE=0 kill:$g(omcall) %0CacheSQLRA
	QUIT
ERRORDelete	set $zt="",SQLCODE=-415,%msg=$s($g(%msg)'="":%msg_" -- ",1:"")_$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler51",,%oper,"SQLUser"_"."_"PersonProcess_MessagesSent",$ze) if $ze["<FRAMESTACK>" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler52",,$ze,%oper,"SQLUser"_"."_"PersonProcess_MessagesSent") do ##Class(%SYS.System).WriteToConsoleLog(%msg) if ($zu(67,10,$j)=1)||($zu(67,10,$j)=3) { write !,%msg h 3 } HALT  } do ..%SQLEExit() QUIT
	Return
%SQLDeleteChildren(%parent,%check,sqlcode)
	// Delete all rows where PersonProcess = :%parent
	new %ROWCOUNT,%ROWID,SQLCODE
	set:$a(%check,2)=2 $e(%check,2)=$c(0)
	 ;---&sql(DELETE %USECHECKVARIABLE FROM SQLUser.PersonProcess_MessagesSent WHERE PersonProcess = :%parent)
 	 ;--- ** SQL PUBLIC Variables: %parent, SQLCODE
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xErxVlUSOnQuwcpxgCiytOK620n6","%New") } catch { if $ze["<CLASS DOES NOT EXIST>"&&($ze["%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xErxVlUSOnQuwcpxgCiytOK620n6")||($ze["<ZSQLU>") { d %0dsqlC } else { throw } }
	set:SQLCODE<0 sqlcode=SQLCODE QUIT  
 q
%0dsqlC	n %xxsql
	s %xxsql("S",1)="DELETE %USECHECKVARIABLE FROM SQLUser . PersonProcess_MessagesSent WHERE PersonProcess = :%parent"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","DEBUG")=$c(1),%xxsql("M","FORKNETDMN")=$c(1)
	s %xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1)
	s %xxsql("M","USELOST")=$c(1),%xxsql("M","ZVERSION")=$c(1),%xxsql("I","%occErrors")="",%xxsql("I","%occSqlfunc")="",%xxsql("I","%sySite")=""
	s %xxsql("I","%sySt")="",%xxsql("I","%sySystem")="",%xxsql("I","EnsConstants")="",%xxsql("I","EnsErrors")="",%xxsql("I","EnsUtil")=""
	s %xxsql("I","Ensemble")="",%xxsql("NS")="PROJECT1"
	d BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","User",0,"",),,"User.PersonProcessMessagesSent.CLS")
	q
%SQLDeleteTempStreams()
	// Delete all temporary streams
	QUIT
%SQLEExit()
	do:%oper'="DELETE" ..%SQLUnlock2() do ..%SQLUnlock() 
	do ..%SQLUnlockRef()
	if %tstart,$zu(115,1)=1,$TLEVEL { set %tstart=0 TROLLBACK 1 } kill:$g(omcall) %0CacheSQLRA QUIT  
	Return
%SQLExists(pLockOnly=0,pUnlockRef,%pVal...)
	// SQL Foreign Key validation entry point for Key %1.  Called by FKeys that reference this Key to see if the row is defined
	new id set id=%pVal(1)
	if pLockOnly>=0 { if '..%SQLGetLock(id,1,.pUnlockRef) { set sqlcode=-114,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler39",,"SQLUser"_"."_"PersonProcess_MessagesSent"_":"_"%1") QUIT 0 } }
	if pLockOnly<1 {
		new qv set qv='..%SQLCheckUnique(0,,%pVal(1)) QUIT:pLockOnly=-1 qv
		do:'$g(pUnlockRef) ..%SQLReleaseLock(id,1) quit qv
	}
	else { do:'$g(pUnlockRef) ..%SQLReleaseLock(id,1) QUIT 1 }
	Return
%SQLFKeyDelLock()
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLFKeyDelLock")
%SQLFastInsert(%check)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLFastInsert")
%SQLFieldValidate()
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLFieldValidate")
%SQLGetLock(pRowId,pShared=0,pUnlockRef)
	if $tlevel,$i(%0CacheLock("User.PersonProcessMessagesSent"))>$zu(156,50,1) { new s set s=$e("S",pShared) lock +^Ens.BusinessProcessD#s:$zu(115,4) lock:$t -^Ens.BusinessProcessD#s QUIT $s($t:2,1:0) } 
	QUIT ..%SQLAcquireLock(pRowId,pShared,.pUnlockRef)
%SQLGetOld(%rowid,%d,%e,sqlcode)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLGetOld")
%SQLGetOldAll()
	// Get all old data values
	new SQLCODE,%ROWCOUNT
	 ;---&sql(SELECT MessagesSent INTO :%e() FROM %IGNOREINDEX * SQLUser.PersonProcess_MessagesSent WHERE ID=:%rowid)
 	 ;--- ** SQL PUBLIC Variables: %e, %rowid, SQLCODE
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xEdYb40iKgU9VDLAfvgjaOCeSBl1","%New") } catch { if $ze["<CLASS DOES NOT EXIST>"&&($ze["%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xEdYb40iKgU9VDLAfvgjaOCeSBl1")||($ze["<ZSQLU>") { d %0dsqlE } else { throw } }
	set sqlcode=SQLCODE QUIT:sqlcode'=0
	QUIT
 q
%0dsqlE	n %xxsql
	s %xxsql("S",1)="SELECT MessagesSent INTO :%e() FROM %IGNOREINDEX * SQLUser . PersonProcess_MessagesSent WHERE ID = :%rowid"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","DEBUG")=$c(1),%xxsql("M","FORKNETDMN")=$c(1)
	s %xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1)
	s %xxsql("M","USELOST")=$c(1),%xxsql("M","ZVERSION")=$c(1),%xxsql("I","%occErrors")="",%xxsql("I","%occSqlfunc")="",%xxsql("I","%sySite")=""
	s %xxsql("I","%sySt")="",%xxsql("I","%sySystem")="",%xxsql("I","EnsConstants")="",%xxsql("I","EnsErrors")="",%xxsql("I","EnsUtil")=""
	s %xxsql("I","Ensemble")="",%xxsql("NS")="PROJECT1"
	d BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","User",0,"",),,"User.PersonProcessMessagesSent.CLS")
	q
%SQLGetOldIndex(%rowid,%d,pF=0,sqlcode)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLGetOldIndex")
%SQLInsert(%d,%check,%inssel,%vco,%tstart=1,%mv=0)
	// SQL INSERT method for table SQLUser.PersonProcess_MessagesSent
	new bva,%ele,%itm,%key,%f,%l,%n,%nc,%oper,%pos,%s,sqlcode,sn,subs,unlockref set %oper="INSERT",sqlcode=0,%l=$c(0,0,0),unlockref=1
	if $a(%check,7) { new %diu merge %diu=%d }
	set:$d(%d(0)) subs(6)=$p(%d(0),"||",1)
	if '$a(%check),'..%SQLValidateFields(.sqlcode) { set SQLCODE=sqlcode RETURN "" }
	do:'$a(%check,8) ..%SQLNormalizeFields()
	if %tstart { TSTART:($zu(115,1)=1)||('$TLEVEL&&($zu(115,1)=2))  } set $zt="ERRORInsert"
	if '$a(%check),$g(%d(0))'="",'##class(User.PersonProcess).%SQLExists($s($a(%check,2)=1:-1,1:0),.unlockref,%d(0)) {
		if sqlcode<0 { set SQLCODE=sqlcode if SQLCODE=-114 { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler56",,%oper,"SQLUser"_"."_"PersonProcess",$g(%d(0))) } } else { set SQLCODE=-104,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler9",,"SQLUser"_"."_"PersonProcess_MessagesSent") }
		do ..%SQLEExit() RETURN ""
	}
	if '$a(%check) { if $g(%d(0))="" { do ..%SQLMissing("PersonProcess") set SQLCODE=sqlcode do ..%SQLEExit() RETURN "" } }
	set:'$d(%d(3)) %d(3)=$i(^Ens.BusinessProcessD(subs(6),"sent")) set %d(1)=%d(0)_"||"_%d(3),subs(6)=$p(%d(0),"||",1)
	if '$a(%check) {
		do {
			if $g(%vco)'="" { d @%vco quit:sqlcode<0  }
				// Constraint IDKEY
				if '$a(%check,2) { lock +^Ens.BusinessProcessD("IDKEY",%d(0),%d(3)):$zu(115,4) if $t { set $e(%l,2)=$c(1) } else { do ..%SQLUnlockError("IDKEY") quit  } }
				if '$a(%check,7) { if '..IDKEYSQLCheckUnique(0,,%d(0),%d(3)) { set sqlcode=-119,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler10",,"SQLUser"_"."_"PersonProcess_MessagesSent","IDKEY","PersonProcess"_"="_$$quoter^%apiSQL($g(%d(0)))_","_"element_key"_"="_$$quoter^%apiSQL($g(%d(3)))) quit  }} // INSERT
				else { new tID set tID=..IDKEYSQLFindRowIDByConstraint($lb(%d(0),%d(3)),1) if tID'="" { kill %d merge %d=%diu kill %diu do ..%SQLUpdate(tID,%check,.%d),..%SQLUnlock2(),..%SQLUnlockRef() set $e(%check,7)=$c(2) quit  }} // INSERT OR UPDATE
		} while 0
		QUIT:$a(%check,7)=2 $s('SQLCODE:tID,1:"")				// INSERT became UPDATE
		if sqlcode<0 { set SQLCODE=sqlcode do ..%SQLEExit() RETURN "" }		// A constraint failed
	}
	if '$a(%check,2) { new %ls if $tlevel,$i(%0CacheLock("User.PersonProcessMessagesSent"))>$zu(156,50,1) { lock +^Ens.BusinessProcessD:$zu(115,4) lock:$t -^Ens.BusinessProcessD set %ls=$s($t:2,1:0) } else { lock +^Ens.BusinessProcessD(subs(6),"sent",%d(3)):$zu(115,4) set %ls=$t } set:%ls=2 $e(%check,2)=$c(1) set:%ls=1 $e(%l)=$c(1) if '%ls set SQLCODE=-110,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler40",,%oper,"SQLUser"_"."_"PersonProcess_MessagesSent",$g(%d(1))) do ..%SQLEExit() RETURN ""  }
	set ^Ens.BusinessProcessD(subs(6),"sent",%d(3))=$g(%d(2))
	lock:$a(%l,2) -^Ens.BusinessProcessD("IDKEY",%d(0),%d(3))#"D" 
	lock:$a(%l) -^Ens.BusinessProcessD(subs(6),"sent",%d(3))
	TCOMMIT:%tstart&&($zu(115,1)=1)
	do ..%SQLUnlockRef()
	set SQLCODE=0
	QUIT %d(1) 			// %SQLInsert
ERRORInsert	set $zt="",SQLCODE=-415,%msg=$s($g(%msg)'="":%msg_" -- ",1:"")_$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler51",,%oper,"SQLUser"_"."_"PersonProcess_MessagesSent",$ze)
	if $ze["<FRAMESTACK>" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler52",,$ze,%oper,"SQLUser"_"."_"PersonProcess_MessagesSent") do ##Class(%SYS.System).WriteToConsoleLog(%msg) if ($zu(67,10,$j)=1)||($zu(67,10,$j)=3) { write !,%msg h 3 } HALT  }
	do ..%SQLEExit()
	RETURN ""
%SQLInsertComputes(view=0)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLInsertComputes")
%SQLInsertStreams(pVal,pClassname,pProperty,pField,pChangeEmptyToNull,pOIDType,sqlcode,%msg) public {
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLInsertStreams") }
%SQLInvalid(pIcol,pVal) public {
	set:$l($g(pVal))>40 pVal=$e(pVal,1,40)_"..." do:'$d(%n) ..%SQLnBuild() set %msg=$s($g(%msg)'="":%msg_$c(13,10),1:"")_$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler37",,"SQLUser"_"."_"PersonProcess_MessagesSent"_"."_$lg(%n,pIcol),$s($g(pVal)'="":$s(pVal="":"<NULL>",pVal=$c(0):"<EMPTY STRING>",1:"'"_pVal_"'"),1:"")),sqlcode=$s(%oper="INSERT":-104,1:-105)
	QUIT sqlcode }
%SQLInvalid2(ficol,val,char) [ sqlcode ] public {
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLInvalid2") }
%SQLMVDelete(oref,flags,%rowid,oldrec)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLMVDelete")
%SQLMVIndexDelete(%e)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLMVIndexDelete")
%SQLMVIndexInsert(%d)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLMVIndexInsert")
%SQLMVIndexUpdate(%d,%e)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLMVIndexUpdate")
%SQLMVInsert(oref,flags,%rowid,newrec)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLMVInsert")
%SQLMVUpdate(oref,flags,%rowid,newrec,oldrec)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLMVUpdate")
%SQLMissing(fname)
	set sqlcode=-108,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler47",,fname,"SQLUser"_"."_"PersonProcess_MessagesSent") quit
%SQLNormalizeCompFields()
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLNormalizeCompFields")
%SQLNormalizeFields()
	set:$g(%d(0))'="" %d(0)=$select(%d(0)=$c(0)&&$zu(115,13):"",1:%d(0)\1)
	QUIT
%SQLPurgeIndices(pIndices="",pLockExtent=0,pIgnoreIndexList="")
	QUIT ##class(User.PersonProcess).%PurgeIndices(pIndices,pLockExtent,pIgnoreIndexList)
%SQLQuickBulkInsert(%nolock=0)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLQuickBulkInsert")
%SQLQuickBulkLoad(%rowidlist,%nolock=0,pkey=0)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLQuickBulkLoad")
%SQLQuickBulkSave(%nolock=0)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLQuickBulkSave")
%SQLQuickBulkUpdate(%nolock=0)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLQuickBulkUpdate")
%SQLQuickDelete(%rowid,%nolock=0,pkey=0)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLQuickDelete")
%SQLQuickDeleteChildren(%parent,%nolock=0,pkey=0)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLQuickDeleteChildren")
%SQLQuickFindPKeyByRowID(%rowid)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLQuickFindPKeyByRowID")
%SQLQuickFindRowIDByPKey(pPKey,pOutput=1,pInternal=0)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLQuickFindRowIDByPKey")
%SQLQuickInsert(d,%nolock=0,pkey=0,parentpkey=0)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLQuickInsert")
%SQLQuickLoad(%rowid,%nolock=0,pkey=0,qq=0)
	// Get fields from row where SQLRowID=%rowid
	new d,i,il,subs set:%nolock=2 %nolock=1
	if %nolock=0 { if '..%SQLAcquireLock(%rowid) { set %qrc=114,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler45",,"SQLUser"_"."_"PersonProcess_MessagesSent",%rowid),%ROWCOUNT=0 QUIT  } set:$zu(115,2) il=$zu(115,2,0) }
	set d(1)=%rowid,d(0)=$p(d(1),"||",1),d(3)=$p(d(1),"||",2),subs(6)=$p(d(0),"||",1)
	new s,ul set ul=0,d(1)=%rowid if $zu(115,2)=1 { lock +^Ens.BusinessProcessD(subs(6),"sent",d(3))#"S":$zu(115,4) if $t { set ul=1 } else { set %qrc=114,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler46",,"SQLUser"_"."_"PersonProcess_MessagesSent",%rowid),%ROWCOUNT=0 quit  } }
	if '$d(^Ens.BusinessProcessD(subs(6),"sent",d(3)),s) { set SQLCODE=100,%qrc=100 if %nolock=0 { do:$g(il) $zu(115,2,il) }} else { set SQLCODE=0
	if %nolock=0 { if $zu(115,1)=1 { TSTART  } elseif '$TLEVEL,$zu(115,1)=2 { TSTART  }} set d(2)=s  }
	do ..%SQLQuickLogicalToOdbc(.d)
	if SQLCODE set %ROWCOUNT=0 set:SQLCODE<0 SQLCODE=-SQLCODE lock:ul -^Ens.BusinessProcessD(subs(6),"sent",d(3))#"SI" set %qrc=SQLCODE QUIT
	set:qq d=$zobjexport("User.PersonProcessMessagesSent",18),d=$zobjexport(4,18) set i=-1 for  { set i=$o(d(i)) quit:i=""  set d=$zobjexport(d(i),18) } set %qrc=0,%ROWCOUNT=1 lock:ul -^Ens.BusinessProcessD(subs(6),"sent",d(3))#"SI" if %nolock=0 { do ..%SQLReleaseLock(%rowid,0,0) do:$g(il) $zu(115,2,il) } QUIT
	Return
%SQLQuickLoadChildren(%parref,%nolock=0,pkey=0,returnpkey=0)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLQuickLoadChildren")
%SQLQuickLogicalToOdbc(%d)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLLogicalToOdbcFields")
%SQLQuickOdbcToLogical(%d)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLQuickOdbcToLogical")
%SQLQuickUpdate(%rowid,d,%nolock=0,pkey=0)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLQuickUpdate")
%SQLReleaseLock(%rowid,s=0,i=0,e="")
	new %d,subs
	set %d(1)=%rowid,%d(0)=$p(%d(1),"||",1),%d(3)=$p(%d(1),"||",2),subs(6)=$p(%d(0),"||",1) set s=$e("S",s)_$e("D",i)
	lock -^Ens.BusinessProcessD(subs(6),"sent",%d(3))#s
	set:i&&($g(%0CacheLock("User.PersonProcessMessagesSent"))) %0CacheLock("User.PersonProcessMessagesSent")=%0CacheLock("User.PersonProcessMessagesSent")-1
	QUIT
%SQLReleaseTableLock(s=0,i=0)
	set s=$e("S",s)_$e("D",i) lock -^Ens.BusinessProcessD#s QUIT 1
	Return
%SQLStorageValidation()
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLStorageValidation")
%SQLTrigDelTab()
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLTrigDelTab")
%SQLTrigInsTab()
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLTrigInsTab")
%SQLUnlock()
	lock:$a(%l) -^Ens.BusinessProcessD(subs(6),"sent",%d(3))
	QUIT
%SQLUnlock2()
	lock:$a(%l,2) -^Ens.BusinessProcessD("IDKEY",%d(0),%d(3))#"D" QUIT
%SQLUnlockError(cname)
	set sqlcode=-110 if %oper="DELETE" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler48",,"SQLUser"_"."_"PersonProcess_MessagesSent",cname) } else { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler49",,"SQLUser"_"."_"PersonProcess_MessagesSent",cname) } quit
	Return
%SQLUnlockRef()
	for %itm=2:1:$g(unlockref) {
		if $lg(unlockref(%itm))'="%UnlockId" { lock -@$lg(unlockref(%itm))#$lg(unlockref(%itm),3) }
		else { do $classmethod($lg(unlockref(%itm),2),$lg(unlockref(%itm)),$lg(unlockref(%itm),3),1,1) }
		set:$g(%0CacheLock($lg(unlockref(%itm),2))) %0CacheLock($lg(unlockref(%itm),2))=%0CacheLock($lg(unlockref(%itm),2))-1
	}
	QUIT
%SQLUpdate(%rowid,%check,%d,%vco,%tstart=1,%mv=0,%polymorphic=0,%soid)
	// SQL UPDATE method for table SQLUser.PersonProcess_MessagesSent
	new %e,bva,%ele,%itm,%key,%f,%l,%n,%nc,%oper,%pos,%s,icol,omcall,s,sn,sqlcode,subs,t set %oper="UPDATE",sqlcode=0,%ROWID=%rowid,$e(%e,1)=$c(0),%l=$c(0,0,0)
	if '$d(%0CacheSQLRA) { new %0CacheSQLRA set omcall=1 }
	if '$a(%check,7) {
		if '$a(%check),'..%SQLValidateFields(.sqlcode) { set SQLCODE=sqlcode QUIT  }
		do:'$a(%check,8) ..%SQLNormalizeFields()
	}
	if ($d(%d(1))&&($g(%d(1))'=%rowid))||($d(%d(0))&&($g(%d(0))'=$p(%rowid,"||",1)))||($d(%d(3))&&($g(%d(3))'=$p(%rowid,"||",2))) { set SQLCODE=-107,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler17",,"'ID', 'PersonProcess', or 'element_key'","SQLUser"_"."_"PersonProcess_MessagesSent") QUIT  }
	for icol=2:1:3 { set $e(%e,icol)=$c($d(%d(icol))) }
	set %d(1)=%rowid,%e(1)=%rowid,%d(0)=$p(%d(1),"||",1),%d(3)=$p(%d(1),"||",2),subs(6)=$p(%d(0),"||",1)
	if '$a(%check,2) { new %ls if $tlevel,$i(%0CacheLock("User.PersonProcessMessagesSent"))>$zu(156,50,1) { lock +^Ens.BusinessProcessD:$zu(115,4) lock:$t -^Ens.BusinessProcessD set %ls=$s($t:2,1:0) } else { lock +^Ens.BusinessProcessD(subs(6),"sent",%d(3)):$zu(115,4) set %ls=$t } set:%ls=2 $e(%check,2)=$c(1) set:%ls=1 $e(%l)=$c(1) if '%ls { set SQLCODE=-110,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler40",,%oper,"SQLUser"_"."_"PersonProcess_MessagesSent",$g(%d(1))) RETURN  }} if %tstart { TSTART:($zu(115,1)=1)||('$TLEVEL&&($zu(115,1)=2))  }
	set $zt="ERRORUpdate"
	if $g(%vco)'="" { do ..%SQLGetOldAll() if sqlcode { set SQLCODE=-109,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler59",,"SQLUser"_"."_"PersonProcess_MessagesSent",%rowid) do ..%SQLEExit() QUIT  } set:'$d(%d(2)) %d(2)=%e(2) set:%d(2)=%e(2) $e(%e,2)=$c(0)}
	if '$a(%check) {
		do {
			if $g(%vco)'="" { d @%vco quit:sqlcode<0  }
		} while 0
		if sqlcode { set SQLCODE=sqlcode do ..%SQLEExit() QUIT  }
	}
	set:$a(%e,2) ^Ens.BusinessProcessD(subs(6),"sent",%d(3))=$g(%d(2))
	do ..%SQLUnlock2()
	do ..%SQLUnlock() TCOMMIT:%tstart&&($zu(115,1)=1)
	set SQLCODE=0 kill:$g(omcall) %0CacheSQLRA
	QUIT
ERRORUpdate	set $zt="",SQLCODE=-415,%msg=$s($g(%msg)'="":%msg_" -- ",1:"")_$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler51",,%oper,"SQLUser"_"."_"PersonProcess_MessagesSent",$ze) if $ze["<FRAMESTACK>" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler52",,$ze,%oper,"SQLUser"_"."_"PersonProcess_MessagesSent") do ##Class(%SYS.System).WriteToConsoleLog(%msg) if ($zu(67,10,$j)=1)||($zu(67,10,$j)=3) { write !,%msg h 3 } HALT  } do ..%SQLEExit() QUIT  
	Return
%SQLUpdateComputes(view=0)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLUpdateComputes")
%SQLUpdateStreams(pNew,pOld,pClassname,pProperty,pField,pChangeEmptyToNull,pOIDType,sqlcode,%msg,pAllowOid=0) public {
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLUpdateStreams") }
%SQLValidateCompFields(sqlcode)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLValidateCompFields")
%SQLValidateFields(sqlcode)
	if $g(%d(3))'="",'(($l(%d(3))'>50)) { set sqlcode=..%SQLInvalid(3+1,%d(3)) } 
	QUIT 'sqlcode
%SQLicompView()
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLicompView")
%SQLnBuild() public {
	set %n=$lb("ID","ID","MessagesSent","element_key")
	QUIT }
%ValidateIndices(idxList="",autoCorrect=0,lockOption=1,multiProcess=1,mapList,verbose=1,errors)
	w !,"There are no indices to validate for class 'User.PersonProcessMessagesSent'"
	QUIT 1
zIDKEYSQLCheckUnique(pFromOrig=0,%pID,%pVals...)
	 ;---&sql(SELECT PersonProcess,element_key FROM SQLUser.PersonProcess_MessagesSent WHERE  PersonProcess=:%pVals(1) AND element_key=:%pVals(2) AND (%ID <> :%pID OR :%pID IS NULL)) QUIT SQLCODE=100
 	 ;--- ** SQL PUBLIC Variables: %pID, %pVals, SQLCODE
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xEPqUOB0f14qN2TeDkw3jRigJxZ6","%New") } catch { if $ze["<CLASS DOES NOT EXIST>"&&($ze["%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xEPqUOB0f14qN2TeDkw3jRigJxZ6")||($ze["<ZSQLU>") { d %0dsqlG } else { throw } } QUIT SQLCODE=100
 q
%0dsqlG	n %xxsql
	s %xxsql("S",1)="SELECT PersonProcess , element_key FROM SQLUser . PersonProcess_MessagesSent WHERE PersonProcess = :%pVals(1) AND element_key = :%pVals(2) AND ( %ID <> :%pID OR :%pID IS NULL )"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","DEBUG")=$c(1),%xxsql("M","FORKNETDMN")=$c(1)
	s %xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1)
	s %xxsql("M","USELOST")=$c(1),%xxsql("M","ZVERSION")=$c(1),%xxsql("I","%occErrors")="",%xxsql("I","%occSqlfunc")="",%xxsql("I","%sySite")=""
	s %xxsql("I","%sySt")="",%xxsql("I","%sySystem")="",%xxsql("I","EnsConstants")="",%xxsql("I","EnsErrors")="",%xxsql("I","EnsUtil")=""
	s %xxsql("I","Ensemble")="",%xxsql("NS")="PROJECT1"
	d BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","User",0,"",),,"User.PersonProcessMessagesSent.CLS")
	q
zIDKEYSQLExists(pLockOnly=0,pUnlockRef,%pVal...)
	// SQL Foreign Key validation entry point for Key IDKEY.  Called by FKeys that reference this Key to see if the row is defined
	new id set id=..IDKEYSQLFindRowIDByConstraint($lb(%pVal(1),%pVal(2)),1) QUIT:SQLCODE $s('pLockOnly:0,1:1)
	if pLockOnly>=0 { if '..%SQLGetLock(id,1,.pUnlockRef) { set sqlcode=-114,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler39",,"SQLUser"_"."_"PersonProcess_MessagesSent"_":"_"IDKEY") QUIT 0 } }
	if pLockOnly<1 {
		new qv set qv='..IDKEYSQLCheckUnique(0,,%pVal(1),%pVal(2)) QUIT:pLockOnly=-1 qv
		do:'$g(pUnlockRef) ..%SQLReleaseLock(id,1) quit qv
	}
	else { do:'$g(pUnlockRef) ..%SQLReleaseLock(id,1) QUIT 1 }
	Return
zIDKEYSQLFindRowIDByConstraint(%con,pInternal=0)
	// Get ROWID value for UNIQUE Key IDKEY value given in %con
	new %d,id,rtm set rtm=$zu(115,5,$s(pInternal:0,1:1)) set %d(0)=$lg(%con,1) set %d(3)=$lg(%con,2)
	set %ROWCOUNT=0 set:'pInternal %qrc=0
	 ;---&sql(SELECT %ID INTO :id FROM SQLUser.PersonProcess_MessagesSent WHERE PersonProcess = :%d(0) AND element_key = :%d(3))
 	 ;--- ** SQL PUBLIC Variables: %d, SQLCODE, id
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xEgONUzIM0a9H9ysncM7letJj039","%New") } catch { if $ze["<CLASS DOES NOT EXIST>"&&($ze["%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xEgONUzIM0a9H9ysncM7letJj039")||($ze["<ZSQLU>") { d %0dsqlI } else { throw } }
	do $zu(115,5,rtm)
	if pInternal { QUIT:'SQLCODE $g(id) RETURN "" }
	if SQLCODE { set:SQLCODE<0 %qrc=-SQLCODE set:'%ROWCOUNT&&(SQLCODE=100) id="",%qrc=0 } set d=$zobjexport(id,18) QUIT
	Return
 q
%0dsqlI	n %xxsql
	s %xxsql("S",1)="SELECT %ID INTO :id FROM SQLUser . PersonProcess_MessagesSent WHERE PersonProcess = :%d(0) AND element_key = :%d(3)"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","DEBUG")=$c(1),%xxsql("M","FORKNETDMN")=$c(1)
	s %xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1)
	s %xxsql("M","USELOST")=$c(1),%xxsql("M","ZVERSION")=$c(1),%xxsql("I","%occErrors")="",%xxsql("I","%occSqlfunc")="",%xxsql("I","%sySite")=""
	s %xxsql("I","%sySt")="",%xxsql("I","%sySystem")="",%xxsql("I","EnsConstants")="",%xxsql("I","EnsErrors")="",%xxsql("I","EnsUtil")=""
	s %xxsql("I","Ensemble")="",%xxsql("NS")="PROJECT1"
	d BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Runtime","","","User",0,"",),,"User.PersonProcessMessagesSent.CLS")
	q
]]></Routine>


<Routine name="User.PersonProcessSynchronizedResponses.1" type="INT" languagemode="0" generated="1" timestamp="65833,52874.170885"><![CDATA[
 ;User.PersonProcessSynchronizedResponses.1
 ;Generated for class User.PersonProcessSynchronizedResponses.  Do NOT edit. 03/30/2021 02:41:14PM
 ;;59705251;User.PersonProcessSynchronizedResponses
 ;
SQLUPPER(v,l) { quit $zu(28,v,7,$g(l,32767)) }
ALPHAUP(v,r) { quit $zu(28,v,6) }
STRING(v,l) { quit $zu(28,v,9,$g(l,32767)) }
SQLSTRING(v,l) { quit $zu(28,v,8,$g(l,32767)) }
UPPER(v) { quit $zu(28,v,5) }
MVR(v) { quit $zu(28,v,2) }
TRUNCATE(v,l) { quit $e(v,1,$g(l,3641144)) }
%SQLAcquireLock(%rowid,s=0,unlockref=0)
	new %d,gotlock,subs
	set %d(1)=%rowid,%d(0)=$p(%d(1),"||",1),%d(3)=$p(%d(1),"||",2),subs(6)=$p(%d(0),"||",1) set s=$e("S",s)
	lock +^Ens.BusinessProcessD(subs(6),"%SynchronizedResponses",%d(3))#s:$zu(115,4) set gotlock=$t
	set:gotlock&&unlockref unlockref=unlockref+1,unlockref(unlockref)=$lb($name(^Ens.BusinessProcessD(subs(6),"%SynchronizedResponses",%d(3))),"User.PersonProcessSynchronizedResponses",s_"D")
	QUIT gotlock
%SQLAcquireTableLock(s=0,SQLCODE,to="")
	set s=$e("S",s) set:to="" to=$zu(115,4) lock +^Ens.BusinessProcessD#s:to QUIT:$t 1 set SQLCODE=-110 if s="S" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler35",,"SQLUser"_"."_"PersonProcess__SynchronizedResponses") } else { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler36",,"SQLUser"_"."_"PersonProcess__SynchronizedResponses") } QUIT 0
	Return
%SQLAfterTriggers()
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLAfterTriggers")
%SQLBeforeTriggers()
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLBeforeTriggers")
%SQLBuildIndices(pIndices="",pLockFlag=0,pStartID="",pEndID="",pIgnoreIndexList="")
	QUIT ##class(User.PersonProcess).%BuildIndices(pIndices,,pLockFlag,,pStartID,pEndID,pIgnoreIndexList)
%SQLBuildPurgeIndexForRow(pIndices="",pActions="BP",pLockRow=1,%d,%e,pIgnoreIndexList="")
	// Purge and build index nodes for a single row using given values, return Status Code
	new sn,tSC,tLock set tSC=1,pActions=$zcvt(pActions,"U")
	try {
		if $g(%d(1))="" { set tSC=$select(+tSC:$$Error^%apiOBJ(5521,-108,"RowID value must be specified in %d(1) when calling %SQLBuildPurgeIndexForRow for table 'SQLUser.PersonProcess__SynchronizedResponses'"),1:$$AppendStatus^%occSystem(tSC,$$Error^%apiOBJ(5521,-108,"RowID value must be specified in %d(1) when calling %SQLBuildPurgeIndexForRow for table 'SQLUser.PersonProcess__SynchronizedResponses'"))) RETURN tSC }
		if pLockRow { if '..%SQLAcquireLock(%d(1)) { set tSC=$select(+tSC:$$Error^%apiOBJ(5521,-114,"Unable to lock row in table 'SQLUser.PersonProcess__SynchronizedResponses' with %ID = '"_%d(1)_"'"),1:$$AppendStatus^%occSystem(tSC,$$Error^%apiOBJ(5521,-114,"Unable to lock row in table 'SQLUser.PersonProcess__SynchronizedResponses' with %ID = '"_%d(1)_"'"))) RETURN tSC  } else { set tLock=1 }}
		set %d(0)=$p(%d(1),"||",1),%d(3)=$p(%d(1),"||",2)
		set subs(6)=$p(%d(0),"||",1)
		if pLockRow { do ..%SQLReleaseLock(%d(1),0,0) set tLock=0 }
	}
	catch {
		if $g(tLock) { do ..%SQLReleaseLock(%d(1),0,0) }
		set tSC=$select(+tSC:$$Error^%apiOBJ(5594,$ze),1:$$AppendStatus^%occSystem(tSC,$$Error^%apiOBJ(5594,$ze)))
	}
	QUIT tSC
%SQLCheckUnique(pFromOrig=0,%pID,%pVals...)
	 ;---&sql(SELECT ID FROM SQLUser.PersonProcess__SynchronizedResponses WHERE  ID=:%pVals(1) AND (%ID <> :%pID OR :%pID IS NULL)) QUIT SQLCODE=100
 	 ;--- ** SQL PUBLIC Variables: %pID, %pVals, SQLCODE
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xEXwXrumfVsNGMRngwjPcAXd3i1H","%New") } catch { if $ze["<CLASS DOES NOT EXIST>"&&($ze["%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xEXwXrumfVsNGMRngwjPcAXd3i1H")||($ze["<ZSQLU>") { d %0dsqlA } else { throw } } QUIT SQLCODE=100
 q
%0dsqlA	n %xxsql
	s %xxsql("S",1)="SELECT ID FROM SQLUser . PersonProcess__SynchronizedResponses WHERE ID = :%pVals(1) AND ( %ID <> :%pID OR :%pID IS NULL )"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","DEBUG")=$c(1),%xxsql("M","FORKNETDMN")=$c(1)
	s %xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1)
	s %xxsql("M","USELOST")=$c(1),%xxsql("M","ZVERSION")=$c(1),%xxsql("I","%occErrors")="",%xxsql("I","%occSqlfunc")="",%xxsql("I","%sySite")=""
	s %xxsql("I","%sySt")="",%xxsql("I","%sySystem")="",%xxsql("I","EnsConstants")="",%xxsql("I","EnsErrors")="",%xxsql("I","EnsUtil")=""
	s %xxsql("I","Ensemble")="",%xxsql("NS")="PROJECT1"
	d BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","User",0,"",),,"User.PersonProcessSynchronizedResponses.CLS")
	q
%SQLCheckUniqueIndices(pIndices,pOK)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLCheckUniqueIndices")
%SQLCheckUniqueKeys(pConNumber,pFromOrig=0,pUpdate=0,pVals...)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLCheckUniqueKeys")
%SQLCopyIcolIntoName()
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLCopyIcolIntoName")
%SQLCopyNameIntoIcol()
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLCopyNameToIcol")
%SQLCreateInsDelTables(pInsTrigObj,pDelTrigObj)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLCreateInsDelTables")
%SQLDefineiDjVars(%d,subs,master)
	QUIT
%SQLDelete(%rowid,%check,%tstart=1,%mv=0,%polymorphic=0)
	// SQL DELETE method for table SQLUser.PersonProcess__SynchronizedResponses
	new bva,ce,%d,dc,%e,%ele,%itm,%key,%l,%nc,omcall,%oper,%pos,%s,sn,sqlcode,subs set %oper="DELETE",sqlcode=0,%ROWID=%rowid,%d(1)=%rowid,%e(1)=%rowid,%d(0)=$p(%d(1),"||",1),%d(3)=$p(%d(1),"||",2),subs(6)=$p(%d(0),"||",1),%l=$c(0)
	if '$d(%0CacheSQLRA) { new %0CacheSQLRA set omcall=1 }
	if '$a(%check,2) { new %ls if $tlevel,$i(%0CacheLock("User.PersonProcessSynchronizedResponses"))>$zu(156,50,1) { lock +^Ens.BusinessProcessD:$zu(115,4) lock:$t -^Ens.BusinessProcessD set %ls=$s($t:2,1:0) } else { lock +^Ens.BusinessProcessD(subs(6),"%SynchronizedResponses",%d(3)):$zu(115,4) set %ls=$t } set:%ls=2 $e(%check,2)=$c(1) set:%ls=1 $e(%l)=$c(1) if '%ls { set SQLCODE=-110,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler40",,%oper,"SQLUser"_"."_"PersonProcess__SynchronizedResponses",$g(%d(1))) RETURN  }} if %tstart { TSTART:($zu(115,1)=1)||('$TLEVEL&&($zu(115,1)=2))  }
	set $zt="ERRORDelete"
	if '$a(%check),'$zu(115,7) do  if sqlcode set SQLCODE=sqlcode do ..%SQLEExit() QUIT  
	. new %fk,%k,%p,%st,%t,%z set %k="",%p("%1")="%d(1),",%p("IDKEY")="%d(0),%d(3),,"
	. for  quit:sqlcode<0  set %k=$o(^rINDEXEXT("F","User.PersonProcessSynchronizedResponses",%k)) quit:%k=""  set %t="" for  set %t=$o(^rINDEXEXT("F","User.PersonProcessSynchronizedResponses",%k,"f",%t)) quit:%t=""  set %st=(%t="User.PersonProcessSynchronizedResponses") set %fk="" for  set %fk=$o(^rINDEXEXT("F","User.PersonProcessSynchronizedResponses",%k,"f",%t,%fk)) quit:%fk=""  x "set %z=$classmethod(%t,%fk_""SQLFKeyRefAction"",%st,%k,$a(%check,2),"_%p(%k)_")" if %z set sqlcode=-124 quit  
	set ce="" for  { set ce=$order(^oddSQL("SQLUser","PersonProcess__SynchronizedResponses","DC",ce)) quit:ce=""   do $classmethod(ce,"%SQLDeleteChildren",%d(1),%check,.sqlcode) quit:sqlcode<0  } if sqlcode<0 { set SQLCODE=sqlcode do ..%SQLEExit() QUIT } // Delete any children
	if '$a(%check,3) {
	}
	k ^Ens.BusinessProcessD(subs(6),"%SynchronizedResponses",%d(3))
	do ..%SQLUnlock() TCOMMIT:%tstart&&($zu(115,1)=1)
	set SQLCODE=0 kill:$g(omcall) %0CacheSQLRA
	QUIT
ERRORDelete	set $zt="",SQLCODE=-415,%msg=$s($g(%msg)'="":%msg_" -- ",1:"")_$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler51",,%oper,"SQLUser"_"."_"PersonProcess__SynchronizedResponses",$ze) if $ze["<FRAMESTACK>" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler52",,$ze,%oper,"SQLUser"_"."_"PersonProcess__SynchronizedResponses") do ##Class(%SYS.System).WriteToConsoleLog(%msg) if ($zu(67,10,$j)=1)||($zu(67,10,$j)=3) { write !,%msg h 3 } HALT  } do ..%SQLEExit() QUIT
	Return
%SQLDeleteChildren(%parent,%check,sqlcode)
	// Delete all rows where PersonProcess = :%parent
	new %ROWCOUNT,%ROWID,SQLCODE
	set:$a(%check,2)=2 $e(%check,2)=$c(0)
	 ;---&sql(DELETE %USECHECKVARIABLE FROM SQLUser.PersonProcess__SynchronizedResponses WHERE PersonProcess = :%parent)
 	 ;--- ** SQL PUBLIC Variables: %parent, SQLCODE
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xEgDxYz5r8gg7L3YfD4N14iw26AO","%New") } catch { if $ze["<CLASS DOES NOT EXIST>"&&($ze["%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xEgDxYz5r8gg7L3YfD4N14iw26AO")||($ze["<ZSQLU>") { d %0dsqlC } else { throw } }
	set:SQLCODE<0 sqlcode=SQLCODE QUIT  
 q
%0dsqlC	n %xxsql
	s %xxsql("S",1)="DELETE %USECHECKVARIABLE FROM SQLUser . PersonProcess__SynchronizedResponses WHERE PersonProcess = :%parent"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","DEBUG")=$c(1),%xxsql("M","FORKNETDMN")=$c(1)
	s %xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1)
	s %xxsql("M","USELOST")=$c(1),%xxsql("M","ZVERSION")=$c(1),%xxsql("I","%occErrors")="",%xxsql("I","%occSqlfunc")="",%xxsql("I","%sySite")=""
	s %xxsql("I","%sySt")="",%xxsql("I","%sySystem")="",%xxsql("I","EnsConstants")="",%xxsql("I","EnsErrors")="",%xxsql("I","EnsUtil")=""
	s %xxsql("I","Ensemble")="",%xxsql("NS")="PROJECT1"
	d BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","User",0,"",),,"User.PersonProcessSynchronizedResponses.CLS")
	q
%SQLDeleteTempStreams()
	// Delete all temporary streams
	QUIT
%SQLEExit()
	do:%oper'="DELETE" ..%SQLUnlock2() do ..%SQLUnlock() 
	do ..%SQLUnlockRef()
	if %tstart,$zu(115,1)=1,$TLEVEL { set %tstart=0 TROLLBACK 1 } kill:$g(omcall) %0CacheSQLRA QUIT  
	Return
%SQLExists(pLockOnly=0,pUnlockRef,%pVal...)
	// SQL Foreign Key validation entry point for Key %1.  Called by FKeys that reference this Key to see if the row is defined
	new id set id=%pVal(1)
	if pLockOnly>=0 { if '..%SQLGetLock(id,1,.pUnlockRef) { set sqlcode=-114,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler39",,"SQLUser"_"."_"PersonProcess__SynchronizedResponses"_":"_"%1") QUIT 0 } }
	if pLockOnly<1 {
		new qv set qv='..%SQLCheckUnique(0,,%pVal(1)) QUIT:pLockOnly=-1 qv
		do:'$g(pUnlockRef) ..%SQLReleaseLock(id,1) quit qv
	}
	else { do:'$g(pUnlockRef) ..%SQLReleaseLock(id,1) QUIT 1 }
	Return
%SQLFKeyDelLock()
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLFKeyDelLock")
%SQLFastInsert(%check)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLFastInsert")
%SQLFieldValidate()
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLFieldValidate")
%SQLGetLock(pRowId,pShared=0,pUnlockRef)
	if $tlevel,$i(%0CacheLock("User.PersonProcessSynchronizedResponses"))>$zu(156,50,1) { new s set s=$e("S",pShared) lock +^Ens.BusinessProcessD#s:$zu(115,4) lock:$t -^Ens.BusinessProcessD#s QUIT $s($t:2,1:0) } 
	QUIT ..%SQLAcquireLock(pRowId,pShared,.pUnlockRef)
%SQLGetOld(%rowid,%d,%e,sqlcode)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLGetOld")
%SQLGetOldAll()
	// Get all old data values
	new SQLCODE,%ROWCOUNT
	 ;---&sql(SELECT _SynchronizedResponses INTO :%e() FROM %IGNOREINDEX * SQLUser.PersonProcess__SynchronizedResponses WHERE ID=:%rowid)
 	 ;--- ** SQL PUBLIC Variables: %e, %rowid, SQLCODE
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xELyB7dgryan0zBt27SzuRiRFZLD","%New") } catch { if $ze["<CLASS DOES NOT EXIST>"&&($ze["%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xELyB7dgryan0zBt27SzuRiRFZLD")||($ze["<ZSQLU>") { d %0dsqlE } else { throw } }
	set sqlcode=SQLCODE QUIT:sqlcode'=0
	QUIT
 q
%0dsqlE	n %xxsql
	s %xxsql("S",1)="SELECT _SynchronizedResponses INTO :%e() FROM %IGNOREINDEX * SQLUser . PersonProcess__SynchronizedResponses WHERE ID = :%rowid"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","DEBUG")=$c(1),%xxsql("M","FORKNETDMN")=$c(1)
	s %xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1)
	s %xxsql("M","USELOST")=$c(1),%xxsql("M","ZVERSION")=$c(1),%xxsql("I","%occErrors")="",%xxsql("I","%occSqlfunc")="",%xxsql("I","%sySite")=""
	s %xxsql("I","%sySt")="",%xxsql("I","%sySystem")="",%xxsql("I","EnsConstants")="",%xxsql("I","EnsErrors")="",%xxsql("I","EnsUtil")=""
	s %xxsql("I","Ensemble")="",%xxsql("NS")="PROJECT1"
	d BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","User",0,"",),,"User.PersonProcessSynchronizedResponses.CLS")
	q
%SQLGetOldIndex(%rowid,%d,pF=0,sqlcode)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLGetOldIndex")
%SQLInsert(%d,%check,%inssel,%vco,%tstart=1,%mv=0)
	// SQL INSERT method for table SQLUser.PersonProcess__SynchronizedResponses
	new bva,%ele,%itm,%key,%f,%l,%n,%nc,%oper,%pos,%s,sqlcode,sn,subs,unlockref set %oper="INSERT",sqlcode=0,%l=$c(0,0,0),unlockref=1
	if $a(%check,7) { new %diu merge %diu=%d }
	set:$d(%d(0)) subs(6)=$p(%d(0),"||",1)
	if '$a(%check),'..%SQLValidateFields(.sqlcode) { set SQLCODE=sqlcode RETURN "" }
	do:'$a(%check,8) ..%SQLNormalizeFields()
	if %tstart { TSTART:($zu(115,1)=1)||('$TLEVEL&&($zu(115,1)=2))  } set $zt="ERRORInsert"
	if '$a(%check),$g(%d(0))'="",'##class(User.PersonProcess).%SQLExists($s($a(%check,2)=1:-1,1:0),.unlockref,%d(0)) {
		if sqlcode<0 { set SQLCODE=sqlcode if SQLCODE=-114 { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler56",,%oper,"SQLUser"_"."_"PersonProcess",$g(%d(0))) } } else { set SQLCODE=-104,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler9",,"SQLUser"_"."_"PersonProcess__SynchronizedResponses") }
		do ..%SQLEExit() RETURN ""
	}
	if '$a(%check) { if $g(%d(0))="" { do ..%SQLMissing("PersonProcess") set SQLCODE=sqlcode do ..%SQLEExit() RETURN "" } if $g(%d(3))="" { do ..%SQLMissing("element_key") set SQLCODE=sqlcode do ..%SQLEExit() RETURN "" } }
	set %d(1)=%d(0)_"||"_%d(3),subs(6)=$p(%d(0),"||",1)
	if '$a(%check) {
		do {
			if $g(%vco)'="" { d @%vco quit:sqlcode<0  }
				// Constraint IDKEY
				if '$a(%check,2) { lock +^Ens.BusinessProcessD("IDKEY",%d(0),%d(3)):$zu(115,4) if $t { set $e(%l,2)=$c(1) } else { do ..%SQLUnlockError("IDKEY") quit  } }
				if '$a(%check,7) { if '..IDKEYSQLCheckUnique(0,,%d(0),%d(3)) { set sqlcode=-119,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler10",,"SQLUser"_"."_"PersonProcess__SynchronizedResponses","IDKEY","PersonProcess"_"="_$$quoter^%apiSQL($g(%d(0)))_","_"element_key"_"="_$$quoter^%apiSQL($g(%d(3)))) quit  }} // INSERT
				else { new tID set tID=..IDKEYSQLFindRowIDByConstraint($lb(%d(0),%d(3)),1) if tID'="" { kill %d merge %d=%diu kill %diu do ..%SQLUpdate(tID,%check,.%d),..%SQLUnlock2(),..%SQLUnlockRef() set $e(%check,7)=$c(2) quit  }} // INSERT OR UPDATE
		} while 0
		QUIT:$a(%check,7)=2 $s('SQLCODE:tID,1:"")				// INSERT became UPDATE
		if sqlcode<0 { set SQLCODE=sqlcode do ..%SQLEExit() RETURN "" }		// A constraint failed
	}
	if '$a(%check,2) { new %ls if $tlevel,$i(%0CacheLock("User.PersonProcessSynchronizedResponses"))>$zu(156,50,1) { lock +^Ens.BusinessProcessD:$zu(115,4) lock:$t -^Ens.BusinessProcessD set %ls=$s($t:2,1:0) } else { lock +^Ens.BusinessProcessD(subs(6),"%SynchronizedResponses",%d(3)):$zu(115,4) set %ls=$t } set:%ls=2 $e(%check,2)=$c(1) set:%ls=1 $e(%l)=$c(1) if '%ls set SQLCODE=-110,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler40",,%oper,"SQLUser"_"."_"PersonProcess__SynchronizedResponses",$g(%d(1))) do ..%SQLEExit() RETURN ""  }
	set ^Ens.BusinessProcessD(subs(6),"%SynchronizedResponses",%d(3))=$g(%d(2))
	lock:$a(%l,2) -^Ens.BusinessProcessD("IDKEY",%d(0),%d(3))#"D" 
	lock:$a(%l) -^Ens.BusinessProcessD(subs(6),"%SynchronizedResponses",%d(3))
	TCOMMIT:%tstart&&($zu(115,1)=1)
	do ..%SQLUnlockRef()
	set SQLCODE=0
	QUIT %d(1) 			// %SQLInsert
ERRORInsert	set $zt="",SQLCODE=-415,%msg=$s($g(%msg)'="":%msg_" -- ",1:"")_$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler51",,%oper,"SQLUser"_"."_"PersonProcess__SynchronizedResponses",$ze)
	if $ze["<FRAMESTACK>" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler52",,$ze,%oper,"SQLUser"_"."_"PersonProcess__SynchronizedResponses") do ##Class(%SYS.System).WriteToConsoleLog(%msg) if ($zu(67,10,$j)=1)||($zu(67,10,$j)=3) { write !,%msg h 3 } HALT  }
	do ..%SQLEExit()
	RETURN ""
%SQLInsertComputes(view=0)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLInsertComputes")
%SQLInsertStreams(pVal,pClassname,pProperty,pField,pChangeEmptyToNull,pOIDType,sqlcode,%msg) public {
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLInsertStreams") }
%SQLInvalid(pIcol,pVal) public {
	set:$l($g(pVal))>40 pVal=$e(pVal,1,40)_"..." do:'$d(%n) ..%SQLnBuild() set %msg=$s($g(%msg)'="":%msg_$c(13,10),1:"")_$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler37",,"SQLUser"_"."_"PersonProcess__SynchronizedResponses"_"."_$lg(%n,pIcol),$s($g(pVal)'="":$s(pVal="":"<NULL>",pVal=$c(0):"<EMPTY STRING>",1:"'"_pVal_"'"),1:"")),sqlcode=$s(%oper="INSERT":-104,1:-105)
	QUIT sqlcode }
%SQLInvalid2(ficol,val,char) [ sqlcode ] public {
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLInvalid2") }
%SQLMVDelete(oref,flags,%rowid,oldrec)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLMVDelete")
%SQLMVIndexDelete(%e)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLMVIndexDelete")
%SQLMVIndexInsert(%d)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLMVIndexInsert")
%SQLMVIndexUpdate(%d,%e)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLMVIndexUpdate")
%SQLMVInsert(oref,flags,%rowid,newrec)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLMVInsert")
%SQLMVUpdate(oref,flags,%rowid,newrec,oldrec)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLMVUpdate")
%SQLMissing(fname)
	set sqlcode=-108,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler47",,fname,"SQLUser"_"."_"PersonProcess__SynchronizedResponses") quit
%SQLNormalizeCompFields()
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLNormalizeCompFields")
%SQLNormalizeFields()
	set:$g(%d(0))'="" %d(0)=$select(%d(0)=$c(0)&&$zu(115,13):"",1:%d(0)\1)
	QUIT
%SQLPurgeIndices(pIndices="",pLockExtent=0,pIgnoreIndexList="")
	QUIT ##class(User.PersonProcess).%PurgeIndices(pIndices,pLockExtent,pIgnoreIndexList)
%SQLQuickBulkInsert(%nolock=0)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLQuickBulkInsert")
%SQLQuickBulkLoad(%rowidlist,%nolock=0,pkey=0)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLQuickBulkLoad")
%SQLQuickBulkSave(%nolock=0)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLQuickBulkSave")
%SQLQuickBulkUpdate(%nolock=0)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLQuickBulkUpdate")
%SQLQuickDelete(%rowid,%nolock=0,pkey=0)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLQuickDelete")
%SQLQuickDeleteChildren(%parent,%nolock=0,pkey=0)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLQuickDeleteChildren")
%SQLQuickFindPKeyByRowID(%rowid)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLQuickFindPKeyByRowID")
%SQLQuickFindRowIDByPKey(pPKey,pOutput=1,pInternal=0)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLQuickFindRowIDByPKey")
%SQLQuickInsert(d,%nolock=0,pkey=0,parentpkey=0)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLQuickInsert")
%SQLQuickLoad(%rowid,%nolock=0,pkey=0,qq=0)
	// Get fields from row where SQLRowID=%rowid
	new d,i,il,subs set:%nolock=2 %nolock=1
	if %nolock=0 { if '..%SQLAcquireLock(%rowid) { set %qrc=114,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler45",,"SQLUser"_"."_"PersonProcess__SynchronizedResponses",%rowid),%ROWCOUNT=0 QUIT  } set:$zu(115,2) il=$zu(115,2,0) }
	set d(1)=%rowid,d(0)=$p(d(1),"||",1),d(3)=$p(d(1),"||",2),subs(6)=$p(d(0),"||",1)
	new s,ul set ul=0,d(1)=%rowid if $zu(115,2)=1 { lock +^Ens.BusinessProcessD(subs(6),"%SynchronizedResponses",d(3))#"S":$zu(115,4) if $t { set ul=1 } else { set %qrc=114,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler46",,"SQLUser"_"."_"PersonProcess__SynchronizedResponses",%rowid),%ROWCOUNT=0 quit  } }
	if '$d(^Ens.BusinessProcessD(subs(6),"%SynchronizedResponses",d(3)),s) { set SQLCODE=100,%qrc=100 if %nolock=0 { do:$g(il) $zu(115,2,il) }} else { set SQLCODE=0
	if %nolock=0 { if $zu(115,1)=1 { TSTART  } elseif '$TLEVEL,$zu(115,1)=2 { TSTART  }} set d(2)=s  }
	do ..%SQLQuickLogicalToOdbc(.d)
	if SQLCODE set %ROWCOUNT=0 set:SQLCODE<0 SQLCODE=-SQLCODE lock:ul -^Ens.BusinessProcessD(subs(6),"%SynchronizedResponses",d(3))#"SI" set %qrc=SQLCODE QUIT
	set:qq d=$zobjexport("User.PersonProcessSynchronizedResponses",18),d=$zobjexport(4,18) set i=-1 for  { set i=$o(d(i)) quit:i=""  set d=$zobjexport(d(i),18) } set %qrc=0,%ROWCOUNT=1 lock:ul -^Ens.BusinessProcessD(subs(6),"%SynchronizedResponses",d(3))#"SI" if %nolock=0 { do ..%SQLReleaseLock(%rowid,0,0) do:$g(il) $zu(115,2,il) } QUIT
	Return
%SQLQuickLoadChildren(%parref,%nolock=0,pkey=0,returnpkey=0)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLQuickLoadChildren")
%SQLQuickLogicalToOdbc(%d)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLLogicalToOdbcFields")
%SQLQuickOdbcToLogical(%d)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLQuickOdbcToLogical")
%SQLQuickUpdate(%rowid,d,%nolock=0,pkey=0)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLQuickUpdate")
%SQLReleaseLock(%rowid,s=0,i=0,e="")
	new %d,subs
	set %d(1)=%rowid,%d(0)=$p(%d(1),"||",1),%d(3)=$p(%d(1),"||",2),subs(6)=$p(%d(0),"||",1) set s=$e("S",s)_$e("D",i)
	lock -^Ens.BusinessProcessD(subs(6),"%SynchronizedResponses",%d(3))#s
	set:i&&($g(%0CacheLock("User.PersonProcessSynchronizedResponses"))) %0CacheLock("User.PersonProcessSynchronizedResponses")=%0CacheLock("User.PersonProcessSynchronizedResponses")-1
	QUIT
%SQLReleaseTableLock(s=0,i=0)
	set s=$e("S",s)_$e("D",i) lock -^Ens.BusinessProcessD#s QUIT 1
	Return
%SQLStorageValidation()
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLStorageValidation")
%SQLTrigDelTab()
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLTrigDelTab")
%SQLTrigInsTab()
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLTrigInsTab")
%SQLUnlock()
	lock:$a(%l) -^Ens.BusinessProcessD(subs(6),"%SynchronizedResponses",%d(3))
	QUIT
%SQLUnlock2()
	lock:$a(%l,2) -^Ens.BusinessProcessD("IDKEY",%d(0),%d(3))#"D" QUIT
%SQLUnlockError(cname)
	set sqlcode=-110 if %oper="DELETE" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler48",,"SQLUser"_"."_"PersonProcess__SynchronizedResponses",cname) } else { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler49",,"SQLUser"_"."_"PersonProcess__SynchronizedResponses",cname) } quit
	Return
%SQLUnlockRef()
	for %itm=2:1:$g(unlockref) {
		if $lg(unlockref(%itm))'="%UnlockId" { lock -@$lg(unlockref(%itm))#$lg(unlockref(%itm),3) }
		else { do $classmethod($lg(unlockref(%itm),2),$lg(unlockref(%itm)),$lg(unlockref(%itm),3),1,1) }
		set:$g(%0CacheLock($lg(unlockref(%itm),2))) %0CacheLock($lg(unlockref(%itm),2))=%0CacheLock($lg(unlockref(%itm),2))-1
	}
	QUIT
%SQLUpdate(%rowid,%check,%d,%vco,%tstart=1,%mv=0,%polymorphic=0,%soid)
	// SQL UPDATE method for table SQLUser.PersonProcess__SynchronizedResponses
	new %e,bva,%ele,%itm,%key,%f,%l,%n,%nc,%oper,%pos,%s,icol,omcall,s,sn,sqlcode,subs,t set %oper="UPDATE",sqlcode=0,%ROWID=%rowid,$e(%e,1)=$c(0),%l=$c(0,0,0)
	if '$d(%0CacheSQLRA) { new %0CacheSQLRA set omcall=1 }
	if '$a(%check,7) {
		if '$a(%check),'..%SQLValidateFields(.sqlcode) { set SQLCODE=sqlcode QUIT  }
		do:'$a(%check,8) ..%SQLNormalizeFields()
	}
	if ($d(%d(1))&&($g(%d(1))'=%rowid))||($d(%d(0))&&($g(%d(0))'=$p(%rowid,"||",1)))||($d(%d(3))&&($g(%d(3))'=$p(%rowid,"||",2))) { set SQLCODE=-107,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler17",,"'ID', 'PersonProcess', or 'element_key'","SQLUser"_"."_"PersonProcess__SynchronizedResponses") QUIT  }
	for icol=2:1:3 { set $e(%e,icol)=$c($d(%d(icol))) }
	set %d(1)=%rowid,%e(1)=%rowid,%d(0)=$p(%d(1),"||",1),%d(3)=$p(%d(1),"||",2),subs(6)=$p(%d(0),"||",1)
	if '$a(%check,2) { new %ls if $tlevel,$i(%0CacheLock("User.PersonProcessSynchronizedResponses"))>$zu(156,50,1) { lock +^Ens.BusinessProcessD:$zu(115,4) lock:$t -^Ens.BusinessProcessD set %ls=$s($t:2,1:0) } else { lock +^Ens.BusinessProcessD(subs(6),"%SynchronizedResponses",%d(3)):$zu(115,4) set %ls=$t } set:%ls=2 $e(%check,2)=$c(1) set:%ls=1 $e(%l)=$c(1) if '%ls { set SQLCODE=-110,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler40",,%oper,"SQLUser"_"."_"PersonProcess__SynchronizedResponses",$g(%d(1))) RETURN  }} if %tstart { TSTART:($zu(115,1)=1)||('$TLEVEL&&($zu(115,1)=2))  }
	set $zt="ERRORUpdate"
	if $g(%vco)'="" { do ..%SQLGetOldAll() if sqlcode { set SQLCODE=-109,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler59",,"SQLUser"_"."_"PersonProcess__SynchronizedResponses",%rowid) do ..%SQLEExit() QUIT  } set:'$d(%d(2)) %d(2)=%e(2) set:%d(2)=%e(2) $e(%e,2)=$c(0)}
	if '$a(%check) {
		do {
			if $g(%vco)'="" { d @%vco quit:sqlcode<0  }
		} while 0
		if sqlcode { set SQLCODE=sqlcode do ..%SQLEExit() QUIT  }
	}
	set:$a(%e,2) ^Ens.BusinessProcessD(subs(6),"%SynchronizedResponses",%d(3))=$g(%d(2))
	do ..%SQLUnlock2()
	do ..%SQLUnlock() TCOMMIT:%tstart&&($zu(115,1)=1)
	set SQLCODE=0 kill:$g(omcall) %0CacheSQLRA
	QUIT
ERRORUpdate	set $zt="",SQLCODE=-415,%msg=$s($g(%msg)'="":%msg_" -- ",1:"")_$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler51",,%oper,"SQLUser"_"."_"PersonProcess__SynchronizedResponses",$ze) if $ze["<FRAMESTACK>" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler52",,$ze,%oper,"SQLUser"_"."_"PersonProcess__SynchronizedResponses") do ##Class(%SYS.System).WriteToConsoleLog(%msg) if ($zu(67,10,$j)=1)||($zu(67,10,$j)=3) { write !,%msg h 3 } HALT  } do ..%SQLEExit() QUIT  
	Return
%SQLUpdateComputes(view=0)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLUpdateComputes")
%SQLUpdateStreams(pNew,pOld,pClassname,pProperty,pField,pChangeEmptyToNull,pOIDType,sqlcode,%msg,pAllowOid=0) public {
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLUpdateStreams") }
%SQLValidateCompFields(sqlcode)
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLValidateCompFields")
%SQLValidateFields(sqlcode)
	new %f for %f=2,3 { if $g(%d(%f))'="",'(($l(%d(%f))'>50)) set sqlcode=..%SQLInvalid(%f+1,$g(%d(%f))) quit  } 
	QUIT 'sqlcode
%SQLicompView()
	QUIT $$Error^%apiOBJ(5758,"%Storage::%SQLicompView")
%SQLnBuild() public {
	set %n=$lb("ID","ID","_SynchronizedResponses","element_key")
	QUIT }
%ValidateIndices(idxList="",autoCorrect=0,lockOption=1,multiProcess=1,mapList,verbose=1,errors)
	w !,"There are no indices to validate for class 'User.PersonProcessSynchronizedResponses'"
	QUIT 1
zIDKEYSQLCheckUnique(pFromOrig=0,%pID,%pVals...)
	 ;---&sql(SELECT PersonProcess,element_key FROM SQLUser.PersonProcess__SynchronizedResponses WHERE  PersonProcess=:%pVals(1) AND element_key=:%pVals(2) AND (%ID <> :%pID OR :%pID IS NULL)) QUIT SQLCODE=100
 	 ;--- ** SQL PUBLIC Variables: %pID, %pVals, SQLCODE
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xEJs7P8Vv61cX6ynxBf4ljhTyQOR","%New") } catch { if $ze["<CLASS DOES NOT EXIST>"&&($ze["%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xEJs7P8Vv61cX6ynxBf4ljhTyQOR")||($ze["<ZSQLU>") { d %0dsqlG } else { throw } } QUIT SQLCODE=100
 q
%0dsqlG	n %xxsql
	s %xxsql("S",1)="SELECT PersonProcess , element_key FROM SQLUser . PersonProcess__SynchronizedResponses WHERE PersonProcess = :%pVals(1) AND element_key = :%pVals(2) AND ( %ID <> :%pID OR :%pID IS NULL )"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","DEBUG")=$c(1),%xxsql("M","FORKNETDMN")=$c(1)
	s %xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1)
	s %xxsql("M","USELOST")=$c(1),%xxsql("M","ZVERSION")=$c(1),%xxsql("I","%occErrors")="",%xxsql("I","%occSqlfunc")="",%xxsql("I","%sySite")=""
	s %xxsql("I","%sySt")="",%xxsql("I","%sySystem")="",%xxsql("I","EnsConstants")="",%xxsql("I","EnsErrors")="",%xxsql("I","EnsUtil")=""
	s %xxsql("I","Ensemble")="",%xxsql("NS")="PROJECT1"
	d BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","User",0,"",),,"User.PersonProcessSynchronizedResponses.CLS")
	q
zIDKEYSQLExists(pLockOnly=0,pUnlockRef,%pVal...)
	// SQL Foreign Key validation entry point for Key IDKEY.  Called by FKeys that reference this Key to see if the row is defined
	new id set id=..IDKEYSQLFindRowIDByConstraint($lb(%pVal(1),%pVal(2)),1) QUIT:SQLCODE $s('pLockOnly:0,1:1)
	if pLockOnly>=0 { if '..%SQLGetLock(id,1,.pUnlockRef) { set sqlcode=-114,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler39",,"SQLUser"_"."_"PersonProcess__SynchronizedResponses"_":"_"IDKEY") QUIT 0 } }
	if pLockOnly<1 {
		new qv set qv='..IDKEYSQLCheckUnique(0,,%pVal(1),%pVal(2)) QUIT:pLockOnly=-1 qv
		do:'$g(pUnlockRef) ..%SQLReleaseLock(id,1) quit qv
	}
	else { do:'$g(pUnlockRef) ..%SQLReleaseLock(id,1) QUIT 1 }
	Return
zIDKEYSQLFindRowIDByConstraint(%con,pInternal=0)
	// Get ROWID value for UNIQUE Key IDKEY value given in %con
	new %d,id,rtm set rtm=$zu(115,5,$s(pInternal:0,1:1)) set %d(0)=$lg(%con,1) set %d(3)=$lg(%con,2)
	set %ROWCOUNT=0 set:'pInternal %qrc=0
	 ;---&sql(SELECT %ID INTO :id FROM SQLUser.PersonProcess__SynchronizedResponses WHERE PersonProcess = :%d(0) AND element_key = :%d(3))
 	 ;--- ** SQL PUBLIC Variables: %d, SQLCODE, id
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xEpqMI8dICHrMn6PM6TyFtKpaauP","%New") } catch { if $ze["<CLASS DOES NOT EXIST>"&&($ze["%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xEpqMI8dICHrMn6PM6TyFtKpaauP")||($ze["<ZSQLU>") { d %0dsqlI } else { throw } }
	do $zu(115,5,rtm)
	if pInternal { QUIT:'SQLCODE $g(id) RETURN "" }
	if SQLCODE { set:SQLCODE<0 %qrc=-SQLCODE set:'%ROWCOUNT&&(SQLCODE=100) id="",%qrc=0 } set d=$zobjexport(id,18) QUIT
	Return
 q
%0dsqlI	n %xxsql
	s %xxsql("S",1)="SELECT %ID INTO :id FROM SQLUser . PersonProcess__SynchronizedResponses WHERE PersonProcess = :%d(0) AND element_key = :%d(3)"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","DEBUG")=$c(1),%xxsql("M","FORKNETDMN")=$c(1)
	s %xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1)
	s %xxsql("M","USELOST")=$c(1),%xxsql("M","ZVERSION")=$c(1),%xxsql("I","%occErrors")="",%xxsql("I","%occSqlfunc")="",%xxsql("I","%sySite")=""
	s %xxsql("I","%sySt")="",%xxsql("I","%sySystem")="",%xxsql("I","EnsConstants")="",%xxsql("I","EnsErrors")="",%xxsql("I","EnsUtil")=""
	s %xxsql("I","Ensemble")="",%xxsql("NS")="PROJECT1"
	d BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Runtime","","","User",0,"",),,"User.PersonProcessSynchronizedResponses.CLS")
	q
]]></Routine>


<Routine name="User.Peter.1" type="INT" languagemode="0" generated="1" timestamp="65833,51782.191972"><![CDATA[
 ;User.Peter.1
 ;Generated for class User.Peter.  Do NOT edit. 03/30/2021 02:23:02PM
 ;;3655744C;User.Peter
 ;
SQLUPPER(v,l) { quit $zu(28,v,7,$g(l,32767)) }
ALPHAUP(v,r) { quit $zu(28,v,6) }
STRING(v,l) { quit $zu(28,v,9,$g(l,32767)) }
SQLSTRING(v,l) { quit $zu(28,v,8,$g(l,32767)) }
UPPER(v) { quit $zu(28,v,5) }
MVR(v) { quit $zu(28,v,2) }
TRUNCATE(v,l) { quit $e(v,1,$g(l,3641144)) }
%BuildIndices(pIndexList="",pAutoPurge=1,pLockFlag=0,pJournalFlag=1,pStartID="",pEndID="",pIgnoreIndexList="") public {
	If (pIndexList="")||(($listlength(pIndexList)=1)&&($listget(pIndexList,1)="")) { Quit 1 }
	Quit $$Error^%apiOBJ(5066,$classname()_"::"_$ListToString(pIndexList)) }
%BuildIndicesSegment(pStartID,pEndID,pIndexHandle=0,pLockFlag=1,pFirstRange=0,pJob="") public {
	QUIT 1 }
%CheckConstraints(pID,pConstraintList="",pCheckDisabled=0,pErrorInfo) public {
	if (''..%OnDetermineClass($select(pID="":"",1:$listbuild(pID_"")),.tMSTC)) && (tMSTC '= $classname()) { quit $classmethod(tMSTC,"%CheckConstraints",pID,pConstraintList) } else { quit 1 } }
%CheckConstraintsForExtent(pConstraintList="",pCheckDisabled=0,pErrorLog) [ SQLCODE,tID ] public { New %ROWCOUNT,%ROWID,%msg,SQLCODE,tID 
	kill pErrorLog set tStatusAll = 1, pErrorLog = 0 if '$listvalid(pConstraintList) { set pConstraintList = $listfromstring(pConstraintList) }
	 ;---&sql(declare ext cursor for select %ID into :tID FROM SQLUser.Peters)
 	 ;--- ** SQL PUBLIC Variables: SQLCODE, tID
	 
	 ;---&sql(open ext)
	try { s %ext0141="",%ext0141=$classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xEKJuJCHHXE5n8u6n6FhFZeBBt23","%New") if '$isobject(%ext0141) s %ext0141=$$%0dsqlA() } catch { if $ze["<CLASS DOES NOT EXIST>"&&($ze["%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xEKJuJCHHXE5n8u6n6FhFZeBBt23")||($ze["<ZSQLU>") { s %ext0141=$$%0dsqlA() } else { throw } }
	if SQLCODE '< 0 {
		for {
			 ;---&sql(fetch ext)
 			 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE
			if $isobject($g(%ext0141))'=1 { s SQLCODE=-102 } else { do %ext0141.FET() if SQLCODE=0 { } }
			if SQLCODE { if SQLCODE=100 { quit } elseif SQLCODE<0 { set tStatusAll = $select(+tStatusAll:$$Error^%apiOBJ(5521,SQLCODE,$Get(%msg)),1:$$AppendStatus^%occSystem(tStatusAll,$$Error^%apiOBJ(5521,SQLCODE,$Get(%msg)))) quit } }
			set tStatus = ..%CheckConstraints(tID,pConstraintList,pCheckDisabled,.tErrorInfo)
			if ('tStatus) { set tStatusAll = $select(+tStatusAll:tStatus,1:$$AppendStatus^%occSystem(tStatusAll,tStatus)) set:pErrorLog<1000 pErrorLog = pErrorLog + 1, pErrorLog(pErrorLog) = tErrorInfo _ $Listbuild(tStatus) }
		}
		 ;---&sql(close ext)
		if '$isobject($get(%ext0141)) { set SQLCODE=-102 } else { set SQLCODE=0 kill %ext0141 }
	}
	quit tStatusAll }
 q
%0dsqlA()	n %xxsql
	s %xxsql("S",1)="DECLARE ext CURSOR FOR SELECT %ID INTO :tID FROM SQLUser . Peters"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("I","%occSqlfunc")="",%xxsql("NS")="PROJECT1"
	return $$BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","User",0,"",),",0,ext,","User.Peter.CLS",1)
%ComposeOid(id) public {
	set tCLASSNAME = $listget($g(^User.PeterD(id)),1)
	if tCLASSNAME="" { quit $select(id="":"",1:$listbuild(id_"","User.Peter")) }
	set tClass=$piece(tCLASSNAME,$extract(tCLASSNAME),*-1)
	set:tClass'["." tClass="User."_tClass
	quit $select(id="":"",1:$listbuild(id_"",tClass)) }
%DeleteData(id,concurrency) public {
	Quit:id="" $$Error^%apiOBJ(5812)
	set $Ztrap="DeleteDataERR" set lockok=0,sc=""
	If concurrency {
		Lock +(^User.PeterD(id)#"E"):$zu(115,4)
		Set lockok=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,2:2,4:2,:0))
		Set:lockok=2&&($tlevel) %0CacheLock($classname(),"E")=1
		If 'lockok {
			Quit $$Error^%apiOBJ(5803,$classname())
		}
	}
	If ($Data(^User.PeterD(id))) {
		If $data(^oddEXTR($classname())) {
			Set fc=""
			For {
				Set fc=$order(^rINDEXEXT("F",$classname(),"%1","f",fc))
				Quit:fc=""
				Set fk=""
				For {
					Set fk=$order(^rINDEXEXT("F",$classname(),"%1","f",fc,fk))
					Quit:fk=""
					Set sc=$classmethod(fc,fk_"Delete",id)
					If ('sc) { Goto DeleteDataEXIT }
				}
			}
			Set fc=""
			For {
				Set fc=$order(^rINDEXEXT("F",$classname(),"IDKEY","f",fc))
				Quit:fc=""
				Set fk=""
				For {
					Set fk=$order(^rINDEXEXT("F",$classname(),"IDKEY","f",fc,fk))
					Quit:fk=""
					Set sc=$classmethod(fc,fk_"Delete",id)
					If ('sc) { Goto DeleteDataEXIT }
				}
			}
		}
		Kill ^User.PeterD(id)
		Set sc=1
	}
	Else { Set sc=$$Error^%apiOBJ(5810,$classname(),id) }
DeleteDataEXIT
	If concurrency,lockok {
		Lock -(^User.PeterD(id)#"E")
	}
DeleteDataRET	Set $Ztrap = ""
	QUIT sc
DeleteDataERR	Set $Ztrap = "DeleteDataRET"
	Set sc = $$Error^%apiOBJ(5002,$ZE)
	Goto DeleteDataEXIT }
%Exists(oid="") public {
	Quit ..%ExistsId($listget(oid)) }
%ExistsId(id) public {
	Try { set tExists = $s(id="":0,$d(^User.PeterD(id)):1,1:0) } catch tException { set tExists = 0 if '(tException.%IsA("%Exception.SystemException")) { throw tException } elseif tException.Name'="<SUBSCRIPT>" { ZT $ZE } } quit tExists }
%FileIndices(id,pIndexHandle=0) public {
	Quit 1 }
%InsertBatch(objects,concurrency=0,useTransactions=0) public {
	try {
		set numerrs=0,errs="",cnt=0,ptr=0
		while $listnext(objects,ptr,data) {
			set cnt=cnt+1
			set lock=0
			if (useTransactions) tstart
			set id=$i(^User.PeterD)
			try {
				set tInnerException = ""
				;
				if concurrency { lock +(^User.PeterD(id)#"E"):$zu(115,4) set lock=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,2:2,4:2,:0)) set:lock=2&&($tlevel) %0CacheLock($classname(),"E")=1 if 'lock { Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5803,$classname())) } }
				set ^User.PeterD(id)=data
				if (useTransactions) { tcommit }
			}
			catch tInnerException {
				set newerr=$lb(cnt,tInnerException.AsStatus())
				if '($length(errs)+$length(newerr)>32767) { set numerrs=numerrs+1, errs=errs_newerr }
				if (useTransactions) && ($Tlevel) trollback
			}
			if lock lock -(^User.PeterD(id)#"E")
		}
	}
	catch tException {
		set newerr=$lb($g(cnt),tException.AsStatus())
		if '($length(errs)+$length(newerr)>32767) { set numerrs=numerrs+1, errs=errs_newerr }
	}
	QUIT ($lb(numerrs))_errs }
%KillExtentData(killstreams=0)
	If killstreams Kill ^User.PeterS
	Kill ^User.PeterD
	Quit 1
%LoadData(id) public {
	New %s1
	set $ZTrap="CatchError",locked=0,userze=$ze,$ze=""
	If i%%Concurrency=4 {
		Lock +(^User.PeterD(id)#"E"):$zu(115,4)
		if '$t do init s i%%Concurrency=0 s:$ze="" $ze=userze return $$Error^%apiOBJ(5803,$classname())
	} ElseIf i%%Concurrency>1 {
		Lock +(^User.PeterD(id)#"SE"):$zu(115,4)
		if '$t do init s i%%Concurrency=0 s:$ze="" $ze=userze return $$Error^%apiOBJ(5804,$classname())
		set locked = 1
	}
	If $d(^User.PeterD(id),%s1)#2 {
		If i%%Concurrency=2 { Lock -(^User.PeterD(id)#"SIE") }
		S i%Name=$lg(%s1,2),i%Surname=$lg(%s1,3),i%Age=$lg(%s1,4),i%Gender=$lg(%s1,5),i%Race=$lg(%s1,6),i%DOB=$lg(%s1,7)
		s:$ze="" $ze=userze
		Quit 1
	} Else {
		If i%%Concurrency=2 { Lock -(^User.PeterD(id)#"SIE") }
		do init
		set sc = $$Error^%apiOBJ(5809,$classname(),id) goto CatchError
	}
CatchError	set $ZTrap = "" if $ZE'="" { s sc = $$Error^%apiOBJ(5002,$ZE) }
	If ($get(locked))&&(i%%Concurrency<3) { Lock -(^User.PeterD(id)#"SIE") }
	if '('sc) { set sc=$$Error^%apiOBJ(5809,$classname(),id) }
	s:$ze="" $ze=userze
	return sc
init	Set i%Age="",i%DOB="",i%Gender="",i%Name="",i%Race="",i%Surname=""
	quit }
%LoadDataFromMemory(id,objstate,obj) public {
	New %s1
	If $d(objstate(id)) {
		Set %s1=$g(objstate(id))
		S i%Name=$lg(%s1,2),i%Surname=$lg(%s1,3),i%Age=$lg(%s1,4),i%Gender=$lg(%s1,5),i%Race=$lg(%s1,6),i%DOB=$lg(%s1,7)
		Quit 1
	} Else {
		Set i%Age="",i%DOB="",i%Gender="",i%Name="",i%Race="",i%Surname=""
		Quit $$Error^%apiOBJ(5809,$classname(),id)
	} }
%LockExtent(shared=0) public {
	If shared {
		Lock +(^User.PeterD#"S"):$zu(115,4) Quit:$t 1
		Quit $$Error^%apiOBJ(5799,$classname())
	}
	Lock +(^User.PeterD):$zu(115,4) Quit:$t 1
	Quit $$Error^%apiOBJ(5798,$classname()) }
%LockId(id,shared=0,timeout) public { s:'($d(timeout)#2) timeout=$zu(115,4)
	If id="" { Quit $$Error^%apiOBJ(5812) }
	Set sc=1
	If 'shared {
		Lock +(^User.PeterD(id)#"E"):timeout Quit:$t 1
		Quit $$Error^%apiOBJ(5803,id_":"_$classname())
	}
	Lock +(^User.PeterD(id)#"SE"):timeout Quit:$t 1
	Quit $$Error^%apiOBJ(5804,id_":"_$classname()) }
%NormalizeObject() public {
	If '$system.CLS.GetModified() Quit 1
	If m%Age Set:i%Age'="" i%Age=(..AgeNormalize(i%Age))
	If m%DOB Set:i%DOB'="" i%DOB=(..DOBNormalize(i%DOB))
	If m%Gender Set:i%Gender'="" i%Gender=(..GenderNormalize(i%Gender))
	If m%Name Set:i%Name'="" i%Name=(..NameNormalize(i%Name))
	If m%Race Set:i%Race'="" i%Race=(..RaceNormalize(i%Race))
	If m%Surname Set:i%Surname'="" i%Surname=(..SurnameNormalize(i%Surname))
	Quit 1 }
%OnDetermineClass(oid,class) public {
	Set id=$listget($get(oid))
	Quit:id="" $$Error^%apiOBJ(5812)
	Set idclass=$lg($get(^User.PeterD(id)),1)
	If idclass="" { Set class="User.Peter" Quit 1 }
	Set class=$piece(idclass,$extract(idclass),*-1)
	Set:class'["." class="User."_class
	QUIT 1 }
%PhysicalAddress(id,paddr)
	if $Get(id)="" Quit $$Error^%apiOBJ(5813,$classname())
	if (id="") { quit $$Error^%apiOBJ(5832,$classname(),id) }
	s paddr(1)=$lb($Name(^User.PeterD(id)),$classname(),"IDKEY","listnode",id)
	s paddr=1
	Quit 1
%PurgeIndices(idxlist="",lockExtent=0,pIgnoreIndexList="") public {
	If idxlist="" { Quit 1 }
	Quit $$Error^%apiOBJ(5066,$classname()_"::"_$ListToString(idxlist)) }
%SQLAcquireLock(%rowid,s=0,unlockref=0)
	new %d,gotlock
	set %d(1)=%rowid set s=$e("E",'unlockref)_$e("S",s)
	lock +^User.PeterD(%d(1))#s:$zu(115,4) set gotlock=$t
	if gotlock,'unlockref { set:$case($SYSTEM.Lock.ReturnCode(),2:1,4:1,:0)&&($tlevel) %0CacheLock("User.Peter","E")=1 }
	set:gotlock&&unlockref unlockref=unlockref+1,unlockref(unlockref)=$lb($name(^User.PeterD(%d(1))),"User.Peter",s_"D")
	QUIT gotlock
%SQLAcquireTableLock(s=0,SQLCODE,to="")
	set s=$e("S",s) set:to="" to=$zu(115,4) lock +^User.PeterD#s:to QUIT:$t 1 set SQLCODE=-110 if s="S" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler35",,"SQLUser"_"."_"Peters") } else { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler36",,"SQLUser"_"."_"Peters") } QUIT 0
	Return
%SQLBuildIndices(pIndices="",pLockFlag=0,pStartID="",pEndID="",pIgnoreIndexList="")
	QUIT ..%BuildIndices(pIndices,,pLockFlag,,pStartID,pEndID,pIgnoreIndexList)
%SQLBuildPurgeIndexForRow(pIndices="",pActions="BP",pLockRow=1,%d,%e,pIgnoreIndexList="")
	// Purge and build index nodes for a single row using given values, return Status Code
	new sn,tSC,tLock set tSC=1,pActions=$zcvt(pActions,"U")
	try {
		if $g(%d(1))="" { set tSC=$select(+tSC:$$Error^%apiOBJ(5521,-108,"RowID value must be specified in %d(1) when calling %SQLBuildPurgeIndexForRow for table 'SQLUser.Peters'"),1:$$AppendStatus^%occSystem(tSC,$$Error^%apiOBJ(5521,-108,"RowID value must be specified in %d(1) when calling %SQLBuildPurgeIndexForRow for table 'SQLUser.Peters'"))) RETURN tSC }
		if pLockRow { if '..%SQLAcquireLock(%d(1)) { set tSC=$select(+tSC:$$Error^%apiOBJ(5521,-114,"Unable to lock row in table 'SQLUser.Peters' with %ID = '"_%d(1)_"'"),1:$$AppendStatus^%occSystem(tSC,$$Error^%apiOBJ(5521,-114,"Unable to lock row in table 'SQLUser.Peters' with %ID = '"_%d(1)_"'"))) RETURN tSC  } else { set tLock=1 }}
		if pLockRow { do ..%SQLReleaseLock(%d(1),0,0) set tLock=0 }
	}
	catch {
		if $g(tLock) { do ..%SQLReleaseLock(%d(1),0,0) }
		set tSC=$select(+tSC:$$Error^%apiOBJ(5594,$ze),1:$$AppendStatus^%occSystem(tSC,$$Error^%apiOBJ(5594,$ze)))
	}
	QUIT tSC
%SQLCopyIcolIntoName()
	if %oper="DELETE" {
		set:$d(%d(1)) %f("ID")=%d(1)
		QUIT
	}
	set:$d(%d(1)) %f("ID")=%d(1) set:$a(%e,2)&&$d(%d(2)) %f("Age")=%d(2) set:$a(%e,3)&&$d(%d(3)) %f("DOB")=%d(3) set:$a(%e,4)&&$d(%d(4)) %f("Gender")=%d(4) set:$a(%e,5)&&$d(%d(5)) %f("Name")=%d(5) set:$a(%e,6)&&$d(%d(6)) %f("Race")=%d(6) set:$a(%e,7)&&$d(%d(7)) %f("Surname")=%d(7) set:$a(%e,8)&&$d(%d(8)) %f("x__classname")=%d(8)
	QUIT
%SQLDefineiDjVars(%d,subs,master)
	QUIT
%SQLDelete(%rowid,%check,%tstart=1,%mv=0,%polymorphic=0)
	// SQL DELETE method for table SQLUser.Peters
	new bva,ce,%d,dc,%e,%ele,%itm,%key,%l,%nc,omcall,%oper,%pos,%s,sn,sqlcode,subs set %oper="DELETE",sqlcode=0,%ROWID=%rowid,%d(1)=%rowid,%e(1)=%rowid,%l=$c(0)
	if '$d(%0CacheSQLRA) { new %0CacheSQLRA set omcall=1 }
	if '$a(%check,2) {
		new %ls lock +^User.PeterD(%d(1))#"E":$zu(115,4) set %ls=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,4:2,2:2,1:3,:""))
		set:%ls=2 $e(%check,2)=$c(1) set:%ls=2&&($tlevel) %0CacheLock("User.Peter","E")=1 set:$case(%ls,1:1,2:1,:0) $e(%l)=$c(1)
		if '%ls||(%ls=3) { set SQLCODE=-110,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer",$s('%ls:"SQLFiler40",1:"SQLFiler55"),,%oper,"SQLUser"_"."_"Peters",$g(%d(1))) RETURN  }
	}
	if %tstart { TSTART:($zu(115,1)=1)||('$TLEVEL&&($zu(115,1)=2))  }
	set $zt="ERRORDelete"
	do ..%SQLGetOld(%rowid,.%d,.%e,.sqlcode) if sqlcode { set SQLCODE=-106,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler58",,"SQLUser"_"."_"Peters",%rowid) do ..%SQLEExit() QUIT  }
	if %e(8)'="" { set sn=$p(%e(8),$e(%e(8)),$l(%e(8),$e(%e(8)))-1) if "Peter"'=sn { new %f do ..%SQLCopyIcolIntoName() do $classmethod(sn,"%SQLDelete",%rowid,%check,%tstart,%mv,1) QUIT  }}
	if '$a(%check),'$zu(115,7) do  if sqlcode set SQLCODE=sqlcode do ..%SQLEExit() QUIT  
	. new %fk,%k,%p,%st,%t,%z set %k="",%p("%1")="%d(1),",%p("IDKEY")="%d(1),"
	. for  quit:sqlcode<0  set %k=$o(^rINDEXEXT("F","User.Peter",%k)) quit:%k=""  set %t="" for  set %t=$o(^rINDEXEXT("F","User.Peter",%k,"f",%t)) quit:%t=""  set %st=(%t="User.Peter") set %fk="" for  set %fk=$o(^rINDEXEXT("F","User.Peter",%k,"f",%t,%fk)) quit:%fk=""  x "set %z=$classmethod(%t,%fk_""SQLFKeyRefAction"",%st,%k,$a(%check,2),"_%p(%k)_")" if %z set sqlcode=-124 quit  
	set ce="" for  { set ce=$order(^oddSQL("SQLUser","Peters","DC",ce)) quit:ce=""   do $classmethod(ce,"%SQLDeleteChildren",%d(1),%check,.sqlcode) quit:sqlcode<0  } if sqlcode<0 { set SQLCODE=sqlcode do ..%SQLEExit() QUIT } // Delete any children
	if '$a(%check,3) {
	}
	k ^User.PeterD(%d(1))
	do ..%SQLUnlock() TCOMMIT:%tstart&&($zu(115,1)=1)
	set SQLCODE=0 kill:$g(omcall) %0CacheSQLRA
	QUIT
ERRORDelete	set $zt="",SQLCODE=-415,%msg=$s($g(%msg)'="":%msg_" -- ",1:"")_$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler51",,%oper,"SQLUser"_"."_"Peters",$ze) if $ze["<FRAMESTACK>" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler52",,$ze,%oper,"SQLUser"_"."_"Peters") do ##Class(%SYS.System).WriteToConsoleLog(%msg) if ($zu(67,10,$j)=1)||($zu(67,10,$j)=3) { write !,%msg h 3 } HALT  } do ..%SQLEExit() QUIT
	Return
%SQLDeleteTempStreams()
	// Delete all temporary streams
	QUIT
%SQLEExit()
	do ..%SQLUnlock() 
	if %tstart,$zu(115,1)=1,$TLEVEL { set %tstart=0 TROLLBACK 1 } kill:$g(omcall) %0CacheSQLRA QUIT  
	Return
%SQLExists(pLockOnly=0,pUnlockRef,%pVal...)
	// SQL Foreign Key validation entry point for Key %1.  Called by FKeys that reference this Key to see if the row is defined
	new id set id=%pVal(1)
	if pLockOnly>=0 { if '..%SQLGetLock(id,1,.pUnlockRef) { set sqlcode=-114,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler39",,"SQLUser"_"."_"Peters"_":"_"%1") QUIT 0 } }
	if pLockOnly<1 {
		new qv set qv=$d(^User.PeterD(%pVal(1))) QUIT:pLockOnly=-1 qv
		do:'$g(pUnlockRef) ..%SQLReleaseLock(id,1) quit qv
	}
	else { do:'$g(pUnlockRef) ..%SQLReleaseLock(id,1) QUIT 1 }
	Return
%SQLGetLock(pRowId,pShared=0,pUnlockRef)
	QUIT ..%SQLAcquireLock(pRowId,pShared,.pUnlockRef)
%SQLGetOld(%rowid,%d,%e,sqlcode)
	new s set %d(1)=%rowid,s="" if '$d(^User.PeterD(%d(1)),s) { set sqlcode=100 quit  }
	 S %e(8)=$lg(s)
	QUIT
%SQLGetOldAll()
	new s set %d(1)=%rowid,s="" if '$d(^User.PeterD(%d(1)),s) { set sqlcode=100 quit  }
	 S $lg(%e(8),%e(5),%e(7),%e(2),%e(4),%e(6),%e(3))=s
	QUIT
%SQLInsert(%d,%check,%inssel,%vco,%tstart=1,%mv=0)
	// SQL INSERT method for table SQLUser.Peters
	new bva,%ele,%itm,%key,%f,%l,%n,%nc,%oper,%pos,%s,sqlcode,sn,subs,icol set %oper="INSERT",sqlcode=0,%l=$c(0,0,0)
	if $a(%check,7) { new %diu merge %diu=%d }
	if $d(%d(1)),'$zu(115,11) { if %d(1)'="" { set SQLCODE=-111,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler6",,"ID","SQLUser"_"."_"Peters") RETURN ""  } kill %d(1) } 
	if '$a(%check),'..%SQLValidateFields(.sqlcode) { set SQLCODE=sqlcode RETURN "" }
	do:'$a(%check,8) ..%SQLNormalizeFields()
	if %tstart { TSTART:($zu(115,1)=1)||('$TLEVEL&&($zu(115,1)=2))  } set $zt="ERRORInsert"
	if '$a(%check) {
		do {
			if $g(%vco)'="" { d @%vco quit:sqlcode<0  }
		} while 0
		if sqlcode<0 { set SQLCODE=sqlcode do ..%SQLEExit() RETURN "" }		// A constraint failed
	}
	if '$d(%d(1)) { set %d(1)=$i(^User.PeterD) } elseif %d(1)>$g(^User.PeterD) { if $i(^User.PeterD,$zabs(%d(1)-$g(^User.PeterD))) {}} elseif $d(^User.PeterD(%d(1))) { set SQLCODE=-119,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler33",,"ID",%d(1),"SQLUser"_"."_"Peters"_"."_"ID") do ..%SQLEExit() RETURN "" }
	set:'($d(%d(8))#2) %d(8)=""
	if '$a(%check,2) {
		new %ls lock +^User.PeterD(%d(1))#"E":$zu(115,4) set %ls=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,4:2,2:2,1:3,:""))
		set:%ls=2 $e(%check,2)=$c(1) set:%ls=2&&($tlevel) %0CacheLock("User.Peter","E")=1 set:$case(%ls,1:1,2:1,:0) $e(%l)=$c(1)
		if '%ls||(%ls=3) { set SQLCODE=-110,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer",$s('%ls:"SQLFiler40",1:"SQLFiler55"),,%oper,"SQLUser"_"."_"Peters",$g(%d(1))) do ..%SQLEExit() RETURN ""  }
	}
	set ^User.PeterD(%d(1))=$lb(%d(8),%d(5),%d(7),%d(2),%d(4),%d(6),%d(3))
	lock:$a(%l) -^User.PeterD(%d(1))#"E"
	TCOMMIT:%tstart&&($zu(115,1)=1)
	set SQLCODE=0
	QUIT %d(1) 			// %SQLInsert
ERRORInsert	set $zt="",SQLCODE=-415,%msg=$s($g(%msg)'="":%msg_" -- ",1:"")_$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler51",,%oper,"SQLUser"_"."_"Peters",$ze)
	if $ze["<FRAMESTACK>" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler52",,$ze,%oper,"SQLUser"_"."_"Peters") do ##Class(%SYS.System).WriteToConsoleLog(%msg) if ($zu(67,10,$j)=1)||($zu(67,10,$j)=3) { write !,%msg h 3 } HALT  }
	do ..%SQLEExit()
	RETURN ""
%SQLInvalid(pIcol,pVal) public {
	set:$l($g(pVal))>40 pVal=$e(pVal,1,40)_"..." do:'$d(%n) ..%SQLnBuild() set %msg=$s($g(%msg)'="":%msg_$c(13,10),1:"")_$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler37",,"SQLUser"_"."_"Peters"_"."_$lg(%n,pIcol),$s($g(pVal)'="":$s(pVal="":"<NULL>",pVal=$c(0):"<EMPTY STRING>",1:"'"_pVal_"'"),1:"")),sqlcode=$s(%oper="INSERT":-104,1:-105)
	QUIT sqlcode }
%SQLMissing(fname)
	set sqlcode=-108,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler47",,fname,"SQLUser"_"."_"Peters") quit
%SQLNormalizeFields()
	new %f for %f=2,3 { set:$g(%d(%f))'="" %d(%f)=$select(%d(%f)=$c(0)&&$zu(115,13):"",1:%d(%f)\1) }
	QUIT
%SQLPurgeIndices(pIndices="",pLockExtent=0,pIgnoreIndexList="")
	QUIT ..%PurgeIndices(pIndices,pLockExtent,pIgnoreIndexList)
%SQLQuickLoad(%rowid,%nolock=0,pkey=0,qq=0)
	// Get fields from row where SQLRowID=%rowid
	new d,i,il,subs set:%nolock=2 %nolock=1
	if %nolock=0 { if '..%SQLAcquireLock(%rowid) { set %qrc=114,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler45",,"SQLUser"_"."_"Peters",%rowid),%ROWCOUNT=0 QUIT  } set:$zu(115,2) il=$zu(115,2,0) }
	new s,ul set ul=0,d(1)=%rowid if $zu(115,2)=1 { lock +^User.PeterD(d(1))#"S":$zu(115,4) if $t { set ul=1 } else { set %qrc=114,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler46",,"SQLUser"_"."_"Peters",%rowid),%ROWCOUNT=0 quit  } }
	if '$d(^User.PeterD(d(1)),s) { set SQLCODE=100,%qrc=100 if %nolock=0 { do:$g(il) $zu(115,2,il) }} else { set SQLCODE=0
	if qq { set d(8)=$lg(s) if d(8)'="" { new sn set sn=$p(d(8),$e(d(8)),$l(d(8),$e(d(8)))-1) if "Peter"'=sn { if %nolock=0 { do ..%SQLReleaseLock(%rowid,0,1) do:$g(il) $zu(115,2,il) } kill d set:sn'["." sn="User."_sn do $classmethod(sn,"%SQLQuickLoad",%rowid,%nolock,0,1) QUIT  }}}
	set d(2)=$lg(s,4) set d(3)=$lg(s,7) set d(4)=$lg(s,5) set d(5)=$lg(s,2) set d(6)=$lg(s,6) set d(7)=$lg(s,3) set d(8)=$lg(s)  }
	do ..%SQLQuickLogicalToOdbc(.d)
	if SQLCODE set %ROWCOUNT=0 set:SQLCODE<0 SQLCODE=-SQLCODE lock:ul -^User.PeterD(d(1))#"SI" set %qrc=SQLCODE QUIT
	set:qq d=$zobjexport("User.Peter",18),d=$zobjexport(8,18) set i=-1 for  { set i=$o(d(i)) quit:i=""  set d=$zobjexport(d(i),18) } set %qrc=0,%ROWCOUNT=1 lock:ul -^User.PeterD(d(1))#"SI" if %nolock=0 { do ..%SQLReleaseLock(%rowid,0,0) do:$g(il) $zu(115,2,il) } QUIT
	Return
%SQLReleaseLock(%rowid,s=0,i=0,e="")
	new %d
	set:e="" e=1 set %d(1)=%rowid set s=$e("E",e)_$e("S",s)_$e("D",i)
	lock -^User.PeterD(%d(1))#s
	QUIT
%SQLReleaseTableLock(s=0,i=0)
	set s=$e("S",s)_$e("D",i) lock -^User.PeterD#s QUIT 1
	Return
%SQLUnlock()
	lock:$a(%l) -^User.PeterD(%d(1))#"E"
	QUIT
%SQLUnlockError(cname)
	set sqlcode=-110 if %oper="DELETE" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler48",,"SQLUser"_"."_"Peters",cname) } else { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler49",,"SQLUser"_"."_"Peters",cname) } quit
	Return
%SQLUpdate(%rowid,%check,%d,%vco,%tstart=1,%mv=0,%polymorphic=0,%soid)
	// SQL UPDATE method for table SQLUser.Peters
	new %e,bva,%ele,%itm,%key,%f,%l,%n,%nc,%oper,%pos,%s,icol,omcall,s,sn,sqlcode,subs,t set %oper="UPDATE",sqlcode=0,%ROWID=%rowid,$e(%e,1)=$c(0),%l=$c(0,0,0)
	if '$d(%0CacheSQLRA) { new %0CacheSQLRA set omcall=1 }
	if '$a(%check,7) {
		if '$a(%check),'..%SQLValidateFields(.sqlcode) { set SQLCODE=sqlcode QUIT  }
		do:'$a(%check,8) ..%SQLNormalizeFields()
	}
	if $d(%d(1)),%d(1)'=%rowid { set SQLCODE=-107,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler16",,"ID","SQLUser"_"."_"Peters") QUIT  }
	for icol=2:1:8 { set $e(%e,icol)=$c($d(%d(icol))) }
	set %d(1)=%rowid,%e(1)=%rowid
	if '$a(%check,2) {
		new %ls lock +^User.PeterD(%d(1))#"E":$zu(115,4) set %ls=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,4:2,2:2,1:3,:""))
		set:%ls=2 $e(%check,2)=$c(1) set:%ls=2&&($tlevel) %0CacheLock("User.Peter","E")=1 set:$case(%ls,1:1,2:1,:0) $e(%l)=$c(1)
		if '%ls||(%ls=3) { set SQLCODE=-110,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer",$s('%ls:"SQLFiler40",1:"SQLFiler55"),,%oper,"SQLUser"_"."_"Peters",$g(%d(1))) RETURN  }
	}
	if %tstart { TSTART:($zu(115,1)=1)||('$TLEVEL&&($zu(115,1)=2))  }
	set $zt="ERRORUpdate"
	if $g(%vco)="" { do ..%SQLGetOld(%rowid,.%d,.%e,.sqlcode) i sqlcode { s SQLCODE=-109,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler59",,"SQLUser"_"."_"Peters",%rowid) do ..%SQLEExit() QUIT  } set:'$d(%d(8)) %d(8)=%e(8) set:%d(8)=%e(8) $e(%e,8)=$c(0) } else { do ..%SQLGetOldAll() if sqlcode { set SQLCODE=-109,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler59",,"SQLUser"_"."_"Peters",%rowid) do ..%SQLEExit() QUIT  } for icol=2,3,4,5,6,7,8 { set:'$d(%d(icol)) %d(icol)=%e(icol) set:%d(icol)=%e(icol) $e(%e,icol)=$c(0) }}
	if %e(8)'="" set sn=$p(%e(8),$e(%e(8)),$l(%e(8),$e(%e(8)))-1) if "Peter"'=sn new %f do ..%SQLCopyIcolIntoName() do $classmethod(sn,"%SQLUpdate",%rowid,%check,.%d,$g(%vco),%tstart,%mv,1) QUIT
	if '$a(%check) {
		do {
			if $g(%vco)'="" { d @%vco quit:sqlcode<0  }
		} while 0
		if sqlcode { set SQLCODE=sqlcode do ..%SQLEExit() QUIT  }
	}
	if $s($a(%e,2):1,$a(%e,3):1,$a(%e,4):1,$a(%e,5):1,$a(%e,6):1,$a(%e,7):1,1:$a(%e,8)) {
		set ^User.PeterD(%d(1))=$listupdate($g(^User.PeterD(%d(1))),1,$a(%e,8):%d(8),$a(%e,5):%d(5),$a(%e,7):%d(7),$a(%e,2):%d(2),$a(%e,4):%d(4),$a(%e,6):%d(6),$a(%e,3):%d(3))
	}
	do ..%SQLUnlock() TCOMMIT:%tstart&&($zu(115,1)=1)
	set SQLCODE=0 kill:$g(omcall) %0CacheSQLRA
	QUIT
ERRORUpdate	set $zt="",SQLCODE=-415,%msg=$s($g(%msg)'="":%msg_" -- ",1:"")_$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler51",,%oper,"SQLUser"_"."_"Peters",$ze) if $ze["<FRAMESTACK>" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler52",,$ze,%oper,"SQLUser"_"."_"Peters") do ##Class(%SYS.System).WriteToConsoleLog(%msg) if ($zu(67,10,$j)=1)||($zu(67,10,$j)=3) { write !,%msg h 3 } HALT  } do ..%SQLEExit() QUIT  
	Return
%SQLValidateFields(sqlcode)
	new %f for %f=2,3 { if $g(%d(%f))'="",'($select(%d(%f)=$c(0)&&$zu(115,13):1,$isvalidnum(%d(%f),0):1,1:$$Error^%apiOBJ(7207,%d(%f)))) set sqlcode=..%SQLInvalid(%f+1,$g(%d(%f))) quit  } 
	for %f=4,5,6,7 { if $g(%d(%f))'="",'(($l(%d(%f))'>50)) set sqlcode=..%SQLInvalid(%f+1,$g(%d(%f))) quit  } 
	QUIT 'sqlcode
%SQLnBuild() public {
	set %n=$lb(,"ID","Age","DOB","Gender","Name","Race","Surname","x__classname")
	QUIT }
%SaveData(id) public {
	try {
		set id=$listget(i%"%%OID") if id'="" { set insert=0,idassigned=1 } else { set insert=1,idassigned=0 }
		set lock=0,lockok=0,tSharedLock=0
		if 'idassigned { set id=$i(^User.PeterD) do ..%IdSet(id) set:$g(%objtxSTATUS)=2 %objtxOIDASSIGNED(+$this)="" }
		try {
			set tInnerException = ""
			;
			if 'insert {
				if (i%%Concurrency<4)&&(i%%Concurrency) { lock +(^User.PeterD(id)#"E"):$zu(115,4) set lockok=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,2:2,4:2,:0)) set:lockok=2&&($tlevel) %0CacheLock($classname(),"E")=1 if lockok { set lock=1 } else { Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5803,$classname())) } }
				if ('$Data(^User.PeterD(id))) {
					set insert=1
					if lock { lock -(^User.PeterD(id)#"E") set (lock,lockok) = 0 }
				}
			}
			if insert {
				if ('lockok&&..%Concurrency&&$tlevel)||(i%%Concurrency=4) {  lock +(^User.PeterD(id)#"E"):$zu(115,4) set lockok=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,2:2,4:2,:0)) set:(lockok=2&&(i%%Concurrency'=4)) %0CacheLock($classname(),"E")=1 set:lockok lock=1 if 'lockok { Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5803,$classname())) } }
				if i%%Concurrency=3 { lock +(^User.PeterD(id)#"ES") set tSharedLock=1 }
				set ^User.PeterD(id)=$lb("",i%Name,i%Surname,i%Age,i%Gender,i%Race,i%DOB)
			}
			else {
				set ^User.PeterD(id)=$lb("",i%Name,i%Surname,i%Age,i%Gender,i%Race,i%DOB)
			}
			set tStatus = 1
		}
		catch tInnerException {
			if ('idassigned) { Set $zobjoid("",$listget(i%"%%OID"))="",i%"%%OID"="" kill:$g(%objtxSTATUS)=2 %objtxOIDASSIGNED(+$this) }
			if (tSharedLock) {  lock -(^User.PeterD(id)#"ES") } elseif (lockok=1)&&(insert)&&(i%%Concurrency=4) {  lock -(^User.PeterD(id)) }
		}
		if lock lock -(^User.PeterD(id)#"E")
		if $Isobject(tInnerException) { throw tInnerException }
	}
	catch tException {
		set tStatus = tException.AsStatus()
	}
	quit tStatus }
%SaveDirect(id="",idList="",data,concurrency=-1) public {
	try {
		if concurrency=-1 { set concurrency=$zu(115,10) }
		if id'="" { set insert=0,idassigned=1 } else { set insert=1,idassigned=0 }
		set lock=0,tSharedLock=0
		if 'idassigned { set id=$i(^User.PeterD) }
		try {
			set tInnerException = ""
			;
			if 'insert {
				if concurrency { lock +(^User.PeterD(id)#"E"):$zu(115,4) set lock=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,2:2,4:2,:0)) set:lock=2&&($tlevel) %0CacheLock($classname(),"E")=1 if 'lock { Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5803,$classname())) } }
				if ('$Data(^User.PeterD(id))) {
					set insert=1
					if lock { lock -(^User.PeterD(id)#"E") set (lock,lockok) = 0 }
				}
			}
			if insert {
				if concurrency { lock +(^User.PeterD(id)#"E"):$zu(115,4) set lock=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,2:2,4:2,:0)) set:lock=2&&($tlevel) %0CacheLock($classname(),"E")=1 if 'lock { Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5803,$classname())) } }
				set ^User.PeterD(id)=data
			}
			else {
				set ^User.PeterD(id)=data
			}
			set tStatus = 1
		}
		catch tInnerException {
		}
		if lock lock -(^User.PeterD(id)#"E")
		if $Isobject(tInnerException) { throw tInnerException }
	}
	catch tException {
		set tStatus = tException.AsStatus()
	}
	quit tStatus }
%SaveIndices(pStartId="",pEndId="",lockExtent=0) public {
	Quit 1 }
%SortBegin(idxlist="",excludeunique=0)
	Quit 1
%SortEnd(idxlist="",commit=1,excludeunique=0) public {
	Quit 1 }
%UnlockExtent(shared=0,immediate=0) public {
	If 'shared {
		If 'immediate {
			Lock -^User.PeterD
			 Quit 1
		}
		Lock -^User.PeterD#"I"
		Quit 1
	}
	If 'immediate {
		Lock -^User.PeterD#"S"
		Quit 1
	}
	Lock -^User.PeterD#"SI"
	Quit 1 }
%UnlockId(id,shared=0,immediate=0) public {
	If 'shared {
		If 'immediate {
			Lock -(^User.PeterD(id)#"E")
			Quit 1
		}
		Lock -(^User.PeterD(id)#"IE")
		Quit 1
	}
	If 'immediate {
		Lock -(^User.PeterD(id)#"SE")
		Quit 1
	}
	Lock -(^User.PeterD(id)#"SIE")
	Quit 1 }
%ValidateIndices(idxList="",autoCorrect=0,lockOption=1,multiProcess=1,mapList,verbose=1,errors)
	w !,"There are no indices to validate for class 'User.Peter'"
	QUIT 1
%ValidateObject(unused=0,checkserial=1) public {
	set sc=1
	If '$system.CLS.GetModified() Quit sc
	If m%Age Set iv=..Age If iv'="" Set rc=(..AgeIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"Age",iv)
	If m%DOB Set iv=..DOB If iv'="" Set rc=(..DOBIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"DOB",iv)
	If m%Gender Set iv=..Gender If iv'="" Set rc=(..GenderIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"Gender",iv)
	If m%Name Set iv=..Name If iv'="" Set rc=(..NameIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"Name",iv)
	If m%Race Set iv=..Race If iv'="" Set rc=(..RaceIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"Race",iv)
	If m%Surname Set iv=..Surname If iv'="" Set rc=(..SurnameIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"Surname",iv)
	Quit sc }
zPopulate(count=10,verbose=0,DeferIndices=1,objects=0,tune=1,deterministic=0)
	New errcnt,i,id,keepobjects,obj,save,saved
	Set saved=0,keepobjects=0,errcnt=0
	Do $ZU(165,0,$S(deterministic:481516,1:$RANDOM(99999999)))
	If objects Set keepobjects=1,objects=0
	If DeferIndices Do ..%SortBegin("",1)
	Kill ^||%Populate
	For i=1:1:count Do  if errcnt>1000 write:verbose !,"over 1,000 errors encountered with no successful save - exiting" quit
	. Set obj=##class(User.Peter).%New()
	. Set obj.Age=##class(%Library.PopulateUtils).Integer(,)
	. Set obj.DOB=##class(%Library.PopulateUtils).Integer(,)
	. Set obj.Gender=##class(%Library.PopulateUtils).String(50)
	. Set obj.Name=##class(%Library.PopulateUtils).Name()
	. Set obj.Race=##class(%Library.PopulateUtils).String(50)
	. Set obj.Surname=##class(%Library.PopulateUtils).String(50)
	. If 'keepobjects Do
	. . Set save=obj.%Save()
	. . If (''save) Set saved=saved+1,errcnt=0 If verbose Write !,"Object saved...",saved
	. . If ('save) set errcnt=errcnt+1 if verbose Do DisplayError^%apiOBJ(save)
	. If keepobjects Set objects($Increment(objects))=obj
	. Set obj=""
	Kill ^||%Populate
	If DeferIndices Do ..%SortEnd(,,1)
	If tune Do TuneTable^%apiSQL("SQLUser.Peters",1,verbose,.%msg,1)
	Quit saved
zAgeGetStored(id) public {
	Quit $Select(id'="":$listget($g(^User.PeterD(id)),4),1:"") }
zDOBGetStored(id) public {
	Quit $Select(id'="":$listget($g(^User.PeterD(id)),7),1:"") }
zGenderGetStored(id) public {
	Quit $Select(id'="":$listget($g(^User.PeterD(id)),5),1:"") }
zNameGetStored(id) public {
	Quit $Select(id'="":$listget($g(^User.PeterD(id)),2),1:"") }
zRaceGetStored(id) public {
	Quit $Select(id'="":$listget($g(^User.PeterD(id)),6),1:"") }
zSurnameGetStored(id) public {
	Quit $Select(id'="":$listget($g(^User.PeterD(id)),3),1:"") }
zExtentClose(%qHandle) [ SQLCODE ] public {
	New SQLCODE
	Do %qHandle.%Destruct() Kill %qHandle
	If SQLCODE { Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.%Message=$g(%msg) Set sc=$$Error^%apiOBJ(5540,SQLCODE,$get(%msg)) } Else { Set sc=1 }
	Quit sc }
zExtentExecute(%qHandle) [ SQLCODE ] public { New %ROWCOUNT,%ROWID,%msg,SQLCODE 
	Set sc=1
	 ;---&sql(DECLARE QExtent CURSOR FOR
 	 ;---		 SELECT ID FROM SQLUser.Peters)
 	 ;--- ** SQL PUBLIC Variables: SQLCODE
	 
	 ;---&sql(OPEN QExtent)
	try { s %qHandle="",%qHandle=$classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xEunYE5zw337PPTD1CkS3xthmDeR","%New") if '$isobject(%qHandle) s %qHandle=$$%0dsqlD() } catch { if $ze["<CLASS DOES NOT EXIST>"&&($ze["%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xEunYE5zw337PPTD1CkS3xthmDeR")||($ze["<ZSQLU>") { s %qHandle=$$%0dsqlD() } else { throw } }
	If SQLCODE { Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.%Message=$g(%msg) Set sc=$$Error^%apiOBJ(5821,"SQLCODE = "_SQLCODE) } Else { Set sc=1 }
	Quit sc }
zExtentFetch(%qHandle,Row,AtEnd=0) [ SQLCODE ] public { New %ROWCOUNT,%ROWID,%msg,SQLCODE 
	Set Row="",AtEnd=0
	 ;---&sql(FETCH QExtent INTO :c1)
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE
	if $isobject($g(%qHandle))'=1 { s SQLCODE=-102 } else { do %qHandle.FET() if SQLCODE=0 { s c1=%qHandle.sqlcol1 } }
	If 'SQLCODE { Set Row=$lb(c1) Set sc=1 }
	ElseIf SQLCODE=100 { Set AtEnd=1,sc=1 Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.%ROWCOUNT=$g(%ROWCOUNT) }
	Else { Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.Message=$g(%msg) Set AtEnd=1,sc=$$Error^%apiOBJ(5540,SQLCODE,$get(%msg)) }
	QUIT sc }
zExtentFetchRows(%qHandle,FetchCount=0,RowSet,ReturnCount,AtEnd) [ SQLCODE ] public { New %ROWCOUNT,%ROWID,%msg,SQLCODE 
	Set RowSet="",ReturnCount=0,AtEnd=0
	For {
		 ;---&sql(FETCH QExtent INTO :c1)
 		 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE
		if $isobject($g(%qHandle))'=1 { s SQLCODE=-102 } else { do %qHandle.FET() if SQLCODE=0 { s c1=%qHandle.sqlcol1 } }
		If 'SQLCODE { Set RowSet=RowSet_$lb(c1),ReturnCount=ReturnCount+1 Quit:(ReturnCount=FetchCount)||(($l(RowSet)+($l(RowSet)\ReturnCount))>24000) } Else { Set AtEnd=1 Quit }
	}
	If 'SQLCODE { Set sc=1 } ElseIf SQLCODE=100 { Set sc=1 Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.%ROWCOUNT=$g(%ROWCOUNT) } Else { Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.Message=$g(%msg) Set sc=$$Error^%apiOBJ(5540,SQLCODE,$get(%msg)) }
	Quit sc }
zExtentSendODBC(%qHandle,array,qacn,%qrc,piece,ColumnCount) [ SQLCODE ] public { New %ROWCOUNT,%ROWID,%msg,SQLCODE 
	set %qrc=0,piece=0
	for {
		set rc=..ExtentFetch(.%qHandle,.row,.atend)
		if ('rc) { set %qrc=-400 set:$isobject($get(%sqlcontext)) %sqlcontext.SQLCode=-400,%sqlcontext.Message=$g(%msg) do ProcessError^%ourProcedure(rc,$get(%sqlcontext),.%qrc,.%msg),Logerr^%SYS.SQLSRV(%qrc,"","SP",.%msg) RETURN  }
		if row="" { set %qrc=100 set:$isobject($get(%sqlcontext)) %sqlcontext.SQLCode=100 RETURN  }
		if $g(%protocol)>50 { RETURN:$zobjexport(row,60) }
		else {
			if %protocol>46 { for piece=1:1:ColumnCount { goto:$zobjexport($lg(row,piece),50) SPDone } }
			else { for piece=1:1:ColumnCount { goto:$zobjexport($lg(row,piece),7) SPDone } }
		}
	}
	QUIT
SPDone	set:%protocol>46 piece=piece+1
	kill array(qacn)
	for i=piece:1:ColumnCount { set array(qacn,i)=$lg(row,i) }
	QUIT }
 q
%0dsqlD()	n %xxsql
	s %xxsql("S",1)="DECLARE QExtent CURSOR FOR SELECT ID "
	s %xxsql("S",2)="INTO  :i%sqlcol1"
	s %xxsql("S",3)="FROM SQLUser . Peters"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("I","%occSqlfunc")="",%xxsql("NS")="PROJECT1"
	return $$BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Runtime","","","User",0,"",),",1,QExtent,","User.Peter.CLS",1)
zExtentFunc() public {
	try {
		set tSchemaPath = ##class(%SQL.Statement).%ClassPath($classname())
			set tStatement = ##class(%SQL.Statement).%New(,tSchemaPath)
			do tStatement.prepare(" SELECT ID FROM SQLUser . Peters")
		set tResult = tStatement.%Execute()
	}
	catch tException { if '$Isobject($Get(tResult)) { set tResult = ##class(%SQL.StatementResult).%New() } set tResult.%SQLCODE=tException.AsSQLCODE(),tResult.%Message=tException.AsSQLMessage() }
	Quit tResult }
zExtentGetInfo(colinfo,parminfo,idinfo,%qHandle,extoption=0,extinfo) public {
 s parminfo=""
	s:'($d(^oddCOM($classname(),"q","Extent",21),clientinfo)#2)&&'$s($d(^(2),clientinfo)#2&&(clientinfo'=$classname()):$d(^oddCOM(clientinfo,"q","Extent",21),clientinfo)#2||($d(^oddDEF(clientinfo,"q","Extent",21),clientinfo)#2),1:$d(^oddDEF($classname(),"q","Extent",21),clientinfo)#2) clientinfo=""
	Set:extoption extinfo=$s($d(^oddCOM($classname(),"q","Extent",38))#2:^(38),$d(^oddCOM($g(^(2),$classname()),"q","Extent",38))#2:^(38),1:$s($d(^oddDEF($g(^oddCOM($classname(),"q","Extent",2),$classname()),"q","Extent",38))#2:^(38),1:""))
	If clientinfo'="" Set colinfo=$listget(clientinfo,1),parminfo=$listget(clientinfo,2),idinfo=$listget(clientinfo,3) Quit 1
	Set colinfo="",parminfo="",idinfo=$listbuild(0)
	Set sc=$$externaltype^%apiOLE("%Library.Integer",.exttypes,"0")
	Quit:('sc) sc
	s:'($d(^oddCOM($classname(),"q","Extent",23),names)#2)&&'$s($d(^(2),names)#2&&(names'=$classname()):$d(^oddCOM(names,"q","Extent",23),names)#2||($d(^oddDEF(names,"q","Extent",23),names)#2),1:$d(^oddDEF($classname(),"q","Extent",23),names)#2) names=""
	s:'($d(^oddCOM($classname(),"q","Extent",22),captions)#2)&&'$s($d(^(2),captions)#2&&(captions'=$classname()):$d(^oddCOM(captions,"q","Extent",22),captions)#2||($d(^oddDEF(captions,"q","Extent",22),captions)#2),1:$d(^oddDEF($classname(),"q","Extent",22),captions)#2) captions=""
	For i=1:1:1 Set colinfo=colinfo_$listbuild($listbuild($listget(names,i),$piece(exttypes,",",i),$listget(captions,i)))
	Set idinfo=$listbuild(1,$classname())
	s ^oddCOM($classname(),"q","Extent",21)=$listbuild(colinfo,parminfo,idinfo)
	Quit 1 }
zExtentGetODBCInfo(colinfo,parminfo,qHandle) public {
	set version = $Select($Get(%protocol,41)>40:4,1:3)
	Set metadata=$lb(1,1,"ID",4,10,0,2,"ID","Peters","SQLUser","",$c(0,0,0,0,0,0,0,0,0,0,0,1),0)
	Set colcount=$li(metadata,2),cmdlen=colcount*10,parmcount=$li(metadata,3+cmdlen),pmdlen=parmcount*6,parminfo=$li(metadata,cmdlen+3,cmdlen+pmdlen+3)
	If version=4 {
		Set colinfo=$li(metadata,2,2+cmdlen)
	} Else {
		Set colinfo=$li(metadata,2,2)
		For i=0:1:colcount-1 Set colinfo=colinfo_$list(metadata,3+(i*10),11+(i*10))
	}
	Quit 1 }
zIDKEYCheck(K1,lockonly=0,concurrency=-1) public {
	s id=K1,exists=..%ExistsId(id) q:'exists $s('lockonly:$$Error^%apiOBJ(5797,$classname(),"IDKEY",id),1:1) s:concurrency=-1 concurrency=$select(..#DEFAULTCONCURRENCY="$zu(115,10)":$zu(115,10),1:$xecute("q "_..#DEFAULTCONCURRENCY)) if concurrency { s status=..%LockId(id,1) q:('status) status } if 'lockonly { s exists=..%ExistsId(id) d:concurrency ..%UnlockId(id,1,0) quit $s('exists:$$Error^%apiOBJ(5797,$classname(),"IDKEY",id),1:1) } else { d:concurrency ..%UnlockId(id,1,0) q 1 }
}
zIDKEYDelete(K1,concurrency=-1) public {
	Quit ..%DeleteId(.K1,concurrency) }
zIDKEYExists(K1,id="") public {
	s id=K1 q ..%ExistsId(K1) }
zIDKEYOpen(K1,concurrency=-1,sc) public { s:'($d(sc)#2) sc=1
	Quit ..%OpenId(.K1,concurrency,.sc) }
zIDKEYSQLCheckUnique(pFromOrig=0,%pID,%pVals...)
 QUIT $$Error^%apiOBJ(5758,"%Persistent::IDKEYSQLCheckUnique")
zIDKEYSQLExists(pLockOnly=0,pUnlockRef,%pVal...)
	// SQL Foreign Key validation entry point for Key IDKEY.  Called by FKeys that reference this Key to see if the row is defined
	new id set id=%pVal(1)
	if pLockOnly>=0 { if '..%SQLGetLock(id,1,.pUnlockRef) { set sqlcode=-114,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler39",,"SQLUser"_"."_"Peters"_":"_"IDKEY") QUIT 0 } }
	if pLockOnly<1 {
		new qv set qv=$d(^User.PeterD(%pVal(1))) QUIT:pLockOnly=-1 qv
		do:'$g(pUnlockRef) ..%SQLReleaseLock(id,1) quit qv
	}
	else { do:'$g(pUnlockRef) ..%SQLReleaseLock(id,1) QUIT 1 }
	Return
zIDKEYSQLFindPKeyByConstraint(%con)
 QUIT $$Error^%apiOBJ(5758,"%Persistent::IDKEYSQLFindPKeyByConstraint")
zIDKEYSQLFindRowIDByConstraint(%con,pInternal=0)
 QUIT $$Error^%apiOBJ(5758,"%Persistent::IDKEYSQLFindRowIDByConstraint")
]]></Routine>


<Class name="User.Peter">
<SqlTableName>Peters</SqlTableName>
<Super>%Persistent,%Populate,User.Person</Super>
<TimeChanged>65832,40525.305048</TimeChanged>
<TimeCreated>65822,29375.045512</TimeCreated>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^User.PeterD</DataLocation>
<DefaultData>PeterDefaultData</DefaultData>
<IdLocation>^User.PeterD</IdLocation>
<IndexLocation>^User.PeterI</IndexLocation>
<StreamLocation>^User.PeterS</StreamLocation>
<Data name="PeterDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Name</Value>
</Value>
<Value name="3">
<Value>Surname</Value>
</Value>
<Value name="4">
<Value>Age</Value>
</Value>
<Value name="5">
<Value>Gender</Value>
</Value>
<Value name="6">
<Value>Race</Value>
</Value>
<Value name="7">
<Value>DOB</Value>
</Value>
</Data>
</Storage>
</Class>


<Routine name="User.Request.1" type="INT" languagemode="0" generated="1" timestamp="65833,51659.510872"><![CDATA[
 ;User.Request.1
 ;Generated for class User.Request.  Do NOT edit. 03/30/2021 02:20:59PM
 ;;33744343;User.Request
 ;
SQLUPPER(v,l) { quit $zu(28,v,7,$g(l,32767)) }
ALPHAUP(v,r) { quit $zu(28,v,6) }
STRING(v,l) { quit $zu(28,v,9,$g(l,32767)) }
SQLSTRING(v,l) { quit $zu(28,v,8,$g(l,32767)) }
UPPER(v) { quit $zu(28,v,5) }
MVR(v) { quit $zu(28,v,2) }
TRUNCATE(v,l) { quit $e(v,1,$g(l,3641144)) }
%CheckConstraintsForExtent(pConstraintList="",pCheckDisabled=0,pErrorLog) [ SQLCODE,tID ] public { New %ROWCOUNT,%ROWID,%msg,SQLCODE,tID 
	kill pErrorLog set tStatusAll = 1, pErrorLog = 0 if '$listvalid(pConstraintList) { set pConstraintList = $listfromstring(pConstraintList) }
	 ;---&sql(declare ext cursor for select %ID into :tID FROM SQLUser.Request)
 	 ;--- ** SQL PUBLIC Variables: SQLCODE, tID
	 
	 ;---&sql(open ext)
	try { s %ext0140="",%ext0140=$classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xEvxzlaeBlHSo6N1BCLVFoZB3BvK","%New") if '$isobject(%ext0140) s %ext0140=$$%0dsqlA() } catch { if $ze["<CLASS DOES NOT EXIST>"&&($ze["%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xEvxzlaeBlHSo6N1BCLVFoZB3BvK")||($ze["<ZSQLU>") { s %ext0140=$$%0dsqlA() } else { throw } }
	if SQLCODE '< 0 {
		for {
			 ;---&sql(fetch ext)
 			 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE
			if $isobject($g(%ext0140))'=1 { s SQLCODE=-102 } else { do %ext0140.FET() if SQLCODE=0 { } }
			if SQLCODE { if SQLCODE=100 { quit } elseif SQLCODE<0 { set tStatusAll = $select(+tStatusAll:$$Error^%apiOBJ(5521,SQLCODE,$Get(%msg)),1:$$AppendStatus^%occSystem(tStatusAll,$$Error^%apiOBJ(5521,SQLCODE,$Get(%msg)))) quit } }
			set tStatus = ..%CheckConstraints(tID,pConstraintList,pCheckDisabled,.tErrorInfo)
			if ('tStatus) { set tStatusAll = $select(+tStatusAll:tStatus,1:$$AppendStatus^%occSystem(tStatusAll,tStatus)) set:pErrorLog<1000 pErrorLog = pErrorLog + 1, pErrorLog(pErrorLog) = tErrorInfo _ $Listbuild(tStatus) }
		}
		 ;---&sql(close ext)
		if '$isobject($get(%ext0140)) { set SQLCODE=-102 } else { set SQLCODE=0 kill %ext0140 }
	}
	quit tStatusAll }
 q
%0dsqlA()	n %xxsql
	s %xxsql("S",1)="DECLARE ext CURSOR FOR SELECT %ID INTO :tID FROM SQLUser . Request"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","DEBUG")=$c(1),%xxsql("M","FORKNETDMN")=$c(1)
	s %xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1)
	s %xxsql("M","USELOST")=$c(1),%xxsql("M","ZVERSION")=$c(1),%xxsql("I","%callout")="",%xxsql("I","%occErrors")="",%xxsql("I","%occSqlfunc")=""
	s %xxsql("I","%sySite")="",%xxsql("I","%sySt")="",%xxsql("I","%sySystem")="",%xxsql("I","%xmlMap")="",%xxsql("I","EnsConstants")=""
	s %xxsql("I","EnsErrors")="",%xxsql("I","EnsUtil")="",%xxsql("I","Ensemble")="",%xxsql("NS")="PROJECT1"
	return $$BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","User",0,"",),",0,ext,","User.Request.CLS",1)
%DeleteData(id,concurrency) public {
	Quit:id="" $$Error^%apiOBJ(5812)
	set $Ztrap="DeleteDataERR" set lockok=0,sc=""
	If concurrency {
		Lock +(^Ens.MessageBodyD(id)#"E"):$zu(115,4)
		Set lockok=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,2:2,4:2,:0))
		Set:lockok=2&&($tlevel) %0CacheLock($classname(),"E")=1
		If 'lockok {
			Quit $$Error^%apiOBJ(5803,$classname())
		}
	}
	If ($Data(^Ens.MessageBodyD(id))) {
		If $data(^oddEXTR($classname())) {
			Set fc=""
			For {
				Set fc=$order(^rINDEXEXT("F",$classname(),"%1","f",fc))
				Quit:fc=""
				Set fk=""
				For {
					Set fk=$order(^rINDEXEXT("F",$classname(),"%1","f",fc,fk))
					Quit:fk=""
					Set sc=$classmethod(fc,fk_"Delete",id)
					If ('sc) { Goto DeleteDataEXIT }
				}
			}
			Set fc=""
			For {
				Set fc=$order(^rINDEXEXT("F",$classname(),"IDKEY","f",fc))
				Quit:fc=""
				Set fk=""
				For {
					Set fk=$order(^rINDEXEXT("F",$classname(),"IDKEY","f",fc,fk))
					Quit:fk=""
					Set sc=$classmethod(fc,fk_"Delete",id)
					If ('sc) { Goto DeleteDataEXIT }
				}
			}
		}
		Kill ^Ens.MessageBodyD(id)
		Kill ^Ens.MessageBodyD(id,"Request")
		Set sc=1
	}
	Else { Set sc=$$Error^%apiOBJ(5810,$classname(),id) }
DeleteDataEXIT
	If concurrency,lockok {
		Lock -(^Ens.MessageBodyD(id)#"E")
	}
DeleteDataRET	Set $Ztrap = ""
	QUIT sc
DeleteDataERR	Set $Ztrap = "DeleteDataRET"
	Set sc = $$Error^%apiOBJ(5002,$ZE)
	Goto DeleteDataEXIT }
%InsertBatch(objects,concurrency=0,useTransactions=0) public {
	try {
		set numerrs=0,errs="",cnt=0,ptr=0
		while $listnext(objects,ptr,data) {
			set cnt=cnt+1
			set lock=0
			if (useTransactions) tstart
			set id=$i(^Ens.MessageBodyD)
			try {
				set tInnerException = ""
				;
				if concurrency { lock +(^Ens.MessageBodyD(id)#"E"):$zu(115,4) set lock=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,2:2,4:2,:0)) set:lock=2&&($tlevel) %0CacheLock($classname(),"E")=1 if 'lock { Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5803,$classname())) } }
				set ^Ens.MessageBodyD(id)=data
				set ^Ens.MessageBodyD(id,"Request")=data("Request")
				if (useTransactions) { tcommit }
			}
			catch tInnerException {
				set newerr=$lb(cnt,tInnerException.AsStatus())
				if '($length(errs)+$length(newerr)>32767) { set numerrs=numerrs+1, errs=errs_newerr }
				if (useTransactions) && ($Tlevel) trollback
			}
			if lock lock -(^Ens.MessageBodyD(id)#"E")
		}
	}
	catch tException {
		set newerr=$lb($g(cnt),tException.AsStatus())
		if '($length(errs)+$length(newerr)>32767) { set numerrs=numerrs+1, errs=errs_newerr }
	}
	QUIT ($lb(numerrs))_errs }
%LoadData(id) public {
	New %s1,%s2
	set $ZTrap="CatchError",locked=0,userze=$ze,$ze=""
	If i%%Concurrency=4 {
		Lock +(^Ens.MessageBodyD(id)#"E"):$zu(115,4)
		if '$t do init s i%%Concurrency=0 s:$ze="" $ze=userze return $$Error^%apiOBJ(5803,$classname())
	} ElseIf i%%Concurrency>0 {
		Lock +(^Ens.MessageBodyD(id)#"SE"):$zu(115,4)
		if '$t do init s i%%Concurrency=0 s:$ze="" $ze=userze return $$Error^%apiOBJ(5804,$classname())
		set locked = 1
	}
	Set sc=""
	If $d(^Ens.MessageBodyD(id)) {
		Set sc=1
		Set %s1=$g(^Ens.MessageBodyD(id))
		Set %s2=$g(^Ens.MessageBodyD(id,"Request"))
		S i%Name=$lg(%s2),i%Surname=$lg(%s2,2),i%Age=$lg(%s2,3),i%Gender=$lg(%s2,4),i%Race=$lg(%s2,5),i%DOB=$lg(%s2,6)
	} Else {
		do init
	}
	If i%%Concurrency=2||(i%%Concurrency=1) {
		Lock -(^Ens.MessageBodyD(id)#"SIE")
	}
	s:$ze="" $ze=userze
	RETURN $s((''sc):1,1:$$Error^%apiOBJ(5809,$classname(),id))
CatchError	set $ZTrap = "" if $ZE'="" { s sc = $$Error^%apiOBJ(5002,$ZE) }
	If ($get(locked))&&(i%%Concurrency<3) { Lock -(^Ens.MessageBodyD(id)#"SIE") }
	if '('sc) { set sc=$$Error^%apiOBJ(5809,$classname(),id) }
	s:$ze="" $ze=userze
	return sc
init	Set i%Age="",i%DOB="",i%Gender="",i%Name="",i%Race="",i%Surname=""
	quit }
%LoadDataFromMemory(id,objstate,obj) public {
	New %s1,%s2
	Set sc=""
	If $d(objstate(id)) {
		Set sc=1
		Set %s1=$g(objstate(id))
		Set %s2=$g(objstate(id,"Request"))
		S i%Name=$lg(%s2),i%Surname=$lg(%s2,2),i%Age=$lg(%s2,3),i%Gender=$lg(%s2,4),i%Race=$lg(%s2,5),i%DOB=$lg(%s2,6)
	} Else {
		Set i%Age="",i%DOB="",i%Gender="",i%Name="",i%Race="",i%Surname=""
	}
	Quit:sc'="" sc
	Quit $$Error^%apiOBJ(5809,$classname(),id) }
%NormalizeObject() public {
	If '$system.CLS.GetModified() Quit 1
	If m%Age Set:i%Age'="" i%Age=(..AgeNormalize(i%Age))
	If m%DOB Set:i%DOB'="" i%DOB=(..DOBNormalize(i%DOB))
	If m%Gender Set:i%Gender'="" i%Gender=(..GenderNormalize(i%Gender))
	If m%Name Set:i%Name'="" i%Name=(..NameNormalize(i%Name))
	If m%Race Set:i%Race'="" i%Race=(..RaceNormalize(i%Race))
	If m%Surname Set:i%Surname'="" i%Surname=(..SurnameNormalize(i%Surname))
	Quit 1 }
%PhysicalAddress(id,paddr)
	if $Get(id)="" Quit $$Error^%apiOBJ(5813,$classname())
	if (id="") { quit $$Error^%apiOBJ(5832,$classname(),id) }
	s paddr(1)=$lb($Name(^Ens.MessageBodyD(id)),$classname(),"IDKEY","listnode",id)
	s paddr(2)=$lb($Name(^Ens.MessageBodyD(id,"Request")),$classname(),"IDKEY","listnode",id)
	s paddr=2
	Quit 1
%SQLAcquireLock(%rowid,s=0,unlockref=0)
	new %d,gotlock
	set %d(1)=%rowid set s=$e("E",'unlockref)_$e("S",s)
	lock +^Ens.MessageBodyD(%d(1))#s:$zu(115,4) set gotlock=$t
	if gotlock,'unlockref { set:$case($SYSTEM.Lock.ReturnCode(),2:1,4:1,:0)&&($tlevel) %0CacheLock("User.Request","E")=1 }
	set:gotlock&&unlockref unlockref=unlockref+1,unlockref(unlockref)=$lb($name(^Ens.MessageBodyD(%d(1))),"User.Request",s_"D")
	QUIT gotlock
%SQLAcquireTableLock(s=0,SQLCODE,to="")
	set s=$e("S",s) set:to="" to=$zu(115,4) lock +^Ens.MessageBodyD#s:to QUIT:$t 1 set SQLCODE=-110 if s="S" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler35",,"SQLUser"_"."_"Request") } else { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler36",,"SQLUser"_"."_"Request") } QUIT 0
	Return
%SQLBuildIndices(pIndices="",pLockFlag=0,pStartID="",pEndID="",pIgnoreIndexList="")
	QUIT ..%BuildIndices(pIndices,,pLockFlag,,pStartID,pEndID,pIgnoreIndexList)
%SQLBuildPurgeIndexForRow(pIndices="",pActions="BP",pLockRow=1,%d,%e,pIgnoreIndexList="")
	// Purge and build index nodes for a single row using given values, return Status Code
	new sn,tSC,tLock set tSC=1,pActions=$zcvt(pActions,"U")
	try {
		if $g(%d(1))="" { set tSC=$select(+tSC:$$Error^%apiOBJ(5521,-108,"RowID value must be specified in %d(1) when calling %SQLBuildPurgeIndexForRow for table 'SQLUser.Request'"),1:$$AppendStatus^%occSystem(tSC,$$Error^%apiOBJ(5521,-108,"RowID value must be specified in %d(1) when calling %SQLBuildPurgeIndexForRow for table 'SQLUser.Request'"))) RETURN tSC }
		if pLockRow { if '..%SQLAcquireLock(%d(1)) { set tSC=$select(+tSC:$$Error^%apiOBJ(5521,-114,"Unable to lock row in table 'SQLUser.Request' with %ID = '"_%d(1)_"'"),1:$$AppendStatus^%occSystem(tSC,$$Error^%apiOBJ(5521,-114,"Unable to lock row in table 'SQLUser.Request' with %ID = '"_%d(1)_"'"))) RETURN tSC  } else { set tLock=1 }}
		if pLockRow { do ..%SQLReleaseLock(%d(1),0,0) set tLock=0 }
	}
	catch {
		if $g(tLock) { do ..%SQLReleaseLock(%d(1),0,0) }
		set tSC=$select(+tSC:$$Error^%apiOBJ(5594,$ze),1:$$AppendStatus^%occSystem(tSC,$$Error^%apiOBJ(5594,$ze)))
	}
	QUIT tSC
%SQLCheckUnique(pFromOrig=0,%pID,%pVals...)
	 ;---&sql(SELECT ID FROM SQLUser.Request WHERE  ID=:%pVals(1) AND (%ID <> :%pID OR :%pID IS NULL)) QUIT SQLCODE=100
 	 ;--- ** SQL PUBLIC Variables: %pID, %pVals, SQLCODE
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xEITKsaA6r2lqulhX5IGQ3ommpMF","%New") } catch { if $ze["<CLASS DOES NOT EXIST>"&&($ze["%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xEITKsaA6r2lqulhX5IGQ3ommpMF")||($ze["<ZSQLU>") { d %0dsqlD } else { throw } } QUIT SQLCODE=100
 q
%0dsqlD	n %xxsql
	s %xxsql("S",1)="SELECT ID FROM SQLUser . Request WHERE ID = :%pVals(1) AND ( %ID <> :%pID OR :%pID IS NULL )"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","DEBUG")=$c(1),%xxsql("M","FORKNETDMN")=$c(1)
	s %xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1)
	s %xxsql("M","USELOST")=$c(1),%xxsql("M","ZVERSION")=$c(1),%xxsql("I","%callout")="",%xxsql("I","%occErrors")="",%xxsql("I","%occSqlfunc")=""
	s %xxsql("I","%sySite")="",%xxsql("I","%sySt")="",%xxsql("I","%sySystem")="",%xxsql("I","%xmlMap")="",%xxsql("I","EnsConstants")=""
	s %xxsql("I","EnsErrors")="",%xxsql("I","EnsUtil")="",%xxsql("I","Ensemble")="",%xxsql("NS")="PROJECT1"
	d BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","User",0,"",),,"User.Request.CLS")
	q
%SQLCopyIcolIntoName()
	if %oper="DELETE" {
		set:$d(%d(1)) %f("ID")=%d(1)
		QUIT
	}
	set:$d(%d(1)) %f("ID")=%d(1) set:$a(%e,2)&&$d(%d(2)) %f("Age")=%d(2) set:$a(%e,3)&&$d(%d(3)) %f("DOB")=%d(3) set:$a(%e,4)&&$d(%d(4)) %f("Gender")=%d(4) set:$a(%e,5)&&$d(%d(5)) %f("Name")=%d(5) set:$a(%e,6)&&$d(%d(6)) %f("Race")=%d(6) set:$a(%e,7)&&$d(%d(7)) %f("Surname")=%d(7) set:$a(%e,8)&&$d(%d(8)) %f("x__classname")=%d(8)
	QUIT
%SQLCopyNameIntoIcol()
	k %d,%e set:$d(%f("ID"))#2 %d(1)=%f("ID") set:$d(%f("Age"))#2 %d(2)=%f("Age") set:$d(%f("DOB"))#2 %d(3)=%f("DOB") set:$d(%f("Gender"))#2 %d(4)=%f("Gender") set:$d(%f("Name"))#2 %d(5)=%f("Name") set:$d(%f("Race"))#2 %d(6)=%f("Race") set:$d(%f("Surname"))#2 %d(7)=%f("Surname") set:$d(%f("x__classname"))#2 %d(8)=%f("x__classname")  kill %f QUIT
%SQLDefineiDjVars(%d,subs,master)
	QUIT
%SQLDelete(%rowid,%check,%tstart=1,%mv=0,%polymorphic=0)
	// SQL DELETE method for table SQLUser.Request
	if %polymorphic { do ..%SQLCopyNameIntoIcol() set %d(1)=%rowid,%e(1)=%rowid  goto %SQLDeletePD }
	new bva,ce,%d,dc,%e,%ele,%itm,%key,%l,%nc,omcall,%oper,%pos,%s,sn,sqlcode,subs set %oper="DELETE",sqlcode=0,%ROWID=%rowid,%d(1)=%rowid,%e(1)=%rowid,%l=$c(0)
	if '$d(%0CacheSQLRA) { new %0CacheSQLRA set omcall=1 }
	if '$a(%check,2) {
		new %ls lock +^Ens.MessageBodyD(%d(1))#"E":$zu(115,4) set %ls=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,4:2,2:2,1:3,:""))
		set:%ls=2 $e(%check,2)=$c(1) set:%ls=2&&($tlevel) %0CacheLock("User.Request","E")=1 set:$case(%ls,1:1,2:1,:0) $e(%l)=$c(1)
		if '%ls||(%ls=3) { set SQLCODE=-110,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer",$s('%ls:"SQLFiler40",1:"SQLFiler55"),,%oper,"SQLUser"_"."_"Request",$g(%d(1))) RETURN  }
	}
	if %tstart { TSTART:($zu(115,1)=1)||('$TLEVEL&&($zu(115,1)=2))  }
	set $zt="ERRORDelete"
%SQLDeletePD	// Entry point for Polymorphic Dispatch from a super-table
	do ..%SQLGetOld(%rowid,.%d,.%e,.sqlcode) if sqlcode { set SQLCODE=-106,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler58",,"SQLUser"_"."_"Request",%rowid) do ..%SQLEExit() QUIT  }
	if %e(8)'="" { set sn=$p(%e(8),$e(%e(8)),$l(%e(8),$e(%e(8)))-1) if "Request"'=sn { new %f do ..%SQLCopyIcolIntoName() do $classmethod(sn,"%SQLDelete",%rowid,%check,%tstart,%mv,1) QUIT  }}
	if '$a(%check),'$zu(115,7) do  if sqlcode set SQLCODE=sqlcode do ..%SQLEExit() QUIT  
	. new %fk,%k,%p,%st,%t,%z set %k="",%p("%1")="%d(1),",%p("IDKEY")="%d(1),"
	. for  quit:sqlcode<0  set %k=$o(^rINDEXEXT("F","User.Request",%k)) quit:%k=""  set %t="" for  set %t=$o(^rINDEXEXT("F","User.Request",%k,"f",%t)) quit:%t=""  set %st=(%t="User.Request") set %fk="" for  set %fk=$o(^rINDEXEXT("F","User.Request",%k,"f",%t,%fk)) quit:%fk=""  x "set %z=$classmethod(%t,%fk_""SQLFKeyRefAction"",%st,%k,$a(%check,2),"_%p(%k)_")" if %z set sqlcode=-124 quit  
	set ce="" for  { set ce=$order(^oddSQL("SQLUser","Request","DC",ce)) quit:ce=""   do $classmethod(ce,"%SQLDeleteChildren",%d(1),%check,.sqlcode) quit:sqlcode<0  } if sqlcode<0 { set SQLCODE=sqlcode do ..%SQLEExit() QUIT } // Delete any children
	set ce="" for  { set ce=$order(^oddSQL("Ens","Request","DC",ce)) quit:ce=""   do $classmethod(ce,"%SQLDeleteChildren",%d(1),%check,.sqlcode) quit:sqlcode<0  } if sqlcode<0 { set SQLCODE=sqlcode do ..%SQLEExit() QUIT } // Delete any children of the root extent
	set ce="" for  { set ce=$order(^oddSQL("Ens","MessageBody","DC",ce)) quit:ce=""   do $classmethod(ce,"%SQLDeleteChildren",%d(1),%check,.sqlcode) quit:sqlcode<0  } if sqlcode<0 { set SQLCODE=sqlcode do ..%SQLEExit() QUIT } // Delete any children of the root extent
	if '$a(%check,3) {
	}
	k ^Ens.MessageBodyD(%d(1))
	do ..%SQLUnlock() TCOMMIT:%tstart&&($zu(115,1)=1)
	set SQLCODE=0 kill:$g(omcall) %0CacheSQLRA
	QUIT
ERRORDelete	set $zt="",SQLCODE=-415,%msg=$s($g(%msg)'="":%msg_" -- ",1:"")_$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler51",,%oper,"SQLUser"_"."_"Request",$ze) if $ze["<FRAMESTACK>" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler52",,$ze,%oper,"SQLUser"_"."_"Request") do ##Class(%SYS.System).WriteToConsoleLog(%msg) if ($zu(67,10,$j)=1)||($zu(67,10,$j)=3) { write !,%msg h 3 } HALT  } do ..%SQLEExit() QUIT
	Return
%SQLDeleteTempStreams()
	// Delete all temporary streams
	QUIT
%SQLEExit()
	do ..%SQLUnlock() 
	if %tstart,$zu(115,1)=1,$TLEVEL { set %tstart=0 TROLLBACK 1 } kill:$g(omcall) %0CacheSQLRA QUIT  
	Return
%SQLExists(pLockOnly=0,pUnlockRef,%pVal...)
	// SQL Foreign Key validation entry point for Key %1.  Called by FKeys that reference this Key to see if the row is defined
	new id set id=%pVal(1)
	if pLockOnly>=0 { if '..%SQLGetLock(id,1,.pUnlockRef) { set sqlcode=-114,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler39",,"SQLUser"_"."_"Request"_":"_"%1") QUIT 0 } }
	if pLockOnly<1 {
		new qv set qv='..%SQLCheckUnique(0,,%pVal(1)) QUIT:pLockOnly=-1 qv
		do:'$g(pUnlockRef) ..%SQLReleaseLock(id,1) quit qv
	}
	else { do:'$g(pUnlockRef) ..%SQLReleaseLock(id,1) QUIT 1 }
	Return
%SQLGetLock(pRowId,pShared=0,pUnlockRef)
	QUIT ..%SQLAcquireLock(pRowId,pShared,.pUnlockRef)
%SQLGetOld(%rowid,%d,%e,sqlcode)
	// Get old data values
	new SQLCODE,%ROWCOUNT
	 ;---&sql(SELECT x__classname INTO :%e() FROM %IGNOREINDEX * SQLUser.Request WHERE ID=:%rowid)
 	 ;--- ** SQL PUBLIC Variables: %e, %rowid, SQLCODE
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xEZVPUmBGUmeTgKqNIEEyJk3HJJc","%New") } catch { if $ze["<CLASS DOES NOT EXIST>"&&($ze["%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xEZVPUmBGUmeTgKqNIEEyJk3HJJc")||($ze["<ZSQLU>") { d %0dsqlF } else { throw } }
	set sqlcode=SQLCODE QUIT:sqlcode'=0
	QUIT
 q
%0dsqlF	n %xxsql
	s %xxsql("S",1)="SELECT x__classname INTO :%e() FROM %IGNOREINDEX * SQLUser . Request WHERE ID = :%rowid"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","DEBUG")=$c(1),%xxsql("M","FORKNETDMN")=$c(1)
	s %xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1)
	s %xxsql("M","USELOST")=$c(1),%xxsql("M","ZVERSION")=$c(1),%xxsql("I","%callout")="",%xxsql("I","%occErrors")="",%xxsql("I","%occSqlfunc")=""
	s %xxsql("I","%sySite")="",%xxsql("I","%sySt")="",%xxsql("I","%sySystem")="",%xxsql("I","%xmlMap")="",%xxsql("I","EnsConstants")=""
	s %xxsql("I","EnsErrors")="",%xxsql("I","EnsUtil")="",%xxsql("I","Ensemble")="",%xxsql("NS")="PROJECT1"
	d BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","User",0,"",),,"User.Request.CLS")
	q
%SQLGetOldAll()
	// Get all old data values
	new SQLCODE,%ROWCOUNT
	 ;---&sql(SELECT Age,DOB,Gender,Name,Race,Surname,x__classname INTO :%e() FROM %IGNOREINDEX * SQLUser.Request WHERE ID=:%rowid)
 	 ;--- ** SQL PUBLIC Variables: %e, %rowid, SQLCODE
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xEmtdL8v5IYRnX01ccgG611Yi40T","%New") } catch { if $ze["<CLASS DOES NOT EXIST>"&&($ze["%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xEmtdL8v5IYRnX01ccgG611Yi40T")||($ze["<ZSQLU>") { d %0dsqlH } else { throw } }
	set sqlcode=SQLCODE QUIT:sqlcode'=0
	QUIT
 q
%0dsqlH	n %xxsql
	s %xxsql("S",1)="SELECT Age , DOB , Gender , Name , Race , Surname , x__classname INTO :%e() FROM %IGNOREINDEX * SQLUser . Request WHERE ID = :%rowid"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","DEBUG")=$c(1),%xxsql("M","FORKNETDMN")=$c(1)
	s %xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1)
	s %xxsql("M","USELOST")=$c(1),%xxsql("M","ZVERSION")=$c(1),%xxsql("I","%callout")="",%xxsql("I","%occErrors")="",%xxsql("I","%occSqlfunc")=""
	s %xxsql("I","%sySite")="",%xxsql("I","%sySt")="",%xxsql("I","%sySystem")="",%xxsql("I","%xmlMap")="",%xxsql("I","EnsConstants")=""
	s %xxsql("I","EnsErrors")="",%xxsql("I","EnsUtil")="",%xxsql("I","Ensemble")="",%xxsql("NS")="PROJECT1"
	d BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","User",0,"",),,"User.Request.CLS")
	q
%SQLInsert(%d,%check,%inssel,%vco,%tstart=1,%mv=0)
	// SQL INSERT method for table SQLUser.Request
	new bva,%ele,%itm,%key,%f,%l,%n,%nc,%oper,%pos,%s,sqlcode,sn,subs,icol set %oper="INSERT",sqlcode=0,%l=$c(0,0,0)
	if $a(%check,7) { new %diu merge %diu=%d }
	if $d(%d(1)),'$zu(115,11) { if %d(1)'="" { set SQLCODE=-111,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler6",,"ID","SQLUser"_"."_"Request") RETURN ""  } kill %d(1) } 
	if '$a(%check),'..%SQLValidateFields(.sqlcode) { set SQLCODE=sqlcode RETURN "" }
	do:'$a(%check,8) ..%SQLNormalizeFields()
	if %tstart { TSTART:($zu(115,1)=1)||('$TLEVEL&&($zu(115,1)=2))  } set $zt="ERRORInsert"
	set:'$d(%d(8)) %d(8)="~Ens.Request~Request~"
	if '$a(%check) {
		do {
			if $g(%vco)'="" { d @%vco quit:sqlcode<0  }
		} while 0
		if sqlcode<0 { set SQLCODE=sqlcode do ..%SQLEExit() RETURN "" }		// A constraint failed
	}
	if '$d(%d(1)) { set %d(1)=$i(^Ens.MessageBodyD) } elseif %d(1)>$g(^Ens.MessageBodyD) { if $i(^Ens.MessageBodyD,$zabs(%d(1)-$g(^Ens.MessageBodyD))) {}} elseif $d(^Ens.MessageBodyD(%d(1))) { set SQLCODE=-119,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler33",,"ID",%d(1),"SQLUser"_"."_"Request"_"."_"ID") do ..%SQLEExit() RETURN "" }
	set:'($d(%d(8))#2) %d(8)=""
	if '$a(%check,2) {
		new %ls lock +^Ens.MessageBodyD(%d(1))#"E":$zu(115,4) set %ls=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,4:2,2:2,1:3,:""))
		set:%ls=2 $e(%check,2)=$c(1) set:%ls=2&&($tlevel) %0CacheLock("User.Request","E")=1 set:$case(%ls,1:1,2:1,:0) $e(%l)=$c(1)
		if '%ls||(%ls=3) { set SQLCODE=-110,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer",$s('%ls:"SQLFiler40",1:"SQLFiler55"),,%oper,"SQLUser"_"."_"Request",$g(%d(1))) do ..%SQLEExit() RETURN ""  }
	}
	set ^Ens.MessageBodyD(%d(1))=$lb(%d(8))
	set:$s(($g(%d(2))'=""):1,($g(%d(3))'=""):1,($g(%d(4))'=""):1,($g(%d(5))'=""):1,($g(%d(6))'=""):1,1:($g(%d(7))'="")) ^Ens.MessageBodyD(%d(1),"Request")=$lb(%d(5),%d(7),%d(2),%d(4),%d(6),%d(3))
	lock:$a(%l) -^Ens.MessageBodyD(%d(1))#"E"
	TCOMMIT:%tstart&&($zu(115,1)=1)
	set SQLCODE=0
	QUIT %d(1) 			// %SQLInsert
ERRORInsert	set $zt="",SQLCODE=-415,%msg=$s($g(%msg)'="":%msg_" -- ",1:"")_$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler51",,%oper,"SQLUser"_"."_"Request",$ze)
	if $ze["<FRAMESTACK>" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler52",,$ze,%oper,"SQLUser"_"."_"Request") do ##Class(%SYS.System).WriteToConsoleLog(%msg) if ($zu(67,10,$j)=1)||($zu(67,10,$j)=3) { write !,%msg h 3 } HALT  }
	do ..%SQLEExit()
	RETURN ""
%SQLInvalid(pIcol,pVal) public {
	set:$l($g(pVal))>40 pVal=$e(pVal,1,40)_"..." do:'$d(%n) ..%SQLnBuild() set %msg=$s($g(%msg)'="":%msg_$c(13,10),1:"")_$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler37",,"SQLUser"_"."_"Request"_"."_$lg(%n,pIcol),$s($g(pVal)'="":$s(pVal="":"<NULL>",pVal=$c(0):"<EMPTY STRING>",1:"'"_pVal_"'"),1:"")),sqlcode=$s(%oper="INSERT":-104,1:-105)
	QUIT sqlcode }
%SQLMissing(fname)
	set sqlcode=-108,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler47",,fname,"SQLUser"_"."_"Request") quit
%SQLNormalizeFields()
	new %f for %f=2,3 { set:$g(%d(%f))'="" %d(%f)=$select(%d(%f)=$c(0)&&$zu(115,13):"",1:%d(%f)\1) }
	QUIT
%SQLPurgeIndices(pIndices="",pLockExtent=0,pIgnoreIndexList="")
	QUIT ..%PurgeIndices(pIndices,pLockExtent,pIgnoreIndexList)
%SQLQuickLoad(%rowid,%nolock=0,pkey=0,qq=0)
	// Get fields from row where SQLRowID=%rowid
	new d,i,il,subs set:%nolock=2 %nolock=1
	if %nolock=0 { if '..%SQLAcquireLock(%rowid) { set %qrc=114,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler45",,"SQLUser"_"."_"Request",%rowid),%ROWCOUNT=0 QUIT  } set:$zu(115,2) il=$zu(115,2,0) }
	 ;---&sql(SELECT %INTERNAL(ID),Age,DOB,Gender,Name,Race,Surname,x__classname INTO :d(1),:d(2),:d(3),:d(4),:d(5),:d(6),:d(7),:d(8) FROM SQLUser.Request WHERE %ID = :%rowid)
 	 ;--- ** SQL PUBLIC Variables: %rowid, SQLCODE, d
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xEBQ0YbdEpXDhtzyZIsemfpNBCXy","%New") } catch { if $ze["<CLASS DOES NOT EXIST>"&&($ze["%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xEBQ0YbdEpXDhtzyZIsemfpNBCXy")||($ze["<ZSQLU>") { d %0dsqlJ } else { throw } }
	if SQLCODE { if %nolock=0 { do ..%SQLReleaseLock(%rowid,0,1) do:$g(il) $zu(115,2,il) } set %ROWCOUNT=0 set:SQLCODE<0 SQLCODE=-SQLCODE set %qrc=SQLCODE QUIT  }
	if qq,d(8)'="" { new sn set sn=$p(d(8),$e(d(8)),$l(d(8),$e(d(8)))-1) if "Request"'=sn { if %nolock=0 { do ..%SQLReleaseLock(%rowid,0,1) do:$g(il) $zu(115,2,il) } kill d set:sn'["." sn="User."_sn  do $classmethod(sn,"%SQLQuickLoad",%rowid,%nolock,0,1) QUIT  }}
	if %nolock=0 { if $zu(115,1)=1 { TSTART  } elseIf '$TLEVEL,$zu(115,1)=2 { TSTART  }}
	set:qq d=$zobjexport("User.Request",18),d=$zobjexport(8,18) set i=-1 for  { set i=$o(d(i)) quit:i=""  set d=$zobjexport(d(i),18) } set %qrc=0,%ROWCOUNT=1 if %nolock=0 { d ..%SQLReleaseLock(%rowid,0,0) do:$g(il) $zu(115,2,il) } quit
	Return
 q
%0dsqlJ	n %xxsql
	s %xxsql("S",1)="SELECT %INTERNAL ( ID ) , Age , DOB , Gender , Name , Race , Surname , x__classname INTO :d(1) , :d(2) , :d(3) , :d(4) , :d(5) , :d(6) , :d(7) , :d(8) FROM SQLUser . Request WHERE %ID = :%rowid"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","DEBUG")=$c(1),%xxsql("M","FORKNETDMN")=$c(1)
	s %xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1)
	s %xxsql("M","USELOST")=$c(1),%xxsql("M","ZVERSION")=$c(1),%xxsql("I","%callout")="",%xxsql("I","%occErrors")="",%xxsql("I","%occSqlfunc")=""
	s %xxsql("I","%sySite")="",%xxsql("I","%sySt")="",%xxsql("I","%sySystem")="",%xxsql("I","%xmlMap")="",%xxsql("I","EnsConstants")=""
	s %xxsql("I","EnsErrors")="",%xxsql("I","EnsUtil")="",%xxsql("I","Ensemble")="",%xxsql("NS")="PROJECT1"
	d BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("ODBC","","","User",0,"",),,"User.Request.CLS")
	q
%SQLReleaseLock(%rowid,s=0,i=0,e="")
	new %d
	set:e="" e=1 set %d(1)=%rowid set s=$e("E",e)_$e("S",s)_$e("D",i)
	lock -^Ens.MessageBodyD(%d(1))#s
	QUIT
%SQLReleaseTableLock(s=0,i=0)
	set s=$e("S",s)_$e("D",i) lock -^Ens.MessageBodyD#s QUIT 1
	Return
%SQLUnlock()
	lock:$a(%l) -^Ens.MessageBodyD(%d(1))#"E"
	QUIT
%SQLUnlockError(cname)
	set sqlcode=-110 if %oper="DELETE" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler48",,"SQLUser"_"."_"Request",cname) } else { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler49",,"SQLUser"_"."_"Request",cname) } quit
	Return
%SQLUpdate(%rowid,%check,%d,%vco,%tstart=1,%mv=0,%polymorphic=0,%soid)
	// SQL UPDATE method for table SQLUser.Request
	if %polymorphic { do ..%SQLCopyNameIntoIcol() set %d(1)=%rowid,%e(1)=%rowid,$e(%e,1)=$c(0) new icol for icol=2:1:8 { set $e(%e,icol)=$c($d(%d(icol))) }  goto %SQLUpdatePD }
	new %e,bva,%ele,%itm,%key,%f,%l,%n,%nc,%oper,%pos,%s,icol,omcall,s,sn,sqlcode,subs,t set %oper="UPDATE",sqlcode=0,%ROWID=%rowid,$e(%e,1)=$c(0),%l=$c(0,0,0)
	if '$d(%0CacheSQLRA) { new %0CacheSQLRA set omcall=1 }
	if '$a(%check,7) {
		if '$a(%check),'..%SQLValidateFields(.sqlcode) { set SQLCODE=sqlcode QUIT  }
		do:'$a(%check,8) ..%SQLNormalizeFields()
	}
	if $d(%d(1)),%d(1)'=%rowid { set SQLCODE=-107,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler16",,"ID","SQLUser"_"."_"Request") QUIT  }
	for icol=2:1:8 { set $e(%e,icol)=$c($d(%d(icol))) }
	set %d(1)=%rowid,%e(1)=%rowid
	if '$a(%check,2) {
		new %ls lock +^Ens.MessageBodyD(%d(1))#"E":$zu(115,4) set %ls=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,4:2,2:2,1:3,:""))
		set:%ls=2 $e(%check,2)=$c(1) set:%ls=2&&($tlevel) %0CacheLock("User.Request","E")=1 set:$case(%ls,1:1,2:1,:0) $e(%l)=$c(1)
		if '%ls||(%ls=3) { set SQLCODE=-110,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer",$s('%ls:"SQLFiler40",1:"SQLFiler55"),,%oper,"SQLUser"_"."_"Request",$g(%d(1))) RETURN  }
	}
	if %tstart { TSTART:($zu(115,1)=1)||('$TLEVEL&&($zu(115,1)=2))  }
	set $zt="ERRORUpdate"
%SQLUpdatePD		// Entry point for Polymorphic Dispatch from a super-table
	if $g(%vco)="" { do ..%SQLGetOld(%rowid,.%d,.%e,.sqlcode) i sqlcode { s SQLCODE=-109,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler59",,"SQLUser"_"."_"Request",%rowid) do ..%SQLEExit() QUIT  } set:'$d(%d(8)) %d(8)=%e(8) set:%d(8)=%e(8) $e(%e,8)=$c(0) } else { do ..%SQLGetOldAll() if sqlcode { set SQLCODE=-109,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler59",,"SQLUser"_"."_"Request",%rowid) do ..%SQLEExit() QUIT  } for icol=2,3,4,5,6,7,8 { set:'$d(%d(icol)) %d(icol)=%e(icol) set:%d(icol)=%e(icol) $e(%e,icol)=$c(0) }}
	if %e(8)'="" set sn=$p(%e(8),$e(%e(8)),$l(%e(8),$e(%e(8)))-1) if "Request"'=sn new %f do ..%SQLCopyIcolIntoName() do $classmethod(sn,"%SQLUpdate",%rowid,%check,.%d,$g(%vco),%tstart,%mv,1) QUIT
	if '$a(%check) {
		do {
			if $g(%vco)'="" { d @%vco quit:sqlcode<0  }
		} while 0
		if sqlcode { set SQLCODE=sqlcode do ..%SQLEExit() QUIT  }
	}
	set:$a(%e,8) ^Ens.MessageBodyD(%d(1))=$lb(%d(8))
	if $s($a(%e,2):1,$a(%e,3):1,$a(%e,4):1,$a(%e,5):1,$a(%e,6):1,1:$a(%e,7)) {
		set ^Ens.MessageBodyD(%d(1),"Request")=$listupdate($g(^Ens.MessageBodyD(%d(1),"Request")),1,$a(%e,5):%d(5),$a(%e,7):%d(7),$a(%e,2):%d(2),$a(%e,4):%d(4),$a(%e,6):%d(6),$a(%e,3):%d(3))
	}
	do ..%SQLUnlock() TCOMMIT:%tstart&&($zu(115,1)=1)
	set SQLCODE=0 kill:$g(omcall) %0CacheSQLRA
	QUIT
ERRORUpdate	set $zt="",SQLCODE=-415,%msg=$s($g(%msg)'="":%msg_" -- ",1:"")_$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler51",,%oper,"SQLUser"_"."_"Request",$ze) if $ze["<FRAMESTACK>" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler52",,$ze,%oper,"SQLUser"_"."_"Request") do ##Class(%SYS.System).WriteToConsoleLog(%msg) if ($zu(67,10,$j)=1)||($zu(67,10,$j)=3) { write !,%msg h 3 } HALT  } do ..%SQLEExit() QUIT  
	Return
%SQLValidateFields(sqlcode)
	new %f for %f=2,3 { if $g(%d(%f))'="",'($select(%d(%f)=$c(0)&&$zu(115,13):1,$isvalidnum(%d(%f),0):1,1:$$Error^%apiOBJ(7207,%d(%f)))) set sqlcode=..%SQLInvalid(%f+1,$g(%d(%f))) quit  } 
	for %f=4,5,6,7 { if $g(%d(%f))'="",'(($l(%d(%f))'>50)) set sqlcode=..%SQLInvalid(%f+1,$g(%d(%f))) quit  } 
	QUIT 'sqlcode
%SQLnBuild() public {
	set %n=$lb(,"ID","Age","DOB","Gender","Name","Race","Surname","x__classname")
	QUIT }
%SaveData(id) public {
	try {
		set id=$listget(i%"%%OID") if id'="" { set insert=0,idassigned=1 } else { set insert=1,idassigned=0 }
		set lock=0,lockok=0,tSharedLock=0
		if 'idassigned { set id=$i(^Ens.MessageBodyD) do ..%IdSet(id) set:$g(%objtxSTATUS)=2 %objtxOIDASSIGNED(+$this)="" }
		try {
			set tInnerException = ""
			;
			if 'insert {
				if (i%%Concurrency<4)&&(i%%Concurrency) { lock +(^Ens.MessageBodyD(id)#"E"):$zu(115,4) set lockok=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,2:2,4:2,:0)) set:lockok=2&&($tlevel) %0CacheLock($classname(),"E")=1 if lockok { set lock=1 } else { Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5803,$classname())) } }
				if ('$Data(^Ens.MessageBodyD(id))) {
					set insert=1
					if lock { lock -(^Ens.MessageBodyD(id)#"E") set (lock,lockok) = 0 }
				}
			}
			if insert {
				if i%%Concurrency&&$tlevel {  lock +(^Ens.MessageBodyD(id)#"E"):$zu(115,4) set lockok=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,2:2,4:2,:0)) set:(lockok=2&&(i%%Concurrency'=4)) %0CacheLock($classname(),"E")=1 set:lockok lock=1 if 'lockok { Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5803,$classname())) } }
				if i%%Concurrency=3 { lock +(^Ens.MessageBodyD(id)#"ES") set tSharedLock=1 }
				set:i%%Concurrency=4 lock=0
				set ^Ens.MessageBodyD(id)=$lb("~Ens.Request~Request~")
				set ^Ens.MessageBodyD(id,"Request")=$lb(i%Name,i%Surname,i%Age,i%Gender,i%Race,i%DOB)
			}
			else {
				set ^Ens.MessageBodyD(id)=$lb("~Ens.Request~Request~")
				set ^Ens.MessageBodyD(id,"Request")=$lb(i%Name,i%Surname,i%Age,i%Gender,i%Race,i%DOB)
			}
			set tStatus = 1
		}
		catch tInnerException {
			if ('idassigned) { Set $zobjoid("",$listget(i%"%%OID"))="",i%"%%OID"="" kill:$g(%objtxSTATUS)=2 %objtxOIDASSIGNED(+$this) }
			if (tSharedLock) {  lock -(^Ens.MessageBodyD(id)#"ES") } elseif (lockok=1)&&(insert)&&(i%%Concurrency=4) {  lock -(^Ens.MessageBodyD(id)) }
		}
		if lock lock -(^Ens.MessageBodyD(id)#"E")
		if $Isobject(tInnerException) { throw tInnerException }
	}
	catch tException {
		set tStatus = tException.AsStatus()
	}
	quit tStatus }
%SaveDirect(id="",idList="",data,concurrency=-1) public {
	try {
		if concurrency=-1 { set concurrency=$zu(115,10) }
		if id'="" { set insert=0,idassigned=1 } else { set insert=1,idassigned=0 }
		set lock=0,tSharedLock=0
		if 'idassigned { set id=$i(^Ens.MessageBodyD) }
		try {
			set tInnerException = ""
			;
			if 'insert {
				if concurrency { lock +(^Ens.MessageBodyD(id)#"E"):$zu(115,4) set lock=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,2:2,4:2,:0)) set:lock=2&&($tlevel) %0CacheLock($classname(),"E")=1 if 'lock { Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5803,$classname())) } }
				if ('$Data(^Ens.MessageBodyD(id))) {
					set insert=1
					if lock { lock -(^Ens.MessageBodyD(id)#"E") set (lock,lockok) = 0 }
				}
			}
			if insert {
				if concurrency { lock +(^Ens.MessageBodyD(id)#"E"):$zu(115,4) set lock=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,2:2,4:2,:0)) set:lock=2&&($tlevel) %0CacheLock($classname(),"E")=1 if 'lock { Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5803,$classname())) } }
				set ^Ens.MessageBodyD(id)=data
				set ^Ens.MessageBodyD(id,"Request")=data("Request")
			}
			else {
				set ^Ens.MessageBodyD(id)=data
				set ^Ens.MessageBodyD(id,"Request")=data("Request")
			}
			set tStatus = 1
		}
		catch tInnerException {
		}
		if lock lock -(^Ens.MessageBodyD(id)#"E")
		if $Isobject(tInnerException) { throw tInnerException }
	}
	catch tException {
		set tStatus = tException.AsStatus()
	}
	quit tStatus }
%ValidateIndices(idxList="",autoCorrect=0,lockOption=1,multiProcess=1,mapList,verbose=1,errors)
	w !,"There are no indices to validate for class 'User.Request'"
	QUIT 1
%ValidateObject(unused=0,checkserial=1) public {
	set sc=1
	If '$system.CLS.GetModified() Quit sc
	If m%Age Set iv=..Age If iv'="" Set rc=(..AgeIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"Age",iv)
	If m%DOB Set iv=..DOB If iv'="" Set rc=(..DOBIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"DOB",iv)
	If m%Gender Set iv=..Gender If iv'="" Set rc=(..GenderIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"Gender",iv)
	If m%Name Set iv=..Name If iv'="" Set rc=(..NameIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"Name",iv)
	If m%Race Set iv=..Race If iv'="" Set rc=(..RaceIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"Race",iv)
	If m%Surname Set iv=..Surname If iv'="" Set rc=(..SurnameIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"Surname",iv)
	Quit sc }
zXMLDTD(top,format,input,dtdlist)
 Quit ##class(%XML.Implementation).XMLDTD("User.Request",.top,.format,.input,.dtdlist)
zXMLExportInternal()
 New tag,summary,attrsVal,savelocal,aval,k,tmpPrefix,prefixDepth,hasNoContent,hasElement,topAttrs,beginprefix,endprefix,savexsiAttrs,initialxsiAttrs,initlist,initialCR,inlineFlag,popAtEnd,saveTopPrefix,saveTypesPrefix,saveAttrsPrefix,saveUsePrefix,initlist
 Set $ztrap="XMLExportInternalTrap",popAtEnd=0
 Set summary=summaryArg,initialxsiAttrs=xsiAttrs
 If group Quit $$Error^%apiOBJ(6386,"User.Request")
 If indentFlag Set initialCR=($extract(currentIndent,1,2)=$c(13,10))
 Set id=createId
 Set temp=""
 If id'="" {
   If $piece($get(idlist(+$this)),",",2)'="" Quit 1
   Set idlist(+$this)=id_",1"
 }
 If encoded Set initlist=$lb($get(oreflist),inlineFlagArg),oreflist=1,inlineFlag=inlineFlagArg
 If 'nocycle,('encoded||inlineFlag) {
   If $data(oreflist($this)) Quit $$Error^%apiOBJ(6296,"User.Request")
   Set oreflist($this)=""
 }
 Set tag=$get(topArg)
 Set tmpi=(($get(typeAttr)'="")&&(typeAttr'="User.Request"))
 If $IsObject(namespaces) {
     Set popAtEnd=1,saveTopPrefix=topPrefix,saveTypesPrefix=typesPrefix,saveAttrsPrefix=attrsPrefix,saveUsePrefix=usePrefix
     Set sc=namespaces.PushNodeForExport("",$get(local,0),(encoded||tmpi),"",,.topPrefix,.topAttrs,.typesPrefix,.attrsPrefix,.usePrefix)
     If 'sc Quit sc
   Set beginprefix=$select(namespaces.ElementQualified&&usePrefix:typesPrefix,1:"")
   If topAttrs'="" Set temp=temp_" "_topAttrs
   If tag="" Set tag="Request"
   Set xsitype=namespaces.OutputTypeAttribute
 } Else {
   Set saveTopPrefix=topPrefix,saveTypesPrefix=typesPrefix,saveAttrsPrefix=attrsPrefix,saveUsePrefix=usePrefix
   Set typesPrefix=namespaces If (typesPrefix'=""),($extract(typesPrefix,*)'=":") Set typesPrefix=typesPrefix_":"
   If 'encoded Set namespaces=""
   Set (topPrefix,attrsPrefix,topAttrs,beginprefix)=""
   If tag="" Set tag=typesPrefix_"Request"
   Set xsitype=0
 }
 Set local=+$get(local),savelocal=local
 Set endprefix="</"_beginprefix,beginprefix="<"_beginprefix
 If tmpi Set temp=temp_" "_xsiPrefix_"type="""_typesPrefix_"Request"""_xsiAttrs,xsiAttrs=""
   If id'="" Set temp=" "_$select($get(soap12):soapPrefix_"id",1:"id")_"=""id"_id_""""_temp
 If encoded Set temp=temp_xsiAttrs,xsiAttrs=""
 If indentFlag Set %xmlmsg=currentIndent if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg } Set currentIndent=$select(initialCR:"",1:$c(13,10))_currentIndent_indentChars
 If tag[":" Set topPrefix=$piece(tag,":"),tag=$piece(tag,":",2)  If topPrefix'="" Set topPrefix=topPrefix_":"
 Set %xmlmsg="<"_topPrefix_tag_temp if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 Set attrsVal=attrsArg,attrsArg="" Set %xmlmsg=attrsVal if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 Set %xmlmsg=">" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 Set val=..Name
 Set %xmlmsg=currentIndent_beginprefix_"Name"_$select(xsitype:" "_xsiPrefix_"type="""_schemaPrefix_"string""",1:"")_">"_$select(val=$c(0):"",1:$select((val["<")||(val[">")||(val["&"):"<![CDATA["_$replace(val,"]]]]><![CDATA[>","]]]]]]><![CDATA[><![CDATA[>")_"]]]]><![CDATA[>",1:val))_endprefix_"Name>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 Set val=..Surname
 Set %xmlmsg=currentIndent_beginprefix_"Surname"_$select(xsitype:" "_xsiPrefix_"type="""_schemaPrefix_"string""",1:"")_">"_$select(val=$c(0):"",1:$select((val["<")||(val[">")||(val["&"):"<![CDATA["_$replace(val,"]]]]><![CDATA[>","]]]]]]><![CDATA[><![CDATA[>")_"]]]]><![CDATA[>",1:val))_endprefix_"Surname>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 Set val=..Age
 If val'="" {
   Set %xmlmsg=currentIndent_beginprefix_"Age"_$select(xsitype:" "_xsiPrefix_"type="""_schemaPrefix_"long""",1:"")_">"_val_endprefix_"Age>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 }
 Set val=..Gender
 Set %xmlmsg=currentIndent_beginprefix_"Gender"_$select(xsitype:" "_xsiPrefix_"type="""_schemaPrefix_"string""",1:"")_">"_$select(val=$c(0):"",1:$select((val["<")||(val[">")||(val["&"):"<![CDATA["_$replace(val,"]]]]><![CDATA[>","]]]]]]><![CDATA[><![CDATA[>")_"]]]]><![CDATA[>",1:val))_endprefix_"Gender>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 Set val=..Race
 Set %xmlmsg=currentIndent_beginprefix_"Race"_$select(xsitype:" "_xsiPrefix_"type="""_schemaPrefix_"string""",1:"")_">"_$select(val=$c(0):"",1:$select((val["<")||(val[">")||(val["&"):"<![CDATA["_$replace(val,"]]]]><![CDATA[>","]]]]]]><![CDATA[><![CDATA[>")_"]]]]><![CDATA[>",1:val))_endprefix_"Race>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 Set val=..DOB
 If val'="" {
   Set %xmlmsg=currentIndent_beginprefix_"DOB"_$select(xsitype:" "_xsiPrefix_"type="""_schemaPrefix_"long""",1:"")_">"_val_endprefix_"DOB>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 }
 If indentFlag { Set currentIndent=$extract(currentIndent,1,*-$length(indentChars)) Set %xmlmsg=currentIndent if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }}
 Set %xmlmsg="</"_topPrefix_tag_">"
 if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg } If indentFlag,'initialCR if $data(%xmlBlock) { Set %xmlmsg="" Do xeWriteLine^%occXMLInternal } else { write ! } Set $extract(currentIndent,1,2)=""
 If '$IsObject(namespaces) || (popAtEnd=1) Set topPrefix=saveTopPrefix,typesPrefix=saveTypesPrefix,attrsPrefix=saveAttrsPrefix,usePrefix=saveUsePrefix
 If popAtEnd Do namespaces.PopNode()
 If encoded Set oreflist=$list(initlist),inlineFlag=$list(initlist,2)
 If 'encoded||inlineFlag {
   If 'nocycle Kill oreflist($this)
 }
 Quit sc
XMLExportInternalTrap Set $ztrap=""
 If $data(val) , $IsObject(val) , ($piece($ze,">",1)="<METHOD DOES NOT EXIST") {
   Set sc=$$Error^%apiOBJ(6249,$classname(val))
 } Else {
   Set sc=$$Error^%apiOBJ(5002,$ze)
 }
XMLExportExit 
 If '$IsObject(namespaces) || (popAtEnd=1) Set topPrefix=saveTopPrefix,typesPrefix=saveTypesPrefix,attrsPrefix=saveAttrsPrefix,usePrefix=saveUsePrefix
 If popAtEnd Do namespaces.PopNode()
 Quit sc
zXMLGetSchemaImports(imports,classes)
 Quit ##class(%XML.Implementation).XMLGetSchemaImports("User.Request",.imports,.classes)
zXMLImportInternal()
 New child,childlist,node,nodelist,inner,innerlist,data,encodedArray,key,nsIndex,savechild,savechildlist,saveinner,saveinnnerlist,exists
 Set $ztrap="XMLImportInternalTrap"
 Set encoded=$case($piece(fmt,",",1),"":0,"literal":0,"encoded":1,"encoded12":1,:"")
 If encoded="" Quit $$Error^%apiOBJ(6231,fmt)
 Set nsIndex=$select($get(namespace)="":"",1:$get(@(tree)@("N",namespace)))
 Set node=nodeArg,nodelist=nodeArgChildlist
 If tag'=@(tree)@("d",$zlascii(nodelist,9)) Set inner=node Goto XMLImportMalformed
 If bareProjection Quit $$Error^%apiOBJ(6386,"User.Request")
 If encoded {
   Do XMLImportAttrnode() If $data(attributeList("id")) Set idlist(node)=$this
 }
 If $zboolean(+($zlascii(nodelist,13)#16),+1,1) Quit 1
 Set sc=$$XMLImportElements()
XMLImportExit Quit sc
XMLImportElements() ;
XMLLOOP1 Set descriptor=$zlascii(nodelist,$zwascii(nodelist,17)) Set child=($zlascii(@(tree)@($piece(node,",",1)),$piece(node,",",2))\16)_","_$zwascii(nodelist,17) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set child=##class(%XML.ImportHandler).NextChild(tree,node,.nodelist,child,.descriptor) } Else { Set child="" }} For { Quit:child=""  Quit:(descriptor#16)'=2  Set descriptor=$piece(child,",",2)+4 Set child=$piece(child,",",1)_","_descriptor Set descriptor=$zlascii(nodelist,descriptor) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set child=##class(%XML.ImportHandler).NextChild(tree,node,.nodelist,child,.descriptor) } Else {Set child="" }} } Goto XMLLOOP2
XMLLOOP For  { Set descriptor=$piece(child,",",2)+4 Set child=$piece(child,",",1)_","_descriptor Set descriptor=$zlascii(nodelist,descriptor) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set child=##class(%XML.ImportHandler).NextChild(tree,node,.nodelist,child,.descriptor) } Else {Set child="" }} Quit:child=""  Quit:(descriptor#16)'=2  }
XMLLOOP2 If child="" Quit sc
 If (descriptor#16)'=0 Set inner=child Goto XMLImportMalformedNoTag
 Set childlist=@(tree)@((descriptor\16))
 Set tag=@(tree)@("d",$zlascii(childlist,9))
 If tag="Name" {
   If ($get(namespace)="")||$case($zwascii(childlist,19),0:1,nsIndex:1,:0) {
   If encoded Set savechild=child,savechildlist=childlist
   If encoded,$$XMLImportIdChild() {
     Set data=idlist(child)
   } Else { Goto:'sc XMLImportExit
     If $zboolean(+($zlascii(childlist,13)#16),+1,1) { Set data=""
     } Else {
             If (($length(childlist)-$zwascii(childlist,17)-3)\4)>1 {
               Set data="" If '##class(%XML.ImportHandler).SerializeNode(tree,child,0,0,.data,,,childlist) Goto XMLImportErrchild
             } Else { Set descriptor=$zlascii(childlist,$zwascii(childlist,17)) Set data=($zlascii(@(tree)@($piece(child,",",1)),$piece(child,",",2))\16)_","_$zwascii(childlist,17) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set data=##class(%XML.ImportHandler).NextChild(tree,child,.childlist,data,.descriptor) } Else { Set data="" }}
               If data'="" { Goto:(descriptor#16)=0 XMLImportErrchild Set data=@(tree)@("d",(descriptor\16)) }}
             If data'="" Goto:('$s(($l(data)'>50):1,1:$$Error^%apiOBJ(7201,data,50))) XMLImportErrchild
     }
     If encoded Do XMLImportAttrchild() If $data(attributeList("id")) Set idlist(child)=data
   }
   If encoded Set child=savechild,childlist=savechildlist
   Set ..Name=data
   Goto XMLLOOP } }
 If tag="Surname" {
   If ($get(namespace)="")||$case($zwascii(childlist,19),0:1,nsIndex:1,:0) {
   If encoded Set savechild=child,savechildlist=childlist
   If encoded,$$XMLImportIdChild() {
     Set data=idlist(child)
   } Else { Goto:'sc XMLImportExit
     If $zboolean(+($zlascii(childlist,13)#16),+1,1) { Set data=""
     } Else {
             If (($length(childlist)-$zwascii(childlist,17)-3)\4)>1 {
               Set data="" If '##class(%XML.ImportHandler).SerializeNode(tree,child,0,0,.data,,,childlist) Goto XMLImportErrchild
             } Else { Set descriptor=$zlascii(childlist,$zwascii(childlist,17)) Set data=($zlascii(@(tree)@($piece(child,",",1)),$piece(child,",",2))\16)_","_$zwascii(childlist,17) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set data=##class(%XML.ImportHandler).NextChild(tree,child,.childlist,data,.descriptor) } Else { Set data="" }}
               If data'="" { Goto:(descriptor#16)=0 XMLImportErrchild Set data=@(tree)@("d",(descriptor\16)) }}
             If data'="" Goto:('$s(($l(data)'>50):1,1:$$Error^%apiOBJ(7201,data,50))) XMLImportErrchild
     }
     If encoded Do XMLImportAttrchild() If $data(attributeList("id")) Set idlist(child)=data
   }
   If encoded Set child=savechild,childlist=savechildlist
   Set ..Surname=data
   Goto XMLLOOP } }
 If tag="Age" {
   If ($get(namespace)="")||$case($zwascii(childlist,19),0:1,nsIndex:1,:0) {
   If encoded Set savechild=child,savechildlist=childlist
   If encoded,$$XMLImportIdChild() {
     Set data=idlist(child)
   } Else { Goto:'sc XMLImportExit
     If $zboolean(+($zlascii(childlist,13)#16),+1,1) { Set data=""
     } Else {
             If (($length(childlist)-$zwascii(childlist,17)-3)\4)>1 {
               Set data="" Goto XMLImportErrchild
             } Else { Set descriptor=$zlascii(childlist,$zwascii(childlist,17)) Set data=($zlascii(@(tree)@($piece(child,",",1)),$piece(child,",",2))\16)_","_$zwascii(childlist,17) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set data=##class(%XML.ImportHandler).NextChild(tree,child,.childlist,data,.descriptor) } Else { Set data="" }}
               If data'="" { Goto:(descriptor#16)=0 XMLImportErrchild Set data=@(tree)@("d",(descriptor\16)) }}
             Set data=$zstrip(data,"<>W",$c(13,10)) If data'="" Set data=$s($tr(data,"Ee(),.")'=data:"",1:$number(data,"I")) Goto:data="" XMLImportErrchild Goto:('$select(data=$c(0)&&$zu(115,13):1,$isvalidnum(data,0):1,1:$$Error^%apiOBJ(7207,data))) XMLImportErrchild
     }
     If encoded Do XMLImportAttrchild() If $data(attributeList("id")) Set idlist(child)=data
   }
   If encoded Set child=savechild,childlist=savechildlist
   Set ..Age=data
   Goto XMLLOOP } }
 If tag="Gender" {
   If ($get(namespace)="")||$case($zwascii(childlist,19),0:1,nsIndex:1,:0) {
   If encoded Set savechild=child,savechildlist=childlist
   If encoded,$$XMLImportIdChild() {
     Set data=idlist(child)
   } Else { Goto:'sc XMLImportExit
     If $zboolean(+($zlascii(childlist,13)#16),+1,1) { Set data=""
     } Else {
             If (($length(childlist)-$zwascii(childlist,17)-3)\4)>1 {
               Set data="" If '##class(%XML.ImportHandler).SerializeNode(tree,child,0,0,.data,,,childlist) Goto XMLImportErrchild
             } Else { Set descriptor=$zlascii(childlist,$zwascii(childlist,17)) Set data=($zlascii(@(tree)@($piece(child,",",1)),$piece(child,",",2))\16)_","_$zwascii(childlist,17) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set data=##class(%XML.ImportHandler).NextChild(tree,child,.childlist,data,.descriptor) } Else { Set data="" }}
               If data'="" { Goto:(descriptor#16)=0 XMLImportErrchild Set data=@(tree)@("d",(descriptor\16)) }}
             If data'="" Goto:('$s(($l(data)'>50):1,1:$$Error^%apiOBJ(7201,data,50))) XMLImportErrchild
     }
     If encoded Do XMLImportAttrchild() If $data(attributeList("id")) Set idlist(child)=data
   }
   If encoded Set child=savechild,childlist=savechildlist
   Set ..Gender=data
   Goto XMLLOOP } }
 If tag="Race" {
   If ($get(namespace)="")||$case($zwascii(childlist,19),0:1,nsIndex:1,:0) {
   If encoded Set savechild=child,savechildlist=childlist
   If encoded,$$XMLImportIdChild() {
     Set data=idlist(child)
   } Else { Goto:'sc XMLImportExit
     If $zboolean(+($zlascii(childlist,13)#16),+1,1) { Set data=""
     } Else {
             If (($length(childlist)-$zwascii(childlist,17)-3)\4)>1 {
               Set data="" If '##class(%XML.ImportHandler).SerializeNode(tree,child,0,0,.data,,,childlist) Goto XMLImportErrchild
             } Else { Set descriptor=$zlascii(childlist,$zwascii(childlist,17)) Set data=($zlascii(@(tree)@($piece(child,",",1)),$piece(child,",",2))\16)_","_$zwascii(childlist,17) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set data=##class(%XML.ImportHandler).NextChild(tree,child,.childlist,data,.descriptor) } Else { Set data="" }}
               If data'="" { Goto:(descriptor#16)=0 XMLImportErrchild Set data=@(tree)@("d",(descriptor\16)) }}
             If data'="" Goto:('$s(($l(data)'>50):1,1:$$Error^%apiOBJ(7201,data,50))) XMLImportErrchild
     }
     If encoded Do XMLImportAttrchild() If $data(attributeList("id")) Set idlist(child)=data
   }
   If encoded Set child=savechild,childlist=savechildlist
   Set ..Race=data
   Goto XMLLOOP } }
 If tag="DOB" {
   If ($get(namespace)="")||$case($zwascii(childlist,19),0:1,nsIndex:1,:0) {
   If encoded Set savechild=child,savechildlist=childlist
   If encoded,$$XMLImportIdChild() {
     Set data=idlist(child)
   } Else { Goto:'sc XMLImportExit
     If $zboolean(+($zlascii(childlist,13)#16),+1,1) { Set data=""
     } Else {
             If (($length(childlist)-$zwascii(childlist,17)-3)\4)>1 {
               Set data="" Goto XMLImportErrchild
             } Else { Set descriptor=$zlascii(childlist,$zwascii(childlist,17)) Set data=($zlascii(@(tree)@($piece(child,",",1)),$piece(child,",",2))\16)_","_$zwascii(childlist,17) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set data=##class(%XML.ImportHandler).NextChild(tree,child,.childlist,data,.descriptor) } Else { Set data="" }}
               If data'="" { Goto:(descriptor#16)=0 XMLImportErrchild Set data=@(tree)@("d",(descriptor\16)) }}
             Set data=$zstrip(data,"<>W",$c(13,10)) If data'="" Set data=$s($tr(data,"Ee(),.")'=data:"",1:$number(data,"I")) Goto:data="" XMLImportErrchild Goto:('$select(data=$c(0)&&$zu(115,13):1,$isvalidnum(data,0):1,1:$$Error^%apiOBJ(7207,data))) XMLImportErrchild
     }
     If encoded Do XMLImportAttrchild() If $data(attributeList("id")) Set idlist(child)=data
   }
   If encoded Set child=savechild,childlist=savechildlist
   Set ..DOB=data
   Goto XMLLOOP } }
 Goto XMLImportBadTagchild
XMLImportBadTagchild Set inner=child
XMLImportBadTag Quit $$Error^%apiOBJ(6237,tag_$$XMLImportLocation(inner))
XMLImportBadTypenode Set inner=node Goto XMLImportBadType
XMLImportBadTypechild Set inner=child
XMLImportBadType Quit $$Error^%apiOBJ(6277,class,$select(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))#16)=0:@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)),9)),1:@(tree)@("d",($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)))_$$XMLImportLocation(inner))
XMLImportErrnode Set inner=node Goto XMLImportErr
XMLImportErrchild Set inner=child
XMLImportErr
 Set data=##class(%XML.ImportHandler).GetNextChild(tree,inner,"")
 If (data'="") {
   If ($zlascii(@(tree)@($piece(data,",",1)),$piece(data,",",2))#16)'=0 {
     Quit $$Error^%apiOBJ(6232,@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)),9))_$$XMLImportLocation(inner),$extract(@(tree)@("d",($zlascii(@(tree)@($piece(data,",",1)),$piece(data,",",2))\16)),1,200))
   } Else {
     Quit $$Error^%apiOBJ(6253,@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)),9))_$$XMLImportLocation(inner),@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(data,",",1)),$piece(data,",",2))\16)),9)))
   }
 } Else {
   Quit $$Error^%apiOBJ(6252,@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)),9))_$$XMLImportLocation(inner))
 }
XMLImportIdErr Set sc=$$Error^%apiOBJ(6236,id,@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)),9))_$$XMLImportLocation(inner)) Quit sc
XMLImportMalformed Set sc=$$Error^%apiOBJ(6233,$select(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))#16)=0:@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)),9)),1:@(tree)@("d",($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)))_$$XMLImportLocation(inner)) Quit sc
XMLImportMalformedNoTag Set node=$select($piece(inner,",",1)<=0:0,1:$zlascii(@(tree)@($piece(inner,",",1)),1)_","_$zlascii(@(tree)@($piece(inner,",",1)),5)),sc=$$Error^%apiOBJ(6254,$select(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))#16)=0:@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)),9)),1:@(tree)@("d",($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16))),$select(($zlascii(@(tree)@($piece(node,",",1)),$piece(node,",",2))#16)=0:@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(node,",",1)),$piece(node,",",2))\16)),9)),1:@(tree)@("d",($zlascii(@(tree)@($piece(node,",",1)),$piece(node,",",2))\16)))_$$XMLImportLocation(node)) Quit sc
XMLImportNSchild Set inner=child
XMLImportNS Set sc=$$Error^%apiOBJ(6235,@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)),9))_$$XMLImportLocation(inner)) Quit sc
XMLImportLocation(node) new msg,loc
 Set loc=$lb($zlascii(@(tree)@(($zlascii(@(tree)@($piece(node,",",1)),$piece(node,",",2))\16)),21),$zlascii(@(tree)@(($zlascii(@(tree)@($piece(node,",",1)),$piece(node,",",2))\16)),25))
 If loc="" Quit ""
 Set msg=$get(^%qMsg("%ObjectErrors",$s(""'="":$zcvt("","L"),1:$s($mvv(58)="":"en",1:$mvv(58))),"XMLImportLocation")," (%1,%2)")
 Quit $$FormatText^%occMessages(msg,$listget(loc,1),$listget(loc,2))
XMLImportInternalTrap Set $ztrap=""
 Set loc=$select($ZE["<CLASS DOES NOT EXIST>":" for element "_tag_$$XMLImportLocation(child),1:"")
 Quit $$Error^%apiOBJ(5002,$ZE_loc)
XMLImportIdChild() Set inner=child,innerlist=childlist,tmp=$$XMLImportId(),child=inner,childlist=innerlist Quit tmp
XMLImportId() ;
 Do XMLImportAttrinner()
 If $data(attributeList("href")) {
   Set id=$case($data(@(tree)@("d",$zlascii(attributeList("href"),13))),1:@(tree)@("d",$zlascii(attributeList("href"),13)),0:"",:##class(%XML.ImportHandler).GetAttribute(tree,attributeList("href")))
   If $extract(id)="#" {
     Set tmp=$select($get(@(tree)@("i",$extract(id,2,*)))="":"",1:$piece(@(tree)@("i",$extract(id,2,*)),",",1)_","_$piece(@(tree)@("i",$extract(id,2,*)),",",2)) If tmp="" Goto XMLImportIdErr
     Set inner=tmp
     Set descriptor=$zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2)) Set innerlist=@(tree)@((descriptor\16))
   }
 } ElseIf $data(attributeList("ref")),($get(@(tree)@("n",$zwascii(attributeList("ref"),9)))="http://www.w3.org/2003/05/soap-encoding") {
   Set id=$case($data(@(tree)@("d",$zlascii(attributeList("ref"),13))),1:@(tree)@("d",$zlascii(attributeList("ref"),13)),0:"",:##class(%XML.ImportHandler).GetAttribute(tree,attributeList("ref")))
   Set tmp=$select($get(@(tree)@("i",id))="":"",1:$piece(@(tree)@("i",id),",",1)_","_$piece(@(tree)@("i",id),",",2)) If tmp="" Goto XMLImportIdErr
   Set inner=tmp
   Set descriptor=$zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2)) Set innerlist=@(tree)@((descriptor\16))
 } ElseIf '$data(attributeList("id")) {
   Quit 0
 }
 Quit $data(idlist(inner))
XMLImportAttrnode()
 If $get(attributeList)=node Quit
 Kill attributeList
 Set attributeList=node
 Set offset=29 While offset<$zwascii(nodelist,17) { Set attribute=$extract(nodelist,offset,offset+15)
    Set attrname=@(tree)@("d",$zlascii(attribute,1))
    Set attributeList(attrname)=attribute
 Set offset=offset+16 }
 Quit
XMLImportAttrchild()
 If $get(attributeList)=child Quit
 Kill attributeList
 Set attributeList=child
 Set offset=29 While offset<$zwascii(childlist,17) { Set attribute=$extract(childlist,offset,offset+15)
    Set attrname=@(tree)@("d",$zlascii(attribute,1))
    Set attributeList(attrname)=attribute
 Set offset=offset+16 }
 Quit
XMLImportAttrinner()
 If $get(attributeList)=inner Quit
 Kill attributeList
 Set attributeList=inner
 Set offset=29 While offset<$zwascii(innerlist,17) { Set attribute=$extract(innerlist,offset,offset+15)
    Set attrname=@(tree)@("d",$zlascii(attribute,1))
    Set attributeList(attrname)=attribute
 Set offset=offset+16 }
 Quit
zXMLNew(document,node,containerOref="")
	Quit (##class(User.Request).%New())
zXMLSchema(top="",format="",namespacePrefix="",input=0,refOnly=0,schema)
 Quit ##class(%XML.Implementation).XMLSchema("User.Request",top,format,namespacePrefix,input,refOnly,.schema)
zAgeGetStored(id) public {
	Quit $Select(id'="":$listget($g(^Ens.MessageBodyD(id,"Request")),3),1:"") }
zAgeXSDToLogical(%val) public {
	Q $s($tr(%val,"Ee(),.")'=%val:"",1:$number(%val,"I")) }
zDOBGetStored(id) public {
	Quit $Select(id'="":$listget($g(^Ens.MessageBodyD(id,"Request")),6),1:"") }
zDOBXSDToLogical(%val) public {
	Q $s($tr(%val,"Ee(),.")'=%val:"",1:$number(%val,"I")) }
zGenderGetStored(id) public {
	Quit $Select(id'="":$listget($g(^Ens.MessageBodyD(id,"Request")),4),1:"") }
zNameGetStored(id) public {
	Quit $Select(id'="":$listget($g(^Ens.MessageBodyD(id,"Request")),1),1:"") }
zRaceGetStored(id) public {
	Quit $Select(id'="":$listget($g(^Ens.MessageBodyD(id,"Request")),5),1:"") }
zSurnameGetStored(id) public {
	Quit $Select(id'="":$listget($g(^Ens.MessageBodyD(id,"Request")),2),1:"") }
zExtentExecute(%qHandle) [ SQLCODE ] public { New %ROWCOUNT,%ROWID,%msg,SQLCODE 
	Set sc=1
	 ;---&sql(DECLARE QExtent CURSOR FOR
 	 ;---		 SELECT ID FROM SQLUser.Request)
 	 ;--- ** SQL PUBLIC Variables: SQLCODE
	 
	 ;---&sql(OPEN QExtent)
	try { s %qHandle="",%qHandle=$classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xESb1Zh8vG2APNzPknKVLO9AwVig","%New") if '$isobject(%qHandle) s %qHandle=$$%0dsqlL() } catch { if $ze["<CLASS DOES NOT EXIST>"&&($ze["%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xESb1Zh8vG2APNzPknKVLO9AwVig")||($ze["<ZSQLU>") { s %qHandle=$$%0dsqlL() } else { throw } }
	If SQLCODE { Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.%Message=$g(%msg) Set sc=$$Error^%apiOBJ(5821,"SQLCODE = "_SQLCODE) } Else { Set sc=1 }
	Quit sc }
zExtentFetch(%qHandle,Row,AtEnd=0) [ SQLCODE ] public { New %ROWCOUNT,%ROWID,%msg,SQLCODE 
	Set Row="",AtEnd=0
	 ;---&sql(FETCH QExtent INTO :c1)
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE
	if $isobject($g(%qHandle))'=1 { s SQLCODE=-102 } else { do %qHandle.FET() if SQLCODE=0 { s c1=%qHandle.sqlcol1 } }
	If 'SQLCODE { Set Row=$lb(c1) Set sc=1 }
	ElseIf SQLCODE=100 { Set AtEnd=1,sc=1 Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.%ROWCOUNT=$g(%ROWCOUNT) }
	Else { Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.Message=$g(%msg) Set AtEnd=1,sc=$$Error^%apiOBJ(5540,SQLCODE,$get(%msg)) }
	QUIT sc }
zExtentFetchRows(%qHandle,FetchCount=0,RowSet,ReturnCount,AtEnd) [ SQLCODE ] public { New %ROWCOUNT,%ROWID,%msg,SQLCODE 
	Set RowSet="",ReturnCount=0,AtEnd=0
	For {
		 ;---&sql(FETCH QExtent INTO :c1)
 		 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE
		if $isobject($g(%qHandle))'=1 { s SQLCODE=-102 } else { do %qHandle.FET() if SQLCODE=0 { s c1=%qHandle.sqlcol1 } }
		If 'SQLCODE { Set RowSet=RowSet_$lb(c1),ReturnCount=ReturnCount+1 Quit:(ReturnCount=FetchCount)||(($l(RowSet)+($l(RowSet)\ReturnCount))>24000) } Else { Set AtEnd=1 Quit }
	}
	If 'SQLCODE { Set sc=1 } ElseIf SQLCODE=100 { Set sc=1 Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.%ROWCOUNT=$g(%ROWCOUNT) } Else { Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.Message=$g(%msg) Set sc=$$Error^%apiOBJ(5540,SQLCODE,$get(%msg)) }
	Quit sc }
zExtentSendODBC(%qHandle,array,qacn,%qrc,piece,ColumnCount) [ SQLCODE ] public { New %ROWCOUNT,%ROWID,%msg,SQLCODE 
	set %qrc=0,piece=0
	for {
		set rc=..ExtentFetch(.%qHandle,.row,.atend)
		if ('rc) { set %qrc=-400 set:$isobject($get(%sqlcontext)) %sqlcontext.SQLCode=-400,%sqlcontext.Message=$g(%msg) do ProcessError^%ourProcedure(rc,$get(%sqlcontext),.%qrc,.%msg),Logerr^%SYS.SQLSRV(%qrc,"","SP",.%msg) RETURN  }
		if row="" { set %qrc=100 set:$isobject($get(%sqlcontext)) %sqlcontext.SQLCode=100 RETURN  }
		if $g(%protocol)>50 { RETURN:$zobjexport(row,60) }
		else {
			if %protocol>46 { for piece=1:1:ColumnCount { goto:$zobjexport($lg(row,piece),50) SPDone } }
			else { for piece=1:1:ColumnCount { goto:$zobjexport($lg(row,piece),7) SPDone } }
		}
	}
	QUIT
SPDone	set:%protocol>46 piece=piece+1
	kill array(qacn)
	for i=piece:1:ColumnCount { set array(qacn,i)=$lg(row,i) }
	QUIT }
 q
%0dsqlL()	n %xxsql
	s %xxsql("S",1)="DECLARE QExtent CURSOR FOR SELECT ID "
	s %xxsql("S",2)="INTO  :i%sqlcol1"
	s %xxsql("S",3)="FROM SQLUser . Request"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","DEBUG")=$c(1),%xxsql("M","FORKNETDMN")=$c(1)
	s %xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","SOAP12ENCns")="0"_$c(1,1)_"0"_$c(1)_"""http://www.w3.org/2003/05/soap-encoding"""
	s %xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1),%xxsql("M","USELOST")=$c(1),%xxsql("M","ZVERSION")=$c(1)
	s %xxsql("I","%callout")="",%xxsql("I","%occErrors")="",%xxsql("I","%occSqlfunc")="",%xxsql("I","%sySite")="",%xxsql("I","%sySt")=""
	s %xxsql("I","%sySystem")="",%xxsql("I","%xmlMap")="",%xxsql("I","EnsConstants")="",%xxsql("I","EnsErrors")="",%xxsql("I","EnsUtil")=""
	s %xxsql("I","Ensemble")="",%xxsql("NS")="PROJECT1"
	return $$BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Runtime","","","User",0,"",),",1,QExtent,","User.Request.CLS",1)
zExtentFunc() public {
	try {
		set tSchemaPath = ##class(%SQL.Statement).%ClassPath($classname())
			set tStatement = ##class(%SQL.Statement).%New(,tSchemaPath)
			do tStatement.prepare(" SELECT ID FROM SQLUser . Request")
		set tResult = tStatement.%Execute()
	}
	catch tException { if '$Isobject($Get(tResult)) { set tResult = ##class(%SQL.StatementResult).%New() } set tResult.%SQLCODE=tException.AsSQLCODE(),tResult.%Message=tException.AsSQLMessage() }
	Quit tResult }
zExtentGetODBCInfo(colinfo,parminfo,qHandle) public {
	set version = $Select($Get(%protocol,41)>40:4,1:3)
	Set metadata=$lb(1,1,"ID",4,10,0,2,"ID","Request","SQLUser","",$c(0,0,0,0,0,0,0,0,0,0,0,1),0)
	Set colcount=$li(metadata,2),cmdlen=colcount*10,parmcount=$li(metadata,3+cmdlen),pmdlen=parmcount*6,parminfo=$li(metadata,cmdlen+3,cmdlen+pmdlen+3)
	If version=4 {
		Set colinfo=$li(metadata,2,2+cmdlen)
	} Else {
		Set colinfo=$li(metadata,2,2)
		For i=0:1:colcount-1 Set colinfo=colinfo_$list(metadata,3+(i*10),11+(i*10))
	}
	Quit 1 }
zIDKEYSQLCheckUnique(pFromOrig=0,%pID,%pVals...)
	 ;---if pFromOrig &sql(SELECT ID FROM Ens.MessageBody WHERE  ID=:%pVals(1) AND (%ID <> :%pID OR :%pID IS NULL)) QUIT SQLCODE=100
 	 ;--- ** SQL PUBLIC Variables: %pID, %pVals, SQLCODE
	if pFromOrig try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xEuspmzEnPV81B7Aa5CFryP16TjU","%New") } catch { if $ze["<CLASS DOES NOT EXIST>"&&($ze["%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xEuspmzEnPV81B7Aa5CFryP16TjU")||($ze["<ZSQLU>") { d %0dsqlP } else { throw } } QUIT SQLCODE=100
	 ;---&sql(SELECT ID FROM SQLUser.Request WHERE  ID=:%pVals(1) AND (%ID <> :%pID OR :%pID IS NULL)) QUIT SQLCODE=100
 	 ;--- ** SQL PUBLIC Variables: %pID, %pVals, SQLCODE
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xEITKsaA6r2lqulhX5IGQ3ommpMF","%New") } catch { if $ze["<CLASS DOES NOT EXIST>"&&($ze["%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xEITKsaA6r2lqulhX5IGQ3ommpMF")||($ze["<ZSQLU>") { d %0dsqlR } else { throw } } QUIT SQLCODE=100
 q
%0dsqlP	n %xxsql
	s %xxsql("S",1)="SELECT ID FROM Ens . MessageBody WHERE ID = :%pVals(1) AND ( %ID <> :%pID OR :%pID IS NULL )"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","DEBUG")=$c(1),%xxsql("M","FORKNETDMN")=$c(1)
	s %xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","SOAP12ENCns")="0"_$c(1,1)_"0"_$c(1)_"""http://www.w3.org/2003/05/soap-encoding"""
	s %xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1),%xxsql("M","USELOST")=$c(1),%xxsql("M","ZVERSION")=$c(1)
	s %xxsql("I","%callout")="",%xxsql("I","%occErrors")="",%xxsql("I","%occSqlfunc")="",%xxsql("I","%sySite")="",%xxsql("I","%sySt")=""
	s %xxsql("I","%sySystem")="",%xxsql("I","%xmlMap")="",%xxsql("I","EnsConstants")="",%xxsql("I","EnsErrors")="",%xxsql("I","EnsUtil")=""
	s %xxsql("I","Ensemble")="",%xxsql("NS")="PROJECT1"
	d BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","User",0,"",),,"User.Request.CLS")
	q
%0dsqlR	n %xxsql
	s %xxsql("S",1)="SELECT ID FROM SQLUser . Request WHERE ID = :%pVals(1) AND ( %ID <> :%pID OR :%pID IS NULL )"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","DEBUG")=$c(1),%xxsql("M","FORKNETDMN")=$c(1)
	s %xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","SOAP12ENCns")="0"_$c(1,1)_"0"_$c(1)_"""http://www.w3.org/2003/05/soap-encoding"""
	s %xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1),%xxsql("M","USELOST")=$c(1),%xxsql("M","ZVERSION")=$c(1)
	s %xxsql("I","%callout")="",%xxsql("I","%occErrors")="",%xxsql("I","%occSqlfunc")="",%xxsql("I","%sySite")="",%xxsql("I","%sySt")=""
	s %xxsql("I","%sySystem")="",%xxsql("I","%xmlMap")="",%xxsql("I","EnsConstants")="",%xxsql("I","EnsErrors")="",%xxsql("I","EnsUtil")=""
	s %xxsql("I","Ensemble")="",%xxsql("NS")="PROJECT1"
	d BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","User",0,"",),,"User.Request.CLS")
	q
zIDKEYSQLExists(pLockOnly=0,pUnlockRef,%pVal...)
	// SQL Foreign Key validation entry point for Key IDKEY.  Called by FKeys that reference this Key to see if the row is defined
	new id set id=%pVal(1)
	if pLockOnly>=0 { if '..%SQLGetLock(id,1,.pUnlockRef) { set sqlcode=-114,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler39",,"SQLUser"_"."_"Request"_":"_"IDKEY") QUIT 0 } }
	if pLockOnly<1 {
		new qv set qv='..IDKEYSQLCheckUnique(0,,%pVal(1)) QUIT:pLockOnly=-1 qv
		do:'$g(pUnlockRef) ..%SQLReleaseLock(id,1) quit qv
	}
	else { do:'$g(pUnlockRef) ..%SQLReleaseLock(id,1) QUIT 1 }
	Return
]]></Routine>


<Class name="User.Request">
<Super>Ens.Request,User.Person</Super>
<TimeChanged>65833,51659.404026</TimeChanged>
<TimeCreated>65822,29493.444752</TimeCreated>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DefaultData>RequestDefaultData</DefaultData>
<Data name="RequestDefaultData">
<Structure>listnode</Structure>
<Subscript>"Request"</Subscript>
<Value name="1">
<Value>Name</Value>
</Value>
<Value name="2">
<Value>Surname</Value>
</Value>
<Value name="3">
<Value>Age</Value>
</Value>
<Value name="4">
<Value>Gender</Value>
</Value>
<Value name="5">
<Value>Race</Value>
</Value>
<Value name="6">
<Value>DOB</Value>
</Value>
</Data>
</Storage>
</Class>


<Routine name="User.Select.1" type="INT" languagemode="0" generated="1" timestamp="65834,50436.5064"><![CDATA[
 ;User.Select.1
 ;Generated for class User.Select.  Do NOT edit. 03/31/2021 02:00:36PM
 ;;6E4C5746;User.Select
 ;
zGetRequestClassList() public {
 Set tList=""
 Set tList=tList_$lb("User.Request")
 Quit tList }
zGetResponseClassList(pRequest="") public {
 If pRequest="User.Request" Quit $lb("User.selectResponse")
 If pRequest="" Quit $lb("User.selectResponse")
 Quit "" }
zGetSettingRow(pSettingName="",pSourceClass="") public {
	Set tRow = ""
	// Check if the class has been compiled with the new generator
	If (pSourceClass = "User.Select") {
		Set tRow = $case(pSettingName,
			"AlertGroups": $LB("AlertGroups","The Alert Groups to which this item belongs.","%Library.String","",2500,"","","","",0,"Alert Groups","Alerting","Alerting Control","selector?multiSelect=1&context={Ens.ContextSearch/ProductionAlertGroups?productionName=@productionId}"),
			"AlertOnError": $LB("AlertOnError","Send an Alert message whenever an error occurs here","%Library.Boolean",0,"","","","","",0,"Alert On Error","Alerting","Alerting Control",""),
			"AlertRetryGracePeriod": $LB("AlertRetryGracePeriod","When AlertOnError is True, and the Operation is retrying,"_$char(13,10)_"refrain from alerting if the Operation succeeds within this number of seconds after an error","%Library.Numeric",0,"",0,"","","",0,"Alert Retry Grace Period","Alerting","Alerting Control",""),
			"ArchiveIO": $LB("ArchiveIO","If set, the Adapter will log in the InterSystems IRIS I/O archive each input and output communication it has with its external system.","%Library.Boolean",0,"","","","","",0,"Archive IO","Dev","Development and Debugging",""),
			"BusinessPartner": $LB("BusinessPartner","Name of a Business Partner Profile associated with this item","%Library.String","",128,"","","","",0,"Business Partner","Info","Informational Settings","partnerSelector"),
			"FailureTimeout": $LB("FailureTimeout","Total number of seconds to keep trying to deliver the message. <br>"_$char(13,10)_"After this number of seconds has elapsed, the business operation discards the message data and returns an error code. <br>"_$char(13,10)_"To ensure that no message is ever skipped, enter a Failure Timeout value of -1, which means 'Never time out'. <br>"_$char(13,10)_"Use a setting of -1 when complete data delivery is critical, for example in health care applications. ","%Library.Numeric",15,"",-1,"","","",0,"Failure Timeout","Additional","Additional Settings",""),
			"InactivityTimeout": $LB("InactivityTimeout","Send an Alert message if this number of seconds elapses with no messages being processed by this item. <br/>"_$char(13,10)_"Note that this alert will be sent even if AlertOnError is False. <br/>"_$char(13,10)_"Zero means no alerts of this type will be sent.","%Library.Numeric",0,"",0,"","","",0,"Inactivity Timeout","Alerting","Alerting Control",""),
			"QueueCountAlert": $LB("QueueCountAlert","Number of messages on this item's queue needed to trigger an Alert message to be sent. Note that no further"_$char(13,10)_"alerts will be sent unless the number of messages on the queue drops below 80% of this number and then rises again to this number. <br/>"_$char(13,10)_"Note that this alert will be sent even if AlertOnError is False. <br/>"_$char(13,10)_"Zero means no alerts of this type will be sent.","%Library.Numeric",0,"",0,"","","",0,"Queue Count Alert","Alerting","Alerting Control",""),
			"QueueWaitAlert": $LB("QueueWaitAlert","The number of seconds a message at the front of the queue may have waited since being queued before an alert is triggered.<br/>"_$char(13,10)_"Only one alert will be raised per host item per sequential trigger of the queue wait threshold. <br/>"_$char(13,10)_"Note that this alert will be sent even if AlertOnError is False. <br/>"_$char(13,10)_"Zero means no alerts of this type will be sent.","%Library.Numeric",0,"",0,"","","",0,"Queue Wait Alert","Alerting","Alerting Control",""),
			"ReplyCodeActions": $LB("ReplyCodeActions","<p>A comma-separated list of codes specifying what action this Operation will take on various reply status conditions. "_$char(13,10)_"The format of the list is: <br/> &lt;code&gt;=&lt;actions&gt;,(&lt;code&gt;,&lt;code&gt;)=&lt;actions&gt;,...<br/>"_$char(13,10)_"Types of reply status condition are identified by a specification code:"_$char(13,10)_"<ul style=""list-style-type: none;"">"_$char(13,10)_"<li><b>E</b> - Error status returned from message handler</li>"_$char(13,10)_"<li><b>E#&lt;statuscode&gt;</b> - Error status returned from message handler has status code equal to &lt;statuscode&gt;</li>"_$char(13,10)_"<li><b>E*&lt;text&gt;</b> - Error status returned from message handler contains text string &lt;text&gt;</li>"_$char(13,10)_"<li><b>X</b> - there is no reply message at all</li>"_$char(13,10)_"</ul></p>"_$char(13,10)_"<p>The following values for &lt;actions&gt; may be used alone or in combinations: "_$char(13,10)_"<ul style=""list-style-type: none;"">"_$char(13,10)_"<li><b>C</b> - Treat the message as Completed OK.</li>"_$char(13,10)_"<li><b>W</b> - Log a warning. If no other non-warning &lt;actions&gt; are triggered, the message will be treated as Completed OK.</li>"_$char(13,10)_"<li><b>R</b> - Retry the message according to the configured RetryInterval and FailureTimeout; finally Fail unless a "_$char(13,10)_"different action is also specified.</li>"_$char(13,10)_"<li><b>S</b> - Suspend the message, log an error, and move on to try the next message.</li>"_$char(13,10)_"<li><b>D</b> - Disable the Operation, log an error and restore the message to the front of the Operation's queue.</li>"_$char(13,10)_"<li><b>F</b> - Fail with an error and move on to try the next message from the Operation's queue.</li></ul>"_$char(13,10)_"An example of a valid ReplyCodeActions specification is 'E#6301=R,E#&lt;Ens&gt;ErrGeneral=RD,E=F'. This specification will result in a "_$char(13,10)_"retry when error code 6301 is encountered. When error code &lt;Ens&gt;ErrGeneral is encountered, the Operation first retries to send "_$char(13,10)_"the message until FailureTimeout and then, if the error continues, it disables the Operation instead of failing. Any other errors will "_$char(13,10)_"cause the Operation to fail processing of the current message and return the error status to the caller, without retrying first.</p>"_$char(13,10)_"<p><b>The default behavior is 'E=F'.</b> Thus any error status will result in the error being logged and returned to the caller,"_$char(13,10)_"no retries will be attempted, and the Operation will move on to try the next message from its queue.</p>"_$char(13,10)_"<p>All codes where &lt;actions&gt; consists of only 'W' (for 'log a Warning') will be evaluated, and a warning will be"_$char(13,10)_"generated for each matching &lt;code&gt;. Other &lt;code&gt; values will be evaluated in left-to-right order, executing the"_$char(13,10)_"first matching &lt;code&gt; that has a non-warning &lt;actions&gt; value. As noted in the details for the 'W' flag, an error"_$char(13,10)_"that only triggers 'W' &lt;actions&gt; will be treated as Completed OK.</p>","%Library.String","",1000,"","","","",0,"Reply Code Actions","Additional","Additional Settings",""),
			"RetryInterval": $LB("RetryInterval","How frequently to retry access to the output system","%Library.Numeric",5,"",0,"","","",0,"Retry Interval","Additional","Additional Settings",""),
			"SendSuperSession": $LB("SendSuperSession","<p>Flag whether the  %SuperSession property ought to be included in the outbound message.</p>"_$char(13,10)_"<p>Including the Super Session in the outbound message depends on the transport mechanism.</p>"_$char(13,10)_"<p>InterSystems IRIS supports automatically including the %SuperSession in the HTTP Headers for"_$char(13,10)_"both the HTTP and SOAP Outbound Adapters based on this setting.</p>"_$char(13,10)_"<p>For other transport mechanisms custom code can call the host operation API: <METHOD>IncludeSuperSession</METHOD>(.tSC)"_$char(13,10)_"and then use as appropriate the host property value of <PROPERTY>%SuperSession</PROPERTY> if IncludeSuperSession"_$char(13,10)_"API returns true.</p>"_$char(13,10)_"<p>The IncludeSuperSession() API returns true if the operation ought to send a super session based on this"_$char(13,10)_"host setting of SendSuperSession and the %SuperSession property is not empty.</p>"_$char(13,10)_"<p>The IncludeSuperSession() API will populate the host property <PROPERTY>%SuperSession</PROPERTY>"_$char(13,10)_"with either a generated Super Session or leave it with the Super Session passed to it with the request.</p>"_$char(13,10)_"<p>The IncludeSuperSession() API will return false if either SendSuperSession"_$char(13,10)_"is false or there was an error generating the super session (tSC will be populated accordingly).</p>"_$char(13,10)_"Example use in custom adapter Code: <br>"_$char(13,10)_"<pre>"_$char(13,10)_"#dim tSC As %Status = $$$OK"_$char(13,10)_"If ..BusinessHost.IncludeSuperSession(.tSC) {"_$char(13,10)_" /*"_$char(13,10)_"	  code to include ..BusinessHost.%SuperSession in output"_$char(13,10)_"	  based on transport mechanism."_$char(13,10)_" */	"_$char(13,10)_"}</pre>"_$char(13,10)_"<p>See also Host methods <method>GenerateSuperSession</method> and <method>OnGenerateSuperSession</method></p>","%Library.Boolean","","","","","","",0,"Send SuperSession","Additional","Additional Settings",""),
			"ThrottleDelay": $LB("ThrottleDelay","Duration of forced idleness before processing the next message, in milliseconds","%Library.Numeric",0,"","","","","",0,"Throttle Delay","Additional","Additional Settings",""),
			: "")
	}
	Else { // Fall back on getting the data dynamically 
		Set tRow = ..GetDynamicSettingRow(pSettingName,pSourceClass)
	}
	Quit tRow }
zMessageHandler(pRequest,pResponse) public {
 Set $ZT="Trap",$EC="",tSC=1
 do {
 If pRequest.%IsA("User.Request") {
  Do:..ArchiveIO ..NewIOLogEntry(0,1,"","Select",..%SessionId,pRequest)
  Set ^IRIS.Temp.EnsJobMonitor($namespace,"sys"_":"_$Job,..%ConfigName,"%Method")="Select",^IRIS.Temp.EnsJobMonitor($namespace,"sys"_":"_$Job,..%ConfigName,"%LastActivity")=$zdatetime($ztimestamp,3,,3)
  Set tSC=..Select(.pRequest,.pResponse)
  Set ^IRIS.Temp.EnsJobMonitor($namespace,"sys"_":"_$Job,..%ConfigName,"%Method")="",^IRIS.Temp.EnsJobMonitor($namespace,"sys"_":"_$Job,..%ConfigName,"%LastActivity")=$zdatetime($ztimestamp,3,,3)
  Do:$S($D(%Ensemble("DoTrace")):%Ensemble("DoTrace"),1:##class(Ens.Util.Trace).DoTrace()) ##class(Ens.Util.Trace).WriteTrace("system",$classname(),"MessageHandler","Select() returned with status "_$$getAllErrorTexts^EnsUtil(tSC)_", Retry="_..Retry_", SuspendMessage="_..SuspendMessage_", DeferResponse="_..DeferResponse_", Response="_$S('($Data(pResponse)#2&&$IsObject(pResponse)):"", 1:pResponse_"/"_$S('pResponse.%Extends("%Persistent"):"", 1:pResponse.%Id())))
  Do:$IsObject(..IOLogEntry) ..CloseIOLogEntry(tSC,"",$G(pResponse))
  Quit
 }
 Do:..ArchiveIO ..NewIOLogEntry(0,1,"","OnMessage",..%SessionId,pRequest)
 Set ^IRIS.Temp.EnsJobMonitor($namespace,"sys"_":"_$Job,..%ConfigName,"%Method")="OnMessage",^IRIS.Temp.EnsJobMonitor($namespace,"sys"_":"_$Job,..%ConfigName,"%LastActivity")=$zdatetime($ztimestamp,3,,3)
 Set tSC=..OnMessage(.pRequest,.pResponse)
 Set ^IRIS.Temp.EnsJobMonitor($namespace,"sys"_":"_$Job,..%ConfigName,"%Method")="",^IRIS.Temp.EnsJobMonitor($namespace,"sys"_":"_$Job,..%ConfigName,"%LastActivity")=$zdatetime($ztimestamp,3,,3)
 Do:$S($D(%Ensemble("DoTrace")):%Ensemble("DoTrace"),1:##class(Ens.Util.Trace).DoTrace()) ##class(Ens.Util.Trace).WriteTrace("system",$classname(),"MessageHandler","OnMessage() returned with status "_$$getAllErrorTexts^EnsUtil(tSC)_", Retry="_..Retry_", SuspendMessage="_..SuspendMessage_", DeferResponse="_..DeferResponse_", Response="_$S('($Data(pResponse)#2&&$IsObject(pResponse)):"", 1:pResponse_"/"_$S('pResponse.%Extends("%Persistent"):"", 1:pResponse.%Id())))
 Do:$IsObject(..IOLogEntry) ..CloseIOLogEntry(tSC,"",pResponse)
 } While 0
Exit
 If $TLevel>0 Set tTL=$TLevel  While $TLevel>0 { TCommit } Do ##class(Ens.Util.Log).LogWarning($classname(),"MessageHandler",tTL_" open user transaction"_$S(tTL>1:"s",1:"")_" found after BO MessageHandler method; committing before proceeding")
 Quit tSC
Trap
 Set $ZT="",tSC=##class(Ens.Util.Error).ExceptionStatus()
 Goto Exit }
zMessageHeaderHandler(pRequestHeader,pResponseHeader) public {
	Set $EC="",(tSC,tSCSuspend)=1, tAborted=0, pResponseHeader="", tDoAlert=""
	try {
		Set ..%RequestHeader=pRequestHeader, %Ensemble("CurrentHeaderId") = pRequestHeader.%Id()
		If pRequestHeader.MessageBodyClassName'="" {
			Set tRequest = $classmethod(pRequestHeader.MessageBodyClassName,"%OpenId",pRequestHeader.MessageBodyId,,.tSC)
			If '$IsObject(tRequest) Set tSC=$$Error^%apiOBJ("<Ens>ErrGeneral","Could not open MessageBody "_pRequestHeader.MessageBodyId_" for MessageHeader #"_pRequestHeader.%Id()_" with body class "_pRequestHeader.MessageBodyClassName_":"_$$getAllErrorTexts^EnsUtil(tSC))  Quit
		} Else {
			Set tRequest="", tSC=$$Error^%apiOBJ("<Ens>ErrGeneral","No MessageBody classname for MessageHeader #"_pRequestHeader.%Id())  Quit
		}
		Do ##class(Ens.Util.Statistics).InitStats(..%ConfigName)
		Set tConfigName = ..%ConfigName, tResponse = ""
		Do pRequestHeader.SetStatus(3)
		Set (..%SessionId,%Ensemble("SessionId")) = pRequestHeader.SessionId
		Set ..%SuperSession=pRequestHeader.SuperSession
		Set (tEndTime,..%LastReportedError)="", ..RetryCount=1, (..Retry,..SuspendMessage,..DeferResponse,..%AlertStartTime,tFailureTimedOut,tTerminate)=0
		While 1 { ; Retry loop
			Set tTimeCalled=$ZH, tDoAlert=""
			Set:'tEndTime tEndTime = tTimeCalled + ..FailureTimeout
			If $D(^Ens.Runtime("CrashedMessage",pRequestHeader.%Id())) {
				Kill ^Ens.Runtime("CrashedMessage",pRequestHeader.%Id())
				Set tSC=##class(Ens.Util.Error).EnsError($classname(),"MessageHeaderHandler","<Ens>ErrPreviouslyCrashedMessage",pRequestHeader.%Id())
			} Else {
				Set tSC=..MessageHandler(tRequest,.tResponse)
			}
			If ('tSC) {
				Set $EC=""  try {
					Do:$S($D(%Ensemble("DoTrace")):%Ensemble("DoTrace"),1:##class(Ens.Util.Trace).DoTrace()) ##class(Ens.Util.Trace).WriteTrace("system",$classname(),"MessageHeaderHandler","calling OnError R")
					Set tDoAlert=..OnError(.tSC)
				} catch {
					Set tSC=$select(+tSC:##class(Ens.Util.Error).EnsSystemError($classname(),"MessageHeaderHandler"),1:$$AppendStatus^%occSystem(tSC,##class(Ens.Util.Error).EnsSystemError($classname(),"MessageHeaderHandler"))), tDoAlert=1
				}
				If $TLevel>0 Set tTL=$TLevel  While $TLevel>0 { TCommit } Do ##class(Ens.Util.Log).LogWarning($classname(),"MessageHeaderHandler",tTL_" open user transaction"_$S(tTL>1:"s",1:"")_" found after OnError() R; committing before proceeding")
			}
			Set $EC=""  try {
				Set tMHSC=tSC
				Set tAction=..OnGetReplyAction(tRequest,.tResponse,.tSC)
				Set:""'=tAction tSC=..doReplyAction(tAction, tRequest,.tResponse,tSC)
				If tSC'=tMHSC&&('tSC) {
					Do:$S($D(%Ensemble("DoTrace")):%Ensemble("DoTrace"),1:##class(Ens.Util.Trace).DoTrace()) ##class(Ens.Util.Trace).WriteTrace("system",$classname(),"MessageHeaderHandler","calling OnError A")
					Set tDoAlert=..OnError(.tSC)
				}
			} catch {
				Set tSC=$select(+tSC:##class(Ens.Util.Error).EnsSystemError($classname(),"MessageHeaderHandler"),1:$$AppendStatus^%occSystem(tSC,##class(Ens.Util.Error).EnsSystemError($classname(),"MessageHeaderHandler"))), tDoAlert=1
			}
			If $TLevel>0 Set tTL=$TLevel  While $TLevel>0 { TCommit } Do ##class(Ens.Util.Log).LogWarning($classname(),"MessageHeaderHandler",tTL_" open user transaction"_$S(tTL>1:"s",1:"")_" found after ReplyAction OnError() A; committing before proceeding")
			If ..SuspendMessage {
				Set tSCSuspend=tSC
				Set tSC=$$Error^%apiOBJ("<Ens>ErrSuspending",pRequestHeader.%Id(),$$getAllErrorTexts^EnsUtil(tSC))
				Quit
			}
			Quit:..DeferResponse
			Quit:'..Retry
			Set ..Retry=0
			If ('tSC) {
				Set tTxt=$P($$getAllErrorTexts^EnsUtil(tSC)," -- ") ; strip off "logged as" varying text
				Set:'..%AlertStartTime&&..AlertOnError&&..AlertRetryGracePeriod&&(tTxt'=..%LastReportedError) ..%AlertStartTime=$ZH
				If ..%AlertStartTime {
					If $ZH>=(..%AlertStartTime+..AlertRetryGracePeriod) {
						Set ..%AlertStartTime=0
						If tTxt'=..%LastReportedError { Do ##class(Ens.Util.Log).LogError($classname(),"MessageHeaderHandler","Alerting at expiration of retry grace period ("_..AlertRetryGracePeriod_") for "_tTxt) }
						Else { Do ##class(Ens.Util.Log).LogInfo($classname(),"MessageHeaderHandler","Alerting at expiration of retry grace period ("_..AlertRetryGracePeriod_") for "_tTxt) }
					} Else {
						Set tDoAlert=0
						If tTxt'=..%LastReportedError { Do ##class(Ens.Util.Log).LogError($classname(),"MessageHeaderHandler","Not Alerting during retry grace period ("_..AlertRetryGracePeriod_") for "_tTxt) }
						Else { Do ##class(Ens.Util.Log).LogInfo($classname(),"MessageHeaderHandler","Not Alerting during retry grace period ("_..AlertRetryGracePeriod_") for "_tTxt) }
					}
				} Else {
					If tTxt'=..%LastReportedError { Do ##class(Ens.Util.Log).LogStatus($classname(),"MessageHeaderHandler",tSC) }
					Else { Set tDoAlert=0 }
				}
				Do:tDoAlert&&..AlertOnError ..SendAlert(##class(Ens.AlertRequest).%New($LB(..%ConfigName,$$getAllErrorTexts^EnsUtil(tSC))))
				Set tDoAlert=0
			} Else { Set ..%AlertStartTime=0, tTxt="" }
			Set ..%LastReportedError=tTxt
			If ..%QuitTask { Set tTerminate=1 }
			Else {
				If ..FailureTimeout'=-1 {
					Set tNow=$ZH
					If ..NoFailWhileDisconnected {
						try { Set tStayConnected=..Adapter.StayConnected }
						catch { Set tStayConnected=1 }
						If tStayConnected {
							try { Set tConnected=..Adapter.Connected }
							catch { Set tConnected=1 }
							If 'tConnected {
								If tNow>tEndTime Do:$S($D(%Ensemble("DoTrace")):%Ensemble("DoTrace"),1:##class(Ens.Util.Trace).DoTrace()) ##class(Ens.Util.Trace).WriteTrace("system",$classname(),"MessageHeaderHandler","Ignoring FailureTimeout while disconnected")
								Set:$G(tLast) tEndTime=tEndTime+(tNow-tLast) ; keep up with our disconnected time
								Set tLast=tNow
							} ElseIf $G(tLast) {
								Set tMinInterval=..RetryInterval+1  Set:..FailureTimeout<..RetryInterval&&(..FailureTimeout>0) tMinInterval=..FailureTimeout+1
								If tEndTime-tNow<tMinInterval Do:$S($D(%Ensemble("DoTrace")):%Ensemble("DoTrace"),1:##class(Ens.Util.Trace).DoTrace()) ##class(Ens.Util.Trace).WriteTrace("system",$classname(),"MessageHeaderHandler","Extending FailureTimeout by "_(tNow+tMinInterval-tEndTime)_" after reconnecting")  Set tEndTime=tNow+tMinInterval
								Kill tLast
							}
						}
					}
					If tNow>tEndTime {
						Set tFailureTimedOut=1, tSC=$$Error^%apiOBJ("<Ens>ErrFailureTimeout", ..FailureTimeout, $$getAllErrorTexts^EnsUtil(tSC), $classname()), tDoAlert=""
						Set $EC=""  try {
							Set tMHSC=tSC
							Set tDoDefault=..OnFailureTimeout(tRequest,.tResponse,.tSC)
							Set:tDoDefault tSC=$S(""=tAction:tSC,1:..finalReplyAction(tAction,tSC,1))
							Set:tSC'=tMHSC&&('tSC) tDoAlert=""
						} catch {
							Set tSC=$select(+tSC:##class(Ens.Util.Error).EnsSystemError($classname(),"MessageHeaderHandler"),1:$$AppendStatus^%occSystem(tSC,##class(Ens.Util.Error).EnsSystemError($classname(),"MessageHeaderHandler"))), tDoAlert=""
						}
						If $TLevel>0 Set tTL=$TLevel  While $TLevel>0 { TCommit } Do ##class(Ens.Util.Log).LogWarning($classname(),"MessageHeaderHandler",tTL_" open user transaction"_$S(tTL>1:"s",1:"")_" found after OnFailureTimeout(); committing before proceeding")
						Set:..SuspendMessage tSCSuspend=tSC
						Quit:'..%QuitTask
					}
				}
				If ..%QuitTask { Set tTerminate=1 }
				Else {
					Set ^IRIS.Temp.EnsHostMonitor($namespace,tConfigName,"%Status")="Retry",^IRIS.Temp.EnsHostMonitor($namespace,tConfigName,"%LastActivity")=$zdatetime($ztimestamp,3,,3)
					Set ^IRIS.Temp.EnsJobMonitor($namespace,"sys"_":"_$Job,tConfigName,"%Status")="Retry",^IRIS.Temp.EnsJobMonitor($namespace,"sys"_":"_$Job,tConfigName,"%LastActivity")=$zdatetime($ztimestamp,3,,3)
					Set tWaitTime = tTimeCalled + ..RetryInterval - $ZH
					Set tSC1=##class(Ens.Queue).DeQueue("SystemSignal:"_$Job,,$S(tWaitTime<0:0, 1:tWaitTime),,0)  If ('tSC1) Set tSC=$select(+tSC:tSC1,1:$$AppendStatus^%occSystem(tSC,tSC1))  Quit
					Set tTerminate=##class(Ens.Job).ShouldTerminate()
				} ; %QuitTask
			} ; %QuitTask
			Set tSBQ=##class(Ens.Job).ShouldBeQuiescent()
			If tSBQ || tTerminate {
				If pRequestHeader.Priority>2||tTerminate {
					Set tTerminate=1
					If 'tFailureTimedOut||(..%QuitTask>1) {
						If pRequestHeader.TargetQueueName="" {
							/* 
								If no target queue name then we cannot put back to queue.
								Double check invocation InProc and mark so we will RecoverActiveMessage() later			
							*/
							If pRequestHeader.Invocation=2 {
								If $Data(^Ens.ActiveMessage("sys"_":"_$Job),tActiveID) {
									Do ##class(Ens.Util.Log).LogInfo($classname(),"MessageHeaderHandler","Retry loop exited due to shutdown request for message "_..%RequestHeader.%Id()_" ; re-queueing corresponding Active Message:"_tActiveID_$S((''tSC):"",1:" - original error: "_$$getAllErrorTexts^EnsUtil(tSC)))								
									Set tSCActive = ##class(Ens.Job).RecoverActiveMessage(tActiveID,$Job,0)
									If (''tSCActive) Kill ^Ens.ActiveMessage("sys"_":"_$Job)
								} Else {
									Do ##class(Ens.Util.Log).LogError($classname(),"MessageHeaderHandler","Retry loop exited due to shutdown request for message "_..%RequestHeader.%Id()_" ; cannot re-queue corresponding Active Message since it is not defined"_$S((''tSC):"",1:" - original error: "_$$getAllErrorTexts^EnsUtil(tSC)))
								}
							} Else {
								Do ##class(Ens.Util.Log).LogError($classname(),"MessageHeaderHandler","Retry loop exited due to shutdown request for message "_..%RequestHeader.%Id()_" ; cannot re-queue since no target queue name and not InProc"_$S((''tSC):"",1:" - original error: "_$$getAllErrorTexts^EnsUtil(tSC)))
							}
						} Else {
							Set tSCx=tSC, tSC=##class(Ens.Queue).PutBackToQueue(pRequestHeader)
							Do ##class(Ens.Util.Log).LogInfo($classname(),"MessageHeaderHandler","Retry loop exited due to shutdown request for message "_..%RequestHeader.%Id()_" ; re-queueing"_$S((''tSCx):"",1:" - original error: "_$$getAllErrorTexts^EnsUtil(tSCx)))
						}
					} Else {
						Do ##class(Ens.Util.Log).LogInfo($classname(),"MessageHeaderHandler","Retry loop exited due to shutdown request for message "_..%RequestHeader.%Id()_" ; quitting with status "_$$getAllErrorTexts^EnsUtil(tSC))
					}
					Quit
				}
				Do ##class(Ens.Util.Log).LogInfo($classname(),"MessageHeaderHandler","Ignoring "_$S(tSBQ:"Quiescent",1:"Terminate")_" request while processing high priority (i.e. synchronous) request "_..%RequestHeader.%Id())
			}
			If ##class(Ens.Job).ShouldAbort() {
				Do ##class(Ens.Util.Log).LogWarning($classname(),"MessageHeaderHandler","Message "_..%RequestHeader.%Id()_" aborted as requested by signal for job "_$J_$S((''tSC):"",1:" - original error: "_$$getAllErrorTexts^EnsUtil(tSC)))
				Set tSC=1, tAborted=1
				Quit
			}
			If ##class(Ens.Job).ShouldSuspend() {
				Do ##class(Ens.Util.Log).LogWarning($classname(),"MessageHeaderHandler","Message "_pRequestHeader.%Id()_" suspended as requested by signal for job "_$J_$S((''tSC):"", 1:" - original error: "_$$getAllErrorTexts^EnsUtil(tSC)))
				Set tSC=1, ..SuspendMessage=1
				Quit
			}
			Set ..RetryCount=..RetryCount+1
			Set ^IRIS.Temp.EnsJobMonitor($namespace,"sys"_":"_$Job,tConfigName,"%Retry")=..RetryCount,^IRIS.Temp.EnsJobMonitor($namespace,"sys"_":"_$Job,tConfigName,"%LastActivity")=$zdatetime($ztimestamp,3,,3)
			Do:$S($D(%Ensemble("DoTrace")):%Ensemble("DoTrace"),1:##class(Ens.Util.Trace).DoTrace()) ##class(Ens.Util.Trace).WriteTrace("system",$classname(),"MessageHeaderHandler","Retrying Request Header Id "_pRequestHeader.%Id()_" - try #"_..RetryCount)
		} ; Retry loop
		Set ^IRIS.Temp.EnsJobMonitor($namespace,"sys"_":"_$Job,tConfigName,"%Retry")="",^IRIS.Temp.EnsJobMonitor($namespace,"sys"_":"_$Job,tConfigName,"%LastActivity")=$zdatetime($ztimestamp,3,,3)
		If ('tSC) {
			If ""=tDoAlert {
				Set $EC=""  try {
					Do:$S($D(%Ensemble("DoTrace")):%Ensemble("DoTrace"),1:##class(Ens.Util.Trace).DoTrace()) ##class(Ens.Util.Trace).WriteTrace("system",$classname(),"MessageHeaderHandler","calling OnError E")
					Set tDoAlert=..OnError(.tSC)
				} catch {
					Set tSC=$select(+tSC:##class(Ens.Util.Error).EnsSystemError($classname(),"MessageHeaderHandler"),1:$$AppendStatus^%occSystem(tSC,##class(Ens.Util.Error).EnsSystemError($classname(),"MessageHeaderHandler"))), tDoAlert=1
				}
				If $TLevel>0 Set tTL=$TLevel  While $TLevel>0 { TCommit } Do ##class(Ens.Util.Log).LogWarning($classname(),"MessageHeaderHandler",tTL_" open user transaction"_$S(tTL>1:"s",1:"")_" found after OnError() E; committing before proceeding")
			}
			Quit:'..SuspendMessage&&'..DeferResponse
		}
		Quit:tTerminate
		Set tConfigName=..%ConfigName
		Set tUTCH=$ztimestamp If $I(^IRIS.Temp.EnsHostMonitor($namespace,tConfigName,"%Count")),$I(^IRIS.Temp.EnsHostCounter($namespace,tConfigName,+tUTCH,$P(tUTCH,",",2)\10)) {} Set ^IRIS.Temp.EnsHostMonitor($namespace,tConfigName,"%Status")="OK",^IRIS.Temp.EnsHostMonitor($namespace,tConfigName,"%LastActivity")=$zdatetime($ztimestamp,3,,3)
		If $I(^IRIS.Temp.EnsJobMonitor($namespace,"sys"_":"_$Job,tConfigName,"%Count")) {} Set ^IRIS.Temp.EnsJobMonitor($namespace,"sys"_":"_$Job,tConfigName,"%Status")="OK",^IRIS.Temp.EnsJobMonitor($namespace,"sys"_":"_$Job,tConfigName,"%LastActivity")=$zdatetime($ztimestamp,3,,3)
		If tAborted {
			Do pRequestHeader.SetStatus(7)
			Quit
		}
		If ..SuspendMessage {
			Do pRequestHeader.SetStatus(5)
			If ('tSC) {
				If ('tSCSuspend) { Do ##class(Ens.Util.Log).LogStatus($classname(),"MessageHeaderHandler",tSC) }
				Else { Do ##class(Ens.Util.Log).LogWarning($classname(),"MessageHeaderHandler",$$GetOneStatusText^%apiOBJ(tSC)) }
			}
			Set tSC=1
			Quit
		}
		If ..DeferResponse {
			Do pRequestHeader.SetStatus(6)
			If ('tSC) {
				Do ##class(Ens.Util.Log).LogWarning($classname(),"MessageHeaderHandler","Deferring Response to Request "_pRequestHeader.%Id()_"; Operation returned error "_$$getAllErrorTexts^EnsUtil(tSC))
				Set tSC=1
			} Else {
				Do:$S($D(%Ensemble("DoTrace")):%Ensemble("DoTrace"),1:##class(Ens.Util.Trace).DoTrace()) ##class(Ens.Util.Trace).WriteTrace("system",$classname(),"MessageHeaderHandler","Deferring Response to Request "_pRequestHeader.%Id())
			}
			Quit
		}
		Do pRequestHeader.SetStatus(9)
		If (''tSC) && pRequestHeader.needsReply() {
			Set tSC=pRequestHeader.NewResponseMessage(.pResponseHeader,tResponse,..%SuperSession)
		}
	} catch {
		Set tSC=##class(Ens.Util.Error).EnsSystemError($classname(),"MessageHeaderHandler"), tDoAlert=1
	}
	If ('tSC) {
		Set:(tDoAlert="") tDoAlert = ..OnError(tSC)
		Set tTxt=$P($$getAllErrorTexts^EnsUtil(tSC)," -- ") ; strip off "logged as" varying text
		If tTxt'=..%LastReportedError { Do ##class(Ens.Util.Log).LogStatus($classname(),"MessageHeaderHandler",tSC) }
		Set ..%LastReportedError=tTxt
		Set tConfigName=..%ConfigName
		Set ^IRIS.Temp.EnsHostMonitor($namespace,tConfigName,"%Status")="Error",^IRIS.Temp.EnsHostMonitor($namespace,tConfigName,"%LastActivity")=$zdatetime($ztimestamp,3,,3)
		Set ^IRIS.Temp.EnsJobMonitor($namespace,"sys"_":"_$Job,tConfigName,"%Status")="Error",^IRIS.Temp.EnsJobMonitor($namespace,"sys"_":"_$Job,tConfigName,"%LastActivity")=$zdatetime($ztimestamp,3,,3)
		Do:'tAborted pRequestHeader.SetStatus(8)
		Do:tDoAlert&&..AlertOnError ..SendAlert(##class(Ens.AlertRequest).%New($LB(..%ConfigName,$$getAllErrorTexts^EnsUtil(tSC))))
	} ElseIf ..SuspendMessage&&('tSCSuspend) {
		Do:tDoAlert&&..AlertOnError ..SendAlert(##class(Ens.AlertRequest).%New($LB(..%ConfigName,$$getAllErrorTexts^EnsUtil(tSCSuspend))))
	}
	Set ..%SessionId=""
	Set ..%SuperSession=""
	Do ##class(Ens.Util.Statistics).RecordStats(3,..%ConfigName)
	Kill %Ensemble("SessionId")
	Kill %Ensemble("CurrentHeaderId")
	Set ..%RequestHeader=""
	Quit tSC
cleanNum(str)
	Set f=0  For { Set f=$F(str,"#",f)  Quit:'f
		For i=f:1 { Quit:$E(str,i)'?1N  Set $E(str,i)="",i=i-1 }
	}
	Quit str }
zOnKeepalive(pAdapterStatus) public {
	Set tSC=pAdapterStatus
	If ('tSC) {
		Do:$S($D(%Ensemble("DoTrace")):%Ensemble("DoTrace"),1:##class(Ens.Util.Trace).DoTrace()) ##class(Ens.Util.Trace).WriteTrace("system",$classname(),"OnKeepalive","calling OnError K")
		Set tDoAlert=..OnError(.tSC)
		If ('tSC) {
			Set tTxt=$P($$getAllErrorTexts^EnsUtil(tSC)," -- ") ; strip off "logged as" varying text
			Set:'..%AlertStartTime&&..AlertOnError&&..AlertRetryGracePeriod&&(tTxt'=..%LastReportedError) ..%AlertStartTime=$ZH
			If ..%AlertStartTime {
				If $ZH>=(..%AlertStartTime+..AlertRetryGracePeriod) {
					Set ..%AlertStartTime=0
					If tTxt'=..%LastReportedError { Do ##class(Ens.Util.Log).LogError($classname(),"OnKeepalive","Alerting at expiration of retry grace period ("_..AlertRetryGracePeriod_") for "_tTxt) }
					Else { Do ##class(Ens.Util.Log).LogInfo($classname(),"OnKeepalive","Alerting at expiration of retry grace period ("_..AlertRetryGracePeriod_") for "_tTxt) }
				} Else {
					Set tDoAlert=0
					If tTxt'=..%LastReportedError { Do ##class(Ens.Util.Log).LogError($classname(),"OnKeepalive","Not Alerting during retry grace period ("_..AlertRetryGracePeriod_") for "_tTxt) }
					Else { Do ##class(Ens.Util.Log).LogInfo($classname(),"OnKeepalive","Not Alerting during retry grace period ("_..AlertRetryGracePeriod_") for "_tTxt) }
				}
			} Else {
				If tTxt'=..%LastReportedError { Do ##class(Ens.Util.Log).LogStatus($classname(),"OnKeepalive",tSC) }
				Else { Set tDoAlert=0 }
			}
			Do:tDoAlert&&..AlertOnError ..SendAlert(##class(Ens.AlertRequest).%New($LB(..%ConfigName,$$getAllErrorTexts^EnsUtil(tSC))))
			Set tConfigName=..%ConfigName
			Set ^IRIS.Temp.EnsHostMonitor($namespace,tConfigName,"%Status")="Error",^IRIS.Temp.EnsHostMonitor($namespace,tConfigName,"%LastActivity")=$zdatetime($ztimestamp,3,,3)
			Set ^IRIS.Temp.EnsJobMonitor($namespace,"sys"_":"_$Job,tConfigName,"%Status")="Error",^IRIS.Temp.EnsJobMonitor($namespace,"sys"_":"_$Job,tConfigName,"%LastActivity")=$zdatetime($ztimestamp,3,,3)
			Set:'..%QuitTask tSC=1
		} Else { Set ..%AlertStartTime=0, tTxt="" }
	} Else { Set ..%AlertStartTime=0, tTxt="" }
	Set ..%LastReportedError=tTxt
	Quit tSC }
zSelect(pRequest,pResponse) public {
	set Data = ##class(User.Peter).%New()
	set tsc = 1
	set pResponse = ##class(User.selectResponse).%New()
	try{
	    set sql = "SELECT * FROM SQLUser.Peters WHERE Name = ?"
		set statement = ##class(%SQL.Statement).%New()
		set tsc = statement.%Prepare(sql)
		set result = statement.%Execute(pRequest.Name)
		while (result.%Next() '= 0){
			set pResponse.Age = result.Age
			set pResponse.Surname = result.Surname
			set pResponse.DOB = result.DOB
			set pResponse.Gender = result.Gender
			set pResponse.Name = result.Name
			set pResponse.Race = result.Race
			set pResponse.Status = "Success"
		}
		return result
	}catch ex {
		set tsc = ex.AsStatus()
	}
	set pResponse.Status = "Error"
	return tsc }
zfinalReplyAction(pAction,pSC,pFixError) public {
	If pAction["S" {
		Set ..SuspendMessage=1, tActionDesc="Suspending on"
	} ElseIf pAction["D" {
		Set:($ZS<(2**31)) $ZS=(2**31)
		Set tActionDesc="Disabling on"
		Do ##class(Ens.Job).Stop($Job)
		Do ##Class(Ens.Director).EnableConfigItem(..%ConfigName,0,0)
		Do ..SendRequestAsync("Ens.ScheduleHandler","")
		Set ..%QuitTask=1+(pAction'["F"), ..Retry=1 ; we are quitting but the retry flag will force us to requeue the current message
	} ElseIf pAction["F" {
		// No work required here ; just quit with error
		Set tActionDesc="Discarding message on"
		Set ..SuspendMessage=0
	} Else { ; ??
		Do ##class(Ens.Util.Log).LogWarning($classname(),"finalReplyAction",$$getAllErrorTexts^EnsUtil(pSC))
		Set pSC=1, pFixError=0
	}
	Set:pFixError pSC=$$Error^%apiOBJ("<Ens>ErrGeneral",tActionDesc_" "_$$getAllErrorTexts^EnsUtil(pSC))
	Quit pSC }
zEnumerateSettingsGetInfo(colinfo,parminfo,idinfo,qHandle,extoption=0,extinfo) public {
	Set colinfo=$lb($lb("Name",10,"Name"),$lb("Description",10,"Description"),$lb("Type",10,"Type"),$lb("Default",10,"Default"),$lb("MAXLEN",10,"MAXLEN"),$lb("MINVAL",10,"MINVAL"),$lb("MAXVAL",10,"MAXVAL"),$lb("VALUELIST",10,"VALUELIST"),$lb("DISPLAYLIST",10,"DISPLAYLIST"),$lb("IsRequired",10,"IsRequired"),$lb("LocalizedName",10,"LocalizedName"),$lb("Category",10,"Category"),$lb("LocalizedCategory",10,"LocalizedCategory"),$lb("EditorContext",10,"EditorContext"))
	Set parminfo=""
	Set idinfo=$lb(0,"")
	If extoption {
		Set extinfo=$lb("",$lb($lb("",""),$lb("",""),$lb("",""),$lb("",""),$lb("",""),$lb("",""),$lb("",""),$lb("",""),$lb("",""),$lb("",""),$lb("",""),$lb("",""),$lb("",""),$lb("","")))
	}
	Quit 1 }
zEnumerateSettingsGetODBCInfo(colinfo,parminfo,qHandle) public {
	set version = $Select($Get(%protocol,41)>40:4,1:3)
	Set metadata=$lb(1,14,"Name",12,50,0,2,"Name","Select","SQLUser","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"Description",12,50,0,2,"Description","Select","SQLUser","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"Type",12,50,0,2,"Type","Select","SQLUser","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"Default",12,50,0,2,"Default","Select","SQLUser","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"MAXLEN",12,50,0,2,"MAXLEN","Select","SQLUser","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"MINVAL",12,50,0,2,"MINVAL","Select","SQLUser","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"MAXVAL",12,50,0,2,"MAXVAL","Select","SQLUser","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"VALUELIST",12,50,0,2,"VALUELIST","Select","SQLUser","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"DISPLAYLIST",12,50,0,2,"DISPLAYLIST","Select","SQLUser","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"IsRequired",12,50,0,2,"IsRequired","Select","SQLUser","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"LocalizedName",12,50,0,2,"LocalizedName","Select","SQLUser","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"Category",12,50,0,2,"Category","Select","SQLUser","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"LocalizedCategory",12,50,0,2,"LocalizedCategory","Select","SQLUser","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"EditorContext",12,50,0,2,"EditorContext","Select","SQLUser","",$c(0,0,0,0,0,0,0,0,0,0,0,0),0)
	Set colcount=$li(metadata,2),cmdlen=colcount*10,parmcount=$li(metadata,3+cmdlen),pmdlen=parmcount*6,parminfo=$li(metadata,cmdlen+3,cmdlen+pmdlen+3)
	If version=4 {
		Set colinfo=$li(metadata,2,2+cmdlen)
	} Else {
		Set colinfo=$li(metadata,2,2)
		For i=0:1:colcount-1 Set colinfo=colinfo_$list(metadata,3+(i*10),11+(i*10))
	}
	Quit 1 }
]]></Routine>


<Class name="User.Select">
<Super>Ens.BusinessOperation</Super>
<TimeChanged>65834,50435.088109</TimeChanged>
<TimeCreated>65826,36880.807512</TimeCreated>

<Parameter name="INVOCATION">
<Default>Queue</Default>
</Parameter>

<Method name="Select">
<FormalSpec>pRequest:User.Request,*pResponse:User.selectResponse</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set Data = ##class(User.Peter).%New()
	
	set tsc = $$$OK
	
	set pResponse = ##class(User.selectResponse).%New()
	
	try{
	    set sql = "SELECT * FROM SQLUser.Peters WHERE Name = ?"
		set statement = ##class(%SQL.Statement).%New()
		set tsc = statement.%Prepare(sql)
		set result = statement.%Execute(pRequest.Name)
		
		while (result.%Next() '= 0){
			set pResponse.Age = result.Age
			set pResponse.Surname = result.Surname
			set pResponse.DOB = result.DOB
			set pResponse.Gender = result.Gender
			set pResponse.Name = result.Name
			set pResponse.Race = result.Race
			set pResponse.Status = "Success"
		}
		return result
	}catch ex {
		set tsc = ex.AsStatus()
	}
	set pResponse.Status = "Error"
	return tsc
]]></Implementation>
</Method>

<XData name="MessageMap">
<Data><![CDATA[
<MapItems>
	<MapItem MessageType="User.Request">
	<Method>Select</Method>
	</MapItem>
	</MapItems>
]]></Data>
</XData>
</Class>


<Routine name="User.UpdateOperation.1" type="INT" languagemode="0" generated="1" timestamp="65827,48659.248741"><![CDATA[
 ;User.UpdateOperation.1
 ;Generated for class User.UpdateOperation.  Do NOT edit. 03/24/2021 01:30:59PM
 ;;6B597455;User.UpdateOperation
 ;
zGetRequestClassList() public {
 Set tList=""
 Set tList=tList_$lb("User.SelectRequest")
 Quit tList }
zGetResponseClassList(pRequest="") public {
 If pRequest="User.SelectRequest" Quit $lb("User.selectResponse")
 If pRequest="" Quit $lb("User.selectResponse")
 Quit "" }
zGetSettingRow(pSettingName="",pSourceClass="") public {
	Set tRow = ""
	// Check if the class has been compiled with the new generator
	If (pSourceClass = "User.UpdateOperation") {
		Set tRow = $case(pSettingName,
			"AlertGroups": $LB("AlertGroups","The Alert Groups to which this item belongs.","%Library.String","",2500,"","","","",0,"Alert Groups","Alerting","Alerting Control","selector?multiSelect=1&context={Ens.ContextSearch/ProductionAlertGroups?productionName=@productionId}"),
			"AlertOnError": $LB("AlertOnError","Send an Alert message whenever an error occurs here","%Library.Boolean",0,"","","","","",0,"Alert On Error","Alerting","Alerting Control",""),
			"AlertRetryGracePeriod": $LB("AlertRetryGracePeriod","When AlertOnError is True, and the Operation is retrying,"_$char(13,10)_"refrain from alerting if the Operation succeeds within this number of seconds after an error","%Library.Numeric",0,"",0,"","","",0,"Alert Retry Grace Period","Alerting","Alerting Control",""),
			"ArchiveIO": $LB("ArchiveIO","If set, the Adapter will log in the InterSystems IRIS I/O archive each input and output communication it has with its external system.","%Library.Boolean",0,"","","","","",0,"Archive IO","Dev","Development and Debugging",""),
			"BusinessPartner": $LB("BusinessPartner","Name of a Business Partner Profile associated with this item","%Library.String","",128,"","","","",0,"Business Partner","Info","Informational Settings","partnerSelector"),
			"FailureTimeout": $LB("FailureTimeout","Total number of seconds to keep trying to deliver the message. <br>"_$char(13,10)_"After this number of seconds has elapsed, the business operation discards the message data and returns an error code. <br>"_$char(13,10)_"To ensure that no message is ever skipped, enter a Failure Timeout value of -1, which means 'Never time out'. <br>"_$char(13,10)_"Use a setting of -1 when complete data delivery is critical, for example in health care applications. ","%Library.Numeric",15,"",-1,"","","",0,"Failure Timeout","Additional","Additional Settings",""),
			"InactivityTimeout": $LB("InactivityTimeout","Send an Alert message if this number of seconds elapses with no messages being processed by this item. <br/>"_$char(13,10)_"Note that this alert will be sent even if AlertOnError is False. <br/>"_$char(13,10)_"Zero means no alerts of this type will be sent.","%Library.Numeric",0,"",0,"","","",0,"Inactivity Timeout","Alerting","Alerting Control",""),
			"QueueCountAlert": $LB("QueueCountAlert","Number of messages on this item's queue needed to trigger an Alert message to be sent. Note that no further"_$char(13,10)_"alerts will be sent unless the number of messages on the queue drops below 80% of this number and then rises again to this number. <br/>"_$char(13,10)_"Note that this alert will be sent even if AlertOnError is False. <br/>"_$char(13,10)_"Zero means no alerts of this type will be sent.","%Library.Numeric",0,"",0,"","","",0,"Queue Count Alert","Alerting","Alerting Control",""),
			"QueueWaitAlert": $LB("QueueWaitAlert","The number of seconds a message at the front of the queue may have waited since being queued before an alert is triggered.<br/>"_$char(13,10)_"Only one alert will be raised per host item per sequential trigger of the queue wait threshold. <br/>"_$char(13,10)_"Note that this alert will be sent even if AlertOnError is False. <br/>"_$char(13,10)_"Zero means no alerts of this type will be sent.","%Library.Numeric",0,"",0,"","","",0,"Queue Wait Alert","Alerting","Alerting Control",""),
			"ReplyCodeActions": $LB("ReplyCodeActions","<p>A comma-separated list of codes specifying what action this Operation will take on various reply status conditions. "_$char(13,10)_"The format of the list is: <br/> &lt;code&gt;=&lt;actions&gt;,(&lt;code&gt;,&lt;code&gt;)=&lt;actions&gt;,...<br/>"_$char(13,10)_"Types of reply status condition are identified by a specification code:"_$char(13,10)_"<ul style=""list-style-type: none;"">"_$char(13,10)_"<li><b>E</b> - Error status returned from message handler</li>"_$char(13,10)_"<li><b>E#&lt;statuscode&gt;</b> - Error status returned from message handler has status code equal to &lt;statuscode&gt;</li>"_$char(13,10)_"<li><b>E*&lt;text&gt;</b> - Error status returned from message handler contains text string &lt;text&gt;</li>"_$char(13,10)_"<li><b>X</b> - there is no reply message at all</li>"_$char(13,10)_"</ul></p>"_$char(13,10)_"<p>The following values for &lt;actions&gt; may be used alone or in combinations: "_$char(13,10)_"<ul style=""list-style-type: none;"">"_$char(13,10)_"<li><b>C</b> - Treat the message as Completed OK.</li>"_$char(13,10)_"<li><b>W</b> - Log a warning. If no other non-warning &lt;actions&gt; are triggered, the message will be treated as Completed OK.</li>"_$char(13,10)_"<li><b>R</b> - Retry the message according to the configured RetryInterval and FailureTimeout; finally Fail unless a "_$char(13,10)_"different action is also specified.</li>"_$char(13,10)_"<li><b>S</b> - Suspend the message, log an error, and move on to try the next message.</li>"_$char(13,10)_"<li><b>D</b> - Disable the Operation, log an error and restore the message to the front of the Operation's queue.</li>"_$char(13,10)_"<li><b>F</b> - Fail with an error and move on to try the next message from the Operation's queue.</li></ul>"_$char(13,10)_"An example of a valid ReplyCodeActions specification is 'E#6301=R,E#&lt;Ens&gt;ErrGeneral=RD,E=F'. This specification will result in a "_$char(13,10)_"retry when error code 6301 is encountered. When error code &lt;Ens&gt;ErrGeneral is encountered, the Operation first retries to send "_$char(13,10)_"the message until FailureTimeout and then, if the error continues, it disables the Operation instead of failing. Any other errors will "_$char(13,10)_"cause the Operation to fail processing of the current message and return the error status to the caller, without retrying first.</p>"_$char(13,10)_"<p><b>The default behavior is 'E=F'.</b> Thus any error status will result in the error being logged and returned to the caller,"_$char(13,10)_"no retries will be attempted, and the Operation will move on to try the next message from its queue.</p>"_$char(13,10)_"<p>All codes where &lt;actions&gt; consists of only 'W' (for 'log a Warning') will be evaluated, and a warning will be"_$char(13,10)_"generated for each matching &lt;code&gt;. Other &lt;code&gt; values will be evaluated in left-to-right order, executing the"_$char(13,10)_"first matching &lt;code&gt; that has a non-warning &lt;actions&gt; value. As noted in the details for the 'W' flag, an error"_$char(13,10)_"that only triggers 'W' &lt;actions&gt; will be treated as Completed OK.</p>","%Library.String","",1000,"","","","",0,"Reply Code Actions","Additional","Additional Settings",""),
			"RetryInterval": $LB("RetryInterval","How frequently to retry access to the output system","%Library.Numeric",5,"",0,"","","",0,"Retry Interval","Additional","Additional Settings",""),
			"SendSuperSession": $LB("SendSuperSession","<p>Flag whether the  %SuperSession property ought to be included in the outbound message.</p>"_$char(13,10)_"<p>Including the Super Session in the outbound message depends on the transport mechanism.</p>"_$char(13,10)_"<p>InterSystems IRIS supports automatically including the %SuperSession in the HTTP Headers for"_$char(13,10)_"both the HTTP and SOAP Outbound Adapters based on this setting.</p>"_$char(13,10)_"<p>For other transport mechanisms custom code can call the host operation API: <METHOD>IncludeSuperSession</METHOD>(.tSC)"_$char(13,10)_"and then use as appropriate the host property value of <PROPERTY>%SuperSession</PROPERTY> if IncludeSuperSession"_$char(13,10)_"API returns true.</p>"_$char(13,10)_"<p>The IncludeSuperSession() API returns true if the operation ought to send a super session based on this"_$char(13,10)_"host setting of SendSuperSession and the %SuperSession property is not empty.</p>"_$char(13,10)_"<p>The IncludeSuperSession() API will populate the host property <PROPERTY>%SuperSession</PROPERTY>"_$char(13,10)_"with either a generated Super Session or leave it with the Super Session passed to it with the request.</p>"_$char(13,10)_"<p>The IncludeSuperSession() API will return false if either SendSuperSession"_$char(13,10)_"is false or there was an error generating the super session (tSC will be populated accordingly).</p>"_$char(13,10)_"Example use in custom adapter Code: <br>"_$char(13,10)_"<pre>"_$char(13,10)_"#dim tSC As %Status = $$$OK"_$char(13,10)_"If ..BusinessHost.IncludeSuperSession(.tSC) {"_$char(13,10)_" /*"_$char(13,10)_"	  code to include ..BusinessHost.%SuperSession in output"_$char(13,10)_"	  based on transport mechanism."_$char(13,10)_" */	"_$char(13,10)_"}</pre>"_$char(13,10)_"<p>See also Host methods <method>GenerateSuperSession</method> and <method>OnGenerateSuperSession</method></p>","%Library.Boolean","","","","","","",0,"Send SuperSession","Additional","Additional Settings",""),
			"ThrottleDelay": $LB("ThrottleDelay","Duration of forced idleness before processing the next message, in milliseconds","%Library.Numeric",0,"","","","","",0,"Throttle Delay","Additional","Additional Settings",""),
			: "")
	}
	Else { // Fall back on getting the data dynamically 
		Set tRow = ..GetDynamicSettingRow(pSettingName,pSourceClass)
	}
	Quit tRow }
zMessageHandler(pRequest,pResponse) public {
 Set $ZT="Trap",$EC="",tSC=1
 do {
 If pRequest.%IsA("User.SelectRequest") {
  Do:..ArchiveIO ..NewIOLogEntry(0,1,"","Update",..%SessionId,pRequest)
  Set ^IRIS.Temp.EnsJobMonitor($namespace,"sys"_":"_$Job,..%ConfigName,"%Method")="Update",^IRIS.Temp.EnsJobMonitor($namespace,"sys"_":"_$Job,..%ConfigName,"%LastActivity")=$zdatetime($ztimestamp,3,,3)
  Set tSC=..Update(.pRequest,.pResponse)
  Set ^IRIS.Temp.EnsJobMonitor($namespace,"sys"_":"_$Job,..%ConfigName,"%Method")="",^IRIS.Temp.EnsJobMonitor($namespace,"sys"_":"_$Job,..%ConfigName,"%LastActivity")=$zdatetime($ztimestamp,3,,3)
  Do:$S($D(%Ensemble("DoTrace")):%Ensemble("DoTrace"),1:##class(Ens.Util.Trace).DoTrace()) ##class(Ens.Util.Trace).WriteTrace("system",$classname(),"MessageHandler","Update() returned with status "_$$getAllErrorTexts^EnsUtil(tSC)_", Retry="_..Retry_", SuspendMessage="_..SuspendMessage_", DeferResponse="_..DeferResponse_", Response="_$S('($Data(pResponse)#2&&$IsObject(pResponse)):"", 1:pResponse_"/"_$S('pResponse.%Extends("%Persistent"):"", 1:pResponse.%Id())))
  Do:$IsObject(..IOLogEntry) ..CloseIOLogEntry(tSC,"",$G(pResponse))
  Quit
 }
 Do:..ArchiveIO ..NewIOLogEntry(0,1,"","OnMessage",..%SessionId,pRequest)
 Set ^IRIS.Temp.EnsJobMonitor($namespace,"sys"_":"_$Job,..%ConfigName,"%Method")="OnMessage",^IRIS.Temp.EnsJobMonitor($namespace,"sys"_":"_$Job,..%ConfigName,"%LastActivity")=$zdatetime($ztimestamp,3,,3)
 Set tSC=..OnMessage(.pRequest,.pResponse)
 Set ^IRIS.Temp.EnsJobMonitor($namespace,"sys"_":"_$Job,..%ConfigName,"%Method")="",^IRIS.Temp.EnsJobMonitor($namespace,"sys"_":"_$Job,..%ConfigName,"%LastActivity")=$zdatetime($ztimestamp,3,,3)
 Do:$S($D(%Ensemble("DoTrace")):%Ensemble("DoTrace"),1:##class(Ens.Util.Trace).DoTrace()) ##class(Ens.Util.Trace).WriteTrace("system",$classname(),"MessageHandler","OnMessage() returned with status "_$$getAllErrorTexts^EnsUtil(tSC)_", Retry="_..Retry_", SuspendMessage="_..SuspendMessage_", DeferResponse="_..DeferResponse_", Response="_$S('($Data(pResponse)#2&&$IsObject(pResponse)):"", 1:pResponse_"/"_$S('pResponse.%Extends("%Persistent"):"", 1:pResponse.%Id())))
 Do:$IsObject(..IOLogEntry) ..CloseIOLogEntry(tSC,"",pResponse)
 } While 0
Exit
 If $TLevel>0 Set tTL=$TLevel  While $TLevel>0 { TCommit } Do ##class(Ens.Util.Log).LogWarning($classname(),"MessageHandler",tTL_" open user transaction"_$S(tTL>1:"s",1:"")_" found after BO MessageHandler method; committing before proceeding")
 Quit tSC
Trap
 Set $ZT="",tSC=##class(Ens.Util.Error).ExceptionStatus()
 Goto Exit }
zMessageHeaderHandler(pRequestHeader,pResponseHeader) public {
	Set $EC="",(tSC,tSCSuspend)=1, tAborted=0, pResponseHeader="", tDoAlert=""
	try {
		Set ..%RequestHeader=pRequestHeader, %Ensemble("CurrentHeaderId") = pRequestHeader.%Id()
		If pRequestHeader.MessageBodyClassName'="" {
			Set tRequest = $classmethod(pRequestHeader.MessageBodyClassName,"%OpenId",pRequestHeader.MessageBodyId,,.tSC)
			If '$IsObject(tRequest) Set tSC=$$Error^%apiOBJ("<Ens>ErrGeneral","Could not open MessageBody "_pRequestHeader.MessageBodyId_" for MessageHeader #"_pRequestHeader.%Id()_" with body class "_pRequestHeader.MessageBodyClassName_":"_$$getAllErrorTexts^EnsUtil(tSC))  Quit
		} Else {
			Set tRequest="", tSC=$$Error^%apiOBJ("<Ens>ErrGeneral","No MessageBody classname for MessageHeader #"_pRequestHeader.%Id())  Quit
		}
		Do ##class(Ens.Util.Statistics).InitStats(..%ConfigName)
		Set tConfigName = ..%ConfigName, tResponse = ""
		Do pRequestHeader.SetStatus(3)
		Set (..%SessionId,%Ensemble("SessionId")) = pRequestHeader.SessionId
		Set ..%SuperSession=pRequestHeader.SuperSession
		Set (tEndTime,..%LastReportedError)="", ..RetryCount=1, (..Retry,..SuspendMessage,..DeferResponse,..%AlertStartTime,tFailureTimedOut,tTerminate)=0
		While 1 { ; Retry loop
			Set tTimeCalled=$ZH, tDoAlert=""
			Set:'tEndTime tEndTime = tTimeCalled + ..FailureTimeout
			If $D(^Ens.Runtime("CrashedMessage",pRequestHeader.%Id())) {
				Kill ^Ens.Runtime("CrashedMessage",pRequestHeader.%Id())
				Set tSC=##class(Ens.Util.Error).EnsError($classname(),"MessageHeaderHandler","<Ens>ErrPreviouslyCrashedMessage",pRequestHeader.%Id())
			} Else {
				Set tSC=..MessageHandler(tRequest,.tResponse)
			}
			If ('tSC) {
				Set $EC=""  try {
					Do:$S($D(%Ensemble("DoTrace")):%Ensemble("DoTrace"),1:##class(Ens.Util.Trace).DoTrace()) ##class(Ens.Util.Trace).WriteTrace("system",$classname(),"MessageHeaderHandler","calling OnError R")
					Set tDoAlert=..OnError(.tSC)
				} catch {
					Set tSC=$select(+tSC:##class(Ens.Util.Error).EnsSystemError($classname(),"MessageHeaderHandler"),1:$$AppendStatus^%occSystem(tSC,##class(Ens.Util.Error).EnsSystemError($classname(),"MessageHeaderHandler"))), tDoAlert=1
				}
				If $TLevel>0 Set tTL=$TLevel  While $TLevel>0 { TCommit } Do ##class(Ens.Util.Log).LogWarning($classname(),"MessageHeaderHandler",tTL_" open user transaction"_$S(tTL>1:"s",1:"")_" found after OnError() R; committing before proceeding")
			}
			Set $EC=""  try {
				Set tMHSC=tSC
				Set tAction=..OnGetReplyAction(tRequest,.tResponse,.tSC)
				Set:""'=tAction tSC=..doReplyAction(tAction, tRequest,.tResponse,tSC)
				If tSC'=tMHSC&&('tSC) {
					Do:$S($D(%Ensemble("DoTrace")):%Ensemble("DoTrace"),1:##class(Ens.Util.Trace).DoTrace()) ##class(Ens.Util.Trace).WriteTrace("system",$classname(),"MessageHeaderHandler","calling OnError A")
					Set tDoAlert=..OnError(.tSC)
				}
			} catch {
				Set tSC=$select(+tSC:##class(Ens.Util.Error).EnsSystemError($classname(),"MessageHeaderHandler"),1:$$AppendStatus^%occSystem(tSC,##class(Ens.Util.Error).EnsSystemError($classname(),"MessageHeaderHandler"))), tDoAlert=1
			}
			If $TLevel>0 Set tTL=$TLevel  While $TLevel>0 { TCommit } Do ##class(Ens.Util.Log).LogWarning($classname(),"MessageHeaderHandler",tTL_" open user transaction"_$S(tTL>1:"s",1:"")_" found after ReplyAction OnError() A; committing before proceeding")
			If ..SuspendMessage {
				Set tSCSuspend=tSC
				Set tSC=$$Error^%apiOBJ("<Ens>ErrSuspending",pRequestHeader.%Id(),$$getAllErrorTexts^EnsUtil(tSC))
				Quit
			}
			Quit:..DeferResponse
			Quit:'..Retry
			Set ..Retry=0
			If ('tSC) {
				Set tTxt=$P($$getAllErrorTexts^EnsUtil(tSC)," -- ") ; strip off "logged as" varying text
				Set:'..%AlertStartTime&&..AlertOnError&&..AlertRetryGracePeriod&&(tTxt'=..%LastReportedError) ..%AlertStartTime=$ZH
				If ..%AlertStartTime {
					If $ZH>=(..%AlertStartTime+..AlertRetryGracePeriod) {
						Set ..%AlertStartTime=0
						If tTxt'=..%LastReportedError { Do ##class(Ens.Util.Log).LogError($classname(),"MessageHeaderHandler","Alerting at expiration of retry grace period ("_..AlertRetryGracePeriod_") for "_tTxt) }
						Else { Do ##class(Ens.Util.Log).LogInfo($classname(),"MessageHeaderHandler","Alerting at expiration of retry grace period ("_..AlertRetryGracePeriod_") for "_tTxt) }
					} Else {
						Set tDoAlert=0
						If tTxt'=..%LastReportedError { Do ##class(Ens.Util.Log).LogError($classname(),"MessageHeaderHandler","Not Alerting during retry grace period ("_..AlertRetryGracePeriod_") for "_tTxt) }
						Else { Do ##class(Ens.Util.Log).LogInfo($classname(),"MessageHeaderHandler","Not Alerting during retry grace period ("_..AlertRetryGracePeriod_") for "_tTxt) }
					}
				} Else {
					If tTxt'=..%LastReportedError { Do ##class(Ens.Util.Log).LogStatus($classname(),"MessageHeaderHandler",tSC) }
					Else { Set tDoAlert=0 }
				}
				Do:tDoAlert&&..AlertOnError ..SendAlert(##class(Ens.AlertRequest).%New($LB(..%ConfigName,$$getAllErrorTexts^EnsUtil(tSC))))
				Set tDoAlert=0
			} Else { Set ..%AlertStartTime=0, tTxt="" }
			Set ..%LastReportedError=tTxt
			If ..%QuitTask { Set tTerminate=1 }
			Else {
				If ..FailureTimeout'=-1 {
					Set tNow=$ZH
					If ..NoFailWhileDisconnected {
						try { Set tStayConnected=..Adapter.StayConnected }
						catch { Set tStayConnected=1 }
						If tStayConnected {
							try { Set tConnected=..Adapter.Connected }
							catch { Set tConnected=1 }
							If 'tConnected {
								If tNow>tEndTime Do:$S($D(%Ensemble("DoTrace")):%Ensemble("DoTrace"),1:##class(Ens.Util.Trace).DoTrace()) ##class(Ens.Util.Trace).WriteTrace("system",$classname(),"MessageHeaderHandler","Ignoring FailureTimeout while disconnected")
								Set:$G(tLast) tEndTime=tEndTime+(tNow-tLast) ; keep up with our disconnected time
								Set tLast=tNow
							} ElseIf $G(tLast) {
								Set tMinInterval=..RetryInterval+1  Set:..FailureTimeout<..RetryInterval&&(..FailureTimeout>0) tMinInterval=..FailureTimeout+1
								If tEndTime-tNow<tMinInterval Do:$S($D(%Ensemble("DoTrace")):%Ensemble("DoTrace"),1:##class(Ens.Util.Trace).DoTrace()) ##class(Ens.Util.Trace).WriteTrace("system",$classname(),"MessageHeaderHandler","Extending FailureTimeout by "_(tNow+tMinInterval-tEndTime)_" after reconnecting")  Set tEndTime=tNow+tMinInterval
								Kill tLast
							}
						}
					}
					If tNow>tEndTime {
						Set tFailureTimedOut=1, tSC=$$Error^%apiOBJ("<Ens>ErrFailureTimeout", ..FailureTimeout, $$getAllErrorTexts^EnsUtil(tSC), $classname()), tDoAlert=""
						Set $EC=""  try {
							Set tMHSC=tSC
							Set tDoDefault=..OnFailureTimeout(tRequest,.tResponse,.tSC)
							Set:tDoDefault tSC=$S(""=tAction:tSC,1:..finalReplyAction(tAction,tSC,1))
							Set:tSC'=tMHSC&&('tSC) tDoAlert=""
						} catch {
							Set tSC=$select(+tSC:##class(Ens.Util.Error).EnsSystemError($classname(),"MessageHeaderHandler"),1:$$AppendStatus^%occSystem(tSC,##class(Ens.Util.Error).EnsSystemError($classname(),"MessageHeaderHandler"))), tDoAlert=""
						}
						If $TLevel>0 Set tTL=$TLevel  While $TLevel>0 { TCommit } Do ##class(Ens.Util.Log).LogWarning($classname(),"MessageHeaderHandler",tTL_" open user transaction"_$S(tTL>1:"s",1:"")_" found after OnFailureTimeout(); committing before proceeding")
						Set:..SuspendMessage tSCSuspend=tSC
						Quit:'..%QuitTask
					}
				}
				If ..%QuitTask { Set tTerminate=1 }
				Else {
					Set ^IRIS.Temp.EnsHostMonitor($namespace,tConfigName,"%Status")="Retry",^IRIS.Temp.EnsHostMonitor($namespace,tConfigName,"%LastActivity")=$zdatetime($ztimestamp,3,,3)
					Set ^IRIS.Temp.EnsJobMonitor($namespace,"sys"_":"_$Job,tConfigName,"%Status")="Retry",^IRIS.Temp.EnsJobMonitor($namespace,"sys"_":"_$Job,tConfigName,"%LastActivity")=$zdatetime($ztimestamp,3,,3)
					Set tWaitTime = tTimeCalled + ..RetryInterval - $ZH
					Set tSC1=##class(Ens.Queue).DeQueue("SystemSignal:"_$Job,,$S(tWaitTime<0:0, 1:tWaitTime),,0)  If ('tSC1) Set tSC=$select(+tSC:tSC1,1:$$AppendStatus^%occSystem(tSC,tSC1))  Quit
					Set tTerminate=##class(Ens.Job).ShouldTerminate()
				} ; %QuitTask
			} ; %QuitTask
			Set tSBQ=##class(Ens.Job).ShouldBeQuiescent()
			If tSBQ || tTerminate {
				If pRequestHeader.Priority>2||tTerminate {
					Set tTerminate=1
					If 'tFailureTimedOut||(..%QuitTask>1) {
						If pRequestHeader.TargetQueueName="" {
							/* 
								If no target queue name then we cannot put back to queue.
								Double check invocation InProc and mark so we will RecoverActiveMessage() later			
							*/
							If pRequestHeader.Invocation=2 {
								If $Data(^Ens.ActiveMessage("sys"_":"_$Job),tActiveID) {
									Do ##class(Ens.Util.Log).LogInfo($classname(),"MessageHeaderHandler","Retry loop exited due to shutdown request for message "_..%RequestHeader.%Id()_" ; re-queueing corresponding Active Message:"_tActiveID_$S((''tSC):"",1:" - original error: "_$$getAllErrorTexts^EnsUtil(tSC)))								
									Set tSCActive = ##class(Ens.Job).RecoverActiveMessage(tActiveID,$Job,0)
									If (''tSCActive) Kill ^Ens.ActiveMessage("sys"_":"_$Job)
								} Else {
									Do ##class(Ens.Util.Log).LogError($classname(),"MessageHeaderHandler","Retry loop exited due to shutdown request for message "_..%RequestHeader.%Id()_" ; cannot re-queue corresponding Active Message since it is not defined"_$S((''tSC):"",1:" - original error: "_$$getAllErrorTexts^EnsUtil(tSC)))
								}
							} Else {
								Do ##class(Ens.Util.Log).LogError($classname(),"MessageHeaderHandler","Retry loop exited due to shutdown request for message "_..%RequestHeader.%Id()_" ; cannot re-queue since no target queue name and not InProc"_$S((''tSC):"",1:" - original error: "_$$getAllErrorTexts^EnsUtil(tSC)))
							}
						} Else {
							Set tSCx=tSC, tSC=##class(Ens.Queue).PutBackToQueue(pRequestHeader)
							Do ##class(Ens.Util.Log).LogInfo($classname(),"MessageHeaderHandler","Retry loop exited due to shutdown request for message "_..%RequestHeader.%Id()_" ; re-queueing"_$S((''tSCx):"",1:" - original error: "_$$getAllErrorTexts^EnsUtil(tSCx)))
						}
					} Else {
						Do ##class(Ens.Util.Log).LogInfo($classname(),"MessageHeaderHandler","Retry loop exited due to shutdown request for message "_..%RequestHeader.%Id()_" ; quitting with status "_$$getAllErrorTexts^EnsUtil(tSC))
					}
					Quit
				}
				Do ##class(Ens.Util.Log).LogInfo($classname(),"MessageHeaderHandler","Ignoring "_$S(tSBQ:"Quiescent",1:"Terminate")_" request while processing high priority (i.e. synchronous) request "_..%RequestHeader.%Id())
			}
			If ##class(Ens.Job).ShouldAbort() {
				Do ##class(Ens.Util.Log).LogWarning($classname(),"MessageHeaderHandler","Message "_..%RequestHeader.%Id()_" aborted as requested by signal for job "_$J_$S((''tSC):"",1:" - original error: "_$$getAllErrorTexts^EnsUtil(tSC)))
				Set tSC=1, tAborted=1
				Quit
			}
			If ##class(Ens.Job).ShouldSuspend() {
				Do ##class(Ens.Util.Log).LogWarning($classname(),"MessageHeaderHandler","Message "_pRequestHeader.%Id()_" suspended as requested by signal for job "_$J_$S((''tSC):"", 1:" - original error: "_$$getAllErrorTexts^EnsUtil(tSC)))
				Set tSC=1, ..SuspendMessage=1
				Quit
			}
			Set ..RetryCount=..RetryCount+1
			Set ^IRIS.Temp.EnsJobMonitor($namespace,"sys"_":"_$Job,tConfigName,"%Retry")=..RetryCount,^IRIS.Temp.EnsJobMonitor($namespace,"sys"_":"_$Job,tConfigName,"%LastActivity")=$zdatetime($ztimestamp,3,,3)
			Do:$S($D(%Ensemble("DoTrace")):%Ensemble("DoTrace"),1:##class(Ens.Util.Trace).DoTrace()) ##class(Ens.Util.Trace).WriteTrace("system",$classname(),"MessageHeaderHandler","Retrying Request Header Id "_pRequestHeader.%Id()_" - try #"_..RetryCount)
		} ; Retry loop
		Set ^IRIS.Temp.EnsJobMonitor($namespace,"sys"_":"_$Job,tConfigName,"%Retry")="",^IRIS.Temp.EnsJobMonitor($namespace,"sys"_":"_$Job,tConfigName,"%LastActivity")=$zdatetime($ztimestamp,3,,3)
		If ('tSC) {
			If ""=tDoAlert {
				Set $EC=""  try {
					Do:$S($D(%Ensemble("DoTrace")):%Ensemble("DoTrace"),1:##class(Ens.Util.Trace).DoTrace()) ##class(Ens.Util.Trace).WriteTrace("system",$classname(),"MessageHeaderHandler","calling OnError E")
					Set tDoAlert=..OnError(.tSC)
				} catch {
					Set tSC=$select(+tSC:##class(Ens.Util.Error).EnsSystemError($classname(),"MessageHeaderHandler"),1:$$AppendStatus^%occSystem(tSC,##class(Ens.Util.Error).EnsSystemError($classname(),"MessageHeaderHandler"))), tDoAlert=1
				}
				If $TLevel>0 Set tTL=$TLevel  While $TLevel>0 { TCommit } Do ##class(Ens.Util.Log).LogWarning($classname(),"MessageHeaderHandler",tTL_" open user transaction"_$S(tTL>1:"s",1:"")_" found after OnError() E; committing before proceeding")
			}
			Quit:'..SuspendMessage&&'..DeferResponse
		}
		Quit:tTerminate
		Set tConfigName=..%ConfigName
		Set tUTCH=$ztimestamp If $I(^IRIS.Temp.EnsHostMonitor($namespace,tConfigName,"%Count")),$I(^IRIS.Temp.EnsHostCounter($namespace,tConfigName,+tUTCH,$P(tUTCH,",",2)\10)) {} Set ^IRIS.Temp.EnsHostMonitor($namespace,tConfigName,"%Status")="OK",^IRIS.Temp.EnsHostMonitor($namespace,tConfigName,"%LastActivity")=$zdatetime($ztimestamp,3,,3)
		If $I(^IRIS.Temp.EnsJobMonitor($namespace,"sys"_":"_$Job,tConfigName,"%Count")) {} Set ^IRIS.Temp.EnsJobMonitor($namespace,"sys"_":"_$Job,tConfigName,"%Status")="OK",^IRIS.Temp.EnsJobMonitor($namespace,"sys"_":"_$Job,tConfigName,"%LastActivity")=$zdatetime($ztimestamp,3,,3)
		If tAborted {
			Do pRequestHeader.SetStatus(7)
			Quit
		}
		If ..SuspendMessage {
			Do pRequestHeader.SetStatus(5)
			If ('tSC) {
				If ('tSCSuspend) { Do ##class(Ens.Util.Log).LogStatus($classname(),"MessageHeaderHandler",tSC) }
				Else { Do ##class(Ens.Util.Log).LogWarning($classname(),"MessageHeaderHandler",$$GetOneStatusText^%apiOBJ(tSC)) }
			}
			Set tSC=1
			Quit
		}
		If ..DeferResponse {
			Do pRequestHeader.SetStatus(6)
			If ('tSC) {
				Do ##class(Ens.Util.Log).LogWarning($classname(),"MessageHeaderHandler","Deferring Response to Request "_pRequestHeader.%Id()_"; Operation returned error "_$$getAllErrorTexts^EnsUtil(tSC))
				Set tSC=1
			} Else {
				Do:$S($D(%Ensemble("DoTrace")):%Ensemble("DoTrace"),1:##class(Ens.Util.Trace).DoTrace()) ##class(Ens.Util.Trace).WriteTrace("system",$classname(),"MessageHeaderHandler","Deferring Response to Request "_pRequestHeader.%Id())
			}
			Quit
		}
		Do pRequestHeader.SetStatus(9)
		If (''tSC) && pRequestHeader.needsReply() {
			Set tSC=pRequestHeader.NewResponseMessage(.pResponseHeader,tResponse,..%SuperSession)
		}
	} catch {
		Set tSC=##class(Ens.Util.Error).EnsSystemError($classname(),"MessageHeaderHandler"), tDoAlert=1
	}
	If ('tSC) {
		Set:(tDoAlert="") tDoAlert = ..OnError(tSC)
		Set tTxt=$P($$getAllErrorTexts^EnsUtil(tSC)," -- ") ; strip off "logged as" varying text
		If tTxt'=..%LastReportedError { Do ##class(Ens.Util.Log).LogStatus($classname(),"MessageHeaderHandler",tSC) }
		Set ..%LastReportedError=tTxt
		Set tConfigName=..%ConfigName
		Set ^IRIS.Temp.EnsHostMonitor($namespace,tConfigName,"%Status")="Error",^IRIS.Temp.EnsHostMonitor($namespace,tConfigName,"%LastActivity")=$zdatetime($ztimestamp,3,,3)
		Set ^IRIS.Temp.EnsJobMonitor($namespace,"sys"_":"_$Job,tConfigName,"%Status")="Error",^IRIS.Temp.EnsJobMonitor($namespace,"sys"_":"_$Job,tConfigName,"%LastActivity")=$zdatetime($ztimestamp,3,,3)
		Do:'tAborted pRequestHeader.SetStatus(8)
		Do:tDoAlert&&..AlertOnError ..SendAlert(##class(Ens.AlertRequest).%New($LB(..%ConfigName,$$getAllErrorTexts^EnsUtil(tSC))))
	} ElseIf ..SuspendMessage&&('tSCSuspend) {
		Do:tDoAlert&&..AlertOnError ..SendAlert(##class(Ens.AlertRequest).%New($LB(..%ConfigName,$$getAllErrorTexts^EnsUtil(tSCSuspend))))
	}
	Set ..%SessionId=""
	Set ..%SuperSession=""
	Do ##class(Ens.Util.Statistics).RecordStats(3,..%ConfigName)
	Kill %Ensemble("SessionId")
	Kill %Ensemble("CurrentHeaderId")
	Set ..%RequestHeader=""
	Quit tSC
cleanNum(str)
	Set f=0  For { Set f=$F(str,"#",f)  Quit:'f
		For i=f:1 { Quit:$E(str,i)'?1N  Set $E(str,i)="",i=i-1 }
	}
	Quit str }
zOnKeepalive(pAdapterStatus) public {
	Set tSC=pAdapterStatus
	If ('tSC) {
		Do:$S($D(%Ensemble("DoTrace")):%Ensemble("DoTrace"),1:##class(Ens.Util.Trace).DoTrace()) ##class(Ens.Util.Trace).WriteTrace("system",$classname(),"OnKeepalive","calling OnError K")
		Set tDoAlert=..OnError(.tSC)
		If ('tSC) {
			Set tTxt=$P($$getAllErrorTexts^EnsUtil(tSC)," -- ") ; strip off "logged as" varying text
			Set:'..%AlertStartTime&&..AlertOnError&&..AlertRetryGracePeriod&&(tTxt'=..%LastReportedError) ..%AlertStartTime=$ZH
			If ..%AlertStartTime {
				If $ZH>=(..%AlertStartTime+..AlertRetryGracePeriod) {
					Set ..%AlertStartTime=0
					If tTxt'=..%LastReportedError { Do ##class(Ens.Util.Log).LogError($classname(),"OnKeepalive","Alerting at expiration of retry grace period ("_..AlertRetryGracePeriod_") for "_tTxt) }
					Else { Do ##class(Ens.Util.Log).LogInfo($classname(),"OnKeepalive","Alerting at expiration of retry grace period ("_..AlertRetryGracePeriod_") for "_tTxt) }
				} Else {
					Set tDoAlert=0
					If tTxt'=..%LastReportedError { Do ##class(Ens.Util.Log).LogError($classname(),"OnKeepalive","Not Alerting during retry grace period ("_..AlertRetryGracePeriod_") for "_tTxt) }
					Else { Do ##class(Ens.Util.Log).LogInfo($classname(),"OnKeepalive","Not Alerting during retry grace period ("_..AlertRetryGracePeriod_") for "_tTxt) }
				}
			} Else {
				If tTxt'=..%LastReportedError { Do ##class(Ens.Util.Log).LogStatus($classname(),"OnKeepalive",tSC) }
				Else { Set tDoAlert=0 }
			}
			Do:tDoAlert&&..AlertOnError ..SendAlert(##class(Ens.AlertRequest).%New($LB(..%ConfigName,$$getAllErrorTexts^EnsUtil(tSC))))
			Set tConfigName=..%ConfigName
			Set ^IRIS.Temp.EnsHostMonitor($namespace,tConfigName,"%Status")="Error",^IRIS.Temp.EnsHostMonitor($namespace,tConfigName,"%LastActivity")=$zdatetime($ztimestamp,3,,3)
			Set ^IRIS.Temp.EnsJobMonitor($namespace,"sys"_":"_$Job,tConfigName,"%Status")="Error",^IRIS.Temp.EnsJobMonitor($namespace,"sys"_":"_$Job,tConfigName,"%LastActivity")=$zdatetime($ztimestamp,3,,3)
			Set:'..%QuitTask tSC=1
		} Else { Set ..%AlertStartTime=0, tTxt="" }
	} Else { Set ..%AlertStartTime=0, tTxt="" }
	Set ..%LastReportedError=tTxt
	Quit tSC }
zUpdate(pRequest,pResponse) public {
	set Data = ##class(User.Peter).%New()
	set tsc = 1
	set pResponse = ##class(User.selectResponse).%New()
	try{
		set sql = "UPDATE SQLUser.Peters set Age = 89 WHERE Name = ?"
		set statement = ##class(%SQL.Statement).%New()
		set tsc = statement.%Prepare(sql)
		set result = statement.%Execute(pRequest.Name)
	}catch{
		set tsc = ex.AsStatus()
		set pResponse.OK = "Error"
	}
	set pResponse.OK = "Successfull"
	return tsc }
zfinalReplyAction(pAction,pSC,pFixError) public {
	If pAction["S" {
		Set ..SuspendMessage=1, tActionDesc="Suspending on"
	} ElseIf pAction["D" {
		Set:($ZS<(2**31)) $ZS=(2**31)
		Set tActionDesc="Disabling on"
		Do ##class(Ens.Job).Stop($Job)
		Do ##Class(Ens.Director).EnableConfigItem(..%ConfigName,0,0)
		Do ..SendRequestAsync("Ens.ScheduleHandler","")
		Set ..%QuitTask=1+(pAction'["F"), ..Retry=1 ; we are quitting but the retry flag will force us to requeue the current message
	} ElseIf pAction["F" {
		// No work required here ; just quit with error
		Set tActionDesc="Discarding message on"
		Set ..SuspendMessage=0
	} Else { ; ??
		Do ##class(Ens.Util.Log).LogWarning($classname(),"finalReplyAction",$$getAllErrorTexts^EnsUtil(pSC))
		Set pSC=1, pFixError=0
	}
	Set:pFixError pSC=$$Error^%apiOBJ("<Ens>ErrGeneral",tActionDesc_" "_$$getAllErrorTexts^EnsUtil(pSC))
	Quit pSC }
zEnumerateSettingsGetInfo(colinfo,parminfo,idinfo,qHandle,extoption=0,extinfo) public {
	Set colinfo=$lb($lb("Name",10,"Name"),$lb("Description",10,"Description"),$lb("Type",10,"Type"),$lb("Default",10,"Default"),$lb("MAXLEN",10,"MAXLEN"),$lb("MINVAL",10,"MINVAL"),$lb("MAXVAL",10,"MAXVAL"),$lb("VALUELIST",10,"VALUELIST"),$lb("DISPLAYLIST",10,"DISPLAYLIST"),$lb("IsRequired",10,"IsRequired"),$lb("LocalizedName",10,"LocalizedName"),$lb("Category",10,"Category"),$lb("LocalizedCategory",10,"LocalizedCategory"),$lb("EditorContext",10,"EditorContext"))
	Set parminfo=""
	Set idinfo=$lb(0,"")
	If extoption {
		Set extinfo=$lb("",$lb($lb("",""),$lb("",""),$lb("",""),$lb("",""),$lb("",""),$lb("",""),$lb("",""),$lb("",""),$lb("",""),$lb("",""),$lb("",""),$lb("",""),$lb("",""),$lb("","")))
	}
	Quit 1 }
zEnumerateSettingsGetODBCInfo(colinfo,parminfo,qHandle) public {
	set version = $Select($Get(%protocol,41)>40:4,1:3)
	Set metadata=$lb(1,14,"Name",12,50,0,2,"Name","UpdateOperation","SQLUser","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"Description",12,50,0,2,"Description","UpdateOperation","SQLUser","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"Type",12,50,0,2,"Type","UpdateOperation","SQLUser","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"Default",12,50,0,2,"Default","UpdateOperation","SQLUser","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"MAXLEN",12,50,0,2,"MAXLEN","UpdateOperation","SQLUser","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"MINVAL",12,50,0,2,"MINVAL","UpdateOperation","SQLUser","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"MAXVAL",12,50,0,2,"MAXVAL","UpdateOperation","SQLUser","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"VALUELIST",12,50,0,2,"VALUELIST","UpdateOperation","SQLUser","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"DISPLAYLIST",12,50,0,2,"DISPLAYLIST","UpdateOperation","SQLUser","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"IsRequired",12,50,0,2,"IsRequired","UpdateOperation","SQLUser","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"LocalizedName",12,50,0,2,"LocalizedName","UpdateOperation","SQLUser","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"Category",12,50,0,2,"Category","UpdateOperation","SQLUser","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"LocalizedCategory",12,50,0,2,"LocalizedCategory","UpdateOperation","SQLUser","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"EditorContext",12,50,0,2,"EditorContext","UpdateOperation","SQLUser","",$c(0,0,0,0,0,0,0,0,0,0,0,0),0)
	Set colcount=$li(metadata,2),cmdlen=colcount*10,parmcount=$li(metadata,3+cmdlen),pmdlen=parmcount*6,parminfo=$li(metadata,cmdlen+3,cmdlen+pmdlen+3)
	If version=4 {
		Set colinfo=$li(metadata,2,2+cmdlen)
	} Else {
		Set colinfo=$li(metadata,2,2)
		For i=0:1:colcount-1 Set colinfo=colinfo_$list(metadata,3+(i*10),11+(i*10))
	}
	Quit 1 }
]]></Routine>


<Class name="User.UpdateOperation">
<Super>Ens.BusinessOperation</Super>
<TimeChanged>65827,48657.539682</TimeChanged>
<TimeCreated>65826,50292.070097</TimeCreated>

<Parameter name="INVOCATION">
<Default>Queue</Default>
</Parameter>

<Method name="Update">
<FormalSpec>pRequest:User.SelectRequest,*pResponse:User.selectResponse</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[

	set Data = ##class(User.Peter).%New()
	
	set tsc = $$$OK
	
	set pResponse = ##class(User.selectResponse).%New()
	
	try{
		set sql = "UPDATE SQLUser.Peters set Age = 89 WHERE Name = ?"
		set statement = ##class(%SQL.Statement).%New()
		set tsc = statement.%Prepare(sql)
		set result = statement.%Execute(pRequest.Name)
	}catch{
		set tsc = ex.AsStatus()
		set pResponse.OK = "Error"
	}
	set pResponse.OK = "Successfull"
	return tsc
]]></Implementation>
</Method>

<XData name="MessageMap">
<Data><![CDATA[
<MapItems>
	<MapItem MessageType="User.SelectRequest"> 
		<Method>Update</Method>
	</MapItem>
</MapItems>
]]></Data>
</XData>
</Class>


<Routine name="User.Validation.1" type="INT" languagemode="0" generated="1" timestamp="65833,51839.407456"><![CDATA[
 ;User.Validation.1
 ;Generated for class User.Validation.  Do NOT edit. 03/30/2021 02:23:59PM
 ;;48613530;User.Validation
 ;
SQLUPPER(v,l) { quit $zu(28,v,7,$g(l,32767)) }
ALPHAUP(v,r) { quit $zu(28,v,6) }
STRING(v,l) { quit $zu(28,v,9,$g(l,32767)) }
SQLSTRING(v,l) { quit $zu(28,v,8,$g(l,32767)) }
UPPER(v) { quit $zu(28,v,5) }
MVR(v) { quit $zu(28,v,2) }
TRUNCATE(v,l) { quit $e(v,1,$g(l,3641144)) }
%BuildIndices(pIndexList="",pAutoPurge=1,pLockFlag=0,pJournalFlag=1,pStartID="",pEndID="",pIgnoreIndexList="") public {
	If (pIndexList="")||(($listlength(pIndexList)=1)&&($listget(pIndexList,1)="")) { Quit 1 }
	Quit $$Error^%apiOBJ(5066,$classname()_"::"_$ListToString(pIndexList)) }
%BuildIndicesSegment(pStartID,pEndID,pIndexHandle=0,pLockFlag=1,pFirstRange=0,pJob="") public {
	QUIT 1 }
%CheckConstraints(pID,pConstraintList="",pCheckDisabled=0,pErrorInfo) public {
	if (''..%OnDetermineClass($select(pID="":"",1:$listbuild(pID_"")),.tMSTC)) && (tMSTC '= $classname()) { quit $classmethod(tMSTC,"%CheckConstraints",pID,pConstraintList) } else { quit 1 } }
%CheckConstraintsForExtent(pConstraintList="",pCheckDisabled=0,pErrorLog) [ SQLCODE,tID ] public { New %ROWCOUNT,%ROWID,%msg,SQLCODE,tID 
	kill pErrorLog set tStatusAll = 1, pErrorLog = 0 if '$listvalid(pConstraintList) { set pConstraintList = $listfromstring(pConstraintList) }
	 ;---&sql(declare ext cursor for select %ID into :tID FROM SQLUser.Validation)
 	 ;--- ** SQL PUBLIC Variables: SQLCODE, tID
	 
	 ;---&sql(open ext)
	try { s %ext0143="",%ext0143=$classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xESgmi3AofSryFg9v1gkTMZzHMT8","%New") if '$isobject(%ext0143) s %ext0143=$$%0dsqlA() } catch { if $ze["<CLASS DOES NOT EXIST>"&&($ze["%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xESgmi3AofSryFg9v1gkTMZzHMT8")||($ze["<ZSQLU>") { s %ext0143=$$%0dsqlA() } else { throw } }
	if SQLCODE '< 0 {
		for {
			 ;---&sql(fetch ext)
 			 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE
			if $isobject($g(%ext0143))'=1 { s SQLCODE=-102 } else { do %ext0143.FET() if SQLCODE=0 { } }
			if SQLCODE { if SQLCODE=100 { quit } elseif SQLCODE<0 { set tStatusAll = $select(+tStatusAll:$$Error^%apiOBJ(5521,SQLCODE,$Get(%msg)),1:$$AppendStatus^%occSystem(tStatusAll,$$Error^%apiOBJ(5521,SQLCODE,$Get(%msg)))) quit } }
			set tStatus = ..%CheckConstraints(tID,pConstraintList,pCheckDisabled,.tErrorInfo)
			if ('tStatus) { set tStatusAll = $select(+tStatusAll:tStatus,1:$$AppendStatus^%occSystem(tStatusAll,tStatus)) set:pErrorLog<1000 pErrorLog = pErrorLog + 1, pErrorLog(pErrorLog) = tErrorInfo _ $Listbuild(tStatus) }
		}
		 ;---&sql(close ext)
		if '$isobject($get(%ext0143)) { set SQLCODE=-102 } else { set SQLCODE=0 kill %ext0143 }
	}
	quit tStatusAll }
 q
%0dsqlA()	n %xxsql
	s %xxsql("S",1)="DECLARE ext CURSOR FOR SELECT %ID INTO :tID FROM SQLUser . Validation"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("I","%occSqlfunc")="",%xxsql("NS")="PROJECT1"
	return $$BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","User",0,"",),",0,ext,","User.Validation.CLS",1)
%ComposeOid(id) public {
	set tCLASSNAME = $listget($g(^User.ValidationD(id)),1)
	if tCLASSNAME="" { quit $select(id="":"",1:$listbuild(id_"","User.Validation")) }
	set tClass=$piece(tCLASSNAME,$extract(tCLASSNAME),*-1)
	set:tClass'["." tClass="User."_tClass
	quit $select(id="":"",1:$listbuild(id_"",tClass)) }
%DeleteData(id,concurrency) public {
	Quit:id="" $$Error^%apiOBJ(5812)
	set $Ztrap="DeleteDataERR" set lockok=0,sc=""
	If concurrency {
		Lock +(^User.ValidationD(id)#"E"):$zu(115,4)
		Set lockok=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,2:2,4:2,:0))
		Set:lockok=2&&($tlevel) %0CacheLock($classname(),"E")=1
		If 'lockok {
			Quit $$Error^%apiOBJ(5803,$classname())
		}
	}
	If ($Data(^User.ValidationD(id))) {
		If $data(^oddEXTR($classname())) {
			Set fc=""
			For {
				Set fc=$order(^rINDEXEXT("F",$classname(),"%1","f",fc))
				Quit:fc=""
				Set fk=""
				For {
					Set fk=$order(^rINDEXEXT("F",$classname(),"%1","f",fc,fk))
					Quit:fk=""
					Set sc=$classmethod(fc,fk_"Delete",id)
					If ('sc) { Goto DeleteDataEXIT }
				}
			}
			Set fc=""
			For {
				Set fc=$order(^rINDEXEXT("F",$classname(),"IDKEY","f",fc))
				Quit:fc=""
				Set fk=""
				For {
					Set fk=$order(^rINDEXEXT("F",$classname(),"IDKEY","f",fc,fk))
					Quit:fk=""
					Set sc=$classmethod(fc,fk_"Delete",id)
					If ('sc) { Goto DeleteDataEXIT }
				}
			}
		}
		Kill ^User.ValidationD(id)
		Set sc=1
	}
	Else { Set sc=$$Error^%apiOBJ(5810,$classname(),id) }
DeleteDataEXIT
	If concurrency,lockok {
		Lock -(^User.ValidationD(id)#"E")
	}
DeleteDataRET	Set $Ztrap = ""
	QUIT sc
DeleteDataERR	Set $Ztrap = "DeleteDataRET"
	Set sc = $$Error^%apiOBJ(5002,$ZE)
	Goto DeleteDataEXIT }
%Exists(oid="") public {
	Quit ..%ExistsId($listget(oid)) }
%ExistsId(id) public {
	Try { set tExists = $s(id="":0,$d(^User.ValidationD(id)):1,1:0) } catch tException { set tExists = 0 if '(tException.%IsA("%Exception.SystemException")) { throw tException } elseif tException.Name'="<SUBSCRIPT>" { ZT $ZE } } quit tExists }
%FileIndices(id,pIndexHandle=0) public {
	Quit 1 }
%InsertBatch(objects,concurrency=0,useTransactions=0) public {
	try {
		set numerrs=0,errs="",cnt=0,ptr=0
		while $listnext(objects,ptr,data) {
			set cnt=cnt+1
			set lock=0
			if (useTransactions) tstart
			set id=$i(^User.ValidationD)
			try {
				set tInnerException = ""
				;
				if concurrency { lock +(^User.ValidationD(id)#"E"):$zu(115,4) set lock=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,2:2,4:2,:0)) set:lock=2&&($tlevel) %0CacheLock($classname(),"E")=1 if 'lock { Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5803,$classname())) } }
				set ^User.ValidationD(id)=data
				if (useTransactions) { tcommit }
			}
			catch tInnerException {
				set newerr=$lb(cnt,tInnerException.AsStatus())
				if '($length(errs)+$length(newerr)>32767) { set numerrs=numerrs+1, errs=errs_newerr }
				if (useTransactions) && ($Tlevel) trollback
			}
			if lock lock -(^User.ValidationD(id)#"E")
		}
	}
	catch tException {
		set newerr=$lb($g(cnt),tException.AsStatus())
		if '($length(errs)+$length(newerr)>32767) { set numerrs=numerrs+1, errs=errs_newerr }
	}
	QUIT ($lb(numerrs))_errs }
%KillExtentData(killstreams=0)
	If killstreams Kill ^User.ValidationS
	Kill ^User.ValidationD
	Quit 1
%LoadData(id) public {
	New %s1
	set $ZTrap="CatchError",locked=0,userze=$ze,$ze=""
	If i%%Concurrency=4 {
		Lock +(^User.ValidationD(id)#"E"):$zu(115,4)
		if '$t do init s i%%Concurrency=0 s:$ze="" $ze=userze return $$Error^%apiOBJ(5803,$classname())
	} ElseIf i%%Concurrency>1 {
		Lock +(^User.ValidationD(id)#"SE"):$zu(115,4)
		if '$t do init s i%%Concurrency=0 s:$ze="" $ze=userze return $$Error^%apiOBJ(5804,$classname())
		set locked = 1
	}
	If $d(^User.ValidationD(id),%s1)#2 {
		If i%%Concurrency=2 { Lock -(^User.ValidationD(id)#"SIE") }
		S i%Name=$lg(%s1,2),i%Surname=$lg(%s1,3),i%Age=$lg(%s1,4),i%Gender=$lg(%s1,5),i%Race=$lg(%s1,6),i%DOB=$lg(%s1,7)
		s:$ze="" $ze=userze
		Quit 1
	} Else {
		If i%%Concurrency=2 { Lock -(^User.ValidationD(id)#"SIE") }
		do init
		set sc = $$Error^%apiOBJ(5809,$classname(),id) goto CatchError
	}
CatchError	set $ZTrap = "" if $ZE'="" { s sc = $$Error^%apiOBJ(5002,$ZE) }
	If ($get(locked))&&(i%%Concurrency<3) { Lock -(^User.ValidationD(id)#"SIE") }
	if '('sc) { set sc=$$Error^%apiOBJ(5809,$classname(),id) }
	s:$ze="" $ze=userze
	return sc
init	Set i%Age="",i%DOB="",i%Gender="",i%Name="",i%Race="",i%Surname=""
	quit }
%LoadDataFromMemory(id,objstate,obj) public {
	New %s1
	If $d(objstate(id)) {
		Set %s1=$g(objstate(id))
		S i%Name=$lg(%s1,2),i%Surname=$lg(%s1,3),i%Age=$lg(%s1,4),i%Gender=$lg(%s1,5),i%Race=$lg(%s1,6),i%DOB=$lg(%s1,7)
		Quit 1
	} Else {
		Set i%Age="",i%DOB="",i%Gender="",i%Name="",i%Race="",i%Surname=""
		Quit $$Error^%apiOBJ(5809,$classname(),id)
	} }
%LockExtent(shared=0) public {
	If shared {
		Lock +(^User.ValidationD#"S"):$zu(115,4) Quit:$t 1
		Quit $$Error^%apiOBJ(5799,$classname())
	}
	Lock +(^User.ValidationD):$zu(115,4) Quit:$t 1
	Quit $$Error^%apiOBJ(5798,$classname()) }
%LockId(id,shared=0,timeout) public { s:'($d(timeout)#2) timeout=$zu(115,4)
	If id="" { Quit $$Error^%apiOBJ(5812) }
	Set sc=1
	If 'shared {
		Lock +(^User.ValidationD(id)#"E"):timeout Quit:$t 1
		Quit $$Error^%apiOBJ(5803,id_":"_$classname())
	}
	Lock +(^User.ValidationD(id)#"SE"):timeout Quit:$t 1
	Quit $$Error^%apiOBJ(5804,id_":"_$classname()) }
%NormalizeObject() public {
	If '$system.CLS.GetModified() Quit 1
	If m%Age Set:i%Age'="" i%Age=(..AgeNormalize(i%Age))
	If m%DOB Set:i%DOB'="" i%DOB=(..DOBNormalize(i%DOB))
	If m%Gender Set:i%Gender'="" i%Gender=(..GenderNormalize(i%Gender))
	If m%Name Set:i%Name'="" i%Name=(..NameNormalize(i%Name))
	If m%Race Set:i%Race'="" i%Race=(..RaceNormalize(i%Race))
	If m%Surname Set:i%Surname'="" i%Surname=(..SurnameNormalize(i%Surname))
	Quit 1 }
%OnDetermineClass(oid,class) public {
	Set id=$listget($get(oid))
	Quit:id="" $$Error^%apiOBJ(5812)
	Set idclass=$lg($get(^User.ValidationD(id)),1)
	If idclass="" { Set class="User.Validation" Quit 1 }
	Set class=$piece(idclass,$extract(idclass),*-1)
	Set:class'["." class="User."_class
	QUIT 1 }
%PhysicalAddress(id,paddr)
	if $Get(id)="" Quit $$Error^%apiOBJ(5813,$classname())
	if (id="") { quit $$Error^%apiOBJ(5832,$classname(),id) }
	s paddr(1)=$lb($Name(^User.ValidationD(id)),$classname(),"IDKEY","listnode",id)
	s paddr=1
	Quit 1
%PurgeIndices(idxlist="",lockExtent=0,pIgnoreIndexList="") public {
	If idxlist="" { Quit 1 }
	Quit $$Error^%apiOBJ(5066,$classname()_"::"_$ListToString(idxlist)) }
%SQLAcquireLock(%rowid,s=0,unlockref=0)
	new %d,gotlock
	set %d(1)=%rowid set s=$e("E",'unlockref)_$e("S",s)
	lock +^User.ValidationD(%d(1))#s:$zu(115,4) set gotlock=$t
	if gotlock,'unlockref { set:$case($SYSTEM.Lock.ReturnCode(),2:1,4:1,:0)&&($tlevel) %0CacheLock("User.Validation","E")=1 }
	set:gotlock&&unlockref unlockref=unlockref+1,unlockref(unlockref)=$lb($name(^User.ValidationD(%d(1))),"User.Validation",s_"D")
	QUIT gotlock
%SQLAcquireTableLock(s=0,SQLCODE,to="")
	set s=$e("S",s) set:to="" to=$zu(115,4) lock +^User.ValidationD#s:to QUIT:$t 1 set SQLCODE=-110 if s="S" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler35",,"SQLUser"_"."_"Validation") } else { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler36",,"SQLUser"_"."_"Validation") } QUIT 0
	Return
%SQLBuildIndices(pIndices="",pLockFlag=0,pStartID="",pEndID="",pIgnoreIndexList="")
	QUIT ..%BuildIndices(pIndices,,pLockFlag,,pStartID,pEndID,pIgnoreIndexList)
%SQLBuildPurgeIndexForRow(pIndices="",pActions="BP",pLockRow=1,%d,%e,pIgnoreIndexList="")
	// Purge and build index nodes for a single row using given values, return Status Code
	new sn,tSC,tLock set tSC=1,pActions=$zcvt(pActions,"U")
	try {
		if $g(%d(1))="" { set tSC=$select(+tSC:$$Error^%apiOBJ(5521,-108,"RowID value must be specified in %d(1) when calling %SQLBuildPurgeIndexForRow for table 'SQLUser.Validation'"),1:$$AppendStatus^%occSystem(tSC,$$Error^%apiOBJ(5521,-108,"RowID value must be specified in %d(1) when calling %SQLBuildPurgeIndexForRow for table 'SQLUser.Validation'"))) RETURN tSC }
		if pLockRow { if '..%SQLAcquireLock(%d(1)) { set tSC=$select(+tSC:$$Error^%apiOBJ(5521,-114,"Unable to lock row in table 'SQLUser.Validation' with %ID = '"_%d(1)_"'"),1:$$AppendStatus^%occSystem(tSC,$$Error^%apiOBJ(5521,-114,"Unable to lock row in table 'SQLUser.Validation' with %ID = '"_%d(1)_"'"))) RETURN tSC  } else { set tLock=1 }}
		if pLockRow { do ..%SQLReleaseLock(%d(1),0,0) set tLock=0 }
	}
	catch {
		if $g(tLock) { do ..%SQLReleaseLock(%d(1),0,0) }
		set tSC=$select(+tSC:$$Error^%apiOBJ(5594,$ze),1:$$AppendStatus^%occSystem(tSC,$$Error^%apiOBJ(5594,$ze)))
	}
	QUIT tSC
%SQLCopyIcolIntoName()
	if %oper="DELETE" {
		set:$d(%d(1)) %f("ID")=%d(1)
		QUIT
	}
	set:$d(%d(1)) %f("ID")=%d(1) set:$a(%e,2)&&$d(%d(2)) %f("Age")=%d(2) set:$a(%e,3)&&$d(%d(3)) %f("DOB")=%d(3) set:$a(%e,4)&&$d(%d(4)) %f("Gender")=%d(4) set:$a(%e,5)&&$d(%d(5)) %f("Name")=%d(5) set:$a(%e,6)&&$d(%d(6)) %f("Race")=%d(6) set:$a(%e,7)&&$d(%d(7)) %f("Surname")=%d(7) set:$a(%e,8)&&$d(%d(8)) %f("x__classname")=%d(8)
	QUIT
%SQLDefineiDjVars(%d,subs,master)
	QUIT
%SQLDelete(%rowid,%check,%tstart=1,%mv=0,%polymorphic=0)
	// SQL DELETE method for table SQLUser.Validation
	new bva,ce,%d,dc,%e,%ele,%itm,%key,%l,%nc,omcall,%oper,%pos,%s,sn,sqlcode,subs set %oper="DELETE",sqlcode=0,%ROWID=%rowid,%d(1)=%rowid,%e(1)=%rowid,%l=$c(0)
	if '$d(%0CacheSQLRA) { new %0CacheSQLRA set omcall=1 }
	if '$a(%check,2) {
		new %ls lock +^User.ValidationD(%d(1))#"E":$zu(115,4) set %ls=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,4:2,2:2,1:3,:""))
		set:%ls=2 $e(%check,2)=$c(1) set:%ls=2&&($tlevel) %0CacheLock("User.Validation","E")=1 set:$case(%ls,1:1,2:1,:0) $e(%l)=$c(1)
		if '%ls||(%ls=3) { set SQLCODE=-110,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer",$s('%ls:"SQLFiler40",1:"SQLFiler55"),,%oper,"SQLUser"_"."_"Validation",$g(%d(1))) RETURN  }
	}
	if %tstart { TSTART:($zu(115,1)=1)||('$TLEVEL&&($zu(115,1)=2))  }
	set $zt="ERRORDelete"
	do ..%SQLGetOld(%rowid,.%d,.%e,.sqlcode) if sqlcode { set SQLCODE=-106,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler58",,"SQLUser"_"."_"Validation",%rowid) do ..%SQLEExit() QUIT  }
	if %e(8)'="" { set sn=$p(%e(8),$e(%e(8)),$l(%e(8),$e(%e(8)))-1) if "Validation"'=sn { new %f do ..%SQLCopyIcolIntoName() do $classmethod(sn,"%SQLDelete",%rowid,%check,%tstart,%mv,1) QUIT  }}
	if '$a(%check),'$zu(115,7) do  if sqlcode set SQLCODE=sqlcode do ..%SQLEExit() QUIT  
	. new %fk,%k,%p,%st,%t,%z set %k="",%p("%1")="%d(1),",%p("IDKEY")="%d(1),"
	. for  quit:sqlcode<0  set %k=$o(^rINDEXEXT("F","User.Validation",%k)) quit:%k=""  set %t="" for  set %t=$o(^rINDEXEXT("F","User.Validation",%k,"f",%t)) quit:%t=""  set %st=(%t="User.Validation") set %fk="" for  set %fk=$o(^rINDEXEXT("F","User.Validation",%k,"f",%t,%fk)) quit:%fk=""  x "set %z=$classmethod(%t,%fk_""SQLFKeyRefAction"",%st,%k,$a(%check,2),"_%p(%k)_")" if %z set sqlcode=-124 quit  
	set ce="" for  { set ce=$order(^oddSQL("SQLUser","Validation","DC",ce)) quit:ce=""   do $classmethod(ce,"%SQLDeleteChildren",%d(1),%check,.sqlcode) quit:sqlcode<0  } if sqlcode<0 { set SQLCODE=sqlcode do ..%SQLEExit() QUIT } // Delete any children
	if '$a(%check,3) {
	}
	k ^User.ValidationD(%d(1))
	do ..%SQLUnlock() TCOMMIT:%tstart&&($zu(115,1)=1)
	set SQLCODE=0 kill:$g(omcall) %0CacheSQLRA
	QUIT
ERRORDelete	set $zt="",SQLCODE=-415,%msg=$s($g(%msg)'="":%msg_" -- ",1:"")_$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler51",,%oper,"SQLUser"_"."_"Validation",$ze) if $ze["<FRAMESTACK>" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler52",,$ze,%oper,"SQLUser"_"."_"Validation") do ##Class(%SYS.System).WriteToConsoleLog(%msg) if ($zu(67,10,$j)=1)||($zu(67,10,$j)=3) { write !,%msg h 3 } HALT  } do ..%SQLEExit() QUIT
	Return
%SQLDeleteTempStreams()
	// Delete all temporary streams
	QUIT
%SQLEExit()
	do ..%SQLUnlock() 
	if %tstart,$zu(115,1)=1,$TLEVEL { set %tstart=0 TROLLBACK 1 } kill:$g(omcall) %0CacheSQLRA QUIT  
	Return
%SQLExists(pLockOnly=0,pUnlockRef,%pVal...)
	// SQL Foreign Key validation entry point for Key %1.  Called by FKeys that reference this Key to see if the row is defined
	new id set id=%pVal(1)
	if pLockOnly>=0 { if '..%SQLGetLock(id,1,.pUnlockRef) { set sqlcode=-114,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler39",,"SQLUser"_"."_"Validation"_":"_"%1") QUIT 0 } }
	if pLockOnly<1 {
		new qv set qv=$d(^User.ValidationD(%pVal(1))) QUIT:pLockOnly=-1 qv
		do:'$g(pUnlockRef) ..%SQLReleaseLock(id,1) quit qv
	}
	else { do:'$g(pUnlockRef) ..%SQLReleaseLock(id,1) QUIT 1 }
	Return
%SQLGetLock(pRowId,pShared=0,pUnlockRef)
	QUIT ..%SQLAcquireLock(pRowId,pShared,.pUnlockRef)
%SQLGetOld(%rowid,%d,%e,sqlcode)
	new s set %d(1)=%rowid,s="" if '$d(^User.ValidationD(%d(1)),s) { set sqlcode=100 quit  }
	 S %e(8)=$lg(s)
	QUIT
%SQLGetOldAll()
	new s set %d(1)=%rowid,s="" if '$d(^User.ValidationD(%d(1)),s) { set sqlcode=100 quit  }
	 S $lg(%e(8),%e(5),%e(7),%e(2),%e(4),%e(6),%e(3))=s
	QUIT
%SQLInsert(%d,%check,%inssel,%vco,%tstart=1,%mv=0)
	// SQL INSERT method for table SQLUser.Validation
	new bva,%ele,%itm,%key,%f,%l,%n,%nc,%oper,%pos,%s,sqlcode,sn,subs,icol set %oper="INSERT",sqlcode=0,%l=$c(0,0,0)
	if $a(%check,7) { new %diu merge %diu=%d }
	if $d(%d(1)),'$zu(115,11) { if %d(1)'="" { set SQLCODE=-111,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler6",,"ID","SQLUser"_"."_"Validation") RETURN ""  } kill %d(1) } 
	if '$a(%check),'..%SQLValidateFields(.sqlcode) { set SQLCODE=sqlcode RETURN "" }
	do:'$a(%check,8) ..%SQLNormalizeFields()
	if %tstart { TSTART:($zu(115,1)=1)||('$TLEVEL&&($zu(115,1)=2))  } set $zt="ERRORInsert"
	if '$a(%check) {
		do {
			if $g(%vco)'="" { d @%vco quit:sqlcode<0  }
		} while 0
		if sqlcode<0 { set SQLCODE=sqlcode do ..%SQLEExit() RETURN "" }		// A constraint failed
	}
	if '$d(%d(1)) { set %d(1)=$i(^User.ValidationD) } elseif %d(1)>$g(^User.ValidationD) { if $i(^User.ValidationD,$zabs(%d(1)-$g(^User.ValidationD))) {}} elseif $d(^User.ValidationD(%d(1))) { set SQLCODE=-119,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler33",,"ID",%d(1),"SQLUser"_"."_"Validation"_"."_"ID") do ..%SQLEExit() RETURN "" }
	set:'($d(%d(8))#2) %d(8)=""
	if '$a(%check,2) {
		new %ls lock +^User.ValidationD(%d(1))#"E":$zu(115,4) set %ls=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,4:2,2:2,1:3,:""))
		set:%ls=2 $e(%check,2)=$c(1) set:%ls=2&&($tlevel) %0CacheLock("User.Validation","E")=1 set:$case(%ls,1:1,2:1,:0) $e(%l)=$c(1)
		if '%ls||(%ls=3) { set SQLCODE=-110,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer",$s('%ls:"SQLFiler40",1:"SQLFiler55"),,%oper,"SQLUser"_"."_"Validation",$g(%d(1))) do ..%SQLEExit() RETURN ""  }
	}
	set ^User.ValidationD(%d(1))=$lb(%d(8),%d(5),%d(7),%d(2),%d(4),%d(6),%d(3))
	lock:$a(%l) -^User.ValidationD(%d(1))#"E"
	TCOMMIT:%tstart&&($zu(115,1)=1)
	set SQLCODE=0
	QUIT %d(1) 			// %SQLInsert
ERRORInsert	set $zt="",SQLCODE=-415,%msg=$s($g(%msg)'="":%msg_" -- ",1:"")_$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler51",,%oper,"SQLUser"_"."_"Validation",$ze)
	if $ze["<FRAMESTACK>" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler52",,$ze,%oper,"SQLUser"_"."_"Validation") do ##Class(%SYS.System).WriteToConsoleLog(%msg) if ($zu(67,10,$j)=1)||($zu(67,10,$j)=3) { write !,%msg h 3 } HALT  }
	do ..%SQLEExit()
	RETURN ""
%SQLInvalid(pIcol,pVal) public {
	set:$l($g(pVal))>40 pVal=$e(pVal,1,40)_"..." do:'$d(%n) ..%SQLnBuild() set %msg=$s($g(%msg)'="":%msg_$c(13,10),1:"")_$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler37",,"SQLUser"_"."_"Validation"_"."_$lg(%n,pIcol),$s($g(pVal)'="":$s(pVal="":"<NULL>",pVal=$c(0):"<EMPTY STRING>",1:"'"_pVal_"'"),1:"")),sqlcode=$s(%oper="INSERT":-104,1:-105)
	QUIT sqlcode }
%SQLMissing(fname)
	set sqlcode=-108,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler47",,fname,"SQLUser"_"."_"Validation") quit
%SQLNormalizeFields()
	new %f for %f=2,3 { set:$g(%d(%f))'="" %d(%f)=$select(%d(%f)=$c(0)&&$zu(115,13):"",1:%d(%f)\1) }
	QUIT
%SQLPurgeIndices(pIndices="",pLockExtent=0,pIgnoreIndexList="")
	QUIT ..%PurgeIndices(pIndices,pLockExtent,pIgnoreIndexList)
%SQLQuickLoad(%rowid,%nolock=0,pkey=0,qq=0)
	// Get fields from row where SQLRowID=%rowid
	new d,i,il,subs set:%nolock=2 %nolock=1
	if %nolock=0 { if '..%SQLAcquireLock(%rowid) { set %qrc=114,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler45",,"SQLUser"_"."_"Validation",%rowid),%ROWCOUNT=0 QUIT  } set:$zu(115,2) il=$zu(115,2,0) }
	new s,ul set ul=0,d(1)=%rowid if $zu(115,2)=1 { lock +^User.ValidationD(d(1))#"S":$zu(115,4) if $t { set ul=1 } else { set %qrc=114,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler46",,"SQLUser"_"."_"Validation",%rowid),%ROWCOUNT=0 quit  } }
	if '$d(^User.ValidationD(d(1)),s) { set SQLCODE=100,%qrc=100 if %nolock=0 { do:$g(il) $zu(115,2,il) }} else { set SQLCODE=0
	if qq { set d(8)=$lg(s) if d(8)'="" { new sn set sn=$p(d(8),$e(d(8)),$l(d(8),$e(d(8)))-1) if "Validation"'=sn { if %nolock=0 { do ..%SQLReleaseLock(%rowid,0,1) do:$g(il) $zu(115,2,il) } kill d set:sn'["." sn="User."_sn do $classmethod(sn,"%SQLQuickLoad",%rowid,%nolock,0,1) QUIT  }}}
	set d(2)=$lg(s,4) set d(3)=$lg(s,7) set d(4)=$lg(s,5) set d(5)=$lg(s,2) set d(6)=$lg(s,6) set d(7)=$lg(s,3) set d(8)=$lg(s)  }
	do ..%SQLQuickLogicalToOdbc(.d)
	if SQLCODE set %ROWCOUNT=0 set:SQLCODE<0 SQLCODE=-SQLCODE lock:ul -^User.ValidationD(d(1))#"SI" set %qrc=SQLCODE QUIT
	set:qq d=$zobjexport("User.Validation",18),d=$zobjexport(8,18) set i=-1 for  { set i=$o(d(i)) quit:i=""  set d=$zobjexport(d(i),18) } set %qrc=0,%ROWCOUNT=1 lock:ul -^User.ValidationD(d(1))#"SI" if %nolock=0 { do ..%SQLReleaseLock(%rowid,0,0) do:$g(il) $zu(115,2,il) } QUIT
	Return
%SQLReleaseLock(%rowid,s=0,i=0,e="")
	new %d
	set:e="" e=1 set %d(1)=%rowid set s=$e("E",e)_$e("S",s)_$e("D",i)
	lock -^User.ValidationD(%d(1))#s
	QUIT
%SQLReleaseTableLock(s=0,i=0)
	set s=$e("S",s)_$e("D",i) lock -^User.ValidationD#s QUIT 1
	Return
%SQLUnlock()
	lock:$a(%l) -^User.ValidationD(%d(1))#"E"
	QUIT
%SQLUnlockError(cname)
	set sqlcode=-110 if %oper="DELETE" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler48",,"SQLUser"_"."_"Validation",cname) } else { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler49",,"SQLUser"_"."_"Validation",cname) } quit
	Return
%SQLUpdate(%rowid,%check,%d,%vco,%tstart=1,%mv=0,%polymorphic=0,%soid)
	// SQL UPDATE method for table SQLUser.Validation
	new %e,bva,%ele,%itm,%key,%f,%l,%n,%nc,%oper,%pos,%s,icol,omcall,s,sn,sqlcode,subs,t set %oper="UPDATE",sqlcode=0,%ROWID=%rowid,$e(%e,1)=$c(0),%l=$c(0,0,0)
	if '$d(%0CacheSQLRA) { new %0CacheSQLRA set omcall=1 }
	if '$a(%check,7) {
		if '$a(%check),'..%SQLValidateFields(.sqlcode) { set SQLCODE=sqlcode QUIT  }
		do:'$a(%check,8) ..%SQLNormalizeFields()
	}
	if $d(%d(1)),%d(1)'=%rowid { set SQLCODE=-107,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler16",,"ID","SQLUser"_"."_"Validation") QUIT  }
	for icol=2:1:8 { set $e(%e,icol)=$c($d(%d(icol))) }
	set %d(1)=%rowid,%e(1)=%rowid
	if '$a(%check,2) {
		new %ls lock +^User.ValidationD(%d(1))#"E":$zu(115,4) set %ls=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,4:2,2:2,1:3,:""))
		set:%ls=2 $e(%check,2)=$c(1) set:%ls=2&&($tlevel) %0CacheLock("User.Validation","E")=1 set:$case(%ls,1:1,2:1,:0) $e(%l)=$c(1)
		if '%ls||(%ls=3) { set SQLCODE=-110,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer",$s('%ls:"SQLFiler40",1:"SQLFiler55"),,%oper,"SQLUser"_"."_"Validation",$g(%d(1))) RETURN  }
	}
	if %tstart { TSTART:($zu(115,1)=1)||('$TLEVEL&&($zu(115,1)=2))  }
	set $zt="ERRORUpdate"
	if $g(%vco)="" { do ..%SQLGetOld(%rowid,.%d,.%e,.sqlcode) i sqlcode { s SQLCODE=-109,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler59",,"SQLUser"_"."_"Validation",%rowid) do ..%SQLEExit() QUIT  } set:'$d(%d(8)) %d(8)=%e(8) set:%d(8)=%e(8) $e(%e,8)=$c(0) } else { do ..%SQLGetOldAll() if sqlcode { set SQLCODE=-109,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler59",,"SQLUser"_"."_"Validation",%rowid) do ..%SQLEExit() QUIT  } for icol=2,3,4,5,6,7,8 { set:'$d(%d(icol)) %d(icol)=%e(icol) set:%d(icol)=%e(icol) $e(%e,icol)=$c(0) }}
	if %e(8)'="" set sn=$p(%e(8),$e(%e(8)),$l(%e(8),$e(%e(8)))-1) if "Validation"'=sn new %f do ..%SQLCopyIcolIntoName() do $classmethod(sn,"%SQLUpdate",%rowid,%check,.%d,$g(%vco),%tstart,%mv,1) QUIT
	if '$a(%check) {
		do {
			if $g(%vco)'="" { d @%vco quit:sqlcode<0  }
		} while 0
		if sqlcode { set SQLCODE=sqlcode do ..%SQLEExit() QUIT  }
	}
	if $s($a(%e,2):1,$a(%e,3):1,$a(%e,4):1,$a(%e,5):1,$a(%e,6):1,$a(%e,7):1,1:$a(%e,8)) {
		set ^User.ValidationD(%d(1))=$listupdate($g(^User.ValidationD(%d(1))),1,$a(%e,8):%d(8),$a(%e,5):%d(5),$a(%e,7):%d(7),$a(%e,2):%d(2),$a(%e,4):%d(4),$a(%e,6):%d(6),$a(%e,3):%d(3))
	}
	do ..%SQLUnlock() TCOMMIT:%tstart&&($zu(115,1)=1)
	set SQLCODE=0 kill:$g(omcall) %0CacheSQLRA
	QUIT
ERRORUpdate	set $zt="",SQLCODE=-415,%msg=$s($g(%msg)'="":%msg_" -- ",1:"")_$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler51",,%oper,"SQLUser"_"."_"Validation",$ze) if $ze["<FRAMESTACK>" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler52",,$ze,%oper,"SQLUser"_"."_"Validation") do ##Class(%SYS.System).WriteToConsoleLog(%msg) if ($zu(67,10,$j)=1)||($zu(67,10,$j)=3) { write !,%msg h 3 } HALT  } do ..%SQLEExit() QUIT  
	Return
%SQLValidateFields(sqlcode)
	new %f for %f=2,3 { if $g(%d(%f))'="",'($select(%d(%f)=$c(0)&&$zu(115,13):1,$isvalidnum(%d(%f),0):1,1:$$Error^%apiOBJ(7207,%d(%f)))) set sqlcode=..%SQLInvalid(%f+1,$g(%d(%f))) quit  } 
	for %f=4,5,6,7 { if $g(%d(%f))'="",'(($l(%d(%f))'>50)) set sqlcode=..%SQLInvalid(%f+1,$g(%d(%f))) quit  } 
	QUIT 'sqlcode
%SQLnBuild() public {
	set %n=$lb(,"ID","Age","DOB","Gender","Name","Race","Surname","x__classname")
	QUIT }
%SaveData(id) public {
	try {
		set id=$listget(i%"%%OID") if id'="" { set insert=0,idassigned=1 } else { set insert=1,idassigned=0 }
		set lock=0,lockok=0,tSharedLock=0
		if 'idassigned { set id=$i(^User.ValidationD) do ..%IdSet(id) set:$g(%objtxSTATUS)=2 %objtxOIDASSIGNED(+$this)="" }
		try {
			set tInnerException = ""
			;
			if 'insert {
				if (i%%Concurrency<4)&&(i%%Concurrency) { lock +(^User.ValidationD(id)#"E"):$zu(115,4) set lockok=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,2:2,4:2,:0)) set:lockok=2&&($tlevel) %0CacheLock($classname(),"E")=1 if lockok { set lock=1 } else { Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5803,$classname())) } }
				if ('$Data(^User.ValidationD(id))) {
					set insert=1
					if lock { lock -(^User.ValidationD(id)#"E") set (lock,lockok) = 0 }
				}
			}
			if insert {
				if ('lockok&&..%Concurrency&&$tlevel)||(i%%Concurrency=4) {  lock +(^User.ValidationD(id)#"E"):$zu(115,4) set lockok=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,2:2,4:2,:0)) set:(lockok=2&&(i%%Concurrency'=4)) %0CacheLock($classname(),"E")=1 set:lockok lock=1 if 'lockok { Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5803,$classname())) } }
				if i%%Concurrency=3 { lock +(^User.ValidationD(id)#"ES") set tSharedLock=1 }
				set ^User.ValidationD(id)=$lb("",i%Name,i%Surname,i%Age,i%Gender,i%Race,i%DOB)
			}
			else {
				set ^User.ValidationD(id)=$lb("",i%Name,i%Surname,i%Age,i%Gender,i%Race,i%DOB)
			}
			set tStatus = 1
		}
		catch tInnerException {
			if ('idassigned) { Set $zobjoid("",$listget(i%"%%OID"))="",i%"%%OID"="" kill:$g(%objtxSTATUS)=2 %objtxOIDASSIGNED(+$this) }
			if (tSharedLock) {  lock -(^User.ValidationD(id)#"ES") } elseif (lockok=1)&&(insert)&&(i%%Concurrency=4) {  lock -(^User.ValidationD(id)) }
		}
		if lock lock -(^User.ValidationD(id)#"E")
		if $Isobject(tInnerException) { throw tInnerException }
	}
	catch tException {
		set tStatus = tException.AsStatus()
	}
	quit tStatus }
%SaveDirect(id="",idList="",data,concurrency=-1) public {
	try {
		if concurrency=-1 { set concurrency=$zu(115,10) }
		if id'="" { set insert=0,idassigned=1 } else { set insert=1,idassigned=0 }
		set lock=0,tSharedLock=0
		if 'idassigned { set id=$i(^User.ValidationD) }
		try {
			set tInnerException = ""
			;
			if 'insert {
				if concurrency { lock +(^User.ValidationD(id)#"E"):$zu(115,4) set lock=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,2:2,4:2,:0)) set:lock=2&&($tlevel) %0CacheLock($classname(),"E")=1 if 'lock { Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5803,$classname())) } }
				if ('$Data(^User.ValidationD(id))) {
					set insert=1
					if lock { lock -(^User.ValidationD(id)#"E") set (lock,lockok) = 0 }
				}
			}
			if insert {
				if concurrency { lock +(^User.ValidationD(id)#"E"):$zu(115,4) set lock=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,2:2,4:2,:0)) set:lock=2&&($tlevel) %0CacheLock($classname(),"E")=1 if 'lock { Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5803,$classname())) } }
				set ^User.ValidationD(id)=data
			}
			else {
				set ^User.ValidationD(id)=data
			}
			set tStatus = 1
		}
		catch tInnerException {
		}
		if lock lock -(^User.ValidationD(id)#"E")
		if $Isobject(tInnerException) { throw tInnerException }
	}
	catch tException {
		set tStatus = tException.AsStatus()
	}
	quit tStatus }
%SaveIndices(pStartId="",pEndId="",lockExtent=0) public {
	Quit 1 }
%SortBegin(idxlist="",excludeunique=0)
	Quit 1
%SortEnd(idxlist="",commit=1,excludeunique=0) public {
	Quit 1 }
%UnlockExtent(shared=0,immediate=0) public {
	If 'shared {
		If 'immediate {
			Lock -^User.ValidationD
			 Quit 1
		}
		Lock -^User.ValidationD#"I"
		Quit 1
	}
	If 'immediate {
		Lock -^User.ValidationD#"S"
		Quit 1
	}
	Lock -^User.ValidationD#"SI"
	Quit 1 }
%UnlockId(id,shared=0,immediate=0) public {
	If 'shared {
		If 'immediate {
			Lock -(^User.ValidationD(id)#"E")
			Quit 1
		}
		Lock -(^User.ValidationD(id)#"IE")
		Quit 1
	}
	If 'immediate {
		Lock -(^User.ValidationD(id)#"SE")
		Quit 1
	}
	Lock -(^User.ValidationD(id)#"SIE")
	Quit 1 }
%ValidateIndices(idxList="",autoCorrect=0,lockOption=1,multiProcess=1,mapList,verbose=1,errors)
	w !,"There are no indices to validate for class 'User.Validation'"
	QUIT 1
%ValidateObject(unused=0,checkserial=1) public {
	set sc=1
	If '$system.CLS.GetModified() Quit sc
	If m%Age Set iv=..Age If iv'="" Set rc=(..AgeIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"Age",iv)
	If m%DOB Set iv=..DOB If iv'="" Set rc=(..DOBIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"DOB",iv)
	If m%Gender Set iv=..Gender If iv'="" Set rc=(..GenderIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"Gender",iv)
	If m%Name Set iv=..Name If iv'="" Set rc=(..NameIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"Name",iv)
	If m%Race Set iv=..Race If iv'="" Set rc=(..RaceIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"Race",iv)
	If m%Surname Set iv=..Surname If iv'="" Set rc=(..SurnameIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"Surname",iv)
	Quit sc }
zCalculate(pRequest) public {
	set Age = 2021 - $EXTRACT(pRequest.DOB,1,4)
	return Age }
zPopulate(count=10,verbose=0,DeferIndices=1,objects=0,tune=1,deterministic=0)
	New errcnt,i,id,keepobjects,obj,save,saved
	Set saved=0,keepobjects=0,errcnt=0
	Do $ZU(165,0,$S(deterministic:481516,1:$RANDOM(99999999)))
	If objects Set keepobjects=1,objects=0
	If DeferIndices Do ..%SortBegin("",1)
	Kill ^||%Populate
	For i=1:1:count Do  if errcnt>1000 write:verbose !,"over 1,000 errors encountered with no successful save - exiting" quit
	. Set obj=##class(User.Validation).%New()
	. Set obj.Age=##class(%Library.PopulateUtils).Integer(,)
	. Set obj.DOB=##class(%Library.PopulateUtils).Integer(,)
	. Set obj.Gender=##class(%Library.PopulateUtils).String(50)
	. Set obj.Name=##class(%Library.PopulateUtils).Name()
	. Set obj.Race=##class(%Library.PopulateUtils).String(50)
	. Set obj.Surname=##class(%Library.PopulateUtils).String(50)
	. If 'keepobjects Do
	. . Set save=obj.%Save()
	. . If (''save) Set saved=saved+1,errcnt=0 If verbose Write !,"Object saved...",saved
	. . If ('save) set errcnt=errcnt+1 if verbose Do DisplayError^%apiOBJ(save)
	. If keepobjects Set objects($Increment(objects))=obj
	. Set obj=""
	Kill ^||%Populate
	If DeferIndices Do ..%SortEnd(,,1)
	If tune Do TuneTable^%apiSQL("SQLUser.Validation",1,verbose,.%msg,1)
	Quit saved
zValidateDOB(pRequest) public {
	if ($LENGTH(pRequest.DOB) '= 8) {return 0}
	if ($NUMBER(pRequest.DOB) = 0) {return 0}
	return 1 }
zValidation(pRequest) public {
		if ($LENGTH(pRequest.Name) = 0) {return 0} 
		if ($LENGTH(pRequest.Surname) = 0){return 0}
		if ($LENGTH(pRequest.Gender) = 0){return 0}
		if ($LENGTH(pRequest.Race) = 0){return 0}
		if ($LENGTH(pRequest.DOB) = 0) {return 0}
		if ($LENGTH(pRequest.Age) '= 0) {return 0}
		return 1 }
zAgeGetStored(id) public {
	Quit $Select(id'="":$listget($g(^User.ValidationD(id)),4),1:"") }
zDOBGetStored(id) public {
	Quit $Select(id'="":$listget($g(^User.ValidationD(id)),7),1:"") }
zGenderGetStored(id) public {
	Quit $Select(id'="":$listget($g(^User.ValidationD(id)),5),1:"") }
zNameGetStored(id) public {
	Quit $Select(id'="":$listget($g(^User.ValidationD(id)),2),1:"") }
zRaceGetStored(id) public {
	Quit $Select(id'="":$listget($g(^User.ValidationD(id)),6),1:"") }
zSurnameGetStored(id) public {
	Quit $Select(id'="":$listget($g(^User.ValidationD(id)),3),1:"") }
zExtentClose(%qHandle) [ SQLCODE ] public {
	New SQLCODE
	Do %qHandle.%Destruct() Kill %qHandle
	If SQLCODE { Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.%Message=$g(%msg) Set sc=$$Error^%apiOBJ(5540,SQLCODE,$get(%msg)) } Else { Set sc=1 }
	Quit sc }
zExtentExecute(%qHandle) [ SQLCODE ] public { New %ROWCOUNT,%ROWID,%msg,SQLCODE 
	Set sc=1
	 ;---&sql(DECLARE QExtent CURSOR FOR
 	 ;---		 SELECT ID FROM SQLUser.Validation)
 	 ;--- ** SQL PUBLIC Variables: SQLCODE
	 
	 ;---&sql(OPEN QExtent)
	try { s %qHandle="",%qHandle=$classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xEAVzuW9U6yORb0miXjDHL7b66HY","%New") if '$isobject(%qHandle) s %qHandle=$$%0dsqlD() } catch { if $ze["<CLASS DOES NOT EXIST>"&&($ze["%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xEAVzuW9U6yORb0miXjDHL7b66HY")||($ze["<ZSQLU>") { s %qHandle=$$%0dsqlD() } else { throw } }
	If SQLCODE { Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.%Message=$g(%msg) Set sc=$$Error^%apiOBJ(5821,"SQLCODE = "_SQLCODE) } Else { Set sc=1 }
	Quit sc }
zExtentFetch(%qHandle,Row,AtEnd=0) [ SQLCODE ] public { New %ROWCOUNT,%ROWID,%msg,SQLCODE 
	Set Row="",AtEnd=0
	 ;---&sql(FETCH QExtent INTO :c1)
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE
	if $isobject($g(%qHandle))'=1 { s SQLCODE=-102 } else { do %qHandle.FET() if SQLCODE=0 { s c1=%qHandle.sqlcol1 } }
	If 'SQLCODE { Set Row=$lb(c1) Set sc=1 }
	ElseIf SQLCODE=100 { Set AtEnd=1,sc=1 Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.%ROWCOUNT=$g(%ROWCOUNT) }
	Else { Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.Message=$g(%msg) Set AtEnd=1,sc=$$Error^%apiOBJ(5540,SQLCODE,$get(%msg)) }
	QUIT sc }
zExtentFetchRows(%qHandle,FetchCount=0,RowSet,ReturnCount,AtEnd) [ SQLCODE ] public { New %ROWCOUNT,%ROWID,%msg,SQLCODE 
	Set RowSet="",ReturnCount=0,AtEnd=0
	For {
		 ;---&sql(FETCH QExtent INTO :c1)
 		 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE
		if $isobject($g(%qHandle))'=1 { s SQLCODE=-102 } else { do %qHandle.FET() if SQLCODE=0 { s c1=%qHandle.sqlcol1 } }
		If 'SQLCODE { Set RowSet=RowSet_$lb(c1),ReturnCount=ReturnCount+1 Quit:(ReturnCount=FetchCount)||(($l(RowSet)+($l(RowSet)\ReturnCount))>24000) } Else { Set AtEnd=1 Quit }
	}
	If 'SQLCODE { Set sc=1 } ElseIf SQLCODE=100 { Set sc=1 Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.%ROWCOUNT=$g(%ROWCOUNT) } Else { Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.Message=$g(%msg) Set sc=$$Error^%apiOBJ(5540,SQLCODE,$get(%msg)) }
	Quit sc }
zExtentSendODBC(%qHandle,array,qacn,%qrc,piece,ColumnCount) [ SQLCODE ] public { New %ROWCOUNT,%ROWID,%msg,SQLCODE 
	set %qrc=0,piece=0
	for {
		set rc=..ExtentFetch(.%qHandle,.row,.atend)
		if ('rc) { set %qrc=-400 set:$isobject($get(%sqlcontext)) %sqlcontext.SQLCode=-400,%sqlcontext.Message=$g(%msg) do ProcessError^%ourProcedure(rc,$get(%sqlcontext),.%qrc,.%msg),Logerr^%SYS.SQLSRV(%qrc,"","SP",.%msg) RETURN  }
		if row="" { set %qrc=100 set:$isobject($get(%sqlcontext)) %sqlcontext.SQLCode=100 RETURN  }
		if $g(%protocol)>50 { RETURN:$zobjexport(row,60) }
		else {
			if %protocol>46 { for piece=1:1:ColumnCount { goto:$zobjexport($lg(row,piece),50) SPDone } }
			else { for piece=1:1:ColumnCount { goto:$zobjexport($lg(row,piece),7) SPDone } }
		}
	}
	QUIT
SPDone	set:%protocol>46 piece=piece+1
	kill array(qacn)
	for i=piece:1:ColumnCount { set array(qacn,i)=$lg(row,i) }
	QUIT }
 q
%0dsqlD()	n %xxsql
	s %xxsql("S",1)="DECLARE QExtent CURSOR FOR SELECT ID "
	s %xxsql("S",2)="INTO  :i%sqlcol1"
	s %xxsql("S",3)="FROM SQLUser . Validation"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("I","%occSqlfunc")="",%xxsql("NS")="PROJECT1"
	return $$BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Runtime","","","User",0,"",),",1,QExtent,","User.Validation.CLS",1)
zExtentFunc() public {
	try {
		set tSchemaPath = ##class(%SQL.Statement).%ClassPath($classname())
			set tStatement = ##class(%SQL.Statement).%New(,tSchemaPath)
			do tStatement.prepare(" SELECT ID FROM SQLUser . Validation")
		set tResult = tStatement.%Execute()
	}
	catch tException { if '$Isobject($Get(tResult)) { set tResult = ##class(%SQL.StatementResult).%New() } set tResult.%SQLCODE=tException.AsSQLCODE(),tResult.%Message=tException.AsSQLMessage() }
	Quit tResult }
zExtentGetInfo(colinfo,parminfo,idinfo,%qHandle,extoption=0,extinfo) public {
 s parminfo=""
	s:'($d(^oddCOM($classname(),"q","Extent",21),clientinfo)#2)&&'$s($d(^(2),clientinfo)#2&&(clientinfo'=$classname()):$d(^oddCOM(clientinfo,"q","Extent",21),clientinfo)#2||($d(^oddDEF(clientinfo,"q","Extent",21),clientinfo)#2),1:$d(^oddDEF($classname(),"q","Extent",21),clientinfo)#2) clientinfo=""
	Set:extoption extinfo=$s($d(^oddCOM($classname(),"q","Extent",38))#2:^(38),$d(^oddCOM($g(^(2),$classname()),"q","Extent",38))#2:^(38),1:$s($d(^oddDEF($g(^oddCOM($classname(),"q","Extent",2),$classname()),"q","Extent",38))#2:^(38),1:""))
	If clientinfo'="" Set colinfo=$listget(clientinfo,1),parminfo=$listget(clientinfo,2),idinfo=$listget(clientinfo,3) Quit 1
	Set colinfo="",parminfo="",idinfo=$listbuild(0)
	Set sc=$$externaltype^%apiOLE("%Library.Integer",.exttypes,"0")
	Quit:('sc) sc
	s:'($d(^oddCOM($classname(),"q","Extent",23),names)#2)&&'$s($d(^(2),names)#2&&(names'=$classname()):$d(^oddCOM(names,"q","Extent",23),names)#2||($d(^oddDEF(names,"q","Extent",23),names)#2),1:$d(^oddDEF($classname(),"q","Extent",23),names)#2) names=""
	s:'($d(^oddCOM($classname(),"q","Extent",22),captions)#2)&&'$s($d(^(2),captions)#2&&(captions'=$classname()):$d(^oddCOM(captions,"q","Extent",22),captions)#2||($d(^oddDEF(captions,"q","Extent",22),captions)#2),1:$d(^oddDEF($classname(),"q","Extent",22),captions)#2) captions=""
	For i=1:1:1 Set colinfo=colinfo_$listbuild($listbuild($listget(names,i),$piece(exttypes,",",i),$listget(captions,i)))
	Set idinfo=$listbuild(1,$classname())
	s ^oddCOM($classname(),"q","Extent",21)=$listbuild(colinfo,parminfo,idinfo)
	Quit 1 }
zExtentGetODBCInfo(colinfo,parminfo,qHandle) public {
	set version = $Select($Get(%protocol,41)>40:4,1:3)
	Set metadata=$lb(1,1,"ID",4,10,0,2,"ID","Validation","SQLUser","",$c(0,0,0,0,0,0,0,0,0,0,0,1),0)
	Set colcount=$li(metadata,2),cmdlen=colcount*10,parmcount=$li(metadata,3+cmdlen),pmdlen=parmcount*6,parminfo=$li(metadata,cmdlen+3,cmdlen+pmdlen+3)
	If version=4 {
		Set colinfo=$li(metadata,2,2+cmdlen)
	} Else {
		Set colinfo=$li(metadata,2,2)
		For i=0:1:colcount-1 Set colinfo=colinfo_$list(metadata,3+(i*10),11+(i*10))
	}
	Quit 1 }
zIDKEYCheck(K1,lockonly=0,concurrency=-1) public {
	s id=K1,exists=..%ExistsId(id) q:'exists $s('lockonly:$$Error^%apiOBJ(5797,$classname(),"IDKEY",id),1:1) s:concurrency=-1 concurrency=$select(..#DEFAULTCONCURRENCY="$zu(115,10)":$zu(115,10),1:$xecute("q "_..#DEFAULTCONCURRENCY)) if concurrency { s status=..%LockId(id,1) q:('status) status } if 'lockonly { s exists=..%ExistsId(id) d:concurrency ..%UnlockId(id,1,0) quit $s('exists:$$Error^%apiOBJ(5797,$classname(),"IDKEY",id),1:1) } else { d:concurrency ..%UnlockId(id,1,0) q 1 }
}
zIDKEYDelete(K1,concurrency=-1) public {
	Quit ..%DeleteId(.K1,concurrency) }
zIDKEYExists(K1,id="") public {
	s id=K1 q ..%ExistsId(K1) }
zIDKEYOpen(K1,concurrency=-1,sc) public { s:'($d(sc)#2) sc=1
	Quit ..%OpenId(.K1,concurrency,.sc) }
zIDKEYSQLCheckUnique(pFromOrig=0,%pID,%pVals...)
 QUIT $$Error^%apiOBJ(5758,"%Persistent::IDKEYSQLCheckUnique")
zIDKEYSQLExists(pLockOnly=0,pUnlockRef,%pVal...)
	// SQL Foreign Key validation entry point for Key IDKEY.  Called by FKeys that reference this Key to see if the row is defined
	new id set id=%pVal(1)
	if pLockOnly>=0 { if '..%SQLGetLock(id,1,.pUnlockRef) { set sqlcode=-114,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler39",,"SQLUser"_"."_"Validation"_":"_"IDKEY") QUIT 0 } }
	if pLockOnly<1 {
		new qv set qv=$d(^User.ValidationD(%pVal(1))) QUIT:pLockOnly=-1 qv
		do:'$g(pUnlockRef) ..%SQLReleaseLock(id,1) quit qv
	}
	else { do:'$g(pUnlockRef) ..%SQLReleaseLock(id,1) QUIT 1 }
	Return
zIDKEYSQLFindPKeyByConstraint(%con)
 QUIT $$Error^%apiOBJ(5758,"%Persistent::IDKEYSQLFindPKeyByConstraint")
zIDKEYSQLFindRowIDByConstraint(%con,pInternal=0)
 QUIT $$Error^%apiOBJ(5758,"%Persistent::IDKEYSQLFindRowIDByConstraint")
]]></Routine>


<Class name="User.Validation">
<Super>%Persistent,%Populate,User.Person</Super>
<TimeChanged>65833,51839.15834</TimeChanged>
<TimeCreated>65828,42510.6695</TimeCreated>

<Method name="Validation">
<FormalSpec>pRequest:Request</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
		if ($LENGTH(pRequest.Name) = 0) {return 0} 
		if ($LENGTH(pRequest.Surname) = 0){return 0}
		if ($LENGTH(pRequest.Gender) = 0){return 0}
		if ($LENGTH(pRequest.Race) = 0){return 0}
		if ($LENGTH(pRequest.DOB) = 0) {return 0}
		if ($LENGTH(pRequest.Age) '= 0) {return 0}
		return 1
]]></Implementation>
</Method>

<Method name="ValidateDOB">
<FormalSpec>pRequest:Request</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	if ($LENGTH(pRequest.DOB) '= 8) {return 0}
	if ($NUMBER(pRequest.DOB) = 0) {return 0}
	return 1
]]></Implementation>
</Method>

<Method name="Calculate">
<FormalSpec>pRequest:Request</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	set Age = 2021 - $EXTRACT(pRequest.DOB,1,4)
	return Age
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^User.ValidationD</DataLocation>
<DefaultData>ValidationDefaultData</DefaultData>
<IdLocation>^User.ValidationD</IdLocation>
<IndexLocation>^User.ValidationI</IndexLocation>
<StreamLocation>^User.ValidationS</StreamLocation>
<Data name="ValidationDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Name</Value>
</Value>
<Value name="3">
<Value>Surname</Value>
</Value>
<Value name="4">
<Value>Age</Value>
</Value>
<Value name="5">
<Value>Gender</Value>
</Value>
<Value name="6">
<Value>Race</Value>
</Value>
<Value name="7">
<Value>DOB</Value>
</Value>
</Data>
</Storage>
</Class>


<Routine name="User.selectResponse.1" type="INT" languagemode="0" generated="1" timestamp="65833,52359.441061"><![CDATA[
 ;User.selectResponse.1
 ;Generated for class User.selectResponse.  Do NOT edit. 03/30/2021 02:32:39PM
 ;;6A687058;User.selectResponse
 ;
SQLUPPER(v,l) { quit $zu(28,v,7,$g(l,32767)) }
ALPHAUP(v,r) { quit $zu(28,v,6) }
STRING(v,l) { quit $zu(28,v,9,$g(l,32767)) }
SQLSTRING(v,l) { quit $zu(28,v,8,$g(l,32767)) }
UPPER(v) { quit $zu(28,v,5) }
MVR(v) { quit $zu(28,v,2) }
TRUNCATE(v,l) { quit $e(v,1,$g(l,3641144)) }
%CheckConstraintsForExtent(pConstraintList="",pCheckDisabled=0,pErrorLog) [ SQLCODE,tID ] public { New %ROWCOUNT,%ROWID,%msg,SQLCODE,tID 
	kill pErrorLog set tStatusAll = 1, pErrorLog = 0 if '$listvalid(pConstraintList) { set pConstraintList = $listfromstring(pConstraintList) }
	 ;---&sql(declare ext cursor for select %ID into :tID FROM SQLUser.selectResponse)
 	 ;--- ** SQL PUBLIC Variables: SQLCODE, tID
	 
	 ;---&sql(open ext)
	try { s %ext0150="",%ext0150=$classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xEkN7J5zZ0PiWv4vLvBpsAu3kMs3","%New") if '$isobject(%ext0150) s %ext0150=$$%0dsqlA() } catch { if $ze["<CLASS DOES NOT EXIST>"&&($ze["%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xEkN7J5zZ0PiWv4vLvBpsAu3kMs3")||($ze["<ZSQLU>") { s %ext0150=$$%0dsqlA() } else { throw } }
	if SQLCODE '< 0 {
		for {
			 ;---&sql(fetch ext)
 			 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE
			if $isobject($g(%ext0150))'=1 { s SQLCODE=-102 } else { do %ext0150.FET() if SQLCODE=0 { } }
			if SQLCODE { if SQLCODE=100 { quit } elseif SQLCODE<0 { set tStatusAll = $select(+tStatusAll:$$Error^%apiOBJ(5521,SQLCODE,$Get(%msg)),1:$$AppendStatus^%occSystem(tStatusAll,$$Error^%apiOBJ(5521,SQLCODE,$Get(%msg)))) quit } }
			set tStatus = ..%CheckConstraints(tID,pConstraintList,pCheckDisabled,.tErrorInfo)
			if ('tStatus) { set tStatusAll = $select(+tStatusAll:tStatus,1:$$AppendStatus^%occSystem(tStatusAll,tStatus)) set:pErrorLog<1000 pErrorLog = pErrorLog + 1, pErrorLog(pErrorLog) = tErrorInfo _ $Listbuild(tStatus) }
		}
		 ;---&sql(close ext)
		if '$isobject($get(%ext0150)) { set SQLCODE=-102 } else { set SQLCODE=0 kill %ext0150 }
	}
	quit tStatusAll }
 q
%0dsqlA()	n %xxsql
	s %xxsql("S",1)="DECLARE ext CURSOR FOR SELECT %ID INTO :tID FROM SQLUser . selectResponse"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","DEBUG")=$c(1),%xxsql("M","FORKNETDMN")=$c(1)
	s %xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1)
	s %xxsql("M","USELOST")=$c(1),%xxsql("M","ZVERSION")=$c(1),%xxsql("I","%callout")="",%xxsql("I","%occErrors")="",%xxsql("I","%occSqlfunc")=""
	s %xxsql("I","%sySite")="",%xxsql("I","%sySt")="",%xxsql("I","%sySystem")="",%xxsql("I","%xmlMap")="",%xxsql("I","EnsConstants")=""
	s %xxsql("I","EnsErrors")="",%xxsql("I","EnsUtil")="",%xxsql("I","Ensemble")="",%xxsql("NS")="PROJECT1"
	return $$BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","User",0,"",),",0,ext,","User.selectResponse.CLS",1)
%DeleteData(id,concurrency) public {
	Quit:id="" $$Error^%apiOBJ(5812)
	set $Ztrap="DeleteDataERR" set lockok=0,sc=""
	If concurrency {
		Lock +(^Ens.MessageBodyD(id)#"E"):$zu(115,4)
		Set lockok=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,2:2,4:2,:0))
		Set:lockok=2&&($tlevel) %0CacheLock($classname(),"E")=1
		If 'lockok {
			Quit $$Error^%apiOBJ(5803,$classname())
		}
	}
	If ($Data(^Ens.MessageBodyD(id))) {
		If $data(^oddEXTR($classname())) {
			Set fc=""
			For {
				Set fc=$order(^rINDEXEXT("F",$classname(),"%1","f",fc))
				Quit:fc=""
				Set fk=""
				For {
					Set fk=$order(^rINDEXEXT("F",$classname(),"%1","f",fc,fk))
					Quit:fk=""
					Set sc=$classmethod(fc,fk_"Delete",id)
					If ('sc) { Goto DeleteDataEXIT }
				}
			}
			Set fc=""
			For {
				Set fc=$order(^rINDEXEXT("F",$classname(),"IDKEY","f",fc))
				Quit:fc=""
				Set fk=""
				For {
					Set fk=$order(^rINDEXEXT("F",$classname(),"IDKEY","f",fc,fk))
					Quit:fk=""
					Set sc=$classmethod(fc,fk_"Delete",id)
					If ('sc) { Goto DeleteDataEXIT }
				}
			}
		}
		Kill ^Ens.MessageBodyD(id)
		Kill ^Ens.MessageBodyD(id,"selectResponse")
		Set sc=1
	}
	Else { Set sc=$$Error^%apiOBJ(5810,$classname(),id) }
DeleteDataEXIT
	If concurrency,lockok {
		Lock -(^Ens.MessageBodyD(id)#"E")
	}
DeleteDataRET	Set $Ztrap = ""
	QUIT sc
DeleteDataERR	Set $Ztrap = "DeleteDataRET"
	Set sc = $$Error^%apiOBJ(5002,$ZE)
	Goto DeleteDataEXIT }
%InsertBatch(objects,concurrency=0,useTransactions=0) public {
	try {
		set numerrs=0,errs="",cnt=0,ptr=0
		while $listnext(objects,ptr,data) {
			set cnt=cnt+1
			set lock=0
			if (useTransactions) tstart
			set id=$i(^Ens.MessageBodyD)
			try {
				set tInnerException = ""
				;
				if concurrency { lock +(^Ens.MessageBodyD(id)#"E"):$zu(115,4) set lock=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,2:2,4:2,:0)) set:lock=2&&($tlevel) %0CacheLock($classname(),"E")=1 if 'lock { Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5803,$classname())) } }
				set ^Ens.MessageBodyD(id)=data
				set ^Ens.MessageBodyD(id,"selectResponse")=data("selectResponse")
				if (useTransactions) { tcommit }
			}
			catch tInnerException {
				set newerr=$lb(cnt,tInnerException.AsStatus())
				if '($length(errs)+$length(newerr)>32767) { set numerrs=numerrs+1, errs=errs_newerr }
				if (useTransactions) && ($Tlevel) trollback
			}
			if lock lock -(^Ens.MessageBodyD(id)#"E")
		}
	}
	catch tException {
		set newerr=$lb($g(cnt),tException.AsStatus())
		if '($length(errs)+$length(newerr)>32767) { set numerrs=numerrs+1, errs=errs_newerr }
	}
	QUIT ($lb(numerrs))_errs }
%LoadData(id) public {
	New %s1,%s2
	set $ZTrap="CatchError",locked=0,userze=$ze,$ze=""
	If i%%Concurrency=4 {
		Lock +(^Ens.MessageBodyD(id)#"E"):$zu(115,4)
		if '$t do init s i%%Concurrency=0 s:$ze="" $ze=userze return $$Error^%apiOBJ(5803,$classname())
	} ElseIf i%%Concurrency>0 {
		Lock +(^Ens.MessageBodyD(id)#"SE"):$zu(115,4)
		if '$t do init s i%%Concurrency=0 s:$ze="" $ze=userze return $$Error^%apiOBJ(5804,$classname())
		set locked = 1
	}
	Set sc=""
	If $d(^Ens.MessageBodyD(id)) {
		Set sc=1
		Set %s1=$g(^Ens.MessageBodyD(id))
		Set %s2=$g(^Ens.MessageBodyD(id,"selectResponse"))
		S i%Name=$lg(%s2),i%Surname=$lg(%s2,2),i%Age=$lg(%s2,3),i%Gender=$lg(%s2,4),i%Race=$lg(%s2,5),i%DOB=$lg(%s2,6),i%Status=$lg(%s2,7)
	} Else {
		do init
	}
	If i%%Concurrency=2||(i%%Concurrency=1) {
		Lock -(^Ens.MessageBodyD(id)#"SIE")
	}
	s:$ze="" $ze=userze
	RETURN $s((''sc):1,1:$$Error^%apiOBJ(5809,$classname(),id))
CatchError	set $ZTrap = "" if $ZE'="" { s sc = $$Error^%apiOBJ(5002,$ZE) }
	If ($get(locked))&&(i%%Concurrency<3) { Lock -(^Ens.MessageBodyD(id)#"SIE") }
	if '('sc) { set sc=$$Error^%apiOBJ(5809,$classname(),id) }
	s:$ze="" $ze=userze
	return sc
init	Set i%Age="",i%DOB="",i%Gender="",i%Name="",i%Race="",i%Status="",i%Surname=""
	quit }
%LoadDataFromMemory(id,objstate,obj) public {
	New %s1,%s2
	Set sc=""
	If $d(objstate(id)) {
		Set sc=1
		Set %s1=$g(objstate(id))
		Set %s2=$g(objstate(id,"selectResponse"))
		S i%Name=$lg(%s2),i%Surname=$lg(%s2,2),i%Age=$lg(%s2,3),i%Gender=$lg(%s2,4),i%Race=$lg(%s2,5),i%DOB=$lg(%s2,6),i%Status=$lg(%s2,7)
	} Else {
		Set i%Age="",i%DOB="",i%Gender="",i%Name="",i%Race="",i%Status="",i%Surname=""
	}
	Quit:sc'="" sc
	Quit $$Error^%apiOBJ(5809,$classname(),id) }
%NormalizeObject() public {
	If '$system.CLS.GetModified() Quit 1
	If m%Age Set:i%Age'="" i%Age=(..AgeNormalize(i%Age))
	If m%DOB Set:i%DOB'="" i%DOB=(..DOBNormalize(i%DOB))
	If m%Gender Set:i%Gender'="" i%Gender=(..GenderNormalize(i%Gender))
	If m%Name Set:i%Name'="" i%Name=(..NameNormalize(i%Name))
	If m%Race Set:i%Race'="" i%Race=(..RaceNormalize(i%Race))
	If m%Status Set:i%Status'="" i%Status=(..StatusNormalize(i%Status))
	If m%Surname Set:i%Surname'="" i%Surname=(..SurnameNormalize(i%Surname))
	Quit 1 }
%PhysicalAddress(id,paddr)
	if $Get(id)="" Quit $$Error^%apiOBJ(5813,$classname())
	if (id="") { quit $$Error^%apiOBJ(5832,$classname(),id) }
	s paddr(1)=$lb($Name(^Ens.MessageBodyD(id)),$classname(),"IDKEY","listnode",id)
	s paddr(2)=$lb($Name(^Ens.MessageBodyD(id,"selectResponse")),$classname(),"IDKEY","listnode",id)
	s paddr=2
	Quit 1
%SQLAcquireLock(%rowid,s=0,unlockref=0)
	new %d,gotlock
	set %d(1)=%rowid set s=$e("E",'unlockref)_$e("S",s)
	lock +^Ens.MessageBodyD(%d(1))#s:$zu(115,4) set gotlock=$t
	if gotlock,'unlockref { set:$case($SYSTEM.Lock.ReturnCode(),2:1,4:1,:0)&&($tlevel) %0CacheLock("User.selectResponse","E")=1 }
	set:gotlock&&unlockref unlockref=unlockref+1,unlockref(unlockref)=$lb($name(^Ens.MessageBodyD(%d(1))),"User.selectResponse",s_"D")
	QUIT gotlock
%SQLAcquireTableLock(s=0,SQLCODE,to="")
	set s=$e("S",s) set:to="" to=$zu(115,4) lock +^Ens.MessageBodyD#s:to QUIT:$t 1 set SQLCODE=-110 if s="S" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler35",,"SQLUser"_"."_"selectResponse") } else { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler36",,"SQLUser"_"."_"selectResponse") } QUIT 0
	Return
%SQLBuildIndices(pIndices="",pLockFlag=0,pStartID="",pEndID="",pIgnoreIndexList="")
	QUIT ..%BuildIndices(pIndices,,pLockFlag,,pStartID,pEndID,pIgnoreIndexList)
%SQLBuildPurgeIndexForRow(pIndices="",pActions="BP",pLockRow=1,%d,%e,pIgnoreIndexList="")
	// Purge and build index nodes for a single row using given values, return Status Code
	new sn,tSC,tLock set tSC=1,pActions=$zcvt(pActions,"U")
	try {
		if $g(%d(1))="" { set tSC=$select(+tSC:$$Error^%apiOBJ(5521,-108,"RowID value must be specified in %d(1) when calling %SQLBuildPurgeIndexForRow for table 'SQLUser.selectResponse'"),1:$$AppendStatus^%occSystem(tSC,$$Error^%apiOBJ(5521,-108,"RowID value must be specified in %d(1) when calling %SQLBuildPurgeIndexForRow for table 'SQLUser.selectResponse'"))) RETURN tSC }
		if pLockRow { if '..%SQLAcquireLock(%d(1)) { set tSC=$select(+tSC:$$Error^%apiOBJ(5521,-114,"Unable to lock row in table 'SQLUser.selectResponse' with %ID = '"_%d(1)_"'"),1:$$AppendStatus^%occSystem(tSC,$$Error^%apiOBJ(5521,-114,"Unable to lock row in table 'SQLUser.selectResponse' with %ID = '"_%d(1)_"'"))) RETURN tSC  } else { set tLock=1 }}
		if pLockRow { do ..%SQLReleaseLock(%d(1),0,0) set tLock=0 }
	}
	catch {
		if $g(tLock) { do ..%SQLReleaseLock(%d(1),0,0) }
		set tSC=$select(+tSC:$$Error^%apiOBJ(5594,$ze),1:$$AppendStatus^%occSystem(tSC,$$Error^%apiOBJ(5594,$ze)))
	}
	QUIT tSC
%SQLCheckUnique(pFromOrig=0,%pID,%pVals...)
	 ;---&sql(SELECT ID FROM SQLUser.selectResponse WHERE  ID=:%pVals(1) AND (%ID <> :%pID OR :%pID IS NULL)) QUIT SQLCODE=100
 	 ;--- ** SQL PUBLIC Variables: %pID, %pVals, SQLCODE
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xEF3qadzRa2qSzIvKbdQPM3RyVIK","%New") } catch { if $ze["<CLASS DOES NOT EXIST>"&&($ze["%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xEF3qadzRa2qSzIvKbdQPM3RyVIK")||($ze["<ZSQLU>") { d %0dsqlD } else { throw } } QUIT SQLCODE=100
 q
%0dsqlD	n %xxsql
	s %xxsql("S",1)="SELECT ID FROM SQLUser . selectResponse WHERE ID = :%pVals(1) AND ( %ID <> :%pID OR :%pID IS NULL )"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","DEBUG")=$c(1),%xxsql("M","FORKNETDMN")=$c(1)
	s %xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1)
	s %xxsql("M","USELOST")=$c(1),%xxsql("M","ZVERSION")=$c(1),%xxsql("I","%callout")="",%xxsql("I","%occErrors")="",%xxsql("I","%occSqlfunc")=""
	s %xxsql("I","%sySite")="",%xxsql("I","%sySt")="",%xxsql("I","%sySystem")="",%xxsql("I","%xmlMap")="",%xxsql("I","EnsConstants")=""
	s %xxsql("I","EnsErrors")="",%xxsql("I","EnsUtil")="",%xxsql("I","Ensemble")="",%xxsql("NS")="PROJECT1"
	d BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","User",0,"",),,"User.selectResponse.CLS")
	q
%SQLCopyIcolIntoName()
	if %oper="DELETE" {
		set:$d(%d(1)) %f("ID")=%d(1)
		QUIT
	}
	set:$d(%d(1)) %f("ID")=%d(1) set:$a(%e,2)&&$d(%d(2)) %f("Age")=%d(2) set:$a(%e,3)&&$d(%d(3)) %f("DOB")=%d(3) set:$a(%e,4)&&$d(%d(4)) %f("Gender")=%d(4) set:$a(%e,5)&&$d(%d(5)) %f("Name")=%d(5) set:$a(%e,6)&&$d(%d(6)) %f("Race")=%d(6) set:$a(%e,7)&&$d(%d(7)) %f("Status")=%d(7) set:$a(%e,8)&&$d(%d(8)) %f("Surname")=%d(8) set:$a(%e,9)&&$d(%d(9)) %f("x__classname")=%d(9)
	QUIT
%SQLCopyNameIntoIcol()
	k %d,%e set:$d(%f("ID"))#2 %d(1)=%f("ID") set:$d(%f("Age"))#2 %d(2)=%f("Age") set:$d(%f("DOB"))#2 %d(3)=%f("DOB") set:$d(%f("Gender"))#2 %d(4)=%f("Gender") set:$d(%f("Name"))#2 %d(5)=%f("Name") set:$d(%f("Race"))#2 %d(6)=%f("Race") set:$d(%f("Status"))#2 %d(7)=%f("Status") set:$d(%f("Surname"))#2 %d(8)=%f("Surname") set:$d(%f("x__classname"))#2 %d(9)=%f("x__classname")  kill %f QUIT
%SQLDefineiDjVars(%d,subs,master)
	QUIT
%SQLDelete(%rowid,%check,%tstart=1,%mv=0,%polymorphic=0)
	// SQL DELETE method for table SQLUser.selectResponse
	if %polymorphic { do ..%SQLCopyNameIntoIcol() set %d(1)=%rowid,%e(1)=%rowid  goto %SQLDeletePD }
	new bva,ce,%d,dc,%e,%ele,%itm,%key,%l,%nc,omcall,%oper,%pos,%s,sn,sqlcode,subs set %oper="DELETE",sqlcode=0,%ROWID=%rowid,%d(1)=%rowid,%e(1)=%rowid,%l=$c(0)
	if '$d(%0CacheSQLRA) { new %0CacheSQLRA set omcall=1 }
	if '$a(%check,2) {
		new %ls lock +^Ens.MessageBodyD(%d(1))#"E":$zu(115,4) set %ls=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,4:2,2:2,1:3,:""))
		set:%ls=2 $e(%check,2)=$c(1) set:%ls=2&&($tlevel) %0CacheLock("User.selectResponse","E")=1 set:$case(%ls,1:1,2:1,:0) $e(%l)=$c(1)
		if '%ls||(%ls=3) { set SQLCODE=-110,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer",$s('%ls:"SQLFiler40",1:"SQLFiler55"),,%oper,"SQLUser"_"."_"selectResponse",$g(%d(1))) RETURN  }
	}
	if %tstart { TSTART:($zu(115,1)=1)||('$TLEVEL&&($zu(115,1)=2))  }
	set $zt="ERRORDelete"
%SQLDeletePD	// Entry point for Polymorphic Dispatch from a super-table
	do ..%SQLGetOld(%rowid,.%d,.%e,.sqlcode) if sqlcode { set SQLCODE=-106,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler58",,"SQLUser"_"."_"selectResponse",%rowid) do ..%SQLEExit() QUIT  }
	if %e(9)'="" { set sn=$p(%e(9),$e(%e(9)),$l(%e(9),$e(%e(9)))-1) if "selectResponse"'=sn { new %f do ..%SQLCopyIcolIntoName() do $classmethod(sn,"%SQLDelete",%rowid,%check,%tstart,%mv,1) QUIT  }}
	if '$a(%check),'$zu(115,7) do  if sqlcode set SQLCODE=sqlcode do ..%SQLEExit() QUIT  
	. new %fk,%k,%p,%st,%t,%z set %k="",%p("%1")="%d(1),",%p("IDKEY")="%d(1),"
	. for  quit:sqlcode<0  set %k=$o(^rINDEXEXT("F","User.selectResponse",%k)) quit:%k=""  set %t="" for  set %t=$o(^rINDEXEXT("F","User.selectResponse",%k,"f",%t)) quit:%t=""  set %st=(%t="User.selectResponse") set %fk="" for  set %fk=$o(^rINDEXEXT("F","User.selectResponse",%k,"f",%t,%fk)) quit:%fk=""  x "set %z=$classmethod(%t,%fk_""SQLFKeyRefAction"",%st,%k,$a(%check,2),"_%p(%k)_")" if %z set sqlcode=-124 quit  
	set ce="" for  { set ce=$order(^oddSQL("SQLUser","selectResponse","DC",ce)) quit:ce=""   do $classmethod(ce,"%SQLDeleteChildren",%d(1),%check,.sqlcode) quit:sqlcode<0  } if sqlcode<0 { set SQLCODE=sqlcode do ..%SQLEExit() QUIT } // Delete any children
	set ce="" for  { set ce=$order(^oddSQL("Ens","Response","DC",ce)) quit:ce=""   do $classmethod(ce,"%SQLDeleteChildren",%d(1),%check,.sqlcode) quit:sqlcode<0  } if sqlcode<0 { set SQLCODE=sqlcode do ..%SQLEExit() QUIT } // Delete any children of the root extent
	set ce="" for  { set ce=$order(^oddSQL("Ens","MessageBody","DC",ce)) quit:ce=""   do $classmethod(ce,"%SQLDeleteChildren",%d(1),%check,.sqlcode) quit:sqlcode<0  } if sqlcode<0 { set SQLCODE=sqlcode do ..%SQLEExit() QUIT } // Delete any children of the root extent
	if '$a(%check,3) {
	}
	k ^Ens.MessageBodyD(%d(1))
	do ..%SQLUnlock() TCOMMIT:%tstart&&($zu(115,1)=1)
	set SQLCODE=0 kill:$g(omcall) %0CacheSQLRA
	QUIT
ERRORDelete	set $zt="",SQLCODE=-415,%msg=$s($g(%msg)'="":%msg_" -- ",1:"")_$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler51",,%oper,"SQLUser"_"."_"selectResponse",$ze) if $ze["<FRAMESTACK>" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler52",,$ze,%oper,"SQLUser"_"."_"selectResponse") do ##Class(%SYS.System).WriteToConsoleLog(%msg) if ($zu(67,10,$j)=1)||($zu(67,10,$j)=3) { write !,%msg h 3 } HALT  } do ..%SQLEExit() QUIT
	Return
%SQLDeleteTempStreams()
	// Delete all temporary streams
	QUIT
%SQLEExit()
	do ..%SQLUnlock() 
	if %tstart,$zu(115,1)=1,$TLEVEL { set %tstart=0 TROLLBACK 1 } kill:$g(omcall) %0CacheSQLRA QUIT  
	Return
%SQLExists(pLockOnly=0,pUnlockRef,%pVal...)
	// SQL Foreign Key validation entry point for Key %1.  Called by FKeys that reference this Key to see if the row is defined
	new id set id=%pVal(1)
	if pLockOnly>=0 { if '..%SQLGetLock(id,1,.pUnlockRef) { set sqlcode=-114,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler39",,"SQLUser"_"."_"selectResponse"_":"_"%1") QUIT 0 } }
	if pLockOnly<1 {
		new qv set qv='..%SQLCheckUnique(0,,%pVal(1)) QUIT:pLockOnly=-1 qv
		do:'$g(pUnlockRef) ..%SQLReleaseLock(id,1) quit qv
	}
	else { do:'$g(pUnlockRef) ..%SQLReleaseLock(id,1) QUIT 1 }
	Return
%SQLGetLock(pRowId,pShared=0,pUnlockRef)
	QUIT ..%SQLAcquireLock(pRowId,pShared,.pUnlockRef)
%SQLGetOld(%rowid,%d,%e,sqlcode)
	// Get old data values
	new SQLCODE,%ROWCOUNT
	 ;---&sql(SELECT x__classname INTO :%e() FROM %IGNOREINDEX * SQLUser.selectResponse WHERE ID=:%rowid)
 	 ;--- ** SQL PUBLIC Variables: %e, %rowid, SQLCODE
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xEmIbXQVrcBwJCpeR0T1wCZCZZZv","%New") } catch { if $ze["<CLASS DOES NOT EXIST>"&&($ze["%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xEmIbXQVrcBwJCpeR0T1wCZCZZZv")||($ze["<ZSQLU>") { d %0dsqlF } else { throw } }
	set sqlcode=SQLCODE QUIT:sqlcode'=0
	QUIT
 q
%0dsqlF	n %xxsql
	s %xxsql("S",1)="SELECT x__classname INTO :%e() FROM %IGNOREINDEX * SQLUser . selectResponse WHERE ID = :%rowid"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","DEBUG")=$c(1),%xxsql("M","FORKNETDMN")=$c(1)
	s %xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1)
	s %xxsql("M","USELOST")=$c(1),%xxsql("M","ZVERSION")=$c(1),%xxsql("I","%callout")="",%xxsql("I","%occErrors")="",%xxsql("I","%occSqlfunc")=""
	s %xxsql("I","%sySite")="",%xxsql("I","%sySt")="",%xxsql("I","%sySystem")="",%xxsql("I","%xmlMap")="",%xxsql("I","EnsConstants")=""
	s %xxsql("I","EnsErrors")="",%xxsql("I","EnsUtil")="",%xxsql("I","Ensemble")="",%xxsql("NS")="PROJECT1"
	d BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","User",0,"",),,"User.selectResponse.CLS")
	q
%SQLGetOldAll()
	// Get all old data values
	new SQLCODE,%ROWCOUNT
	 ;---&sql(SELECT Age,DOB,Gender,Name,Race,Status,Surname,x__classname INTO :%e() FROM %IGNOREINDEX * SQLUser.selectResponse WHERE ID=:%rowid)
 	 ;--- ** SQL PUBLIC Variables: %e, %rowid, SQLCODE
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xEft5mQzoWEfq7QMEt2zvOUQAGg3","%New") } catch { if $ze["<CLASS DOES NOT EXIST>"&&($ze["%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xEft5mQzoWEfq7QMEt2zvOUQAGg3")||($ze["<ZSQLU>") { d %0dsqlH } else { throw } }
	set sqlcode=SQLCODE QUIT:sqlcode'=0
	QUIT
 q
%0dsqlH	n %xxsql
	s %xxsql("S",1)="SELECT Age , DOB , Gender , Name , Race , Status , Surname , x__classname INTO :%e() FROM %IGNOREINDEX * SQLUser . selectResponse WHERE ID = :%rowid"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","DEBUG")=$c(1),%xxsql("M","FORKNETDMN")=$c(1)
	s %xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1)
	s %xxsql("M","USELOST")=$c(1),%xxsql("M","ZVERSION")=$c(1),%xxsql("I","%callout")="",%xxsql("I","%occErrors")="",%xxsql("I","%occSqlfunc")=""
	s %xxsql("I","%sySite")="",%xxsql("I","%sySt")="",%xxsql("I","%sySystem")="",%xxsql("I","%xmlMap")="",%xxsql("I","EnsConstants")=""
	s %xxsql("I","EnsErrors")="",%xxsql("I","EnsUtil")="",%xxsql("I","Ensemble")="",%xxsql("NS")="PROJECT1"
	d BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","User",0,"",),,"User.selectResponse.CLS")
	q
%SQLInsert(%d,%check,%inssel,%vco,%tstart=1,%mv=0)
	// SQL INSERT method for table SQLUser.selectResponse
	new bva,%ele,%itm,%key,%f,%l,%n,%nc,%oper,%pos,%s,sqlcode,sn,subs,icol set %oper="INSERT",sqlcode=0,%l=$c(0,0,0)
	if $a(%check,7) { new %diu merge %diu=%d }
	if $d(%d(1)),'$zu(115,11) { if %d(1)'="" { set SQLCODE=-111,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler6",,"ID","SQLUser"_"."_"selectResponse") RETURN ""  } kill %d(1) } 
	if '$a(%check),'..%SQLValidateFields(.sqlcode) { set SQLCODE=sqlcode RETURN "" }
	do:'$a(%check,8) ..%SQLNormalizeFields()
	if %tstart { TSTART:($zu(115,1)=1)||('$TLEVEL&&($zu(115,1)=2))  } set $zt="ERRORInsert"
	set:'$d(%d(9)) %d(9)="~Ens.Response~selectResponse~"
	if '$a(%check) {
		do {
			if $g(%vco)'="" { d @%vco quit:sqlcode<0  }
		} while 0
		if sqlcode<0 { set SQLCODE=sqlcode do ..%SQLEExit() RETURN "" }		// A constraint failed
	}
	if '$d(%d(1)) { set %d(1)=$i(^Ens.MessageBodyD) } elseif %d(1)>$g(^Ens.MessageBodyD) { if $i(^Ens.MessageBodyD,$zabs(%d(1)-$g(^Ens.MessageBodyD))) {}} elseif $d(^Ens.MessageBodyD(%d(1))) { set SQLCODE=-119,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler33",,"ID",%d(1),"SQLUser"_"."_"selectResponse"_"."_"ID") do ..%SQLEExit() RETURN "" }
	set:'($d(%d(9))#2) %d(9)=""
	if '$a(%check,2) {
		new %ls lock +^Ens.MessageBodyD(%d(1))#"E":$zu(115,4) set %ls=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,4:2,2:2,1:3,:""))
		set:%ls=2 $e(%check,2)=$c(1) set:%ls=2&&($tlevel) %0CacheLock("User.selectResponse","E")=1 set:$case(%ls,1:1,2:1,:0) $e(%l)=$c(1)
		if '%ls||(%ls=3) { set SQLCODE=-110,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer",$s('%ls:"SQLFiler40",1:"SQLFiler55"),,%oper,"SQLUser"_"."_"selectResponse",$g(%d(1))) do ..%SQLEExit() RETURN ""  }
	}
	set ^Ens.MessageBodyD(%d(1))=$lb(%d(9))
	set:$s(($g(%d(2))'=""):1,($g(%d(3))'=""):1,($g(%d(4))'=""):1,($g(%d(5))'=""):1,($g(%d(6))'=""):1,($g(%d(7))'=""):1,1:($g(%d(8))'="")) ^Ens.MessageBodyD(%d(1),"selectResponse")=$lb(%d(5),%d(8),%d(2),%d(4),%d(6),%d(3),%d(7))
	lock:$a(%l) -^Ens.MessageBodyD(%d(1))#"E"
	TCOMMIT:%tstart&&($zu(115,1)=1)
	set SQLCODE=0
	QUIT %d(1) 			// %SQLInsert
ERRORInsert	set $zt="",SQLCODE=-415,%msg=$s($g(%msg)'="":%msg_" -- ",1:"")_$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler51",,%oper,"SQLUser"_"."_"selectResponse",$ze)
	if $ze["<FRAMESTACK>" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler52",,$ze,%oper,"SQLUser"_"."_"selectResponse") do ##Class(%SYS.System).WriteToConsoleLog(%msg) if ($zu(67,10,$j)=1)||($zu(67,10,$j)=3) { write !,%msg h 3 } HALT  }
	do ..%SQLEExit()
	RETURN ""
%SQLInvalid(pIcol,pVal) public {
	set:$l($g(pVal))>40 pVal=$e(pVal,1,40)_"..." do:'$d(%n) ..%SQLnBuild() set %msg=$s($g(%msg)'="":%msg_$c(13,10),1:"")_$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler37",,"SQLUser"_"."_"selectResponse"_"."_$lg(%n,pIcol),$s($g(pVal)'="":$s(pVal="":"<NULL>",pVal=$c(0):"<EMPTY STRING>",1:"'"_pVal_"'"),1:"")),sqlcode=$s(%oper="INSERT":-104,1:-105)
	QUIT sqlcode }
%SQLMissing(fname)
	set sqlcode=-108,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler47",,fname,"SQLUser"_"."_"selectResponse") quit
%SQLNormalizeFields()
	new %f for %f=2,3 { set:$g(%d(%f))'="" %d(%f)=$select(%d(%f)=$c(0)&&$zu(115,13):"",1:%d(%f)\1) }
	QUIT
%SQLPurgeIndices(pIndices="",pLockExtent=0,pIgnoreIndexList="")
	QUIT ..%PurgeIndices(pIndices,pLockExtent,pIgnoreIndexList)
%SQLQuickLoad(%rowid,%nolock=0,pkey=0,qq=0)
	// Get fields from row where SQLRowID=%rowid
	new d,i,il,subs set:%nolock=2 %nolock=1
	if %nolock=0 { if '..%SQLAcquireLock(%rowid) { set %qrc=114,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler45",,"SQLUser"_"."_"selectResponse",%rowid),%ROWCOUNT=0 QUIT  } set:$zu(115,2) il=$zu(115,2,0) }
	 ;---&sql(SELECT %INTERNAL(ID),Age,DOB,Gender,Name,Race,Status,Surname,x__classname INTO :d(1),:d(2),:d(3),:d(4),:d(5),:d(6),:d(7),:d(8),:d(9) FROM SQLUser.selectResponse WHERE %ID = :%rowid)
 	 ;--- ** SQL PUBLIC Variables: %rowid, SQLCODE, d
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xEoxEuYqG1ORvmYN3vNPuizid0Um","%New") } catch { if $ze["<CLASS DOES NOT EXIST>"&&($ze["%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xEoxEuYqG1ORvmYN3vNPuizid0Um")||($ze["<ZSQLU>") { d %0dsqlJ } else { throw } }
	if SQLCODE { if %nolock=0 { do ..%SQLReleaseLock(%rowid,0,1) do:$g(il) $zu(115,2,il) } set %ROWCOUNT=0 set:SQLCODE<0 SQLCODE=-SQLCODE set %qrc=SQLCODE QUIT  }
	if qq,d(9)'="" { new sn set sn=$p(d(9),$e(d(9)),$l(d(9),$e(d(9)))-1) if "selectResponse"'=sn { if %nolock=0 { do ..%SQLReleaseLock(%rowid,0,1) do:$g(il) $zu(115,2,il) } kill d set:sn'["." sn="User."_sn  do $classmethod(sn,"%SQLQuickLoad",%rowid,%nolock,0,1) QUIT  }}
	if %nolock=0 { if $zu(115,1)=1 { TSTART  } elseIf '$TLEVEL,$zu(115,1)=2 { TSTART  }}
	set:qq d=$zobjexport("User.selectResponse",18),d=$zobjexport(9,18) set i=-1 for  { set i=$o(d(i)) quit:i=""  set d=$zobjexport(d(i),18) } set %qrc=0,%ROWCOUNT=1 if %nolock=0 { d ..%SQLReleaseLock(%rowid,0,0) do:$g(il) $zu(115,2,il) } quit
	Return
 q
%0dsqlJ	n %xxsql
	s %xxsql("S",1)="SELECT %INTERNAL ( ID ) , Age , DOB , Gender , Name , Race , Status , Surname , x__classname INTO :d(1) , :d(2) , :d(3) , :d(4) , :d(5) , :d(6) , :d(7) , :d(8) , :d(9) FROM SQLUser . selectResponse WHERE %ID = :%rowid"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","DEBUG")=$c(1),%xxsql("M","FORKNETDMN")=$c(1)
	s %xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1)
	s %xxsql("M","USELOST")=$c(1),%xxsql("M","ZVERSION")=$c(1),%xxsql("I","%callout")="",%xxsql("I","%occErrors")="",%xxsql("I","%occSqlfunc")=""
	s %xxsql("I","%sySite")="",%xxsql("I","%sySt")="",%xxsql("I","%sySystem")="",%xxsql("I","%xmlMap")="",%xxsql("I","EnsConstants")=""
	s %xxsql("I","EnsErrors")="",%xxsql("I","EnsUtil")="",%xxsql("I","Ensemble")="",%xxsql("NS")="PROJECT1"
	d BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("ODBC","","","User",0,"",),,"User.selectResponse.CLS")
	q
%SQLReleaseLock(%rowid,s=0,i=0,e="")
	new %d
	set:e="" e=1 set %d(1)=%rowid set s=$e("E",e)_$e("S",s)_$e("D",i)
	lock -^Ens.MessageBodyD(%d(1))#s
	QUIT
%SQLReleaseTableLock(s=0,i=0)
	set s=$e("S",s)_$e("D",i) lock -^Ens.MessageBodyD#s QUIT 1
	Return
%SQLUnlock()
	lock:$a(%l) -^Ens.MessageBodyD(%d(1))#"E"
	QUIT
%SQLUnlockError(cname)
	set sqlcode=-110 if %oper="DELETE" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler48",,"SQLUser"_"."_"selectResponse",cname) } else { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler49",,"SQLUser"_"."_"selectResponse",cname) } quit
	Return
%SQLUpdate(%rowid,%check,%d,%vco,%tstart=1,%mv=0,%polymorphic=0,%soid)
	// SQL UPDATE method for table SQLUser.selectResponse
	if %polymorphic { do ..%SQLCopyNameIntoIcol() set %d(1)=%rowid,%e(1)=%rowid,$e(%e,1)=$c(0) new icol for icol=2:1:9 { set $e(%e,icol)=$c($d(%d(icol))) }  goto %SQLUpdatePD }
	new %e,bva,%ele,%itm,%key,%f,%l,%n,%nc,%oper,%pos,%s,icol,omcall,s,sn,sqlcode,subs,t set %oper="UPDATE",sqlcode=0,%ROWID=%rowid,$e(%e,1)=$c(0),%l=$c(0,0,0)
	if '$d(%0CacheSQLRA) { new %0CacheSQLRA set omcall=1 }
	if '$a(%check,7) {
		if '$a(%check),'..%SQLValidateFields(.sqlcode) { set SQLCODE=sqlcode QUIT  }
		do:'$a(%check,8) ..%SQLNormalizeFields()
	}
	if $d(%d(1)),%d(1)'=%rowid { set SQLCODE=-107,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler16",,"ID","SQLUser"_"."_"selectResponse") QUIT  }
	for icol=2:1:9 { set $e(%e,icol)=$c($d(%d(icol))) }
	set %d(1)=%rowid,%e(1)=%rowid
	if '$a(%check,2) {
		new %ls lock +^Ens.MessageBodyD(%d(1))#"E":$zu(115,4) set %ls=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,4:2,2:2,1:3,:""))
		set:%ls=2 $e(%check,2)=$c(1) set:%ls=2&&($tlevel) %0CacheLock("User.selectResponse","E")=1 set:$case(%ls,1:1,2:1,:0) $e(%l)=$c(1)
		if '%ls||(%ls=3) { set SQLCODE=-110,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer",$s('%ls:"SQLFiler40",1:"SQLFiler55"),,%oper,"SQLUser"_"."_"selectResponse",$g(%d(1))) RETURN  }
	}
	if %tstart { TSTART:($zu(115,1)=1)||('$TLEVEL&&($zu(115,1)=2))  }
	set $zt="ERRORUpdate"
%SQLUpdatePD		// Entry point for Polymorphic Dispatch from a super-table
	if $g(%vco)="" { do ..%SQLGetOld(%rowid,.%d,.%e,.sqlcode) i sqlcode { s SQLCODE=-109,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler59",,"SQLUser"_"."_"selectResponse",%rowid) do ..%SQLEExit() QUIT  } set:'$d(%d(9)) %d(9)=%e(9) set:%d(9)=%e(9) $e(%e,9)=$c(0) } else { do ..%SQLGetOldAll() if sqlcode { set SQLCODE=-109,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler59",,"SQLUser"_"."_"selectResponse",%rowid) do ..%SQLEExit() QUIT  } for icol=2,3,4,5,6,7,8,9 { set:'$d(%d(icol)) %d(icol)=%e(icol) set:%d(icol)=%e(icol) $e(%e,icol)=$c(0) }}
	if %e(9)'="" set sn=$p(%e(9),$e(%e(9)),$l(%e(9),$e(%e(9)))-1) if "selectResponse"'=sn new %f do ..%SQLCopyIcolIntoName() do $classmethod(sn,"%SQLUpdate",%rowid,%check,.%d,$g(%vco),%tstart,%mv,1) QUIT
	if '$a(%check) {
		do {
			if $g(%vco)'="" { d @%vco quit:sqlcode<0  }
		} while 0
		if sqlcode { set SQLCODE=sqlcode do ..%SQLEExit() QUIT  }
	}
	set:$a(%e,9) ^Ens.MessageBodyD(%d(1))=$lb(%d(9))
	if $s($a(%e,2):1,$a(%e,3):1,$a(%e,4):1,$a(%e,5):1,$a(%e,6):1,$a(%e,7):1,1:$a(%e,8)) {
		set ^Ens.MessageBodyD(%d(1),"selectResponse")=$listupdate($g(^Ens.MessageBodyD(%d(1),"selectResponse")),1,$a(%e,5):%d(5),$a(%e,8):%d(8),$a(%e,2):%d(2),$a(%e,4):%d(4),$a(%e,6):%d(6),$a(%e,3):%d(3),$a(%e,7):%d(7))
	}
	do ..%SQLUnlock() TCOMMIT:%tstart&&($zu(115,1)=1)
	set SQLCODE=0 kill:$g(omcall) %0CacheSQLRA
	QUIT
ERRORUpdate	set $zt="",SQLCODE=-415,%msg=$s($g(%msg)'="":%msg_" -- ",1:"")_$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler51",,%oper,"SQLUser"_"."_"selectResponse",$ze) if $ze["<FRAMESTACK>" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler52",,$ze,%oper,"SQLUser"_"."_"selectResponse") do ##Class(%SYS.System).WriteToConsoleLog(%msg) if ($zu(67,10,$j)=1)||($zu(67,10,$j)=3) { write !,%msg h 3 } HALT  } do ..%SQLEExit() QUIT  
	Return
%SQLValidateFields(sqlcode)
	new %f for %f=2,3 { if $g(%d(%f))'="",'($select(%d(%f)=$c(0)&&$zu(115,13):1,$isvalidnum(%d(%f),0):1,1:$$Error^%apiOBJ(7207,%d(%f)))) set sqlcode=..%SQLInvalid(%f+1,$g(%d(%f))) quit  } 
	for %f=4,5,6,7,8 { if $g(%d(%f))'="",'(($l(%d(%f))'>50)) set sqlcode=..%SQLInvalid(%f+1,$g(%d(%f))) quit  } 
	QUIT 'sqlcode
%SQLnBuild() public {
	set %n=$lb(,"ID","Age","DOB","Gender","Name","Race","Status","Surname","x__classname")
	QUIT }
%SaveData(id) public {
	try {
		set id=$listget(i%"%%OID") if id'="" { set insert=0,idassigned=1 } else { set insert=1,idassigned=0 }
		set lock=0,lockok=0,tSharedLock=0
		if 'idassigned { set id=$i(^Ens.MessageBodyD) do ..%IdSet(id) set:$g(%objtxSTATUS)=2 %objtxOIDASSIGNED(+$this)="" }
		try {
			set tInnerException = ""
			;
			if 'insert {
				if (i%%Concurrency<4)&&(i%%Concurrency) { lock +(^Ens.MessageBodyD(id)#"E"):$zu(115,4) set lockok=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,2:2,4:2,:0)) set:lockok=2&&($tlevel) %0CacheLock($classname(),"E")=1 if lockok { set lock=1 } else { Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5803,$classname())) } }
				if ('$Data(^Ens.MessageBodyD(id))) {
					set insert=1
					if lock { lock -(^Ens.MessageBodyD(id)#"E") set (lock,lockok) = 0 }
				}
			}
			if insert {
				if i%%Concurrency&&$tlevel {  lock +(^Ens.MessageBodyD(id)#"E"):$zu(115,4) set lockok=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,2:2,4:2,:0)) set:(lockok=2&&(i%%Concurrency'=4)) %0CacheLock($classname(),"E")=1 set:lockok lock=1 if 'lockok { Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5803,$classname())) } }
				if i%%Concurrency=3 { lock +(^Ens.MessageBodyD(id)#"ES") set tSharedLock=1 }
				set:i%%Concurrency=4 lock=0
				set ^Ens.MessageBodyD(id)=$lb("~Ens.Response~selectResponse~")
				set ^Ens.MessageBodyD(id,"selectResponse")=$lb(i%Name,i%Surname,i%Age,i%Gender,i%Race,i%DOB,i%Status)
			}
			else {
				set ^Ens.MessageBodyD(id)=$lb("~Ens.Response~selectResponse~")
				set ^Ens.MessageBodyD(id,"selectResponse")=$lb(i%Name,i%Surname,i%Age,i%Gender,i%Race,i%DOB,i%Status)
			}
			set tStatus = 1
		}
		catch tInnerException {
			if ('idassigned) { Set $zobjoid("",$listget(i%"%%OID"))="",i%"%%OID"="" kill:$g(%objtxSTATUS)=2 %objtxOIDASSIGNED(+$this) }
			if (tSharedLock) {  lock -(^Ens.MessageBodyD(id)#"ES") } elseif (lockok=1)&&(insert)&&(i%%Concurrency=4) {  lock -(^Ens.MessageBodyD(id)) }
		}
		if lock lock -(^Ens.MessageBodyD(id)#"E")
		if $Isobject(tInnerException) { throw tInnerException }
	}
	catch tException {
		set tStatus = tException.AsStatus()
	}
	quit tStatus }
%SaveDirect(id="",idList="",data,concurrency=-1) public {
	try {
		if concurrency=-1 { set concurrency=$zu(115,10) }
		if id'="" { set insert=0,idassigned=1 } else { set insert=1,idassigned=0 }
		set lock=0,tSharedLock=0
		if 'idassigned { set id=$i(^Ens.MessageBodyD) }
		try {
			set tInnerException = ""
			;
			if 'insert {
				if concurrency { lock +(^Ens.MessageBodyD(id)#"E"):$zu(115,4) set lock=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,2:2,4:2,:0)) set:lock=2&&($tlevel) %0CacheLock($classname(),"E")=1 if 'lock { Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5803,$classname())) } }
				if ('$Data(^Ens.MessageBodyD(id))) {
					set insert=1
					if lock { lock -(^Ens.MessageBodyD(id)#"E") set (lock,lockok) = 0 }
				}
			}
			if insert {
				if concurrency { lock +(^Ens.MessageBodyD(id)#"E"):$zu(115,4) set lock=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,2:2,4:2,:0)) set:lock=2&&($tlevel) %0CacheLock($classname(),"E")=1 if 'lock { Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5803,$classname())) } }
				set ^Ens.MessageBodyD(id)=data
				set ^Ens.MessageBodyD(id,"selectResponse")=data("selectResponse")
			}
			else {
				set ^Ens.MessageBodyD(id)=data
				set ^Ens.MessageBodyD(id,"selectResponse")=data("selectResponse")
			}
			set tStatus = 1
		}
		catch tInnerException {
		}
		if lock lock -(^Ens.MessageBodyD(id)#"E")
		if $Isobject(tInnerException) { throw tInnerException }
	}
	catch tException {
		set tStatus = tException.AsStatus()
	}
	quit tStatus }
%ValidateIndices(idxList="",autoCorrect=0,lockOption=1,multiProcess=1,mapList,verbose=1,errors)
	w !,"There are no indices to validate for class 'User.selectResponse'"
	QUIT 1
%ValidateObject(unused=0,checkserial=1) public {
	set sc=1
	If '$system.CLS.GetModified() Quit sc
	If m%Age Set iv=..Age If iv'="" Set rc=(..AgeIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"Age",iv)
	If m%DOB Set iv=..DOB If iv'="" Set rc=(..DOBIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"DOB",iv)
	If m%Gender Set iv=..Gender If iv'="" Set rc=(..GenderIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"Gender",iv)
	If m%Name Set iv=..Name If iv'="" Set rc=(..NameIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"Name",iv)
	If m%Race Set iv=..Race If iv'="" Set rc=(..RaceIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"Race",iv)
	If m%Status Set iv=..Status If iv'="" Set rc=(..StatusIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"Status",iv)
	If m%Surname Set iv=..Surname If iv'="" Set rc=(..SurnameIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"Surname",iv)
	Quit sc }
zXMLDTD(top,format,input,dtdlist)
 Quit ##class(%XML.Implementation).XMLDTD("User.selectResponse",.top,.format,.input,.dtdlist)
zXMLExportInternal()
 New tag,summary,attrsVal,savelocal,aval,k,tmpPrefix,prefixDepth,hasNoContent,hasElement,topAttrs,beginprefix,endprefix,savexsiAttrs,initialxsiAttrs,initlist,initialCR,inlineFlag,popAtEnd,saveTopPrefix,saveTypesPrefix,saveAttrsPrefix,saveUsePrefix,initlist
 Set $ztrap="XMLExportInternalTrap",popAtEnd=0
 Set summary=summaryArg,initialxsiAttrs=xsiAttrs
 If group Quit $$Error^%apiOBJ(6386,"User.selectResponse")
 If indentFlag Set initialCR=($extract(currentIndent,1,2)=$c(13,10))
 Set id=createId
 Set temp=""
 If id'="" {
   If $piece($get(idlist(+$this)),",",2)'="" Quit 1
   Set idlist(+$this)=id_",1"
 }
 If encoded Set initlist=$lb($get(oreflist),inlineFlagArg),oreflist=1,inlineFlag=inlineFlagArg
 If 'nocycle,('encoded||inlineFlag) {
   If $data(oreflist($this)) Quit $$Error^%apiOBJ(6296,"User.selectResponse")
   Set oreflist($this)=""
 }
 Set tag=$get(topArg)
 Set tmpi=(($get(typeAttr)'="")&&(typeAttr'="User.selectResponse"))
 If $IsObject(namespaces) {
     Set popAtEnd=1,saveTopPrefix=topPrefix,saveTypesPrefix=typesPrefix,saveAttrsPrefix=attrsPrefix,saveUsePrefix=usePrefix
     Set sc=namespaces.PushNodeForExport("",$get(local,0),(encoded||tmpi),"",,.topPrefix,.topAttrs,.typesPrefix,.attrsPrefix,.usePrefix)
     If 'sc Quit sc
   Set beginprefix=$select(namespaces.ElementQualified&&usePrefix:typesPrefix,1:"")
   If topAttrs'="" Set temp=temp_" "_topAttrs
   If tag="" Set tag="selectResponse"
   Set xsitype=namespaces.OutputTypeAttribute
 } Else {
   Set saveTopPrefix=topPrefix,saveTypesPrefix=typesPrefix,saveAttrsPrefix=attrsPrefix,saveUsePrefix=usePrefix
   Set typesPrefix=namespaces If (typesPrefix'=""),($extract(typesPrefix,*)'=":") Set typesPrefix=typesPrefix_":"
   If 'encoded Set namespaces=""
   Set (topPrefix,attrsPrefix,topAttrs,beginprefix)=""
   If tag="" Set tag=typesPrefix_"selectResponse"
   Set xsitype=0
 }
 Set local=+$get(local),savelocal=local
 Set endprefix="</"_beginprefix,beginprefix="<"_beginprefix
 If tmpi Set temp=temp_" "_xsiPrefix_"type="""_typesPrefix_"selectResponse"""_xsiAttrs,xsiAttrs=""
   If id'="" Set temp=" "_$select($get(soap12):soapPrefix_"id",1:"id")_"=""id"_id_""""_temp
 If encoded Set temp=temp_xsiAttrs,xsiAttrs=""
 If indentFlag Set %xmlmsg=currentIndent if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg } Set currentIndent=$select(initialCR:"",1:$c(13,10))_currentIndent_indentChars
 If tag[":" Set topPrefix=$piece(tag,":"),tag=$piece(tag,":",2)  If topPrefix'="" Set topPrefix=topPrefix_":"
 Set %xmlmsg="<"_topPrefix_tag_temp if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 Set attrsVal=attrsArg,attrsArg="" Set %xmlmsg=attrsVal if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 Set %xmlmsg=">" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 Set val=..Name
 Set %xmlmsg=currentIndent_beginprefix_"Name"_$select(xsitype:" "_xsiPrefix_"type="""_schemaPrefix_"string""",1:"")_">"_$select(val=$c(0):"",1:$select((val["<")||(val[">")||(val["&"):"<![CDATA["_$replace(val,"]]]]><![CDATA[>","]]]]]]><![CDATA[><![CDATA[>")_"]]]]><![CDATA[>",1:val))_endprefix_"Name>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 Set val=..Surname
 Set %xmlmsg=currentIndent_beginprefix_"Surname"_$select(xsitype:" "_xsiPrefix_"type="""_schemaPrefix_"string""",1:"")_">"_$select(val=$c(0):"",1:$select((val["<")||(val[">")||(val["&"):"<![CDATA["_$replace(val,"]]]]><![CDATA[>","]]]]]]><![CDATA[><![CDATA[>")_"]]]]><![CDATA[>",1:val))_endprefix_"Surname>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 Set val=..Age
 If val'="" {
   Set %xmlmsg=currentIndent_beginprefix_"Age"_$select(xsitype:" "_xsiPrefix_"type="""_schemaPrefix_"long""",1:"")_">"_val_endprefix_"Age>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 }
 Set val=..Gender
 Set %xmlmsg=currentIndent_beginprefix_"Gender"_$select(xsitype:" "_xsiPrefix_"type="""_schemaPrefix_"string""",1:"")_">"_$select(val=$c(0):"",1:$select((val["<")||(val[">")||(val["&"):"<![CDATA["_$replace(val,"]]]]><![CDATA[>","]]]]]]><![CDATA[><![CDATA[>")_"]]]]><![CDATA[>",1:val))_endprefix_"Gender>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 Set val=..Race
 Set %xmlmsg=currentIndent_beginprefix_"Race"_$select(xsitype:" "_xsiPrefix_"type="""_schemaPrefix_"string""",1:"")_">"_$select(val=$c(0):"",1:$select((val["<")||(val[">")||(val["&"):"<![CDATA["_$replace(val,"]]]]><![CDATA[>","]]]]]]><![CDATA[><![CDATA[>")_"]]]]><![CDATA[>",1:val))_endprefix_"Race>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 Set val=..DOB
 If val'="" {
   Set %xmlmsg=currentIndent_beginprefix_"DOB"_$select(xsitype:" "_xsiPrefix_"type="""_schemaPrefix_"long""",1:"")_">"_val_endprefix_"DOB>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 }
 Set val=..Status
 Set %xmlmsg=currentIndent_beginprefix_"Status"_$select(xsitype:" "_xsiPrefix_"type="""_schemaPrefix_"string""",1:"")_">"_$select(val=$c(0):"",1:$select((val["<")||(val[">")||(val["&"):"<![CDATA["_$replace(val,"]]]]><![CDATA[>","]]]]]]><![CDATA[><![CDATA[>")_"]]]]><![CDATA[>",1:val))_endprefix_"Status>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 If indentFlag { Set currentIndent=$extract(currentIndent,1,*-$length(indentChars)) Set %xmlmsg=currentIndent if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }}
 Set %xmlmsg="</"_topPrefix_tag_">"
 if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg } If indentFlag,'initialCR if $data(%xmlBlock) { Set %xmlmsg="" Do xeWriteLine^%occXMLInternal } else { write ! } Set $extract(currentIndent,1,2)=""
 If '$IsObject(namespaces) || (popAtEnd=1) Set topPrefix=saveTopPrefix,typesPrefix=saveTypesPrefix,attrsPrefix=saveAttrsPrefix,usePrefix=saveUsePrefix
 If popAtEnd Do namespaces.PopNode()
 If encoded Set oreflist=$list(initlist),inlineFlag=$list(initlist,2)
 If 'encoded||inlineFlag {
   If 'nocycle Kill oreflist($this)
 }
 Quit sc
XMLExportInternalTrap Set $ztrap=""
 If $data(val) , $IsObject(val) , ($piece($ze,">",1)="<METHOD DOES NOT EXIST") {
   Set sc=$$Error^%apiOBJ(6249,$classname(val))
 } Else {
   Set sc=$$Error^%apiOBJ(5002,$ze)
 }
XMLExportExit 
 If '$IsObject(namespaces) || (popAtEnd=1) Set topPrefix=saveTopPrefix,typesPrefix=saveTypesPrefix,attrsPrefix=saveAttrsPrefix,usePrefix=saveUsePrefix
 If popAtEnd Do namespaces.PopNode()
 Quit sc
zXMLGetSchemaImports(imports,classes)
 Quit ##class(%XML.Implementation).XMLGetSchemaImports("User.selectResponse",.imports,.classes)
zXMLImportInternal()
 New child,childlist,node,nodelist,inner,innerlist,data,encodedArray,key,nsIndex,savechild,savechildlist,saveinner,saveinnnerlist,exists
 Set $ztrap="XMLImportInternalTrap"
 Set encoded=$case($piece(fmt,",",1),"":0,"literal":0,"encoded":1,"encoded12":1,:"")
 If encoded="" Quit $$Error^%apiOBJ(6231,fmt)
 Set nsIndex=$select($get(namespace)="":"",1:$get(@(tree)@("N",namespace)))
 Set node=nodeArg,nodelist=nodeArgChildlist
 If tag'=@(tree)@("d",$zlascii(nodelist,9)) Set inner=node Goto XMLImportMalformed
 If bareProjection Quit $$Error^%apiOBJ(6386,"User.selectResponse")
 If encoded {
   Do XMLImportAttrnode() If $data(attributeList("id")) Set idlist(node)=$this
 }
 If $zboolean(+($zlascii(nodelist,13)#16),+1,1) Quit 1
 Set sc=$$XMLImportElements()
XMLImportExit Quit sc
XMLImportElements() ;
XMLLOOP1 Set descriptor=$zlascii(nodelist,$zwascii(nodelist,17)) Set child=($zlascii(@(tree)@($piece(node,",",1)),$piece(node,",",2))\16)_","_$zwascii(nodelist,17) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set child=##class(%XML.ImportHandler).NextChild(tree,node,.nodelist,child,.descriptor) } Else { Set child="" }} For { Quit:child=""  Quit:(descriptor#16)'=2  Set descriptor=$piece(child,",",2)+4 Set child=$piece(child,",",1)_","_descriptor Set descriptor=$zlascii(nodelist,descriptor) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set child=##class(%XML.ImportHandler).NextChild(tree,node,.nodelist,child,.descriptor) } Else {Set child="" }} } Goto XMLLOOP2
XMLLOOP For  { Set descriptor=$piece(child,",",2)+4 Set child=$piece(child,",",1)_","_descriptor Set descriptor=$zlascii(nodelist,descriptor) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set child=##class(%XML.ImportHandler).NextChild(tree,node,.nodelist,child,.descriptor) } Else {Set child="" }} Quit:child=""  Quit:(descriptor#16)'=2  }
XMLLOOP2 If child="" Quit sc
 If (descriptor#16)'=0 Set inner=child Goto XMLImportMalformedNoTag
 Set childlist=@(tree)@((descriptor\16))
 Set tag=@(tree)@("d",$zlascii(childlist,9))
 If tag="Name" {
   If ($get(namespace)="")||$case($zwascii(childlist,19),0:1,nsIndex:1,:0) {
   If encoded Set savechild=child,savechildlist=childlist
   If encoded,$$XMLImportIdChild() {
     Set data=idlist(child)
   } Else { Goto:'sc XMLImportExit
     If $zboolean(+($zlascii(childlist,13)#16),+1,1) { Set data=""
     } Else {
             If (($length(childlist)-$zwascii(childlist,17)-3)\4)>1 {
               Set data="" If '##class(%XML.ImportHandler).SerializeNode(tree,child,0,0,.data,,,childlist) Goto XMLImportErrchild
             } Else { Set descriptor=$zlascii(childlist,$zwascii(childlist,17)) Set data=($zlascii(@(tree)@($piece(child,",",1)),$piece(child,",",2))\16)_","_$zwascii(childlist,17) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set data=##class(%XML.ImportHandler).NextChild(tree,child,.childlist,data,.descriptor) } Else { Set data="" }}
               If data'="" { Goto:(descriptor#16)=0 XMLImportErrchild Set data=@(tree)@("d",(descriptor\16)) }}
             If data'="" Goto:('$s(($l(data)'>50):1,1:$$Error^%apiOBJ(7201,data,50))) XMLImportErrchild
     }
     If encoded Do XMLImportAttrchild() If $data(attributeList("id")) Set idlist(child)=data
   }
   If encoded Set child=savechild,childlist=savechildlist
   Set ..Name=data
   Goto XMLLOOP } }
 If tag="Surname" {
   If ($get(namespace)="")||$case($zwascii(childlist,19),0:1,nsIndex:1,:0) {
   If encoded Set savechild=child,savechildlist=childlist
   If encoded,$$XMLImportIdChild() {
     Set data=idlist(child)
   } Else { Goto:'sc XMLImportExit
     If $zboolean(+($zlascii(childlist,13)#16),+1,1) { Set data=""
     } Else {
             If (($length(childlist)-$zwascii(childlist,17)-3)\4)>1 {
               Set data="" If '##class(%XML.ImportHandler).SerializeNode(tree,child,0,0,.data,,,childlist) Goto XMLImportErrchild
             } Else { Set descriptor=$zlascii(childlist,$zwascii(childlist,17)) Set data=($zlascii(@(tree)@($piece(child,",",1)),$piece(child,",",2))\16)_","_$zwascii(childlist,17) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set data=##class(%XML.ImportHandler).NextChild(tree,child,.childlist,data,.descriptor) } Else { Set data="" }}
               If data'="" { Goto:(descriptor#16)=0 XMLImportErrchild Set data=@(tree)@("d",(descriptor\16)) }}
             If data'="" Goto:('$s(($l(data)'>50):1,1:$$Error^%apiOBJ(7201,data,50))) XMLImportErrchild
     }
     If encoded Do XMLImportAttrchild() If $data(attributeList("id")) Set idlist(child)=data
   }
   If encoded Set child=savechild,childlist=savechildlist
   Set ..Surname=data
   Goto XMLLOOP } }
 If tag="Age" {
   If ($get(namespace)="")||$case($zwascii(childlist,19),0:1,nsIndex:1,:0) {
   If encoded Set savechild=child,savechildlist=childlist
   If encoded,$$XMLImportIdChild() {
     Set data=idlist(child)
   } Else { Goto:'sc XMLImportExit
     If $zboolean(+($zlascii(childlist,13)#16),+1,1) { Set data=""
     } Else {
             If (($length(childlist)-$zwascii(childlist,17)-3)\4)>1 {
               Set data="" Goto XMLImportErrchild
             } Else { Set descriptor=$zlascii(childlist,$zwascii(childlist,17)) Set data=($zlascii(@(tree)@($piece(child,",",1)),$piece(child,",",2))\16)_","_$zwascii(childlist,17) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set data=##class(%XML.ImportHandler).NextChild(tree,child,.childlist,data,.descriptor) } Else { Set data="" }}
               If data'="" { Goto:(descriptor#16)=0 XMLImportErrchild Set data=@(tree)@("d",(descriptor\16)) }}
             Set data=$zstrip(data,"<>W",$c(13,10)) If data'="" Set data=$s($tr(data,"Ee(),.")'=data:"",1:$number(data,"I")) Goto:data="" XMLImportErrchild Goto:('$select(data=$c(0)&&$zu(115,13):1,$isvalidnum(data,0):1,1:$$Error^%apiOBJ(7207,data))) XMLImportErrchild
     }
     If encoded Do XMLImportAttrchild() If $data(attributeList("id")) Set idlist(child)=data
   }
   If encoded Set child=savechild,childlist=savechildlist
   Set ..Age=data
   Goto XMLLOOP } }
 If tag="Gender" {
   If ($get(namespace)="")||$case($zwascii(childlist,19),0:1,nsIndex:1,:0) {
   If encoded Set savechild=child,savechildlist=childlist
   If encoded,$$XMLImportIdChild() {
     Set data=idlist(child)
   } Else { Goto:'sc XMLImportExit
     If $zboolean(+($zlascii(childlist,13)#16),+1,1) { Set data=""
     } Else {
             If (($length(childlist)-$zwascii(childlist,17)-3)\4)>1 {
               Set data="" If '##class(%XML.ImportHandler).SerializeNode(tree,child,0,0,.data,,,childlist) Goto XMLImportErrchild
             } Else { Set descriptor=$zlascii(childlist,$zwascii(childlist,17)) Set data=($zlascii(@(tree)@($piece(child,",",1)),$piece(child,",",2))\16)_","_$zwascii(childlist,17) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set data=##class(%XML.ImportHandler).NextChild(tree,child,.childlist,data,.descriptor) } Else { Set data="" }}
               If data'="" { Goto:(descriptor#16)=0 XMLImportErrchild Set data=@(tree)@("d",(descriptor\16)) }}
             If data'="" Goto:('$s(($l(data)'>50):1,1:$$Error^%apiOBJ(7201,data,50))) XMLImportErrchild
     }
     If encoded Do XMLImportAttrchild() If $data(attributeList("id")) Set idlist(child)=data
   }
   If encoded Set child=savechild,childlist=savechildlist
   Set ..Gender=data
   Goto XMLLOOP } }
 If tag="Race" {
   If ($get(namespace)="")||$case($zwascii(childlist,19),0:1,nsIndex:1,:0) {
   If encoded Set savechild=child,savechildlist=childlist
   If encoded,$$XMLImportIdChild() {
     Set data=idlist(child)
   } Else { Goto:'sc XMLImportExit
     If $zboolean(+($zlascii(childlist,13)#16),+1,1) { Set data=""
     } Else {
             If (($length(childlist)-$zwascii(childlist,17)-3)\4)>1 {
               Set data="" If '##class(%XML.ImportHandler).SerializeNode(tree,child,0,0,.data,,,childlist) Goto XMLImportErrchild
             } Else { Set descriptor=$zlascii(childlist,$zwascii(childlist,17)) Set data=($zlascii(@(tree)@($piece(child,",",1)),$piece(child,",",2))\16)_","_$zwascii(childlist,17) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set data=##class(%XML.ImportHandler).NextChild(tree,child,.childlist,data,.descriptor) } Else { Set data="" }}
               If data'="" { Goto:(descriptor#16)=0 XMLImportErrchild Set data=@(tree)@("d",(descriptor\16)) }}
             If data'="" Goto:('$s(($l(data)'>50):1,1:$$Error^%apiOBJ(7201,data,50))) XMLImportErrchild
     }
     If encoded Do XMLImportAttrchild() If $data(attributeList("id")) Set idlist(child)=data
   }
   If encoded Set child=savechild,childlist=savechildlist
   Set ..Race=data
   Goto XMLLOOP } }
 If tag="DOB" {
   If ($get(namespace)="")||$case($zwascii(childlist,19),0:1,nsIndex:1,:0) {
   If encoded Set savechild=child,savechildlist=childlist
   If encoded,$$XMLImportIdChild() {
     Set data=idlist(child)
   } Else { Goto:'sc XMLImportExit
     If $zboolean(+($zlascii(childlist,13)#16),+1,1) { Set data=""
     } Else {
             If (($length(childlist)-$zwascii(childlist,17)-3)\4)>1 {
               Set data="" Goto XMLImportErrchild
             } Else { Set descriptor=$zlascii(childlist,$zwascii(childlist,17)) Set data=($zlascii(@(tree)@($piece(child,",",1)),$piece(child,",",2))\16)_","_$zwascii(childlist,17) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set data=##class(%XML.ImportHandler).NextChild(tree,child,.childlist,data,.descriptor) } Else { Set data="" }}
               If data'="" { Goto:(descriptor#16)=0 XMLImportErrchild Set data=@(tree)@("d",(descriptor\16)) }}
             Set data=$zstrip(data,"<>W",$c(13,10)) If data'="" Set data=$s($tr(data,"Ee(),.")'=data:"",1:$number(data,"I")) Goto:data="" XMLImportErrchild Goto:('$select(data=$c(0)&&$zu(115,13):1,$isvalidnum(data,0):1,1:$$Error^%apiOBJ(7207,data))) XMLImportErrchild
     }
     If encoded Do XMLImportAttrchild() If $data(attributeList("id")) Set idlist(child)=data
   }
   If encoded Set child=savechild,childlist=savechildlist
   Set ..DOB=data
   Goto XMLLOOP } }
 If tag="Status" {
   If ($get(namespace)="")||$case($zwascii(childlist,19),0:1,nsIndex:1,:0) {
   If encoded Set savechild=child,savechildlist=childlist
   If encoded,$$XMLImportIdChild() {
     Set data=idlist(child)
   } Else { Goto:'sc XMLImportExit
     If $zboolean(+($zlascii(childlist,13)#16),+1,1) { Set data=""
     } Else {
             If (($length(childlist)-$zwascii(childlist,17)-3)\4)>1 {
               Set data="" If '##class(%XML.ImportHandler).SerializeNode(tree,child,0,0,.data,,,childlist) Goto XMLImportErrchild
             } Else { Set descriptor=$zlascii(childlist,$zwascii(childlist,17)) Set data=($zlascii(@(tree)@($piece(child,",",1)),$piece(child,",",2))\16)_","_$zwascii(childlist,17) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set data=##class(%XML.ImportHandler).NextChild(tree,child,.childlist,data,.descriptor) } Else { Set data="" }}
               If data'="" { Goto:(descriptor#16)=0 XMLImportErrchild Set data=@(tree)@("d",(descriptor\16)) }}
             If data'="" Goto:('$s(($l(data)'>50):1,1:$$Error^%apiOBJ(7201,data,50))) XMLImportErrchild
     }
     If encoded Do XMLImportAttrchild() If $data(attributeList("id")) Set idlist(child)=data
   }
   If encoded Set child=savechild,childlist=savechildlist
   Set ..Status=data
   Goto XMLLOOP } }
 Goto XMLImportBadTagchild
XMLImportBadTagchild Set inner=child
XMLImportBadTag Quit $$Error^%apiOBJ(6237,tag_$$XMLImportLocation(inner))
XMLImportBadTypenode Set inner=node Goto XMLImportBadType
XMLImportBadTypechild Set inner=child
XMLImportBadType Quit $$Error^%apiOBJ(6277,class,$select(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))#16)=0:@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)),9)),1:@(tree)@("d",($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)))_$$XMLImportLocation(inner))
XMLImportErrnode Set inner=node Goto XMLImportErr
XMLImportErrchild Set inner=child
XMLImportErr
 Set data=##class(%XML.ImportHandler).GetNextChild(tree,inner,"")
 If (data'="") {
   If ($zlascii(@(tree)@($piece(data,",",1)),$piece(data,",",2))#16)'=0 {
     Quit $$Error^%apiOBJ(6232,@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)),9))_$$XMLImportLocation(inner),$extract(@(tree)@("d",($zlascii(@(tree)@($piece(data,",",1)),$piece(data,",",2))\16)),1,200))
   } Else {
     Quit $$Error^%apiOBJ(6253,@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)),9))_$$XMLImportLocation(inner),@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(data,",",1)),$piece(data,",",2))\16)),9)))
   }
 } Else {
   Quit $$Error^%apiOBJ(6252,@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)),9))_$$XMLImportLocation(inner))
 }
XMLImportIdErr Set sc=$$Error^%apiOBJ(6236,id,@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)),9))_$$XMLImportLocation(inner)) Quit sc
XMLImportMalformed Set sc=$$Error^%apiOBJ(6233,$select(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))#16)=0:@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)),9)),1:@(tree)@("d",($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)))_$$XMLImportLocation(inner)) Quit sc
XMLImportMalformedNoTag Set node=$select($piece(inner,",",1)<=0:0,1:$zlascii(@(tree)@($piece(inner,",",1)),1)_","_$zlascii(@(tree)@($piece(inner,",",1)),5)),sc=$$Error^%apiOBJ(6254,$select(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))#16)=0:@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)),9)),1:@(tree)@("d",($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16))),$select(($zlascii(@(tree)@($piece(node,",",1)),$piece(node,",",2))#16)=0:@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(node,",",1)),$piece(node,",",2))\16)),9)),1:@(tree)@("d",($zlascii(@(tree)@($piece(node,",",1)),$piece(node,",",2))\16)))_$$XMLImportLocation(node)) Quit sc
XMLImportNSchild Set inner=child
XMLImportNS Set sc=$$Error^%apiOBJ(6235,@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)),9))_$$XMLImportLocation(inner)) Quit sc
XMLImportLocation(node) new msg,loc
 Set loc=$lb($zlascii(@(tree)@(($zlascii(@(tree)@($piece(node,",",1)),$piece(node,",",2))\16)),21),$zlascii(@(tree)@(($zlascii(@(tree)@($piece(node,",",1)),$piece(node,",",2))\16)),25))
 If loc="" Quit ""
 Set msg=$get(^%qMsg("%ObjectErrors",$s(""'="":$zcvt("","L"),1:$s($mvv(58)="":"en",1:$mvv(58))),"XMLImportLocation")," (%1,%2)")
 Quit $$FormatText^%occMessages(msg,$listget(loc,1),$listget(loc,2))
XMLImportInternalTrap Set $ztrap=""
 Set loc=$select($ZE["<CLASS DOES NOT EXIST>":" for element "_tag_$$XMLImportLocation(child),1:"")
 Quit $$Error^%apiOBJ(5002,$ZE_loc)
XMLImportIdChild() Set inner=child,innerlist=childlist,tmp=$$XMLImportId(),child=inner,childlist=innerlist Quit tmp
XMLImportId() ;
 Do XMLImportAttrinner()
 If $data(attributeList("href")) {
   Set id=$case($data(@(tree)@("d",$zlascii(attributeList("href"),13))),1:@(tree)@("d",$zlascii(attributeList("href"),13)),0:"",:##class(%XML.ImportHandler).GetAttribute(tree,attributeList("href")))
   If $extract(id)="#" {
     Set tmp=$select($get(@(tree)@("i",$extract(id,2,*)))="":"",1:$piece(@(tree)@("i",$extract(id,2,*)),",",1)_","_$piece(@(tree)@("i",$extract(id,2,*)),",",2)) If tmp="" Goto XMLImportIdErr
     Set inner=tmp
     Set descriptor=$zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2)) Set innerlist=@(tree)@((descriptor\16))
   }
 } ElseIf $data(attributeList("ref")),($get(@(tree)@("n",$zwascii(attributeList("ref"),9)))="http://www.w3.org/2003/05/soap-encoding") {
   Set id=$case($data(@(tree)@("d",$zlascii(attributeList("ref"),13))),1:@(tree)@("d",$zlascii(attributeList("ref"),13)),0:"",:##class(%XML.ImportHandler).GetAttribute(tree,attributeList("ref")))
   Set tmp=$select($get(@(tree)@("i",id))="":"",1:$piece(@(tree)@("i",id),",",1)_","_$piece(@(tree)@("i",id),",",2)) If tmp="" Goto XMLImportIdErr
   Set inner=tmp
   Set descriptor=$zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2)) Set innerlist=@(tree)@((descriptor\16))
 } ElseIf '$data(attributeList("id")) {
   Quit 0
 }
 Quit $data(idlist(inner))
XMLImportAttrnode()
 If $get(attributeList)=node Quit
 Kill attributeList
 Set attributeList=node
 Set offset=29 While offset<$zwascii(nodelist,17) { Set attribute=$extract(nodelist,offset,offset+15)
    Set attrname=@(tree)@("d",$zlascii(attribute,1))
    Set attributeList(attrname)=attribute
 Set offset=offset+16 }
 Quit
XMLImportAttrchild()
 If $get(attributeList)=child Quit
 Kill attributeList
 Set attributeList=child
 Set offset=29 While offset<$zwascii(childlist,17) { Set attribute=$extract(childlist,offset,offset+15)
    Set attrname=@(tree)@("d",$zlascii(attribute,1))
    Set attributeList(attrname)=attribute
 Set offset=offset+16 }
 Quit
XMLImportAttrinner()
 If $get(attributeList)=inner Quit
 Kill attributeList
 Set attributeList=inner
 Set offset=29 While offset<$zwascii(innerlist,17) { Set attribute=$extract(innerlist,offset,offset+15)
    Set attrname=@(tree)@("d",$zlascii(attribute,1))
    Set attributeList(attrname)=attribute
 Set offset=offset+16 }
 Quit
zXMLNew(document,node,containerOref="")
	Quit (##class(User.selectResponse).%New())
zXMLSchema(top="",format="",namespacePrefix="",input=0,refOnly=0,schema)
 Quit ##class(%XML.Implementation).XMLSchema("User.selectResponse",top,format,namespacePrefix,input,refOnly,.schema)
zAgeGetStored(id) public {
	Quit $Select(id'="":$listget($g(^Ens.MessageBodyD(id,"selectResponse")),3),1:"") }
zAgeXSDToLogical(%val) public {
	Q $s($tr(%val,"Ee(),.")'=%val:"",1:$number(%val,"I")) }
zDOBGetStored(id) public {
	Quit $Select(id'="":$listget($g(^Ens.MessageBodyD(id,"selectResponse")),6),1:"") }
zDOBXSDToLogical(%val) public {
	Q $s($tr(%val,"Ee(),.")'=%val:"",1:$number(%val,"I")) }
zGenderGetStored(id) public {
	Quit $Select(id'="":$listget($g(^Ens.MessageBodyD(id,"selectResponse")),4),1:"") }
zNameGetStored(id) public {
	Quit $Select(id'="":$listget($g(^Ens.MessageBodyD(id,"selectResponse")),1),1:"") }
zRaceGetStored(id) public {
	Quit $Select(id'="":$listget($g(^Ens.MessageBodyD(id,"selectResponse")),5),1:"") }
zStatusGetStored(id) public {
	Quit $Select(id'="":$listget($g(^Ens.MessageBodyD(id,"selectResponse")),7),1:"") }
zSurnameGetStored(id) public {
	Quit $Select(id'="":$listget($g(^Ens.MessageBodyD(id,"selectResponse")),2),1:"") }
zExtentExecute(%qHandle) [ SQLCODE ] public { New %ROWCOUNT,%ROWID,%msg,SQLCODE 
	Set sc=1
	 ;---&sql(DECLARE QExtent CURSOR FOR
 	 ;---		 SELECT ID FROM SQLUser.selectResponse)
 	 ;--- ** SQL PUBLIC Variables: SQLCODE
	 
	 ;---&sql(OPEN QExtent)
	try { s %qHandle="",%qHandle=$classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xEoAL4jR4ajbXmYvmayNCS2rEJ0D","%New") if '$isobject(%qHandle) s %qHandle=$$%0dsqlL() } catch { if $ze["<CLASS DOES NOT EXIST>"&&($ze["%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xEoAL4jR4ajbXmYvmayNCS2rEJ0D")||($ze["<ZSQLU>") { s %qHandle=$$%0dsqlL() } else { throw } }
	If SQLCODE { Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.%Message=$g(%msg) Set sc=$$Error^%apiOBJ(5821,"SQLCODE = "_SQLCODE) } Else { Set sc=1 }
	Quit sc }
zExtentFetch(%qHandle,Row,AtEnd=0) [ SQLCODE ] public { New %ROWCOUNT,%ROWID,%msg,SQLCODE 
	Set Row="",AtEnd=0
	 ;---&sql(FETCH QExtent INTO :c1)
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE
	if $isobject($g(%qHandle))'=1 { s SQLCODE=-102 } else { do %qHandle.FET() if SQLCODE=0 { s c1=%qHandle.sqlcol1 } }
	If 'SQLCODE { Set Row=$lb(c1) Set sc=1 }
	ElseIf SQLCODE=100 { Set AtEnd=1,sc=1 Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.%ROWCOUNT=$g(%ROWCOUNT) }
	Else { Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.Message=$g(%msg) Set AtEnd=1,sc=$$Error^%apiOBJ(5540,SQLCODE,$get(%msg)) }
	QUIT sc }
zExtentFetchRows(%qHandle,FetchCount=0,RowSet,ReturnCount,AtEnd) [ SQLCODE ] public { New %ROWCOUNT,%ROWID,%msg,SQLCODE 
	Set RowSet="",ReturnCount=0,AtEnd=0
	For {
		 ;---&sql(FETCH QExtent INTO :c1)
 		 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE
		if $isobject($g(%qHandle))'=1 { s SQLCODE=-102 } else { do %qHandle.FET() if SQLCODE=0 { s c1=%qHandle.sqlcol1 } }
		If 'SQLCODE { Set RowSet=RowSet_$lb(c1),ReturnCount=ReturnCount+1 Quit:(ReturnCount=FetchCount)||(($l(RowSet)+($l(RowSet)\ReturnCount))>24000) } Else { Set AtEnd=1 Quit }
	}
	If 'SQLCODE { Set sc=1 } ElseIf SQLCODE=100 { Set sc=1 Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.%ROWCOUNT=$g(%ROWCOUNT) } Else { Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.Message=$g(%msg) Set sc=$$Error^%apiOBJ(5540,SQLCODE,$get(%msg)) }
	Quit sc }
zExtentSendODBC(%qHandle,array,qacn,%qrc,piece,ColumnCount) [ SQLCODE ] public { New %ROWCOUNT,%ROWID,%msg,SQLCODE 
	set %qrc=0,piece=0
	for {
		set rc=..ExtentFetch(.%qHandle,.row,.atend)
		if ('rc) { set %qrc=-400 set:$isobject($get(%sqlcontext)) %sqlcontext.SQLCode=-400,%sqlcontext.Message=$g(%msg) do ProcessError^%ourProcedure(rc,$get(%sqlcontext),.%qrc,.%msg),Logerr^%SYS.SQLSRV(%qrc,"","SP",.%msg) RETURN  }
		if row="" { set %qrc=100 set:$isobject($get(%sqlcontext)) %sqlcontext.SQLCode=100 RETURN  }
		if $g(%protocol)>50 { RETURN:$zobjexport(row,60) }
		else {
			if %protocol>46 { for piece=1:1:ColumnCount { goto:$zobjexport($lg(row,piece),50) SPDone } }
			else { for piece=1:1:ColumnCount { goto:$zobjexport($lg(row,piece),7) SPDone } }
		}
	}
	QUIT
SPDone	set:%protocol>46 piece=piece+1
	kill array(qacn)
	for i=piece:1:ColumnCount { set array(qacn,i)=$lg(row,i) }
	QUIT }
 q
%0dsqlL()	n %xxsql
	s %xxsql("S",1)="DECLARE QExtent CURSOR FOR SELECT ID "
	s %xxsql("S",2)="INTO  :i%sqlcol1"
	s %xxsql("S",3)="FROM SQLUser . selectResponse"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","DEBUG")=$c(1),%xxsql("M","FORKNETDMN")=$c(1)
	s %xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","SOAP12ENCns")="0"_$c(1,1)_"0"_$c(1)_"""http://www.w3.org/2003/05/soap-encoding"""
	s %xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1),%xxsql("M","USELOST")=$c(1),%xxsql("M","ZVERSION")=$c(1)
	s %xxsql("I","%callout")="",%xxsql("I","%occErrors")="",%xxsql("I","%occSqlfunc")="",%xxsql("I","%sySite")="",%xxsql("I","%sySt")=""
	s %xxsql("I","%sySystem")="",%xxsql("I","%xmlMap")="",%xxsql("I","EnsConstants")="",%xxsql("I","EnsErrors")="",%xxsql("I","EnsUtil")=""
	s %xxsql("I","Ensemble")="",%xxsql("NS")="PROJECT1"
	return $$BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Runtime","","","User",0,"",),",1,QExtent,","User.selectResponse.CLS",1)
zExtentFunc() public {
	try {
		set tSchemaPath = ##class(%SQL.Statement).%ClassPath($classname())
			set tStatement = ##class(%SQL.Statement).%New(,tSchemaPath)
			do tStatement.prepare(" SELECT ID FROM SQLUser . selectResponse")
		set tResult = tStatement.%Execute()
	}
	catch tException { if '$Isobject($Get(tResult)) { set tResult = ##class(%SQL.StatementResult).%New() } set tResult.%SQLCODE=tException.AsSQLCODE(),tResult.%Message=tException.AsSQLMessage() }
	Quit tResult }
zExtentGetODBCInfo(colinfo,parminfo,qHandle) public {
	set version = $Select($Get(%protocol,41)>40:4,1:3)
	Set metadata=$lb(1,1,"ID",4,10,0,2,"ID","selectResponse","SQLUser","",$c(0,0,0,0,0,0,0,0,0,0,0,1),0)
	Set colcount=$li(metadata,2),cmdlen=colcount*10,parmcount=$li(metadata,3+cmdlen),pmdlen=parmcount*6,parminfo=$li(metadata,cmdlen+3,cmdlen+pmdlen+3)
	If version=4 {
		Set colinfo=$li(metadata,2,2+cmdlen)
	} Else {
		Set colinfo=$li(metadata,2,2)
		For i=0:1:colcount-1 Set colinfo=colinfo_$list(metadata,3+(i*10),11+(i*10))
	}
	Quit 1 }
zIDKEYSQLCheckUnique(pFromOrig=0,%pID,%pVals...)
	 ;---if pFromOrig &sql(SELECT ID FROM Ens.MessageBody WHERE  ID=:%pVals(1) AND (%ID <> :%pID OR :%pID IS NULL)) QUIT SQLCODE=100
 	 ;--- ** SQL PUBLIC Variables: %pID, %pVals, SQLCODE
	if pFromOrig try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xEiuq0WKv91eJCDCmgqXpkX9ER05","%New") } catch { if $ze["<CLASS DOES NOT EXIST>"&&($ze["%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xEiuq0WKv91eJCDCmgqXpkX9ER05")||($ze["<ZSQLU>") { d %0dsqlP } else { throw } } QUIT SQLCODE=100
	 ;---&sql(SELECT ID FROM SQLUser.selectResponse WHERE  ID=:%pVals(1) AND (%ID <> :%pID OR :%pID IS NULL)) QUIT SQLCODE=100
 	 ;--- ** SQL PUBLIC Variables: %pID, %pVals, SQLCODE
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xEF3qadzRa2qSzIvKbdQPM3RyVIK","%New") } catch { if $ze["<CLASS DOES NOT EXIST>"&&($ze["%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xEF3qadzRa2qSzIvKbdQPM3RyVIK")||($ze["<ZSQLU>") { d %0dsqlR } else { throw } } QUIT SQLCODE=100
 q
%0dsqlP	n %xxsql
	s %xxsql("S",1)="SELECT ID FROM Ens . MessageBody WHERE ID = :%pVals(1) AND ( %ID <> :%pID OR :%pID IS NULL )"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","DEBUG")=$c(1),%xxsql("M","FORKNETDMN")=$c(1)
	s %xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","SOAP12ENCns")="0"_$c(1,1)_"0"_$c(1)_"""http://www.w3.org/2003/05/soap-encoding"""
	s %xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1),%xxsql("M","USELOST")=$c(1),%xxsql("M","ZVERSION")=$c(1)
	s %xxsql("I","%callout")="",%xxsql("I","%occErrors")="",%xxsql("I","%occSqlfunc")="",%xxsql("I","%sySite")="",%xxsql("I","%sySt")=""
	s %xxsql("I","%sySystem")="",%xxsql("I","%xmlMap")="",%xxsql("I","EnsConstants")="",%xxsql("I","EnsErrors")="",%xxsql("I","EnsUtil")=""
	s %xxsql("I","Ensemble")="",%xxsql("NS")="PROJECT1"
	d BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","User",0,"",),,"User.selectResponse.CLS")
	q
%0dsqlR	n %xxsql
	s %xxsql("S",1)="SELECT ID FROM SQLUser . selectResponse WHERE ID = :%pVals(1) AND ( %ID <> :%pID OR :%pID IS NULL )"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","DEBUG")=$c(1),%xxsql("M","FORKNETDMN")=$c(1)
	s %xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","SOAP12ENCns")="0"_$c(1,1)_"0"_$c(1)_"""http://www.w3.org/2003/05/soap-encoding"""
	s %xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1),%xxsql("M","USELOST")=$c(1),%xxsql("M","ZVERSION")=$c(1)
	s %xxsql("I","%callout")="",%xxsql("I","%occErrors")="",%xxsql("I","%occSqlfunc")="",%xxsql("I","%sySite")="",%xxsql("I","%sySt")=""
	s %xxsql("I","%sySystem")="",%xxsql("I","%xmlMap")="",%xxsql("I","EnsConstants")="",%xxsql("I","EnsErrors")="",%xxsql("I","EnsUtil")=""
	s %xxsql("I","Ensemble")="",%xxsql("NS")="PROJECT1"
	d BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","User",0,"",),,"User.selectResponse.CLS")
	q
zIDKEYSQLExists(pLockOnly=0,pUnlockRef,%pVal...)
	// SQL Foreign Key validation entry point for Key IDKEY.  Called by FKeys that reference this Key to see if the row is defined
	new id set id=%pVal(1)
	if pLockOnly>=0 { if '..%SQLGetLock(id,1,.pUnlockRef) { set sqlcode=-114,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler39",,"SQLUser"_"."_"selectResponse"_":"_"IDKEY") QUIT 0 } }
	if pLockOnly<1 {
		new qv set qv='..IDKEYSQLCheckUnique(0,,%pVal(1)) QUIT:pLockOnly=-1 qv
		do:'$g(pUnlockRef) ..%SQLReleaseLock(id,1) quit qv
	}
	else { do:'$g(pUnlockRef) ..%SQLReleaseLock(id,1) QUIT 1 }
	Return
]]></Routine>


<Class name="User.selectResponse">
<Super>Ens.Response,User.Person</Super>
<TimeChanged>65833,52359.330356</TimeChanged>
<TimeCreated>65826,39416.346563</TimeCreated>

<Property name="Status">
<Type>%String</Type>
</Property>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DefaultData>selectResponseDefaultData</DefaultData>
<Data name="selectResponseDefaultData">
<Structure>listnode</Structure>
<Subscript>"selectResponse"</Subscript>
<Value name="1">
<Value>Name</Value>
</Value>
<Value name="2">
<Value>Surname</Value>
</Value>
<Value name="3">
<Value>Age</Value>
</Value>
<Value name="4">
<Value>Gender</Value>
</Value>
<Value name="5">
<Value>Race</Value>
</Value>
<Value name="6">
<Value>DOB</Value>
</Value>
<Value name="7">
<Value>Status</Value>
</Value>
</Data>
</Storage>
</Class>


<Routine name="User.testApi.1" type="INT" languagemode="0" generated="1" timestamp="65847,49821.734694"><![CDATA[
 ;User.testApi.1
 ;Generated for class User.testApi.  Do NOT edit. 04/13/2021 01:50:21PM
 ;;4A422F6B;User.testApi
 ;
SQLUPPER(v,l) { quit $zu(28,v,7,$g(l,32767)) }
ALPHAUP(v,r) { quit $zu(28,v,6) }
STRING(v,l) { quit $zu(28,v,9,$g(l,32767)) }
SQLSTRING(v,l) { quit $zu(28,v,8,$g(l,32767)) }
UPPER(v) { quit $zu(28,v,5) }
MVR(v) { quit $zu(28,v,2) }
TRUNCATE(v,l) { quit $e(v,1,$g(l,3641144)) }
%BindExport(dev,Seen,RegisterOref,AllowedDepth,AllowedCapacity) public {
   i $d(Seen(+$this)) q 1
   Set Seen(+$this)=$this
   s sc = 1
 s proporef=..Adapter
   d:RegisterOref InitObjVar^%SYS.BINDSRV($this)
   i dev'="" s t=$io u dev i $zobjexport($this_"",3)+$zobjexport($this."%%OID",3)+$zobjexport($this,3)!1 u t
 If AllowedDepth>0 Set AllowedDepth = AllowedDepth - 1
 If AllowedCapacity>0 Set AllowedCapacity = AllowedCapacity - 1/1
 s proporef=..Adapter
       i proporef'="" s sc=1 i AllowedDepth'=0,AllowedCapacity'=0 s sc=proporef.%BindExport(dev,.Seen,RegisterOref,AllowedDepth,AllowedCapacity) q:('sc) sc
   Quit sc }
%BuildIndices(pIndexList="",pAutoPurge=1,pLockFlag=0,pJournalFlag=1,pStartID="",pEndID="",pIgnoreIndexList="") public {
	If (pIndexList="")||(($listlength(pIndexList)=1)&&($listget(pIndexList,1)="")) { Quit 1 }
	Quit $$Error^%apiOBJ(5066,$classname()_"::"_$ListToString(pIndexList)) }
%BuildIndicesSegment(pStartID,pEndID,pIndexHandle=0,pLockFlag=1,pFirstRange=0,pJob="") public {
	QUIT 1 }
%CheckConstraints(pID,pConstraintList="",pCheckDisabled=0,pErrorInfo) public {
	if (''..%OnDetermineClass($select(pID="":"",1:$listbuild(pID_"")),.tMSTC)) && (tMSTC '= $classname()) { quit $classmethod(tMSTC,"%CheckConstraints",pID,pConstraintList) } else { quit 1 } }
%CheckConstraintsForExtent(pConstraintList="",pCheckDisabled=0,pErrorLog) [ SQLCODE,tID ] public { New %ROWCOUNT,%ROWID,%msg,SQLCODE,tID 
	kill pErrorLog set tStatusAll = 1, pErrorLog = 0 if '$listvalid(pConstraintList) { set pConstraintList = $listfromstring(pConstraintList) }
	 ;---&sql(declare ext cursor for select %ID into :tID FROM SQLUser.testApi)
 	 ;--- ** SQL PUBLIC Variables: SQLCODE, tID
	 
	 ;---&sql(open ext)
	try { s %ext0202="",%ext0202=$classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xEpLDtEyQHhbHvhbSu5uWpVgvNXQ","%New") if '$isobject(%ext0202) s %ext0202=$$%0dsqlA() } catch { if $ze["<CLASS DOES NOT EXIST>"&&($ze["%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xEpLDtEyQHhbHvhbSu5uWpVgvNXQ")||($ze["<ZSQLU>") { s %ext0202=$$%0dsqlA() } else { throw } }
	if SQLCODE '< 0 {
		for {
			 ;---&sql(fetch ext)
 			 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE
			if $isobject($g(%ext0202))'=1 { s SQLCODE=-102 } else { do %ext0202.FET() if SQLCODE=0 { } }
			if SQLCODE { if SQLCODE=100 { quit } elseif SQLCODE<0 { set tStatusAll = $select(+tStatusAll:$$Error^%apiOBJ(5521,SQLCODE,$Get(%msg)),1:$$AppendStatus^%occSystem(tStatusAll,$$Error^%apiOBJ(5521,SQLCODE,$Get(%msg)))) quit } }
			set tStatus = ..%CheckConstraints(tID,pConstraintList,pCheckDisabled,.tErrorInfo)
			if ('tStatus) { set tStatusAll = $select(+tStatusAll:tStatus,1:$$AppendStatus^%occSystem(tStatusAll,tStatus)) set:pErrorLog<1000 pErrorLog = pErrorLog + 1, pErrorLog(pErrorLog) = tErrorInfo _ $Listbuild(tStatus) }
		}
		 ;---&sql(close ext)
		if '$isobject($get(%ext0202)) { set SQLCODE=-102 } else { set SQLCODE=0 kill %ext0202 }
	}
	quit tStatusAll }
 q
%0dsqlA()	n %xxsql
	s %xxsql("S",1)="DECLARE ext CURSOR FOR SELECT %ID INTO :tID FROM SQLUser . testApi"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("I","%occSqlfunc")="",%xxsql("NS")="PROJECT1"
	return $$BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","User",0,"",),",0,ext,","User.testApi.CLS",1)
%ComposeOid(id) public {
	set tCLASSNAME = $listget($g(^User.testApiD(id)),1)
	if tCLASSNAME="" { quit $select(id="":"",1:$listbuild(id_"","User.testApi")) }
	set tClass=$piece(tCLASSNAME,$extract(tCLASSNAME),*-1)
	set:tClass'["." tClass="User."_tClass
	quit $select(id="":"",1:$listbuild(id_"",tClass)) }
%ConstructCloneInit(object,deep=0,cloned,location) public {
	Set i%"%%OID"=""
	If deep>0 {
		If $isobject(..Adapter)=1 Set r%Adapter=r%Adapter.%ConstructClone(1,.cloned),i%Adapter=""
	}
	Quit 1 }
%DeleteData(id,concurrency) public {
	Quit:id="" $$Error^%apiOBJ(5812)
	set $Ztrap="DeleteDataERR" set lockok=0,sc=""
	If concurrency {
		Lock +(^User.testApiD(id)#"E"):$zu(115,4)
		Set lockok=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,2:2,4:2,:0))
		Set:lockok=2&&($tlevel) %0CacheLock($classname(),"E")=1
		If 'lockok {
			Quit $$Error^%apiOBJ(5803,$classname())
		}
	}
	If ($Data(^User.testApiD(id))) {
		If $data(^oddEXTR($classname())) {
			Set fc=""
			For {
				Set fc=$order(^rINDEXEXT("F",$classname(),"%1","f",fc))
				Quit:fc=""
				Set fk=""
				For {
					Set fk=$order(^rINDEXEXT("F",$classname(),"%1","f",fc,fk))
					Quit:fk=""
					Set sc=$classmethod(fc,fk_"Delete",id)
					If ('sc) { Goto DeleteDataEXIT }
				}
			}
			Set fc=""
			For {
				Set fc=$order(^rINDEXEXT("F",$classname(),"IDKEY","f",fc))
				Quit:fc=""
				Set fk=""
				For {
					Set fk=$order(^rINDEXEXT("F",$classname(),"IDKEY","f",fc,fk))
					Quit:fk=""
					Set sc=$classmethod(fc,fk_"Delete",id)
					If ('sc) { Goto DeleteDataEXIT }
				}
			}
		}
		Kill ^User.testApiD(id)
		Set sc=1
	}
	Else { Set sc=$$Error^%apiOBJ(5810,$classname(),id) }
DeleteDataEXIT
	If concurrency,lockok {
		Lock -(^User.testApiD(id)#"E")
	}
DeleteDataRET	Set $Ztrap = ""
	QUIT sc
DeleteDataERR	Set $Ztrap = "DeleteDataRET"
	Set sc = $$Error^%apiOBJ(5002,$ZE)
	Goto DeleteDataEXIT }
%Exists(oid="") public {
	Quit ..%ExistsId($listget(oid)) }
%ExistsId(id) public {
	Try { set tExists = $s(id="":0,$d(^User.testApiD(id)):1,1:0) } catch tException { set tExists = 0 if '(tException.%IsA("%Exception.SystemException")) { throw tException } elseif tException.Name'="<SUBSCRIPT>" { ZT $ZE } } quit tExists }
%FileIndices(id,pIndexHandle=0) public {
	Quit 1 }
%InsertBatch(objects,concurrency=0,useTransactions=0) public {
	try {
		set numerrs=0,errs="",cnt=0,ptr=0
		while $listnext(objects,ptr,data) {
			set cnt=cnt+1
			set lock=0
			if (useTransactions) tstart
			set id=$i(^User.testApiD)
			try {
				set tInnerException = ""
				;
				if concurrency { lock +(^User.testApiD(id)#"E"):$zu(115,4) set lock=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,2:2,4:2,:0)) set:lock=2&&($tlevel) %0CacheLock($classname(),"E")=1 if 'lock { Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5803,$classname())) } }
				set ^User.testApiD(id)=data
				if (useTransactions) { tcommit }
			}
			catch tInnerException {
				set newerr=$lb(cnt,tInnerException.AsStatus())
				if '($length(errs)+$length(newerr)>32767) { set numerrs=numerrs+1, errs=errs_newerr }
				if (useTransactions) && ($Tlevel) trollback
			}
			if lock lock -(^User.testApiD(id)#"E")
		}
	}
	catch tException {
		set newerr=$lb($g(cnt),tException.AsStatus())
		if '($length(errs)+$length(newerr)>32767) { set numerrs=numerrs+1, errs=errs_newerr }
	}
	QUIT ($lb(numerrs))_errs }
%KillExtentData(killstreams=0)
	If killstreams Kill ^User.testApiS
	Kill ^User.testApiD
	Quit 1
%LoadData(id) public {
	New %s1
	set $ZTrap="CatchError",locked=0,userze=$ze,$ze=""
	If i%%Concurrency=4 {
		Lock +(^User.testApiD(id)#"E"):$zu(115,4)
		if '$t do init s i%%Concurrency=0 s:$ze="" $ze=userze return $$Error^%apiOBJ(5803,$classname())
	} ElseIf i%%Concurrency>1 {
		Lock +(^User.testApiD(id)#"SE"):$zu(115,4)
		if '$t do init s i%%Concurrency=0 s:$ze="" $ze=userze return $$Error^%apiOBJ(5804,$classname())
		set locked = 1
	}
	If $d(^User.testApiD(id),%s1)#2 {
		If i%%Concurrency=2 { Lock -(^User.testApiD(id)#"SIE") }
		S i%Adapter=$lg(%s1,2)
		s:$ze="" $ze=userze
		Quit 1
	} Else {
		If i%%Concurrency=2 { Lock -(^User.testApiD(id)#"SIE") }
		do init
		set sc = $$Error^%apiOBJ(5809,$classname(),id) goto CatchError
	}
CatchError	set $ZTrap = "" if $ZE'="" { s sc = $$Error^%apiOBJ(5002,$ZE) }
	If ($get(locked))&&(i%%Concurrency<3) { Lock -(^User.testApiD(id)#"SIE") }
	if '('sc) { set sc=$$Error^%apiOBJ(5809,$classname(),id) }
	s:$ze="" $ze=userze
	return sc
init	Set i%Adapter=""
	quit }
%LoadDataFromMemory(id,objstate,obj) public {
	New %s1
	If $d(objstate(id)) {
		Set %s1=$g(objstate(id))
		S i%Adapter=$lg(%s1,2)
		Quit 1
	} Else {
		Set i%Adapter=""
		Quit $$Error^%apiOBJ(5809,$classname(),id)
	} }
%LoadInit(oid="",concurrency="",reset=0) public {
	Set:concurrency'="" i%%Concurrency=concurrency
	If reset {
		Kill i%Adapter
	}
	Set r%Adapter=""
	If 'reset { Set gbl=..#DATALOCATIONGLOBAL If gbl="" { Set oref=$zobjoid("",$listget(oid)),sfn=$zu(40,0,41) } Else { Set oref=$zobjoid("",$listget(oid),@gbl,.sfn) } Set $zobjoid("",$listget(oid),,sfn)=$this,i%"%%OID"=oid }
	Quit 1 }
%LockExtent(shared=0) public {
	If shared {
		Lock +(^User.testApiD#"S"):$zu(115,4) Quit:$t 1
		Quit $$Error^%apiOBJ(5799,$classname())
	}
	Lock +(^User.testApiD):$zu(115,4) Quit:$t 1
	Quit $$Error^%apiOBJ(5798,$classname()) }
%LockId(id,shared=0,timeout) public { s:'($d(timeout)#2) timeout=$zu(115,4)
	If id="" { Quit $$Error^%apiOBJ(5812) }
	Set sc=1
	If 'shared {
		Lock +(^User.testApiD(id)#"E"):timeout Quit:$t 1
		Quit $$Error^%apiOBJ(5803,id_":"_$classname())
	}
	Lock +(^User.testApiD(id)#"SE"):timeout Quit:$t 1
	Quit $$Error^%apiOBJ(5804,id_":"_$classname()) }
%OnDetermineClass(oid,class) public {
	Set id=$listget($get(oid))
	Quit:id="" $$Error^%apiOBJ(5812)
	Set idclass=$lg($get(^User.testApiD(id)),1)
	If idclass="" { Set class="User.testApi" Quit 1 }
	Set class=$piece(idclass,$extract(idclass),*-1)
	Set:class'["." class="User."_class
	QUIT 1 }
%PhysicalAddress(id,paddr)
	if $Get(id)="" Quit $$Error^%apiOBJ(5813,$classname())
	if (id="") { quit $$Error^%apiOBJ(5832,$classname(),id) }
	s paddr(1)=$lb($Name(^User.testApiD(id)),$classname(),"IDKEY","listnode",id)
	s paddr=1
	Quit 1
%PurgeIndices(idxlist="",lockExtent=0,pIgnoreIndexList="") public {
	If idxlist="" { Quit 1 }
	Quit $$Error^%apiOBJ(5066,$classname()_"::"_$ListToString(idxlist)) }
%SQLAcquireLock(%rowid,s=0,unlockref=0)
	new %d,gotlock
	set %d(1)=%rowid set s=$e("E",'unlockref)_$e("S",s)
	lock +^User.testApiD(%d(1))#s:$zu(115,4) set gotlock=$t
	if gotlock,'unlockref { set:$case($SYSTEM.Lock.ReturnCode(),2:1,4:1,:0)&&($tlevel) %0CacheLock("User.testApi","E")=1 }
	set:gotlock&&unlockref unlockref=unlockref+1,unlockref(unlockref)=$lb($name(^User.testApiD(%d(1))),"User.testApi",s_"D")
	QUIT gotlock
%SQLAcquireTableLock(s=0,SQLCODE,to="")
	set s=$e("S",s) set:to="" to=$zu(115,4) lock +^User.testApiD#s:to QUIT:$t 1 set SQLCODE=-110 if s="S" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler35",,"SQLUser"_"."_"testApi") } else { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler36",,"SQLUser"_"."_"testApi") } QUIT 0
	Return
%SQLBuildIndices(pIndices="",pLockFlag=0,pStartID="",pEndID="",pIgnoreIndexList="")
	QUIT ..%BuildIndices(pIndices,,pLockFlag,,pStartID,pEndID,pIgnoreIndexList)
%SQLBuildPurgeIndexForRow(pIndices="",pActions="BP",pLockRow=1,%d,%e,pIgnoreIndexList="")
	// Purge and build index nodes for a single row using given values, return Status Code
	new sn,tSC,tLock set tSC=1,pActions=$zcvt(pActions,"U")
	try {
		if $g(%d(1))="" { set tSC=$select(+tSC:$$Error^%apiOBJ(5521,-108,"RowID value must be specified in %d(1) when calling %SQLBuildPurgeIndexForRow for table 'SQLUser.testApi'"),1:$$AppendStatus^%occSystem(tSC,$$Error^%apiOBJ(5521,-108,"RowID value must be specified in %d(1) when calling %SQLBuildPurgeIndexForRow for table 'SQLUser.testApi'"))) RETURN tSC }
		if pLockRow { if '..%SQLAcquireLock(%d(1)) { set tSC=$select(+tSC:$$Error^%apiOBJ(5521,-114,"Unable to lock row in table 'SQLUser.testApi' with %ID = '"_%d(1)_"'"),1:$$AppendStatus^%occSystem(tSC,$$Error^%apiOBJ(5521,-114,"Unable to lock row in table 'SQLUser.testApi' with %ID = '"_%d(1)_"'"))) RETURN tSC  } else { set tLock=1 }}
		if pLockRow { do ..%SQLReleaseLock(%d(1),0,0) set tLock=0 }
	}
	catch {
		if $g(tLock) { do ..%SQLReleaseLock(%d(1),0,0) }
		set tSC=$select(+tSC:$$Error^%apiOBJ(5594,$ze),1:$$AppendStatus^%occSystem(tSC,$$Error^%apiOBJ(5594,$ze)))
	}
	QUIT tSC
%SQLCopyIcolIntoName()
	if %oper="DELETE" {
		set:$d(%d(1)) %f("ID")=%d(1)
		QUIT
	}
	set:$d(%d(1)) %f("ID")=%d(1) set:$a(%e,2)&&$d(%d(2)) %f("Adapter")=%d(2) set:$a(%e,3)&&$d(%d(3)) %f("x__classname")=%d(3)
	QUIT
%SQLDefineiDjVars(%d,subs,master)
	QUIT
%SQLDelete(%rowid,%check,%tstart=1,%mv=0,%polymorphic=0)
	// SQL DELETE method for table SQLUser.testApi
	new bva,ce,%d,dc,%e,%ele,%itm,%key,%l,%nc,omcall,%oper,%pos,%s,sn,sqlcode,subs set %oper="DELETE",sqlcode=0,%ROWID=%rowid,%d(1)=%rowid,%e(1)=%rowid,%l=$c(0)
	if '$d(%0CacheSQLRA) { new %0CacheSQLRA set omcall=1 }
	if '$a(%check,2) {
		new %ls lock +^User.testApiD(%d(1))#"E":$zu(115,4) set %ls=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,4:2,2:2,1:3,:""))
		set:%ls=2 $e(%check,2)=$c(1) set:%ls=2&&($tlevel) %0CacheLock("User.testApi","E")=1 set:$case(%ls,1:1,2:1,:0) $e(%l)=$c(1)
		if '%ls||(%ls=3) { set SQLCODE=-110,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer",$s('%ls:"SQLFiler40",1:"SQLFiler55"),,%oper,"SQLUser"_"."_"testApi",$g(%d(1))) RETURN  }
	}
	if %tstart { TSTART:($zu(115,1)=1)||('$TLEVEL&&($zu(115,1)=2))  }
	set $zt="ERRORDelete"
	do ..%SQLGetOld(%rowid,.%d,.%e,.sqlcode) if sqlcode { set SQLCODE=-106,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler58",,"SQLUser"_"."_"testApi",%rowid) do ..%SQLEExit() QUIT  }
	if %e(3)'="" { set sn=$p(%e(3),$e(%e(3)),$l(%e(3),$e(%e(3)))-1) if "testApi"'=sn { new %f do ..%SQLCopyIcolIntoName() do $classmethod(sn,"%SQLDelete",%rowid,%check,%tstart,%mv,1) QUIT  }}
	if '$a(%check),'$zu(115,7) do  if sqlcode set SQLCODE=sqlcode do ..%SQLEExit() QUIT  
	. new %fk,%k,%p,%st,%t,%z set %k="",%p("%1")="%d(1),",%p("IDKEY")="%d(1),"
	. for  quit:sqlcode<0  set %k=$o(^rINDEXEXT("F","User.testApi",%k)) quit:%k=""  set %t="" for  set %t=$o(^rINDEXEXT("F","User.testApi",%k,"f",%t)) quit:%t=""  set %st=(%t="User.testApi") set %fk="" for  set %fk=$o(^rINDEXEXT("F","User.testApi",%k,"f",%t,%fk)) quit:%fk=""  x "set %z=$classmethod(%t,%fk_""SQLFKeyRefAction"",%st,%k,$a(%check,2),"_%p(%k)_")" if %z set sqlcode=-124 quit  
	set ce="" for  { set ce=$order(^oddSQL("SQLUser","testApi","DC",ce)) quit:ce=""   do $classmethod(ce,"%SQLDeleteChildren",%d(1),%check,.sqlcode) quit:sqlcode<0  } if sqlcode<0 { set SQLCODE=sqlcode do ..%SQLEExit() QUIT } // Delete any children
	if '$a(%check,3) {
	}
	k ^User.testApiD(%d(1))
	do ..%SQLUnlock() TCOMMIT:%tstart&&($zu(115,1)=1)
	set SQLCODE=0 kill:$g(omcall) %0CacheSQLRA
	QUIT
ERRORDelete	set $zt="",SQLCODE=-415,%msg=$s($g(%msg)'="":%msg_" -- ",1:"")_$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler51",,%oper,"SQLUser"_"."_"testApi",$ze) if $ze["<FRAMESTACK>" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler52",,$ze,%oper,"SQLUser"_"."_"testApi") do ##Class(%SYS.System).WriteToConsoleLog(%msg) if ($zu(67,10,$j)=1)||($zu(67,10,$j)=3) { write !,%msg h 3 } HALT  } do ..%SQLEExit() QUIT
	Return
%SQLDeleteTempStreams()
	// Delete all temporary streams
	QUIT
%SQLEExit()
	do ..%SQLUnlock() 
	if %tstart,$zu(115,1)=1,$TLEVEL { set %tstart=0 TROLLBACK 1 } kill:$g(omcall) %0CacheSQLRA QUIT  
	Return
%SQLExists(pLockOnly=0,pUnlockRef,%pVal...)
	// SQL Foreign Key validation entry point for Key %1.  Called by FKeys that reference this Key to see if the row is defined
	new id set id=%pVal(1)
	if pLockOnly>=0 { if '..%SQLGetLock(id,1,.pUnlockRef) { set sqlcode=-114,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler39",,"SQLUser"_"."_"testApi"_":"_"%1") QUIT 0 } }
	if pLockOnly<1 {
		new qv set qv=$d(^User.testApiD(%pVal(1))) QUIT:pLockOnly=-1 qv
		do:'$g(pUnlockRef) ..%SQLReleaseLock(id,1) quit qv
	}
	else { do:'$g(pUnlockRef) ..%SQLReleaseLock(id,1) QUIT 1 }
	Return
%SQLGetLock(pRowId,pShared=0,pUnlockRef)
	QUIT ..%SQLAcquireLock(pRowId,pShared,.pUnlockRef)
%SQLGetOld(%rowid,%d,%e,sqlcode)
	new s set %d(1)=%rowid,s="" if '$d(^User.testApiD(%d(1)),s) { set sqlcode=100 quit  }
	 S %e(3)=$lg(s)
	QUIT
%SQLGetOldAll()
	new s set %d(1)=%rowid,s="" if '$d(^User.testApiD(%d(1)),s) { set sqlcode=100 quit  }
	 S %e(3)=$lg(s),%e(2)=$lg(s,2)
	QUIT
%SQLInsert(%d,%check,%inssel,%vco,%tstart=1,%mv=0)
	// SQL INSERT method for table SQLUser.testApi
	new bva,%ele,%itm,%key,%f,%l,%n,%nc,%oper,%pos,%s,sqlcode,sn,subs,icol set %oper="INSERT",sqlcode=0,%l=$c(0,0,0)
	if $a(%check,7) { new %diu merge %diu=%d }
	if $d(%d(1)),'$zu(115,11) { if %d(1)'="" { set SQLCODE=-111,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler6",,"ID","SQLUser"_"."_"testApi") RETURN ""  } kill %d(1) } 
	if %tstart { TSTART:($zu(115,1)=1)||('$TLEVEL&&($zu(115,1)=2))  } set $zt="ERRORInsert"
	if '$a(%check) {
		do {
			if $g(%vco)'="" { d @%vco quit:sqlcode<0  }
		} while 0
		if sqlcode<0 { set SQLCODE=sqlcode do ..%SQLEExit() RETURN "" }		// A constraint failed
	}
	if '$d(%d(1)) { set %d(1)=$i(^User.testApiD) } elseif %d(1)>$g(^User.testApiD) { if $i(^User.testApiD,$zabs(%d(1)-$g(^User.testApiD))) {}} elseif $d(^User.testApiD(%d(1))) { set SQLCODE=-119,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler33",,"ID",%d(1),"SQLUser"_"."_"testApi"_"."_"ID") do ..%SQLEExit() RETURN "" }
	set:'($d(%d(3))#2) %d(3)=""
	if '$a(%check,2) {
		new %ls lock +^User.testApiD(%d(1))#"E":$zu(115,4) set %ls=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,4:2,2:2,1:3,:""))
		set:%ls=2 $e(%check,2)=$c(1) set:%ls=2&&($tlevel) %0CacheLock("User.testApi","E")=1 set:$case(%ls,1:1,2:1,:0) $e(%l)=$c(1)
		if '%ls||(%ls=3) { set SQLCODE=-110,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer",$s('%ls:"SQLFiler40",1:"SQLFiler55"),,%oper,"SQLUser"_"."_"testApi",$g(%d(1))) do ..%SQLEExit() RETURN ""  }
	}
	set ^User.testApiD(%d(1))=$lb(%d(3),%d(2))
	lock:$a(%l) -^User.testApiD(%d(1))#"E"
	TCOMMIT:%tstart&&($zu(115,1)=1)
	set SQLCODE=0
	QUIT %d(1) 			// %SQLInsert
ERRORInsert	set $zt="",SQLCODE=-415,%msg=$s($g(%msg)'="":%msg_" -- ",1:"")_$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler51",,%oper,"SQLUser"_"."_"testApi",$ze)
	if $ze["<FRAMESTACK>" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler52",,$ze,%oper,"SQLUser"_"."_"testApi") do ##Class(%SYS.System).WriteToConsoleLog(%msg) if ($zu(67,10,$j)=1)||($zu(67,10,$j)=3) { write !,%msg h 3 } HALT  }
	do ..%SQLEExit()
	RETURN ""
%SQLMissing(fname)
	set sqlcode=-108,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler47",,fname,"SQLUser"_"."_"testApi") quit
%SQLPurgeIndices(pIndices="",pLockExtent=0,pIgnoreIndexList="")
	QUIT ..%PurgeIndices(pIndices,pLockExtent,pIgnoreIndexList)
%SQLQuickLoad(%rowid,%nolock=0,pkey=0,qq=0)
	// Get fields from row where SQLRowID=%rowid
	new d,i,il,subs set:%nolock=2 %nolock=1
	if %nolock=0 { if '..%SQLAcquireLock(%rowid) { set %qrc=114,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler45",,"SQLUser"_"."_"testApi",%rowid),%ROWCOUNT=0 QUIT  } set:$zu(115,2) il=$zu(115,2,0) }
	new s,ul set ul=0,d(1)=%rowid if $zu(115,2)=1 { lock +^User.testApiD(d(1))#"S":$zu(115,4) if $t { set ul=1 } else { set %qrc=114,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler46",,"SQLUser"_"."_"testApi",%rowid),%ROWCOUNT=0 quit  } }
	if '$d(^User.testApiD(d(1)),s) { set SQLCODE=100,%qrc=100 if %nolock=0 { do:$g(il) $zu(115,2,il) }} else { set SQLCODE=0
	if qq { set d(3)=$lg(s) if d(3)'="" { new sn set sn=$p(d(3),$e(d(3)),$l(d(3),$e(d(3)))-1) if "testApi"'=sn { if %nolock=0 { do ..%SQLReleaseLock(%rowid,0,1) do:$g(il) $zu(115,2,il) } kill d set:sn'["." sn="User."_sn do $classmethod(sn,"%SQLQuickLoad",%rowid,%nolock,0,1) QUIT  }}}
	set d(2)=$lg(s,2) set d(3)=$lg(s)  }
	do ..%SQLQuickLogicalToOdbc(.d)
	if SQLCODE set %ROWCOUNT=0 set:SQLCODE<0 SQLCODE=-SQLCODE lock:ul -^User.testApiD(d(1))#"SI" set %qrc=SQLCODE QUIT
	set:qq d=$zobjexport("User.testApi",18),d=$zobjexport(3,18) set i=-1 for  { set i=$o(d(i)) quit:i=""  set d=$zobjexport(d(i),18) } set %qrc=0,%ROWCOUNT=1 lock:ul -^User.testApiD(d(1))#"SI" if %nolock=0 { do ..%SQLReleaseLock(%rowid,0,0) do:$g(il) $zu(115,2,il) } QUIT
	Return
%SQLReleaseLock(%rowid,s=0,i=0,e="")
	new %d
	set:e="" e=1 set %d(1)=%rowid set s=$e("E",e)_$e("S",s)_$e("D",i)
	lock -^User.testApiD(%d(1))#s
	QUIT
%SQLReleaseTableLock(s=0,i=0)
	set s=$e("S",s)_$e("D",i) lock -^User.testApiD#s QUIT 1
	Return
%SQLUnlock()
	lock:$a(%l) -^User.testApiD(%d(1))#"E"
	QUIT
%SQLUnlockError(cname)
	set sqlcode=-110 if %oper="DELETE" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler48",,"SQLUser"_"."_"testApi",cname) } else { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler49",,"SQLUser"_"."_"testApi",cname) } quit
	Return
%SQLUpdate(%rowid,%check,%d,%vco,%tstart=1,%mv=0,%polymorphic=0,%soid)
	// SQL UPDATE method for table SQLUser.testApi
	new %e,bva,%ele,%itm,%key,%f,%l,%n,%nc,%oper,%pos,%s,icol,omcall,s,sn,sqlcode,subs,t set %oper="UPDATE",sqlcode=0,%ROWID=%rowid,$e(%e,1)=$c(0),%l=$c(0,0,0)
	if '$d(%0CacheSQLRA) { new %0CacheSQLRA set omcall=1 }
	if $d(%d(1)),%d(1)'=%rowid { set SQLCODE=-107,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler16",,"ID","SQLUser"_"."_"testApi") QUIT  }
	for icol=2:1:3 { set $e(%e,icol)=$c($d(%d(icol))) }
	set %d(1)=%rowid,%e(1)=%rowid
	if '$a(%check,2) {
		new %ls lock +^User.testApiD(%d(1))#"E":$zu(115,4) set %ls=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,4:2,2:2,1:3,:""))
		set:%ls=2 $e(%check,2)=$c(1) set:%ls=2&&($tlevel) %0CacheLock("User.testApi","E")=1 set:$case(%ls,1:1,2:1,:0) $e(%l)=$c(1)
		if '%ls||(%ls=3) { set SQLCODE=-110,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer",$s('%ls:"SQLFiler40",1:"SQLFiler55"),,%oper,"SQLUser"_"."_"testApi",$g(%d(1))) RETURN  }
	}
	if %tstart { TSTART:($zu(115,1)=1)||('$TLEVEL&&($zu(115,1)=2))  }
	set $zt="ERRORUpdate"
	if $g(%vco)="" { do ..%SQLGetOld(%rowid,.%d,.%e,.sqlcode) i sqlcode { s SQLCODE=-109,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler59",,"SQLUser"_"."_"testApi",%rowid) do ..%SQLEExit() QUIT  } set:'$d(%d(3)) %d(3)=%e(3) set:%d(3)=%e(3) $e(%e,3)=$c(0) } else { do ..%SQLGetOldAll() if sqlcode { set SQLCODE=-109,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler59",,"SQLUser"_"."_"testApi",%rowid) do ..%SQLEExit() QUIT  } for icol=2,3 { set:'$d(%d(icol)) %d(icol)=%e(icol) set:%d(icol)=%e(icol) $e(%e,icol)=$c(0) }}
	if %e(3)'="" set sn=$p(%e(3),$e(%e(3)),$l(%e(3),$e(%e(3)))-1) if "testApi"'=sn new %f do ..%SQLCopyIcolIntoName() do $classmethod(sn,"%SQLUpdate",%rowid,%check,.%d,$g(%vco),%tstart,%mv,1) QUIT
	if '$a(%check) {
		do {
			if $g(%vco)'="" { d @%vco quit:sqlcode<0  }
		} while 0
		if sqlcode { set SQLCODE=sqlcode do ..%SQLEExit() QUIT  }
	}
	if $a(%e,2)||$a(%e,3) {
		set ^User.testApiD(%d(1))=$listupdate($g(^User.testApiD(%d(1))),1,$a(%e,3):%d(3),$a(%e,2):%d(2))
	}
	do ..%SQLUnlock() TCOMMIT:%tstart&&($zu(115,1)=1)
	set SQLCODE=0 kill:$g(omcall) %0CacheSQLRA
	QUIT
ERRORUpdate	set $zt="",SQLCODE=-415,%msg=$s($g(%msg)'="":%msg_" -- ",1:"")_$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler51",,%oper,"SQLUser"_"."_"testApi",$ze) if $ze["<FRAMESTACK>" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler52",,$ze,%oper,"SQLUser"_"."_"testApi") do ##Class(%SYS.System).WriteToConsoleLog(%msg) if ($zu(67,10,$j)=1)||($zu(67,10,$j)=3) { write !,%msg h 3 } HALT  } do ..%SQLEExit() QUIT  
	Return
%SQLnBuild() public {
	set %n=$lb(,"ID","Adapter","x__classname")
	QUIT }
%Save(related=1) public {
	Set $ZTrap="%SaveERR"
	New %objTX Set sc=1,traninit=0 If '$data(%objTX2) New %objTX2 Set %objTX2=1
	If +$g(%objtxSTATUS)=0 { Set traninit=1 k %objtxSTATUS,%objtxLIST,%objtxOIDASSIGNED,%objtxOIDUNASSIGNED,%objtxMODIFIED,%objtxVERSION k:'$TLevel %objtxTID,%objtxID i '$zu(115,9) { s %objtxSTATUS=1 } else { TStart  s %objtxSTATUS=2 } }
	If $get(%objTX2(+$this)) Set sc=..%BuildObjectGraph(1) Quit:('sc) sc Set intRef=+$this,objValue=$get(%objTX(1,+$g(%objTX(0,intRef)),1)),sc=..%SerializeObject(.objValue,1) Set:(''sc) %objTX(1,%objTX(0,intRef),1)=objValue Quit sc
	Set sc=..%BuildObjectGraph(related+2) If ('sc) ZTrap "SG"
	If '$data(%objTX(2)) s sc=1 GoTo %SaveCOMMIT
	Set %objTX(3)=0,i="" For  Set i=$order(%objTX(2,i),1,data) Quit:i=""  Set intRef=$li(data) If '$data(%objTX(1,+$g(%objTX(0,intRef)),2)) Set %objTX(3,$increment(%objTX(3)))=%objTX(1,%objTX(0,intRef)) Kill %objTX(2,i),%objTX(11,intRef)
	For ptr=1:1 Quit:ptr>%objTX(3)  Set objRef=%objTX(3,ptr),objValue=$get(%objTX(1,+$g(%objTX(0,+objRef)),1)),sc=objRef.%SerializeObject(.objValue) Do  Set %objTX(1,%objTX(0,+objRef),1)=objValue Kill %objTX(1,%objTX(0,+objRef),3) Do $system.CLS.SetModified(objRef,0)
	. If ('sc) ZTrap "SG"
	. i $g(%objtxSTATUS)=2 { Set %objtxMODIFIED(+objRef)=$system.CLS.GetModifiedBits(objRef) }
	. Set intSucc="" For  Set intSucc=$order(%objTX(1,%objTX(0,+objRef),3,intSucc)) Quit:intSucc=""  Kill %objTX(1,%objTX(0,+objRef),3,intSucc),%objTX(1,intSucc,2,%objTX(0,+objRef)) If '$data(%objTX(1,intSucc,2)) Set %objTX(3,$increment(%objTX(3)))=%objTX(1,intSucc) Kill:$d(%objTX(11,+%objTX(1,intSucc))) %objTX(2,%objTX(11,+%objTX(1,intSucc))),%objTX(11,+%objTX(1,intSucc))
	Kill %objTX(3) Set %objTX(3)=0 For  Set pserial=0 Do  Quit:'pserial
	. Set i="" For  Set i=$order(%objTX(2,i),1,data) Quit:i=""  Set intPred="",intRef=$li(data) For  Set intPred=$order(%objTX(1,%objTX(0,intRef),2,intPred)) Quit:intPred=""  If $get(%objTX(1,intPred,6))=1 Set objValue=$get(%objTX(1,intPred,1)),sc=(%objTX(1,intPred)).%SerializeObject(.objValue,1) If ('sc) { If $d(%objTX(11,+%objTX(1,intPred))) { Set %objTX(2,%objTX(11,+%objTX(1,intPred)),1)=sc } Else { Set %objTX(2,$i(%objTX(2)),1)=sc,%objTX(11,+%objTX(1,intPred))=%objTX(2) } } If (''sc) Set pserial=1,%objTX(1,intPred,1)=objValue Do
	. . Set intSucc="" For  Set intSucc=$order(%objTX(1,intPred,3,intSucc)) Quit:intSucc=""  Kill %objTX(1,intPred,3,intSucc),%objTX(1,intSucc,2,intPred) If '$data(%objTX(1,intSucc,2)) Set %objTX(3,$i(%objTX(3)))=%objTX(1,intSucc) Kill:$d(%objTX(11,+%objTX(1,intSucc))) %objTX(2,%objTX(11,+%objTX(1,intSucc))),%objTX(11,+%objTX(1,intSucc))
	. . For ptr=1:1 Quit:ptr>%objTX(3)  Set objSerialize=%objTX(3,ptr),objValue=$get(%objTX(1,+$g(%objTX(0,+objSerialize)),1)),sc=objSerialize.%SerializeObject(.objValue) Do  Set %objTX(1,%objTX(0,+objSerialize),1)=objValue Kill %objTX(1,%objTX(0,+objSerialize),3) Do $system.CLS.SetModified(objSerialize,0)
	. . . If ('sc) ZTrap "SG"
	. . . i $g(%objtxSTATUS)=2 { Set %objtxMODIFIED(+objSerialize)=$system.CLS.GetModifiedBits(objSerialize) }
	. . . Set intSucc="" For  Set intSucc=$order(%objTX(1,%objTX(0,+objSerialize),3,intSucc)) Quit:intSucc=""  Kill %objTX(1,%objTX(0,+objSerialize),3,intSucc),%objTX(1,intSucc,2,%objTX(0,+objSerialize)) If '$data(%objTX(1,intSucc,2)) Set %objTX(3,$i(%objTX(3)))=%objTX(1,intSucc) Kill:$d(%objTX(11,+%objTX(1,intSucc))) %objTX(2,%objTX(11,+%objTX(1,intSucc))),%objTX(11,+%objTX(1,intSucc))
	. . Kill %objTX(3) Set %objTX(3)=0
	If $data(%objTX(2))>2 {
		Set sc=$$Error^%apiOBJ(5827,$classname())
		set i="" for  set i=$order(%objTX(2,i)) quit:i=""  if ('$Get(%objTX(2,i,1),1)) set sc=$$EmbedStatus^%apiOBJ(sc,%objTX(2,i,1))
	 	ZTrap "SG"
	}
	Set cmd="" For  Set cmd=$order(%objTX(9,cmd)) Quit:cmd=""  Xecute cmd
%SaveCOMMIT	If traninit { i $g(%objtxSTATUS)=1 { k %objtxSTATUS } else { If $Tlevel { TCommit  } k %objtxSTATUS,%objtxLIST,%objtxOIDASSIGNED,%objtxOIDUNASSIGNED,%objtxMODIFIED,%objtxVERSION k:'$TLevel %objtxTID,%objtxID } }
	Do $system.CLS.SetModified(0) Quit sc
%SaveERR	Set $ZTrap="" If $extract($zerror,1,5)'="<ZSG>" Set sc=$$Error^%apiOBJ(5002,$ZE)
	If $get(traninit) { i $g(%objtxSTATUS)=2 { s sc=$select(+sc:$$%TRollBack^%occTransaction(),1:$$AppendStatus^%occSystem(sc,$$%TRollBack^%occTransaction())) k %objtxTID,%objtxID } else { k %objtxSTATUS } }
	Quit sc }
%SaveData(id) public {
	try {
		set id=$listget(i%"%%OID") if id'="" { set insert=0,idassigned=1 } else { set insert=1,idassigned=0 }
		set lock=0,lockok=0,tSharedLock=0
		if 'idassigned { set id=$i(^User.testApiD) do ..%IdSet(id) set:$g(%objtxSTATUS)=2 %objtxOIDASSIGNED(+$this)="" }
		try {
			set tInnerException = ""
			;
			if 'insert {
				if (i%%Concurrency<4)&&(i%%Concurrency) { lock +(^User.testApiD(id)#"E"):$zu(115,4) set lockok=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,2:2,4:2,:0)) set:lockok=2&&($tlevel) %0CacheLock($classname(),"E")=1 if lockok { set lock=1 } else { Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5803,$classname())) } }
				if ('$Data(^User.testApiD(id))) {
					set insert=1
					if lock { lock -(^User.testApiD(id)#"E") set (lock,lockok) = 0 }
				}
			}
			if insert {
				if ('lockok&&..%Concurrency&&$tlevel)||(i%%Concurrency=4) {  lock +(^User.testApiD(id)#"E"):$zu(115,4) set lockok=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,2:2,4:2,:0)) set:(lockok=2&&(i%%Concurrency'=4)) %0CacheLock($classname(),"E")=1 set:lockok lock=1 if 'lockok { Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5803,$classname())) } }
				if i%%Concurrency=3 { lock +(^User.testApiD(id)#"ES") set tSharedLock=1 }
				set ^User.testApiD(id)=$lb("",i%Adapter)
			}
			else {
				set ^User.testApiD(id)=$lb("",i%Adapter)
			}
			set tStatus = 1
		}
		catch tInnerException {
			if ('idassigned) { Set $zobjoid("",$listget(i%"%%OID"))="",i%"%%OID"="" kill:$g(%objtxSTATUS)=2 %objtxOIDASSIGNED(+$this) }
			if (tSharedLock) {  lock -(^User.testApiD(id)#"ES") } elseif (lockok=1)&&(insert)&&(i%%Concurrency=4) {  lock -(^User.testApiD(id)) }
		}
		if lock lock -(^User.testApiD(id)#"E")
		if $Isobject(tInnerException) { throw tInnerException }
	}
	catch tException {
		set tStatus = tException.AsStatus()
	}
	quit tStatus }
%SaveDirect(id="",idList="",data,concurrency=-1) public {
	try {
		if concurrency=-1 { set concurrency=$zu(115,10) }
		if id'="" { set insert=0,idassigned=1 } else { set insert=1,idassigned=0 }
		set lock=0,tSharedLock=0
		if 'idassigned { set id=$i(^User.testApiD) }
		try {
			set tInnerException = ""
			;
			if 'insert {
				if concurrency { lock +(^User.testApiD(id)#"E"):$zu(115,4) set lock=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,2:2,4:2,:0)) set:lock=2&&($tlevel) %0CacheLock($classname(),"E")=1 if 'lock { Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5803,$classname())) } }
				if ('$Data(^User.testApiD(id))) {
					set insert=1
					if lock { lock -(^User.testApiD(id)#"E") set (lock,lockok) = 0 }
				}
			}
			if insert {
				if concurrency { lock +(^User.testApiD(id)#"E"):$zu(115,4) set lock=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,2:2,4:2,:0)) set:lock=2&&($tlevel) %0CacheLock($classname(),"E")=1 if 'lock { Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5803,$classname())) } }
				set ^User.testApiD(id)=data
			}
			else {
				set ^User.testApiD(id)=data
			}
			set tStatus = 1
		}
		catch tInnerException {
		}
		if lock lock -(^User.testApiD(id)#"E")
		if $Isobject(tInnerException) { throw tInnerException }
	}
	catch tException {
		set tStatus = tException.AsStatus()
	}
	quit tStatus }
%SaveIndices(pStartId="",pEndId="",lockExtent=0) public {
	Quit 1 }
%SerializeObject(serial,partial=0) public {
	try {
		If $get(%objTX2(+$this)) { Set partial = 1 } ElseIf ('partial) { Set %objTX2(+$this) = 1 }
		Set sc=..%ValidateObject(,0) Throw:('sc) ##class(%Exception.StatusException).ThrowIfInterrupt(sc)
		Set sc=..%NormalizeObject() Throw:('sc) ##class(%Exception.StatusException).ThrowIfInterrupt(sc)
		s:$g(%objtxSTATUS)=2 %objtxLIST(+$this)=$this
		Set id=$listget(serial),sc=..%SaveData(.id) If ('sc) { Throw ##class(%Exception.StatusException).ThrowIfInterrupt(sc) }
		Set serial=(..%Oid())
		if 'partial {
			Set %objTX2(+$this) = 0
		}
		set sc=1
	}
	catch tException {
		If 'partial { Set %objTX2(+$this) = 0 }
		set sc = tException.AsStatus()
	}
	Quit sc }
%AddToSaveSet(depth=3,refresh=0) public {
	If $data(%objTX(0,+$this)) && ('refresh) Quit 1
	Set sc=1,intOref=+$this
	If refresh,$data(%objTX(0,intOref),index) Set intPoref="" For  Set intPoref=$order(%objTX(1,index,2,intPoref)) Quit:intPoref=""  Kill %objTX(1,%objTX(0,intPoref),3,index),%objTX(1,index,2,%objTX(0,intPoref))
	Set serial=i%"%%OID",%objTX(0,intOref)=$i(%objTX(1)),%objTX(1,%objTX(1))=$this,%objTX(1,%objTX(1),1)=serial,%objTX(1,%objTX(1),6)=1 If (serial '= "") && (depth<2) { Quit 1 } Else { Set %objTX(7,%objTX(1))=$lb(intOref,1) }
	Set Poref=r%Adapter If Poref'="",'$data(%objTX(0,+Poref)) Set %objTX(6,$i(%objTX(6)))=Poref
exit	Quit sc }
%SortBegin(idxlist="",excludeunique=0)
	Quit 1
%SortEnd(idxlist="",commit=1,excludeunique=0) public {
	Quit 1 }
%UnlockExtent(shared=0,immediate=0) public {
	If 'shared {
		If 'immediate {
			Lock -^User.testApiD
			 Quit 1
		}
		Lock -^User.testApiD#"I"
		Quit 1
	}
	If 'immediate {
		Lock -^User.testApiD#"S"
		Quit 1
	}
	Lock -^User.testApiD#"SI"
	Quit 1 }
%UnlockId(id,shared=0,immediate=0) public {
	If 'shared {
		If 'immediate {
			Lock -(^User.testApiD(id)#"E")
			Quit 1
		}
		Lock -(^User.testApiD(id)#"IE")
		Quit 1
	}
	If 'immediate {
		Lock -(^User.testApiD(id)#"SE")
		Quit 1
	}
	Lock -(^User.testApiD(id)#"SIE")
	Quit 1 }
%ValidateIndices(idxList="",autoCorrect=0,lockOption=1,multiProcess=1,mapList,verbose=1,errors)
	w !,"There are no indices to validate for class 'User.testApi'"
	QUIT 1
zApi() public {
	set Data = ##class(EnsLib.HTTP.OutboundAdapter).%New()
	do Data.GetURL("http://26ef06b0-0cda-41dd-9e8b-02b3a7e81e40.mock.pstmn.io/Peter")
	Write Data.%ToJSON() }
zAdapterGetStored(id) public {
	Quit $Select(id'="":$listget($g(^User.testApiD(id)),2),1:"") }
zAdapterNewObject() public {
	Set newobject=##class(EnsLib.HTTP.OutboundAdapter).%New() If newobject="" Quit ""
	Set ..Adapter=newobject
	Quit newobject }
zExtentClose(%qHandle) [ SQLCODE ] public {
	New SQLCODE
	Do %qHandle.%Destruct() Kill %qHandle
	If SQLCODE { Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.%Message=$g(%msg) Set sc=$$Error^%apiOBJ(5540,SQLCODE,$get(%msg)) } Else { Set sc=1 }
	Quit sc }
zExtentExecute(%qHandle) [ SQLCODE ] public { New %ROWCOUNT,%ROWID,%msg,SQLCODE 
	Set sc=1
	 ;---&sql(DECLARE QExtent CURSOR FOR
 	 ;---		 SELECT ID FROM SQLUser.testApi)
 	 ;--- ** SQL PUBLIC Variables: SQLCODE
	 
	 ;---&sql(OPEN QExtent)
	try { s %qHandle="",%qHandle=$classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xEEYhfiz7KBAUC9txceiLmWalrm2","%New") if '$isobject(%qHandle) s %qHandle=$$%0dsqlD() } catch { if $ze["<CLASS DOES NOT EXIST>"&&($ze["%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xEEYhfiz7KBAUC9txceiLmWalrm2")||($ze["<ZSQLU>") { s %qHandle=$$%0dsqlD() } else { throw } }
	If SQLCODE { Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.%Message=$g(%msg) Set sc=$$Error^%apiOBJ(5821,"SQLCODE = "_SQLCODE) } Else { Set sc=1 }
	Quit sc }
zExtentFetch(%qHandle,Row,AtEnd=0) [ SQLCODE ] public { New %ROWCOUNT,%ROWID,%msg,SQLCODE 
	Set Row="",AtEnd=0
	 ;---&sql(FETCH QExtent INTO :c1)
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE
	if $isobject($g(%qHandle))'=1 { s SQLCODE=-102 } else { do %qHandle.FET() if SQLCODE=0 { s c1=%qHandle.sqlcol1 } }
	If 'SQLCODE { Set Row=$lb(c1) Set sc=1 }
	ElseIf SQLCODE=100 { Set AtEnd=1,sc=1 Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.%ROWCOUNT=$g(%ROWCOUNT) }
	Else { Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.Message=$g(%msg) Set AtEnd=1,sc=$$Error^%apiOBJ(5540,SQLCODE,$get(%msg)) }
	QUIT sc }
zExtentFetchRows(%qHandle,FetchCount=0,RowSet,ReturnCount,AtEnd) [ SQLCODE ] public { New %ROWCOUNT,%ROWID,%msg,SQLCODE 
	Set RowSet="",ReturnCount=0,AtEnd=0
	For {
		 ;---&sql(FETCH QExtent INTO :c1)
 		 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE
		if $isobject($g(%qHandle))'=1 { s SQLCODE=-102 } else { do %qHandle.FET() if SQLCODE=0 { s c1=%qHandle.sqlcol1 } }
		If 'SQLCODE { Set RowSet=RowSet_$lb(c1),ReturnCount=ReturnCount+1 Quit:(ReturnCount=FetchCount)||(($l(RowSet)+($l(RowSet)\ReturnCount))>24000) } Else { Set AtEnd=1 Quit }
	}
	If 'SQLCODE { Set sc=1 } ElseIf SQLCODE=100 { Set sc=1 Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.%ROWCOUNT=$g(%ROWCOUNT) } Else { Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.Message=$g(%msg) Set sc=$$Error^%apiOBJ(5540,SQLCODE,$get(%msg)) }
	Quit sc }
zExtentSendODBC(%qHandle,array,qacn,%qrc,piece,ColumnCount) [ SQLCODE ] public { New %ROWCOUNT,%ROWID,%msg,SQLCODE 
	set %qrc=0,piece=0
	for {
		set rc=..ExtentFetch(.%qHandle,.row,.atend)
		if ('rc) { set %qrc=-400 set:$isobject($get(%sqlcontext)) %sqlcontext.SQLCode=-400,%sqlcontext.Message=$g(%msg) do ProcessError^%ourProcedure(rc,$get(%sqlcontext),.%qrc,.%msg),Logerr^%SYS.SQLSRV(%qrc,"","SP",.%msg) RETURN  }
		if row="" { set %qrc=100 set:$isobject($get(%sqlcontext)) %sqlcontext.SQLCode=100 RETURN  }
		if $g(%protocol)>50 { RETURN:$zobjexport(row,60) }
		else {
			if %protocol>46 { for piece=1:1:ColumnCount { goto:$zobjexport($lg(row,piece),50) SPDone } }
			else { for piece=1:1:ColumnCount { goto:$zobjexport($lg(row,piece),7) SPDone } }
		}
	}
	QUIT
SPDone	set:%protocol>46 piece=piece+1
	kill array(qacn)
	for i=piece:1:ColumnCount { set array(qacn,i)=$lg(row,i) }
	QUIT }
 q
%0dsqlD()	n %xxsql
	s %xxsql("S",1)="DECLARE QExtent CURSOR FOR SELECT ID "
	s %xxsql("S",2)="INTO  :i%sqlcol1"
	s %xxsql("S",3)="FROM SQLUser . testApi"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("I","%occSqlfunc")="",%xxsql("NS")="PROJECT1"
	return $$BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Runtime","","","User",0,"",),",1,QExtent,","User.testApi.CLS",1)
zExtentFunc() public {
	try {
		set tSchemaPath = ##class(%SQL.Statement).%ClassPath($classname())
			set tStatement = ##class(%SQL.Statement).%New(,tSchemaPath)
			do tStatement.prepare(" SELECT ID FROM SQLUser . testApi")
		set tResult = tStatement.%Execute()
	}
	catch tException { if '$Isobject($Get(tResult)) { set tResult = ##class(%SQL.StatementResult).%New() } set tResult.%SQLCODE=tException.AsSQLCODE(),tResult.%Message=tException.AsSQLMessage() }
	Quit tResult }
zExtentGetInfo(colinfo,parminfo,idinfo,%qHandle,extoption=0,extinfo) public {
 s parminfo=""
	s:'($d(^oddCOM($classname(),"q","Extent",21),clientinfo)#2)&&'$s($d(^(2),clientinfo)#2&&(clientinfo'=$classname()):$d(^oddCOM(clientinfo,"q","Extent",21),clientinfo)#2||($d(^oddDEF(clientinfo,"q","Extent",21),clientinfo)#2),1:$d(^oddDEF($classname(),"q","Extent",21),clientinfo)#2) clientinfo=""
	Set:extoption extinfo=$s($d(^oddCOM($classname(),"q","Extent",38))#2:^(38),$d(^oddCOM($g(^(2),$classname()),"q","Extent",38))#2:^(38),1:$s($d(^oddDEF($g(^oddCOM($classname(),"q","Extent",2),$classname()),"q","Extent",38))#2:^(38),1:""))
	If clientinfo'="" Set colinfo=$listget(clientinfo,1),parminfo=$listget(clientinfo,2),idinfo=$listget(clientinfo,3) Quit 1
	Set colinfo="",parminfo="",idinfo=$listbuild(0)
	Set sc=$$externaltype^%apiOLE("%Library.Integer",.exttypes,"0")
	Quit:('sc) sc
	s:'($d(^oddCOM($classname(),"q","Extent",23),names)#2)&&'$s($d(^(2),names)#2&&(names'=$classname()):$d(^oddCOM(names,"q","Extent",23),names)#2||($d(^oddDEF(names,"q","Extent",23),names)#2),1:$d(^oddDEF($classname(),"q","Extent",23),names)#2) names=""
	s:'($d(^oddCOM($classname(),"q","Extent",22),captions)#2)&&'$s($d(^(2),captions)#2&&(captions'=$classname()):$d(^oddCOM(captions,"q","Extent",22),captions)#2||($d(^oddDEF(captions,"q","Extent",22),captions)#2),1:$d(^oddDEF($classname(),"q","Extent",22),captions)#2) captions=""
	For i=1:1:1 Set colinfo=colinfo_$listbuild($listbuild($listget(names,i),$piece(exttypes,",",i),$listget(captions,i)))
	Set idinfo=$listbuild(1,$classname())
	s ^oddCOM($classname(),"q","Extent",21)=$listbuild(colinfo,parminfo,idinfo)
	Quit 1 }
zExtentGetODBCInfo(colinfo,parminfo,qHandle) public {
	set version = $Select($Get(%protocol,41)>40:4,1:3)
	Set metadata=$lb(1,1,"ID",4,10,0,2,"ID","testApi","SQLUser","",$c(0,0,0,0,0,0,0,0,0,0,0,1),0)
	Set colcount=$li(metadata,2),cmdlen=colcount*10,parmcount=$li(metadata,3+cmdlen),pmdlen=parmcount*6,parminfo=$li(metadata,cmdlen+3,cmdlen+pmdlen+3)
	If version=4 {
		Set colinfo=$li(metadata,2,2+cmdlen)
	} Else {
		Set colinfo=$li(metadata,2,2)
		For i=0:1:colcount-1 Set colinfo=colinfo_$list(metadata,3+(i*10),11+(i*10))
	}
	Quit 1 }
zIDKEYCheck(K1,lockonly=0,concurrency=-1) public {
	s id=K1,exists=..%ExistsId(id) q:'exists $s('lockonly:$$Error^%apiOBJ(5797,$classname(),"IDKEY",id),1:1) s:concurrency=-1 concurrency=$select(..#DEFAULTCONCURRENCY="$zu(115,10)":$zu(115,10),1:$xecute("q "_..#DEFAULTCONCURRENCY)) if concurrency { s status=..%LockId(id,1) q:('status) status } if 'lockonly { s exists=..%ExistsId(id) d:concurrency ..%UnlockId(id,1,0) quit $s('exists:$$Error^%apiOBJ(5797,$classname(),"IDKEY",id),1:1) } else { d:concurrency ..%UnlockId(id,1,0) q 1 }
}
zIDKEYDelete(K1,concurrency=-1) public {
	Quit ..%DeleteId(.K1,concurrency) }
zIDKEYExists(K1,id="") public {
	s id=K1 q ..%ExistsId(K1) }
zIDKEYOpen(K1,concurrency=-1,sc) public { s:'($d(sc)#2) sc=1
	Quit ..%OpenId(.K1,concurrency,.sc) }
zIDKEYSQLCheckUnique(pFromOrig=0,%pID,%pVals...)
 QUIT $$Error^%apiOBJ(5758,"%Persistent::IDKEYSQLCheckUnique")
zIDKEYSQLExists(pLockOnly=0,pUnlockRef,%pVal...)
	// SQL Foreign Key validation entry point for Key IDKEY.  Called by FKeys that reference this Key to see if the row is defined
	new id set id=%pVal(1)
	if pLockOnly>=0 { if '..%SQLGetLock(id,1,.pUnlockRef) { set sqlcode=-114,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler39",,"SQLUser"_"."_"testApi"_":"_"IDKEY") QUIT 0 } }
	if pLockOnly<1 {
		new qv set qv=$d(^User.testApiD(%pVal(1))) QUIT:pLockOnly=-1 qv
		do:'$g(pUnlockRef) ..%SQLReleaseLock(id,1) quit qv
	}
	else { do:'$g(pUnlockRef) ..%SQLReleaseLock(id,1) QUIT 1 }
	Return
zIDKEYSQLFindPKeyByConstraint(%con)
 QUIT $$Error^%apiOBJ(5758,"%Persistent::IDKEYSQLFindPKeyByConstraint")
zIDKEYSQLFindRowIDByConstraint(%con,pInternal=0)
 QUIT $$Error^%apiOBJ(5758,"%Persistent::IDKEYSQLFindRowIDByConstraint")
]]></Routine>


<Class name="User.testApi">
<Super>%Persistent</Super>
<TimeChanged>65847,41274.487123</TimeChanged>
<TimeCreated>65847,35799.44488</TimeCreated>

<Parameter name="ADAPTER">
<Default>EnsLib.HTTP.OutboundAdapter</Default>
</Parameter>

<Property name="Adapter">
<Type>EnsLib.HTTP.OutboundAdapter</Type>
</Property>

<Parameter name="INVOCATION">
<Default>Queue</Default>
</Parameter>

<Method name="Api">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set Data = ##class(EnsLib.HTTP.OutboundAdapter).%New()
	
	do Data.GetURL("http://26ef06b0-0cda-41dd-9e8b-02b3a7e81e40.mock.pstmn.io/Peter")
	
	Write Data.%ToJSON()
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^User.testApiD</DataLocation>
<DefaultData>testApiDefaultData</DefaultData>
<IdLocation>^User.testApiD</IdLocation>
<IndexLocation>^User.testApiI</IndexLocation>
<StreamLocation>^User.testApiS</StreamLocation>
<Data name="testApiDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Adapter</Value>
</Value>
</Data>
</Storage>
</Class>


<Routine name="User.updateRequest.1" type="INT" languagemode="0" generated="1" timestamp="65827,42434.397039"><![CDATA[
 ;User.updateRequest.1
 ;Generated for class User.updateRequest.  Do NOT edit. 03/24/2021 11:47:14AM
 ;;5A38534A;User.updateRequest
 ;
SQLUPPER(v,l) { quit $zu(28,v,7,$g(l,32767)) }
ALPHAUP(v,r) { quit $zu(28,v,6) }
STRING(v,l) { quit $zu(28,v,9,$g(l,32767)) }
SQLSTRING(v,l) { quit $zu(28,v,8,$g(l,32767)) }
UPPER(v) { quit $zu(28,v,5) }
MVR(v) { quit $zu(28,v,2) }
TRUNCATE(v,l) { quit $e(v,1,$g(l,3641144)) }
%CheckConstraintsForExtent(pConstraintList="",pCheckDisabled=0,pErrorLog) [ SQLCODE,tID ] public { New %ROWCOUNT,%ROWID,%msg,SQLCODE,tID 
	kill pErrorLog set tStatusAll = 1, pErrorLog = 0 if '$listvalid(pConstraintList) { set pConstraintList = $listfromstring(pConstraintList) }
	 ;---&sql(declare ext cursor for select %ID into :tID FROM SQLUser.updateRequest)
 	 ;--- ** SQL PUBLIC Variables: SQLCODE, tID
	 
	 ;---&sql(open ext)
	try { s %ext066="",%ext066=$classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xEljb8y3DL4LSokwkXG4FYM0Kg7g","%New") if '$isobject(%ext066) s %ext066=$$%0dsqlA() } catch { if $ze["<CLASS DOES NOT EXIST>"&&($ze["%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xEljb8y3DL4LSokwkXG4FYM0Kg7g")||($ze["<ZSQLU>") { s %ext066=$$%0dsqlA() } else { throw } }
	if SQLCODE '< 0 {
		for {
			 ;---&sql(fetch ext)
 			 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE
			if $isobject($g(%ext066))'=1 { s SQLCODE=-102 } else { do %ext066.FET() if SQLCODE=0 { } }
			if SQLCODE { if SQLCODE=100 { quit } elseif SQLCODE<0 { set tStatusAll = $select(+tStatusAll:$$Error^%apiOBJ(5521,SQLCODE,$Get(%msg)),1:$$AppendStatus^%occSystem(tStatusAll,$$Error^%apiOBJ(5521,SQLCODE,$Get(%msg)))) quit } }
			set tStatus = ..%CheckConstraints(tID,pConstraintList,pCheckDisabled,.tErrorInfo)
			if ('tStatus) { set tStatusAll = $select(+tStatusAll:tStatus,1:$$AppendStatus^%occSystem(tStatusAll,tStatus)) set:pErrorLog<1000 pErrorLog = pErrorLog + 1, pErrorLog(pErrorLog) = tErrorInfo _ $Listbuild(tStatus) }
		}
		 ;---&sql(close ext)
		if '$isobject($get(%ext066)) { set SQLCODE=-102 } else { set SQLCODE=0 kill %ext066 }
	}
	quit tStatusAll }
 q
%0dsqlA()	n %xxsql
	s %xxsql("S",1)="DECLARE ext CURSOR FOR SELECT %ID INTO :tID FROM SQLUser . updateRequest"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","DEBUG")=$c(1),%xxsql("M","FORKNETDMN")=$c(1)
	s %xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1)
	s %xxsql("M","USELOST")=$c(1),%xxsql("M","ZVERSION")=$c(1),%xxsql("I","%callout")="",%xxsql("I","%occErrors")="",%xxsql("I","%occSqlfunc")=""
	s %xxsql("I","%sySite")="",%xxsql("I","%sySt")="",%xxsql("I","%sySystem")="",%xxsql("I","%xmlMap")="",%xxsql("I","EnsConstants")=""
	s %xxsql("I","EnsErrors")="",%xxsql("I","EnsUtil")="",%xxsql("I","Ensemble")="",%xxsql("NS")="PROJECT1"
	return $$BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","User",0,"",),",0,ext,","User.updateRequest.CLS",1)
%DeleteData(id,concurrency) public {
	Quit:id="" $$Error^%apiOBJ(5812)
	set $Ztrap="DeleteDataERR" set lockok=0,sc=""
	If concurrency {
		Lock +(^Ens.MessageBodyD(id)#"E"):$zu(115,4)
		Set lockok=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,2:2,4:2,:0))
		Set:lockok=2&&($tlevel) %0CacheLock($classname(),"E")=1
		If 'lockok {
			Quit $$Error^%apiOBJ(5803,$classname())
		}
	}
	If ($Data(^Ens.MessageBodyD(id))) {
		If $data(^oddEXTR($classname())) {
			Set fc=""
			For {
				Set fc=$order(^rINDEXEXT("F",$classname(),"%1","f",fc))
				Quit:fc=""
				Set fk=""
				For {
					Set fk=$order(^rINDEXEXT("F",$classname(),"%1","f",fc,fk))
					Quit:fk=""
					Set sc=$classmethod(fc,fk_"Delete",id)
					If ('sc) { Goto DeleteDataEXIT }
				}
			}
			Set fc=""
			For {
				Set fc=$order(^rINDEXEXT("F",$classname(),"IDKEY","f",fc))
				Quit:fc=""
				Set fk=""
				For {
					Set fk=$order(^rINDEXEXT("F",$classname(),"IDKEY","f",fc,fk))
					Quit:fk=""
					Set sc=$classmethod(fc,fk_"Delete",id)
					If ('sc) { Goto DeleteDataEXIT }
				}
			}
		}
		Kill ^Ens.MessageBodyD(id)
		Kill ^Ens.MessageBodyD(id,"updateRequest")
		Set sc=1
	}
	Else { Set sc=$$Error^%apiOBJ(5810,$classname(),id) }
DeleteDataEXIT
	If concurrency,lockok {
		Lock -(^Ens.MessageBodyD(id)#"E")
	}
DeleteDataRET	Set $Ztrap = ""
	QUIT sc
DeleteDataERR	Set $Ztrap = "DeleteDataRET"
	Set sc = $$Error^%apiOBJ(5002,$ZE)
	Goto DeleteDataEXIT }
%InsertBatch(objects,concurrency=0,useTransactions=0) public {
	try {
		set numerrs=0,errs="",cnt=0,ptr=0
		while $listnext(objects,ptr,data) {
			set cnt=cnt+1
			set lock=0
			if (useTransactions) tstart
			set id=$i(^Ens.MessageBodyD)
			try {
				set tInnerException = ""
				;
				if concurrency { lock +(^Ens.MessageBodyD(id)#"E"):$zu(115,4) set lock=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,2:2,4:2,:0)) set:lock=2&&($tlevel) %0CacheLock($classname(),"E")=1 if 'lock { Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5803,$classname())) } }
				set ^Ens.MessageBodyD(id)=data
				set ^Ens.MessageBodyD(id,"updateRequest")=data("updateRequest")
				if (useTransactions) { tcommit }
			}
			catch tInnerException {
				set newerr=$lb(cnt,tInnerException.AsStatus())
				if '($length(errs)+$length(newerr)>32767) { set numerrs=numerrs+1, errs=errs_newerr }
				if (useTransactions) && ($Tlevel) trollback
			}
			if lock lock -(^Ens.MessageBodyD(id)#"E")
		}
	}
	catch tException {
		set newerr=$lb($g(cnt),tException.AsStatus())
		if '($length(errs)+$length(newerr)>32767) { set numerrs=numerrs+1, errs=errs_newerr }
	}
	QUIT ($lb(numerrs))_errs }
%LoadData(id) public {
	New %s1,%s2
	set $ZTrap="CatchError",locked=0,userze=$ze,$ze=""
	If i%%Concurrency=4 {
		Lock +(^Ens.MessageBodyD(id)#"E"):$zu(115,4)
		if '$t do init s i%%Concurrency=0 s:$ze="" $ze=userze return $$Error^%apiOBJ(5803,$classname())
	} ElseIf i%%Concurrency>0 {
		Lock +(^Ens.MessageBodyD(id)#"SE"):$zu(115,4)
		if '$t do init s i%%Concurrency=0 s:$ze="" $ze=userze return $$Error^%apiOBJ(5804,$classname())
		set locked = 1
	}
	Set sc=""
	If $d(^Ens.MessageBodyD(id)) {
		Set sc=1
		Set %s1=$g(^Ens.MessageBodyD(id))
		Set %s2=$g(^Ens.MessageBodyD(id,"updateRequest"))
		S i%Surname=$lg(%s2),i%Gender=$lg(%s2,2),i%Race=$lg(%s2,3),i%Age=$lg(%s2,4),i%DOB=$lg(%s2,5),i%Name=$lg(%s2,6)
	} Else {
		do init
	}
	If i%%Concurrency=2||(i%%Concurrency=1) {
		Lock -(^Ens.MessageBodyD(id)#"SIE")
	}
	s:$ze="" $ze=userze
	RETURN $s((''sc):1,1:$$Error^%apiOBJ(5809,$classname(),id))
CatchError	set $ZTrap = "" if $ZE'="" { s sc = $$Error^%apiOBJ(5002,$ZE) }
	If ($get(locked))&&(i%%Concurrency<3) { Lock -(^Ens.MessageBodyD(id)#"SIE") }
	if '('sc) { set sc=$$Error^%apiOBJ(5809,$classname(),id) }
	s:$ze="" $ze=userze
	return sc
init	Set i%Age="",i%DOB="",i%Gender="",i%Name="",i%Race="",i%Surname=""
	quit }
%LoadDataFromMemory(id,objstate,obj) public {
	New %s1,%s2
	Set sc=""
	If $d(objstate(id)) {
		Set sc=1
		Set %s1=$g(objstate(id))
		Set %s2=$g(objstate(id,"updateRequest"))
		S i%Surname=$lg(%s2),i%Gender=$lg(%s2,2),i%Race=$lg(%s2,3),i%Age=$lg(%s2,4),i%DOB=$lg(%s2,5),i%Name=$lg(%s2,6)
	} Else {
		Set i%Age="",i%DOB="",i%Gender="",i%Name="",i%Race="",i%Surname=""
	}
	Quit:sc'="" sc
	Quit $$Error^%apiOBJ(5809,$classname(),id) }
%NormalizeObject() public {
	If '$system.CLS.GetModified() Quit 1
	If m%Age Set:i%Age'="" i%Age=(..AgeNormalize(i%Age))
	If m%DOB Set:i%DOB'="" i%DOB=(..DOBNormalize(i%DOB))
	If m%Gender Set:i%Gender'="" i%Gender=(..GenderNormalize(i%Gender))
	If m%Name Set:i%Name'="" i%Name=(..NameNormalize(i%Name))
	If m%Race Set:i%Race'="" i%Race=(..RaceNormalize(i%Race))
	If m%Surname Set:i%Surname'="" i%Surname=(..SurnameNormalize(i%Surname))
	Quit 1 }
%PhysicalAddress(id,paddr)
	if $Get(id)="" Quit $$Error^%apiOBJ(5813,$classname())
	if (id="") { quit $$Error^%apiOBJ(5832,$classname(),id) }
	s paddr(1)=$lb($Name(^Ens.MessageBodyD(id)),$classname(),"IDKEY","listnode",id)
	s paddr(2)=$lb($Name(^Ens.MessageBodyD(id,"updateRequest")),$classname(),"IDKEY","listnode",id)
	s paddr=2
	Quit 1
%SQLAcquireLock(%rowid,s=0,unlockref=0)
	new %d,gotlock
	set %d(1)=%rowid set s=$e("E",'unlockref)_$e("S",s)
	lock +^Ens.MessageBodyD(%d(1))#s:$zu(115,4) set gotlock=$t
	if gotlock,'unlockref { set:$case($SYSTEM.Lock.ReturnCode(),2:1,4:1,:0)&&($tlevel) %0CacheLock("User.updateRequest","E")=1 }
	set:gotlock&&unlockref unlockref=unlockref+1,unlockref(unlockref)=$lb($name(^Ens.MessageBodyD(%d(1))),"User.updateRequest",s_"D")
	QUIT gotlock
%SQLAcquireTableLock(s=0,SQLCODE,to="")
	set s=$e("S",s) set:to="" to=$zu(115,4) lock +^Ens.MessageBodyD#s:to QUIT:$t 1 set SQLCODE=-110 if s="S" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler35",,"SQLUser"_"."_"updateRequest") } else { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler36",,"SQLUser"_"."_"updateRequest") } QUIT 0
	Return
%SQLBuildIndices(pIndices="",pLockFlag=0,pStartID="",pEndID="",pIgnoreIndexList="")
	QUIT ..%BuildIndices(pIndices,,pLockFlag,,pStartID,pEndID,pIgnoreIndexList)
%SQLBuildPurgeIndexForRow(pIndices="",pActions="BP",pLockRow=1,%d,%e,pIgnoreIndexList="")
	// Purge and build index nodes for a single row using given values, return Status Code
	new sn,tSC,tLock set tSC=1,pActions=$zcvt(pActions,"U")
	try {
		if $g(%d(1))="" { set tSC=$select(+tSC:$$Error^%apiOBJ(5521,-108,"RowID value must be specified in %d(1) when calling %SQLBuildPurgeIndexForRow for table 'SQLUser.updateRequest'"),1:$$AppendStatus^%occSystem(tSC,$$Error^%apiOBJ(5521,-108,"RowID value must be specified in %d(1) when calling %SQLBuildPurgeIndexForRow for table 'SQLUser.updateRequest'"))) RETURN tSC }
		if pLockRow { if '..%SQLAcquireLock(%d(1)) { set tSC=$select(+tSC:$$Error^%apiOBJ(5521,-114,"Unable to lock row in table 'SQLUser.updateRequest' with %ID = '"_%d(1)_"'"),1:$$AppendStatus^%occSystem(tSC,$$Error^%apiOBJ(5521,-114,"Unable to lock row in table 'SQLUser.updateRequest' with %ID = '"_%d(1)_"'"))) RETURN tSC  } else { set tLock=1 }}
		if pLockRow { do ..%SQLReleaseLock(%d(1),0,0) set tLock=0 }
	}
	catch {
		if $g(tLock) { do ..%SQLReleaseLock(%d(1),0,0) }
		set tSC=$select(+tSC:$$Error^%apiOBJ(5594,$ze),1:$$AppendStatus^%occSystem(tSC,$$Error^%apiOBJ(5594,$ze)))
	}
	QUIT tSC
%SQLCheckUnique(pFromOrig=0,%pID,%pVals...)
	 ;---&sql(SELECT ID FROM SQLUser.updateRequest WHERE  ID=:%pVals(1) AND (%ID <> :%pID OR :%pID IS NULL)) QUIT SQLCODE=100
 	 ;--- ** SQL PUBLIC Variables: %pID, %pVals, SQLCODE
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xEsfrOLhug3tOHYrtUFHcJ69YpYQ","%New") } catch { if $ze["<CLASS DOES NOT EXIST>"&&($ze["%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xEsfrOLhug3tOHYrtUFHcJ69YpYQ")||($ze["<ZSQLU>") { d %0dsqlD } else { throw } } QUIT SQLCODE=100
 q
%0dsqlD	n %xxsql
	s %xxsql("S",1)="SELECT ID FROM SQLUser . updateRequest WHERE ID = :%pVals(1) AND ( %ID <> :%pID OR :%pID IS NULL )"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","DEBUG")=$c(1),%xxsql("M","FORKNETDMN")=$c(1)
	s %xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1)
	s %xxsql("M","USELOST")=$c(1),%xxsql("M","ZVERSION")=$c(1),%xxsql("I","%callout")="",%xxsql("I","%occErrors")="",%xxsql("I","%occSqlfunc")=""
	s %xxsql("I","%sySite")="",%xxsql("I","%sySt")="",%xxsql("I","%sySystem")="",%xxsql("I","%xmlMap")="",%xxsql("I","EnsConstants")=""
	s %xxsql("I","EnsErrors")="",%xxsql("I","EnsUtil")="",%xxsql("I","Ensemble")="",%xxsql("NS")="PROJECT1"
	d BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","User",0,"",),,"User.updateRequest.CLS")
	q
%SQLCopyIcolIntoName()
	if %oper="DELETE" {
		set:$d(%d(1)) %f("ID")=%d(1)
		QUIT
	}
	set:$d(%d(1)) %f("ID")=%d(1) set:$a(%e,2)&&$d(%d(2)) %f("Age")=%d(2) set:$a(%e,3)&&$d(%d(3)) %f("DOB")=%d(3) set:$a(%e,4)&&$d(%d(4)) %f("Gender")=%d(4) set:$a(%e,5)&&$d(%d(5)) %f("Name")=%d(5) set:$a(%e,6)&&$d(%d(6)) %f("Race")=%d(6) set:$a(%e,7)&&$d(%d(7)) %f("Surname")=%d(7) set:$a(%e,8)&&$d(%d(8)) %f("x__classname")=%d(8)
	QUIT
%SQLCopyNameIntoIcol()
	k %d,%e set:$d(%f("ID"))#2 %d(1)=%f("ID") set:$d(%f("Age"))#2 %d(2)=%f("Age") set:$d(%f("DOB"))#2 %d(3)=%f("DOB") set:$d(%f("Gender"))#2 %d(4)=%f("Gender") set:$d(%f("Name"))#2 %d(5)=%f("Name") set:$d(%f("Race"))#2 %d(6)=%f("Race") set:$d(%f("Surname"))#2 %d(7)=%f("Surname") set:$d(%f("x__classname"))#2 %d(8)=%f("x__classname")  kill %f QUIT
%SQLDefineiDjVars(%d,subs,master)
	QUIT
%SQLDelete(%rowid,%check,%tstart=1,%mv=0,%polymorphic=0)
	// SQL DELETE method for table SQLUser.updateRequest
	if %polymorphic { do ..%SQLCopyNameIntoIcol() set %d(1)=%rowid,%e(1)=%rowid  goto %SQLDeletePD }
	new bva,ce,%d,dc,%e,%ele,%itm,%key,%l,%nc,omcall,%oper,%pos,%s,sn,sqlcode,subs set %oper="DELETE",sqlcode=0,%ROWID=%rowid,%d(1)=%rowid,%e(1)=%rowid,%l=$c(0)
	if '$d(%0CacheSQLRA) { new %0CacheSQLRA set omcall=1 }
	if '$a(%check,2) {
		new %ls lock +^Ens.MessageBodyD(%d(1))#"E":$zu(115,4) set %ls=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,4:2,2:2,1:3,:""))
		set:%ls=2 $e(%check,2)=$c(1) set:%ls=2&&($tlevel) %0CacheLock("User.updateRequest","E")=1 set:$case(%ls,1:1,2:1,:0) $e(%l)=$c(1)
		if '%ls||(%ls=3) { set SQLCODE=-110,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer",$s('%ls:"SQLFiler40",1:"SQLFiler55"),,%oper,"SQLUser"_"."_"updateRequest",$g(%d(1))) RETURN  }
	}
	if %tstart { TSTART:($zu(115,1)=1)||('$TLEVEL&&($zu(115,1)=2))  }
	set $zt="ERRORDelete"
%SQLDeletePD	// Entry point for Polymorphic Dispatch from a super-table
	do ..%SQLGetOld(%rowid,.%d,.%e,.sqlcode) if sqlcode { set SQLCODE=-106,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler58",,"SQLUser"_"."_"updateRequest",%rowid) do ..%SQLEExit() QUIT  }
	if %e(8)'="" { set sn=$p(%e(8),$e(%e(8)),$l(%e(8),$e(%e(8)))-1) if "updateRequest"'=sn { new %f do ..%SQLCopyIcolIntoName() do $classmethod(sn,"%SQLDelete",%rowid,%check,%tstart,%mv,1) QUIT  }}
	if '$a(%check),'$zu(115,7) do  if sqlcode set SQLCODE=sqlcode do ..%SQLEExit() QUIT  
	. new %fk,%k,%p,%st,%t,%z set %k="",%p("%1")="%d(1),",%p("IDKEY")="%d(1),"
	. for  quit:sqlcode<0  set %k=$o(^rINDEXEXT("F","User.updateRequest",%k)) quit:%k=""  set %t="" for  set %t=$o(^rINDEXEXT("F","User.updateRequest",%k,"f",%t)) quit:%t=""  set %st=(%t="User.updateRequest") set %fk="" for  set %fk=$o(^rINDEXEXT("F","User.updateRequest",%k,"f",%t,%fk)) quit:%fk=""  x "set %z=$classmethod(%t,%fk_""SQLFKeyRefAction"",%st,%k,$a(%check,2),"_%p(%k)_")" if %z set sqlcode=-124 quit  
	set ce="" for  { set ce=$order(^oddSQL("SQLUser","updateRequest","DC",ce)) quit:ce=""   do $classmethod(ce,"%SQLDeleteChildren",%d(1),%check,.sqlcode) quit:sqlcode<0  } if sqlcode<0 { set SQLCODE=sqlcode do ..%SQLEExit() QUIT } // Delete any children
	set ce="" for  { set ce=$order(^oddSQL("Ens","Request","DC",ce)) quit:ce=""   do $classmethod(ce,"%SQLDeleteChildren",%d(1),%check,.sqlcode) quit:sqlcode<0  } if sqlcode<0 { set SQLCODE=sqlcode do ..%SQLEExit() QUIT } // Delete any children of the root extent
	set ce="" for  { set ce=$order(^oddSQL("Ens","MessageBody","DC",ce)) quit:ce=""   do $classmethod(ce,"%SQLDeleteChildren",%d(1),%check,.sqlcode) quit:sqlcode<0  } if sqlcode<0 { set SQLCODE=sqlcode do ..%SQLEExit() QUIT } // Delete any children of the root extent
	if '$a(%check,3) {
	}
	k ^Ens.MessageBodyD(%d(1))
	do ..%SQLUnlock() TCOMMIT:%tstart&&($zu(115,1)=1)
	set SQLCODE=0 kill:$g(omcall) %0CacheSQLRA
	QUIT
ERRORDelete	set $zt="",SQLCODE=-415,%msg=$s($g(%msg)'="":%msg_" -- ",1:"")_$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler51",,%oper,"SQLUser"_"."_"updateRequest",$ze) if $ze["<FRAMESTACK>" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler52",,$ze,%oper,"SQLUser"_"."_"updateRequest") do ##Class(%SYS.System).WriteToConsoleLog(%msg) if ($zu(67,10,$j)=1)||($zu(67,10,$j)=3) { write !,%msg h 3 } HALT  } do ..%SQLEExit() QUIT
	Return
%SQLDeleteTempStreams()
	// Delete all temporary streams
	QUIT
%SQLEExit()
	do ..%SQLUnlock() 
	if %tstart,$zu(115,1)=1,$TLEVEL { set %tstart=0 TROLLBACK 1 } kill:$g(omcall) %0CacheSQLRA QUIT  
	Return
%SQLExists(pLockOnly=0,pUnlockRef,%pVal...)
	// SQL Foreign Key validation entry point for Key %1.  Called by FKeys that reference this Key to see if the row is defined
	new id set id=%pVal(1)
	if pLockOnly>=0 { if '..%SQLGetLock(id,1,.pUnlockRef) { set sqlcode=-114,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler39",,"SQLUser"_"."_"updateRequest"_":"_"%1") QUIT 0 } }
	if pLockOnly<1 {
		new qv set qv='..%SQLCheckUnique(0,,%pVal(1)) QUIT:pLockOnly=-1 qv
		do:'$g(pUnlockRef) ..%SQLReleaseLock(id,1) quit qv
	}
	else { do:'$g(pUnlockRef) ..%SQLReleaseLock(id,1) QUIT 1 }
	Return
%SQLGetLock(pRowId,pShared=0,pUnlockRef)
	QUIT ..%SQLAcquireLock(pRowId,pShared,.pUnlockRef)
%SQLGetOld(%rowid,%d,%e,sqlcode)
	// Get old data values
	new SQLCODE,%ROWCOUNT
	 ;---&sql(SELECT x__classname INTO :%e() FROM %IGNOREINDEX * SQLUser.updateRequest WHERE ID=:%rowid)
 	 ;--- ** SQL PUBLIC Variables: %e, %rowid, SQLCODE
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xE3oCCUk3Vasiq6WosnRayBHxnfs","%New") } catch { if $ze["<CLASS DOES NOT EXIST>"&&($ze["%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xE3oCCUk3Vasiq6WosnRayBHxnfs")||($ze["<ZSQLU>") { d %0dsqlF } else { throw } }
	set sqlcode=SQLCODE QUIT:sqlcode'=0
	QUIT
 q
%0dsqlF	n %xxsql
	s %xxsql("S",1)="SELECT x__classname INTO :%e() FROM %IGNOREINDEX * SQLUser . updateRequest WHERE ID = :%rowid"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","DEBUG")=$c(1),%xxsql("M","FORKNETDMN")=$c(1)
	s %xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1)
	s %xxsql("M","USELOST")=$c(1),%xxsql("M","ZVERSION")=$c(1),%xxsql("I","%callout")="",%xxsql("I","%occErrors")="",%xxsql("I","%occSqlfunc")=""
	s %xxsql("I","%sySite")="",%xxsql("I","%sySt")="",%xxsql("I","%sySystem")="",%xxsql("I","%xmlMap")="",%xxsql("I","EnsConstants")=""
	s %xxsql("I","EnsErrors")="",%xxsql("I","EnsUtil")="",%xxsql("I","Ensemble")="",%xxsql("NS")="PROJECT1"
	d BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","User",0,"",),,"User.updateRequest.CLS")
	q
%SQLGetOldAll()
	// Get all old data values
	new SQLCODE,%ROWCOUNT
	 ;---&sql(SELECT Age,DOB,Gender,Name,Race,Surname,x__classname INTO :%e() FROM %IGNOREINDEX * SQLUser.updateRequest WHERE ID=:%rowid)
 	 ;--- ** SQL PUBLIC Variables: %e, %rowid, SQLCODE
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xEATISQYpecYze94sHlv94l37VKp","%New") } catch { if $ze["<CLASS DOES NOT EXIST>"&&($ze["%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xEATISQYpecYze94sHlv94l37VKp")||($ze["<ZSQLU>") { d %0dsqlH } else { throw } }
	set sqlcode=SQLCODE QUIT:sqlcode'=0
	QUIT
 q
%0dsqlH	n %xxsql
	s %xxsql("S",1)="SELECT Age , DOB , Gender , Name , Race , Surname , x__classname INTO :%e() FROM %IGNOREINDEX * SQLUser . updateRequest WHERE ID = :%rowid"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","DEBUG")=$c(1),%xxsql("M","FORKNETDMN")=$c(1)
	s %xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1)
	s %xxsql("M","USELOST")=$c(1),%xxsql("M","ZVERSION")=$c(1),%xxsql("I","%callout")="",%xxsql("I","%occErrors")="",%xxsql("I","%occSqlfunc")=""
	s %xxsql("I","%sySite")="",%xxsql("I","%sySt")="",%xxsql("I","%sySystem")="",%xxsql("I","%xmlMap")="",%xxsql("I","EnsConstants")=""
	s %xxsql("I","EnsErrors")="",%xxsql("I","EnsUtil")="",%xxsql("I","Ensemble")="",%xxsql("NS")="PROJECT1"
	d BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","User",0,"",),,"User.updateRequest.CLS")
	q
%SQLInsert(%d,%check,%inssel,%vco,%tstart=1,%mv=0)
	// SQL INSERT method for table SQLUser.updateRequest
	new bva,%ele,%itm,%key,%f,%l,%n,%nc,%oper,%pos,%s,sqlcode,sn,subs,icol set %oper="INSERT",sqlcode=0,%l=$c(0,0,0)
	if $a(%check,7) { new %diu merge %diu=%d }
	if $d(%d(1)),'$zu(115,11) { if %d(1)'="" { set SQLCODE=-111,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler6",,"ID","SQLUser"_"."_"updateRequest") RETURN ""  } kill %d(1) } 
	if '$a(%check),'..%SQLValidateFields(.sqlcode) { set SQLCODE=sqlcode RETURN "" }
	do:'$a(%check,8) ..%SQLNormalizeFields()
	if %tstart { TSTART:($zu(115,1)=1)||('$TLEVEL&&($zu(115,1)=2))  } set $zt="ERRORInsert"
	set:'$d(%d(8)) %d(8)="~Ens.Request~updateRequest~"
	if '$a(%check) {
		do {
			if $g(%vco)'="" { d @%vco quit:sqlcode<0  }
		} while 0
		if sqlcode<0 { set SQLCODE=sqlcode do ..%SQLEExit() RETURN "" }		// A constraint failed
	}
	if '$d(%d(1)) { set %d(1)=$i(^Ens.MessageBodyD) } elseif %d(1)>$g(^Ens.MessageBodyD) { if $i(^Ens.MessageBodyD,$zabs(%d(1)-$g(^Ens.MessageBodyD))) {}} elseif $d(^Ens.MessageBodyD(%d(1))) { set SQLCODE=-119,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler33",,"ID",%d(1),"SQLUser"_"."_"updateRequest"_"."_"ID") do ..%SQLEExit() RETURN "" }
	set:'($d(%d(8))#2) %d(8)=""
	if '$a(%check,2) {
		new %ls lock +^Ens.MessageBodyD(%d(1))#"E":$zu(115,4) set %ls=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,4:2,2:2,1:3,:""))
		set:%ls=2 $e(%check,2)=$c(1) set:%ls=2&&($tlevel) %0CacheLock("User.updateRequest","E")=1 set:$case(%ls,1:1,2:1,:0) $e(%l)=$c(1)
		if '%ls||(%ls=3) { set SQLCODE=-110,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer",$s('%ls:"SQLFiler40",1:"SQLFiler55"),,%oper,"SQLUser"_"."_"updateRequest",$g(%d(1))) do ..%SQLEExit() RETURN ""  }
	}
	set ^Ens.MessageBodyD(%d(1))=$lb(%d(8))
	set:$s(($g(%d(2))'=""):1,($g(%d(3))'=""):1,($g(%d(4))'=""):1,($g(%d(5))'=""):1,($g(%d(6))'=""):1,1:($g(%d(7))'="")) ^Ens.MessageBodyD(%d(1),"updateRequest")=$lb(%d(7),%d(4),%d(6),%d(2),%d(3),%d(5))
	lock:$a(%l) -^Ens.MessageBodyD(%d(1))#"E"
	TCOMMIT:%tstart&&($zu(115,1)=1)
	set SQLCODE=0
	QUIT %d(1) 			// %SQLInsert
ERRORInsert	set $zt="",SQLCODE=-415,%msg=$s($g(%msg)'="":%msg_" -- ",1:"")_$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler51",,%oper,"SQLUser"_"."_"updateRequest",$ze)
	if $ze["<FRAMESTACK>" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler52",,$ze,%oper,"SQLUser"_"."_"updateRequest") do ##Class(%SYS.System).WriteToConsoleLog(%msg) if ($zu(67,10,$j)=1)||($zu(67,10,$j)=3) { write !,%msg h 3 } HALT  }
	do ..%SQLEExit()
	RETURN ""
%SQLInvalid(pIcol,pVal) public {
	set:$l($g(pVal))>40 pVal=$e(pVal,1,40)_"..." do:'$d(%n) ..%SQLnBuild() set %msg=$s($g(%msg)'="":%msg_$c(13,10),1:"")_$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler37",,"SQLUser"_"."_"updateRequest"_"."_$lg(%n,pIcol),$s($g(pVal)'="":$s(pVal="":"<NULL>",pVal=$c(0):"<EMPTY STRING>",1:"'"_pVal_"'"),1:"")),sqlcode=$s(%oper="INSERT":-104,1:-105)
	QUIT sqlcode }
%SQLMissing(fname)
	set sqlcode=-108,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler47",,fname,"SQLUser"_"."_"updateRequest") quit
%SQLNormalizeFields()
	new %f for %f=2,3 { set:$g(%d(%f))'="" %d(%f)=$select(%d(%f)=$c(0)&&$zu(115,13):"",1:%d(%f)\1) }
	QUIT
%SQLPurgeIndices(pIndices="",pLockExtent=0,pIgnoreIndexList="")
	QUIT ..%PurgeIndices(pIndices,pLockExtent,pIgnoreIndexList)
%SQLQuickLoad(%rowid,%nolock=0,pkey=0,qq=0)
	// Get fields from row where SQLRowID=%rowid
	new d,i,il,subs set:%nolock=2 %nolock=1
	if %nolock=0 { if '..%SQLAcquireLock(%rowid) { set %qrc=114,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler45",,"SQLUser"_"."_"updateRequest",%rowid),%ROWCOUNT=0 QUIT  } set:$zu(115,2) il=$zu(115,2,0) }
	 ;---&sql(SELECT %INTERNAL(ID),Age,DOB,Gender,Name,Race,Surname,x__classname INTO :d(1),:d(2),:d(3),:d(4),:d(5),:d(6),:d(7),:d(8) FROM SQLUser.updateRequest WHERE %ID = :%rowid)
 	 ;--- ** SQL PUBLIC Variables: %rowid, SQLCODE, d
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xE8MnSR5QRg8iPpP1fB52sNE3kiB","%New") } catch { if $ze["<CLASS DOES NOT EXIST>"&&($ze["%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xE8MnSR5QRg8iPpP1fB52sNE3kiB")||($ze["<ZSQLU>") { d %0dsqlJ } else { throw } }
	if SQLCODE { if %nolock=0 { do ..%SQLReleaseLock(%rowid,0,1) do:$g(il) $zu(115,2,il) } set %ROWCOUNT=0 set:SQLCODE<0 SQLCODE=-SQLCODE set %qrc=SQLCODE QUIT  }
	if qq,d(8)'="" { new sn set sn=$p(d(8),$e(d(8)),$l(d(8),$e(d(8)))-1) if "updateRequest"'=sn { if %nolock=0 { do ..%SQLReleaseLock(%rowid,0,1) do:$g(il) $zu(115,2,il) } kill d set:sn'["." sn="User."_sn  do $classmethod(sn,"%SQLQuickLoad",%rowid,%nolock,0,1) QUIT  }}
	if %nolock=0 { if $zu(115,1)=1 { TSTART  } elseIf '$TLEVEL,$zu(115,1)=2 { TSTART  }}
	set:qq d=$zobjexport("User.updateRequest",18),d=$zobjexport(8,18) set i=-1 for  { set i=$o(d(i)) quit:i=""  set d=$zobjexport(d(i),18) } set %qrc=0,%ROWCOUNT=1 if %nolock=0 { d ..%SQLReleaseLock(%rowid,0,0) do:$g(il) $zu(115,2,il) } quit
	Return
 q
%0dsqlJ	n %xxsql
	s %xxsql("S",1)="SELECT %INTERNAL ( ID ) , Age , DOB , Gender , Name , Race , Surname , x__classname INTO :d(1) , :d(2) , :d(3) , :d(4) , :d(5) , :d(6) , :d(7) , :d(8) FROM SQLUser . updateRequest WHERE %ID = :%rowid"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","DEBUG")=$c(1),%xxsql("M","FORKNETDMN")=$c(1)
	s %xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1)
	s %xxsql("M","USELOST")=$c(1),%xxsql("M","ZVERSION")=$c(1),%xxsql("I","%callout")="",%xxsql("I","%occErrors")="",%xxsql("I","%occSqlfunc")=""
	s %xxsql("I","%sySite")="",%xxsql("I","%sySt")="",%xxsql("I","%sySystem")="",%xxsql("I","%xmlMap")="",%xxsql("I","EnsConstants")=""
	s %xxsql("I","EnsErrors")="",%xxsql("I","EnsUtil")="",%xxsql("I","Ensemble")="",%xxsql("NS")="PROJECT1"
	d BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("ODBC","","","User",0,"",),,"User.updateRequest.CLS")
	q
%SQLReleaseLock(%rowid,s=0,i=0,e="")
	new %d
	set:e="" e=1 set %d(1)=%rowid set s=$e("E",e)_$e("S",s)_$e("D",i)
	lock -^Ens.MessageBodyD(%d(1))#s
	QUIT
%SQLReleaseTableLock(s=0,i=0)
	set s=$e("S",s)_$e("D",i) lock -^Ens.MessageBodyD#s QUIT 1
	Return
%SQLUnlock()
	lock:$a(%l) -^Ens.MessageBodyD(%d(1))#"E"
	QUIT
%SQLUnlockError(cname)
	set sqlcode=-110 if %oper="DELETE" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler48",,"SQLUser"_"."_"updateRequest",cname) } else { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler49",,"SQLUser"_"."_"updateRequest",cname) } quit
	Return
%SQLUpdate(%rowid,%check,%d,%vco,%tstart=1,%mv=0,%polymorphic=0,%soid)
	// SQL UPDATE method for table SQLUser.updateRequest
	if %polymorphic { do ..%SQLCopyNameIntoIcol() set %d(1)=%rowid,%e(1)=%rowid,$e(%e,1)=$c(0) new icol for icol=2:1:8 { set $e(%e,icol)=$c($d(%d(icol))) }  goto %SQLUpdatePD }
	new %e,bva,%ele,%itm,%key,%f,%l,%n,%nc,%oper,%pos,%s,icol,omcall,s,sn,sqlcode,subs,t set %oper="UPDATE",sqlcode=0,%ROWID=%rowid,$e(%e,1)=$c(0),%l=$c(0,0,0)
	if '$d(%0CacheSQLRA) { new %0CacheSQLRA set omcall=1 }
	if '$a(%check,7) {
		if '$a(%check),'..%SQLValidateFields(.sqlcode) { set SQLCODE=sqlcode QUIT  }
		do:'$a(%check,8) ..%SQLNormalizeFields()
	}
	if $d(%d(1)),%d(1)'=%rowid { set SQLCODE=-107,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler16",,"ID","SQLUser"_"."_"updateRequest") QUIT  }
	for icol=2:1:8 { set $e(%e,icol)=$c($d(%d(icol))) }
	set %d(1)=%rowid,%e(1)=%rowid
	if '$a(%check,2) {
		new %ls lock +^Ens.MessageBodyD(%d(1))#"E":$zu(115,4) set %ls=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,4:2,2:2,1:3,:""))
		set:%ls=2 $e(%check,2)=$c(1) set:%ls=2&&($tlevel) %0CacheLock("User.updateRequest","E")=1 set:$case(%ls,1:1,2:1,:0) $e(%l)=$c(1)
		if '%ls||(%ls=3) { set SQLCODE=-110,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer",$s('%ls:"SQLFiler40",1:"SQLFiler55"),,%oper,"SQLUser"_"."_"updateRequest",$g(%d(1))) RETURN  }
	}
	if %tstart { TSTART:($zu(115,1)=1)||('$TLEVEL&&($zu(115,1)=2))  }
	set $zt="ERRORUpdate"
%SQLUpdatePD		// Entry point for Polymorphic Dispatch from a super-table
	if $g(%vco)="" { do ..%SQLGetOld(%rowid,.%d,.%e,.sqlcode) i sqlcode { s SQLCODE=-109,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler59",,"SQLUser"_"."_"updateRequest",%rowid) do ..%SQLEExit() QUIT  } set:'$d(%d(8)) %d(8)=%e(8) set:%d(8)=%e(8) $e(%e,8)=$c(0) } else { do ..%SQLGetOldAll() if sqlcode { set SQLCODE=-109,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler59",,"SQLUser"_"."_"updateRequest",%rowid) do ..%SQLEExit() QUIT  } for icol=2,3,4,5,6,7,8 { set:'$d(%d(icol)) %d(icol)=%e(icol) set:%d(icol)=%e(icol) $e(%e,icol)=$c(0) }}
	if %e(8)'="" set sn=$p(%e(8),$e(%e(8)),$l(%e(8),$e(%e(8)))-1) if "updateRequest"'=sn new %f do ..%SQLCopyIcolIntoName() do $classmethod(sn,"%SQLUpdate",%rowid,%check,.%d,$g(%vco),%tstart,%mv,1) QUIT
	if '$a(%check) {
		do {
			if $g(%vco)'="" { d @%vco quit:sqlcode<0  }
		} while 0
		if sqlcode { set SQLCODE=sqlcode do ..%SQLEExit() QUIT  }
	}
	set:$a(%e,8) ^Ens.MessageBodyD(%d(1))=$lb(%d(8))
	if $s($a(%e,2):1,$a(%e,3):1,$a(%e,4):1,$a(%e,5):1,$a(%e,6):1,1:$a(%e,7)) {
		set ^Ens.MessageBodyD(%d(1),"updateRequest")=$listupdate($g(^Ens.MessageBodyD(%d(1),"updateRequest")),1,$a(%e,7):%d(7),$a(%e,4):%d(4),$a(%e,6):%d(6),$a(%e,2):%d(2),$a(%e,3):%d(3),$a(%e,5):%d(5))
	}
	do ..%SQLUnlock() TCOMMIT:%tstart&&($zu(115,1)=1)
	set SQLCODE=0 kill:$g(omcall) %0CacheSQLRA
	QUIT
ERRORUpdate	set $zt="",SQLCODE=-415,%msg=$s($g(%msg)'="":%msg_" -- ",1:"")_$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler51",,%oper,"SQLUser"_"."_"updateRequest",$ze) if $ze["<FRAMESTACK>" { set %msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler52",,$ze,%oper,"SQLUser"_"."_"updateRequest") do ##Class(%SYS.System).WriteToConsoleLog(%msg) if ($zu(67,10,$j)=1)||($zu(67,10,$j)=3) { write !,%msg h 3 } HALT  } do ..%SQLEExit() QUIT  
	Return
%SQLValidateFields(sqlcode)
	new %f for %f=2,3 { if $g(%d(%f))'="",'($select(%d(%f)=$c(0)&&$zu(115,13):1,$isvalidnum(%d(%f),0):1,1:$$Error^%apiOBJ(7207,%d(%f)))) set sqlcode=..%SQLInvalid(%f+1,$g(%d(%f))) quit  } 
	for %f=4,5,6,7 { if $g(%d(%f))'="",'(($l(%d(%f))'>50)) set sqlcode=..%SQLInvalid(%f+1,$g(%d(%f))) quit  } 
	QUIT 'sqlcode
%SQLnBuild() public {
	set %n=$lb(,"ID","Age","DOB","Gender","Name","Race","Surname","x__classname")
	QUIT }
%SaveData(id) public {
	try {
		set id=$listget(i%"%%OID") if id'="" { set insert=0,idassigned=1 } else { set insert=1,idassigned=0 }
		set lock=0,lockok=0,tSharedLock=0
		if 'idassigned { set id=$i(^Ens.MessageBodyD) do ..%IdSet(id) set:$g(%objtxSTATUS)=2 %objtxOIDASSIGNED(+$this)="" }
		try {
			set tInnerException = ""
			;
			if 'insert {
				if (i%%Concurrency<4)&&(i%%Concurrency) { lock +(^Ens.MessageBodyD(id)#"E"):$zu(115,4) set lockok=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,2:2,4:2,:0)) set:lockok=2&&($tlevel) %0CacheLock($classname(),"E")=1 if lockok { set lock=1 } else { Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5803,$classname())) } }
				if ('$Data(^Ens.MessageBodyD(id))) {
					set insert=1
					if lock { lock -(^Ens.MessageBodyD(id)#"E") set (lock,lockok) = 0 }
				}
			}
			if insert {
				if i%%Concurrency&&$tlevel {  lock +(^Ens.MessageBodyD(id)#"E"):$zu(115,4) set lockok=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,2:2,4:2,:0)) set:(lockok=2&&(i%%Concurrency'=4)) %0CacheLock($classname(),"E")=1 set:lockok lock=1 if 'lockok { Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5803,$classname())) } }
				if i%%Concurrency=3 { lock +(^Ens.MessageBodyD(id)#"ES") set tSharedLock=1 }
				set:i%%Concurrency=4 lock=0
				set ^Ens.MessageBodyD(id)=$lb("~Ens.Request~updateRequest~")
				set ^Ens.MessageBodyD(id,"updateRequest")=$lb(i%Surname,i%Gender,i%Race,i%Age,i%DOB,i%Name)
			}
			else {
				set ^Ens.MessageBodyD(id)=$lb("~Ens.Request~updateRequest~")
				set ^Ens.MessageBodyD(id,"updateRequest")=$lb(i%Surname,i%Gender,i%Race,i%Age,i%DOB,i%Name)
			}
			set tStatus = 1
		}
		catch tInnerException {
			if ('idassigned) { Set $zobjoid("",$listget(i%"%%OID"))="",i%"%%OID"="" kill:$g(%objtxSTATUS)=2 %objtxOIDASSIGNED(+$this) }
			if (tSharedLock) {  lock -(^Ens.MessageBodyD(id)#"ES") } elseif (lockok=1)&&(insert)&&(i%%Concurrency=4) {  lock -(^Ens.MessageBodyD(id)) }
		}
		if lock lock -(^Ens.MessageBodyD(id)#"E")
		if $Isobject(tInnerException) { throw tInnerException }
	}
	catch tException {
		set tStatus = tException.AsStatus()
	}
	quit tStatus }
%SaveDirect(id="",idList="",data,concurrency=-1) public {
	try {
		if concurrency=-1 { set concurrency=$zu(115,10) }
		if id'="" { set insert=0,idassigned=1 } else { set insert=1,idassigned=0 }
		set lock=0,tSharedLock=0
		if 'idassigned { set id=$i(^Ens.MessageBodyD) }
		try {
			set tInnerException = ""
			;
			if 'insert {
				if concurrency { lock +(^Ens.MessageBodyD(id)#"E"):$zu(115,4) set lock=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,2:2,4:2,:0)) set:lock=2&&($tlevel) %0CacheLock($classname(),"E")=1 if 'lock { Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5803,$classname())) } }
				if ('$Data(^Ens.MessageBodyD(id))) {
					set insert=1
					if lock { lock -(^Ens.MessageBodyD(id)#"E") set (lock,lockok) = 0 }
				}
			}
			if insert {
				if concurrency { lock +(^Ens.MessageBodyD(id)#"E"):$zu(115,4) set lock=$s('$t:0,1:$case($SYSTEM.Lock.ReturnCode(),0:1,2:2,4:2,:0)) set:lock=2&&($tlevel) %0CacheLock($classname(),"E")=1 if 'lock { Throw ##class(%Exception.StatusException).ThrowIfInterrupt($$Error^%apiOBJ(5803,$classname())) } }
				set ^Ens.MessageBodyD(id)=data
				set ^Ens.MessageBodyD(id,"updateRequest")=data("updateRequest")
			}
			else {
				set ^Ens.MessageBodyD(id)=data
				set ^Ens.MessageBodyD(id,"updateRequest")=data("updateRequest")
			}
			set tStatus = 1
		}
		catch tInnerException {
		}
		if lock lock -(^Ens.MessageBodyD(id)#"E")
		if $Isobject(tInnerException) { throw tInnerException }
	}
	catch tException {
		set tStatus = tException.AsStatus()
	}
	quit tStatus }
%ValidateIndices(idxList="",autoCorrect=0,lockOption=1,multiProcess=1,mapList,verbose=1,errors)
	w !,"There are no indices to validate for class 'User.updateRequest'"
	QUIT 1
%ValidateObject(unused=0,checkserial=1) public {
	set sc=1
	If '$system.CLS.GetModified() Quit sc
	If m%Age Set iv=..Age If iv'="" Set rc=(..AgeIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"Age",iv)
	If m%DOB Set iv=..DOB If iv'="" Set rc=(..DOBIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"DOB",iv)
	If m%Gender Set iv=..Gender If iv'="" Set rc=(..GenderIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"Gender",iv)
	If m%Name Set iv=..Name If iv'="" Set rc=(..NameIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"Name",iv)
	If m%Race Set iv=..Race If iv'="" Set rc=(..RaceIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"Race",iv)
	If m%Surname Set iv=..Surname If iv'="" Set rc=(..SurnameIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"Surname",iv)
	Quit sc }
zXMLDTD(top,format,input,dtdlist)
 Quit ##class(%XML.Implementation).XMLDTD("User.updateRequest",.top,.format,.input,.dtdlist)
zXMLExportInternal()
 New tag,summary,attrsVal,savelocal,aval,k,tmpPrefix,prefixDepth,hasNoContent,hasElement,topAttrs,beginprefix,endprefix,savexsiAttrs,initialxsiAttrs,initlist,initialCR,inlineFlag,popAtEnd,saveTopPrefix,saveTypesPrefix,saveAttrsPrefix,saveUsePrefix,initlist
 Set $ztrap="XMLExportInternalTrap",popAtEnd=0
 Set summary=summaryArg,initialxsiAttrs=xsiAttrs
 If group Quit $$Error^%apiOBJ(6386,"User.updateRequest")
 If indentFlag Set initialCR=($extract(currentIndent,1,2)=$c(13,10))
 Set id=createId
 Set temp=""
 If id'="" {
   If $piece($get(idlist(+$this)),",",2)'="" Quit 1
   Set idlist(+$this)=id_",1"
 }
 If encoded Set initlist=$lb($get(oreflist),inlineFlagArg),oreflist=1,inlineFlag=inlineFlagArg
 If 'nocycle,('encoded||inlineFlag) {
   If $data(oreflist($this)) Quit $$Error^%apiOBJ(6296,"User.updateRequest")
   Set oreflist($this)=""
 }
 Set tag=$get(topArg)
 Set tmpi=(($get(typeAttr)'="")&&(typeAttr'="User.updateRequest"))
 If $IsObject(namespaces) {
     Set popAtEnd=1,saveTopPrefix=topPrefix,saveTypesPrefix=typesPrefix,saveAttrsPrefix=attrsPrefix,saveUsePrefix=usePrefix
     Set sc=namespaces.PushNodeForExport("",$get(local,0),(encoded||tmpi),"",,.topPrefix,.topAttrs,.typesPrefix,.attrsPrefix,.usePrefix)
     If 'sc Quit sc
   Set beginprefix=$select(namespaces.ElementQualified&&usePrefix:typesPrefix,1:"")
   If topAttrs'="" Set temp=temp_" "_topAttrs
   If tag="" Set tag="updateRequest"
   Set xsitype=namespaces.OutputTypeAttribute
 } Else {
   Set saveTopPrefix=topPrefix,saveTypesPrefix=typesPrefix,saveAttrsPrefix=attrsPrefix,saveUsePrefix=usePrefix
   Set typesPrefix=namespaces If (typesPrefix'=""),($extract(typesPrefix,*)'=":") Set typesPrefix=typesPrefix_":"
   If 'encoded Set namespaces=""
   Set (topPrefix,attrsPrefix,topAttrs,beginprefix)=""
   If tag="" Set tag=typesPrefix_"updateRequest"
   Set xsitype=0
 }
 Set local=+$get(local),savelocal=local
 Set endprefix="</"_beginprefix,beginprefix="<"_beginprefix
 If tmpi Set temp=temp_" "_xsiPrefix_"type="""_typesPrefix_"updateRequest"""_xsiAttrs,xsiAttrs=""
   If id'="" Set temp=" "_$select($get(soap12):soapPrefix_"id",1:"id")_"=""id"_id_""""_temp
 If encoded Set temp=temp_xsiAttrs,xsiAttrs=""
 If indentFlag Set %xmlmsg=currentIndent if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg } Set currentIndent=$select(initialCR:"",1:$c(13,10))_currentIndent_indentChars
 If tag[":" Set topPrefix=$piece(tag,":"),tag=$piece(tag,":",2)  If topPrefix'="" Set topPrefix=topPrefix_":"
 Set %xmlmsg="<"_topPrefix_tag_temp if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 Set attrsVal=attrsArg,attrsArg="" Set %xmlmsg=attrsVal if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 Set %xmlmsg=">" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 Set val=..Surname
 Set %xmlmsg=currentIndent_beginprefix_"Surname"_$select(xsitype:" "_xsiPrefix_"type="""_schemaPrefix_"string""",1:"")_">"_$select(val=$c(0):"",1:$select((val["<")||(val[">")||(val["&"):"<![CDATA["_$replace(val,"]]]]><![CDATA[>","]]]]]]><![CDATA[><![CDATA[>")_"]]]]><![CDATA[>",1:val))_endprefix_"Surname>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 Set val=..Gender
 Set %xmlmsg=currentIndent_beginprefix_"Gender"_$select(xsitype:" "_xsiPrefix_"type="""_schemaPrefix_"string""",1:"")_">"_$select(val=$c(0):"",1:$select((val["<")||(val[">")||(val["&"):"<![CDATA["_$replace(val,"]]]]><![CDATA[>","]]]]]]><![CDATA[><![CDATA[>")_"]]]]><![CDATA[>",1:val))_endprefix_"Gender>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 Set val=..Race
 Set %xmlmsg=currentIndent_beginprefix_"Race"_$select(xsitype:" "_xsiPrefix_"type="""_schemaPrefix_"string""",1:"")_">"_$select(val=$c(0):"",1:$select((val["<")||(val[">")||(val["&"):"<![CDATA["_$replace(val,"]]]]><![CDATA[>","]]]]]]><![CDATA[><![CDATA[>")_"]]]]><![CDATA[>",1:val))_endprefix_"Race>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 Set val=..Age
 If val'="" {
   Set %xmlmsg=currentIndent_beginprefix_"Age"_$select(xsitype:" "_xsiPrefix_"type="""_schemaPrefix_"long""",1:"")_">"_val_endprefix_"Age>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 }
 Set val=..DOB
 If val'="" {
   Set %xmlmsg=currentIndent_beginprefix_"DOB"_$select(xsitype:" "_xsiPrefix_"type="""_schemaPrefix_"long""",1:"")_">"_val_endprefix_"DOB>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 }
 Set val=..Name
 Set %xmlmsg=currentIndent_beginprefix_"Name"_$select(xsitype:" "_xsiPrefix_"type="""_schemaPrefix_"string""",1:"")_">"_$select(val=$c(0):"",1:$select((val["<")||(val[">")||(val["&"):"<![CDATA["_$replace(val,"]]]]><![CDATA[>","]]]]]]><![CDATA[><![CDATA[>")_"]]]]><![CDATA[>",1:val))_endprefix_"Name>" if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }
 If indentFlag { Set currentIndent=$extract(currentIndent,1,*-$length(indentChars)) Set %xmlmsg=currentIndent if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg }}
 Set %xmlmsg="</"_topPrefix_tag_">"
 if $data(%xmlBlock) { Do xeWrite^%occXMLInternal } else { write %xmlmsg } If indentFlag,'initialCR if $data(%xmlBlock) { Set %xmlmsg="" Do xeWriteLine^%occXMLInternal } else { write ! } Set $extract(currentIndent,1,2)=""
 If '$IsObject(namespaces) || (popAtEnd=1) Set topPrefix=saveTopPrefix,typesPrefix=saveTypesPrefix,attrsPrefix=saveAttrsPrefix,usePrefix=saveUsePrefix
 If popAtEnd Do namespaces.PopNode()
 If encoded Set oreflist=$list(initlist),inlineFlag=$list(initlist,2)
 If 'encoded||inlineFlag {
   If 'nocycle Kill oreflist($this)
 }
 Quit sc
XMLExportInternalTrap Set $ztrap=""
 If $data(val) , $IsObject(val) , ($piece($ze,">",1)="<METHOD DOES NOT EXIST") {
   Set sc=$$Error^%apiOBJ(6249,$classname(val))
 } Else {
   Set sc=$$Error^%apiOBJ(5002,$ze)
 }
XMLExportExit 
 If '$IsObject(namespaces) || (popAtEnd=1) Set topPrefix=saveTopPrefix,typesPrefix=saveTypesPrefix,attrsPrefix=saveAttrsPrefix,usePrefix=saveUsePrefix
 If popAtEnd Do namespaces.PopNode()
 Quit sc
zXMLGetSchemaImports(imports,classes)
 Quit ##class(%XML.Implementation).XMLGetSchemaImports("User.updateRequest",.imports,.classes)
zXMLImportInternal()
 New child,childlist,node,nodelist,inner,innerlist,data,encodedArray,key,nsIndex,savechild,savechildlist,saveinner,saveinnnerlist,exists
 Set $ztrap="XMLImportInternalTrap"
 Set encoded=$case($piece(fmt,",",1),"":0,"literal":0,"encoded":1,"encoded12":1,:"")
 If encoded="" Quit $$Error^%apiOBJ(6231,fmt)
 Set nsIndex=$select($get(namespace)="":"",1:$get(@(tree)@("N",namespace)))
 Set node=nodeArg,nodelist=nodeArgChildlist
 If tag'=@(tree)@("d",$zlascii(nodelist,9)) Set inner=node Goto XMLImportMalformed
 If bareProjection Quit $$Error^%apiOBJ(6386,"User.updateRequest")
 If encoded {
   Do XMLImportAttrnode() If $data(attributeList("id")) Set idlist(node)=$this
 }
 If $zboolean(+($zlascii(nodelist,13)#16),+1,1) Quit 1
 Set sc=$$XMLImportElements()
XMLImportExit Quit sc
XMLImportElements() ;
XMLLOOP1 Set descriptor=$zlascii(nodelist,$zwascii(nodelist,17)) Set child=($zlascii(@(tree)@($piece(node,",",1)),$piece(node,",",2))\16)_","_$zwascii(nodelist,17) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set child=##class(%XML.ImportHandler).NextChild(tree,node,.nodelist,child,.descriptor) } Else { Set child="" }} For { Quit:child=""  Quit:(descriptor#16)'=2  Set descriptor=$piece(child,",",2)+4 Set child=$piece(child,",",1)_","_descriptor Set descriptor=$zlascii(nodelist,descriptor) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set child=##class(%XML.ImportHandler).NextChild(tree,node,.nodelist,child,.descriptor) } Else {Set child="" }} } Goto XMLLOOP2
XMLLOOP For  { Set descriptor=$piece(child,",",2)+4 Set child=$piece(child,",",1)_","_descriptor Set descriptor=$zlascii(nodelist,descriptor) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set child=##class(%XML.ImportHandler).NextChild(tree,node,.nodelist,child,.descriptor) } Else {Set child="" }} Quit:child=""  Quit:(descriptor#16)'=2  }
XMLLOOP2 If child="" Quit sc
 If (descriptor#16)'=0 Set inner=child Goto XMLImportMalformedNoTag
 Set childlist=@(tree)@((descriptor\16))
 Set tag=@(tree)@("d",$zlascii(childlist,9))
 If tag="Surname" {
   If ($get(namespace)="")||$case($zwascii(childlist,19),0:1,nsIndex:1,:0) {
   If encoded Set savechild=child,savechildlist=childlist
   If encoded,$$XMLImportIdChild() {
     Set data=idlist(child)
   } Else { Goto:'sc XMLImportExit
     If $zboolean(+($zlascii(childlist,13)#16),+1,1) { Set data=""
     } Else {
             If (($length(childlist)-$zwascii(childlist,17)-3)\4)>1 {
               Set data="" If '##class(%XML.ImportHandler).SerializeNode(tree,child,0,0,.data,,,childlist) Goto XMLImportErrchild
             } Else { Set descriptor=$zlascii(childlist,$zwascii(childlist,17)) Set data=($zlascii(@(tree)@($piece(child,",",1)),$piece(child,",",2))\16)_","_$zwascii(childlist,17) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set data=##class(%XML.ImportHandler).NextChild(tree,child,.childlist,data,.descriptor) } Else { Set data="" }}
               If data'="" { Goto:(descriptor#16)=0 XMLImportErrchild Set data=@(tree)@("d",(descriptor\16)) }}
             If data'="" Goto:('$s(($l(data)'>50):1,1:$$Error^%apiOBJ(7201,data,50))) XMLImportErrchild
     }
     If encoded Do XMLImportAttrchild() If $data(attributeList("id")) Set idlist(child)=data
   }
   If encoded Set child=savechild,childlist=savechildlist
   Set ..Surname=data
   Goto XMLLOOP } }
 If tag="Gender" {
   If ($get(namespace)="")||$case($zwascii(childlist,19),0:1,nsIndex:1,:0) {
   If encoded Set savechild=child,savechildlist=childlist
   If encoded,$$XMLImportIdChild() {
     Set data=idlist(child)
   } Else { Goto:'sc XMLImportExit
     If $zboolean(+($zlascii(childlist,13)#16),+1,1) { Set data=""
     } Else {
             If (($length(childlist)-$zwascii(childlist,17)-3)\4)>1 {
               Set data="" If '##class(%XML.ImportHandler).SerializeNode(tree,child,0,0,.data,,,childlist) Goto XMLImportErrchild
             } Else { Set descriptor=$zlascii(childlist,$zwascii(childlist,17)) Set data=($zlascii(@(tree)@($piece(child,",",1)),$piece(child,",",2))\16)_","_$zwascii(childlist,17) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set data=##class(%XML.ImportHandler).NextChild(tree,child,.childlist,data,.descriptor) } Else { Set data="" }}
               If data'="" { Goto:(descriptor#16)=0 XMLImportErrchild Set data=@(tree)@("d",(descriptor\16)) }}
             If data'="" Goto:('$s(($l(data)'>50):1,1:$$Error^%apiOBJ(7201,data,50))) XMLImportErrchild
     }
     If encoded Do XMLImportAttrchild() If $data(attributeList("id")) Set idlist(child)=data
   }
   If encoded Set child=savechild,childlist=savechildlist
   Set ..Gender=data
   Goto XMLLOOP } }
 If tag="Race" {
   If ($get(namespace)="")||$case($zwascii(childlist,19),0:1,nsIndex:1,:0) {
   If encoded Set savechild=child,savechildlist=childlist
   If encoded,$$XMLImportIdChild() {
     Set data=idlist(child)
   } Else { Goto:'sc XMLImportExit
     If $zboolean(+($zlascii(childlist,13)#16),+1,1) { Set data=""
     } Else {
             If (($length(childlist)-$zwascii(childlist,17)-3)\4)>1 {
               Set data="" If '##class(%XML.ImportHandler).SerializeNode(tree,child,0,0,.data,,,childlist) Goto XMLImportErrchild
             } Else { Set descriptor=$zlascii(childlist,$zwascii(childlist,17)) Set data=($zlascii(@(tree)@($piece(child,",",1)),$piece(child,",",2))\16)_","_$zwascii(childlist,17) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set data=##class(%XML.ImportHandler).NextChild(tree,child,.childlist,data,.descriptor) } Else { Set data="" }}
               If data'="" { Goto:(descriptor#16)=0 XMLImportErrchild Set data=@(tree)@("d",(descriptor\16)) }}
             If data'="" Goto:('$s(($l(data)'>50):1,1:$$Error^%apiOBJ(7201,data,50))) XMLImportErrchild
     }
     If encoded Do XMLImportAttrchild() If $data(attributeList("id")) Set idlist(child)=data
   }
   If encoded Set child=savechild,childlist=savechildlist
   Set ..Race=data
   Goto XMLLOOP } }
 If tag="Age" {
   If ($get(namespace)="")||$case($zwascii(childlist,19),0:1,nsIndex:1,:0) {
   If encoded Set savechild=child,savechildlist=childlist
   If encoded,$$XMLImportIdChild() {
     Set data=idlist(child)
   } Else { Goto:'sc XMLImportExit
     If $zboolean(+($zlascii(childlist,13)#16),+1,1) { Set data=""
     } Else {
             If (($length(childlist)-$zwascii(childlist,17)-3)\4)>1 {
               Set data="" Goto XMLImportErrchild
             } Else { Set descriptor=$zlascii(childlist,$zwascii(childlist,17)) Set data=($zlascii(@(tree)@($piece(child,",",1)),$piece(child,",",2))\16)_","_$zwascii(childlist,17) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set data=##class(%XML.ImportHandler).NextChild(tree,child,.childlist,data,.descriptor) } Else { Set data="" }}
               If data'="" { Goto:(descriptor#16)=0 XMLImportErrchild Set data=@(tree)@("d",(descriptor\16)) }}
             Set data=$zstrip(data,"<>W",$c(13,10)) If data'="" Set data=$s($tr(data,"Ee(),.")'=data:"",1:$number(data,"I")) Goto:data="" XMLImportErrchild Goto:('$select(data=$c(0)&&$zu(115,13):1,$isvalidnum(data,0):1,1:$$Error^%apiOBJ(7207,data))) XMLImportErrchild
     }
     If encoded Do XMLImportAttrchild() If $data(attributeList("id")) Set idlist(child)=data
   }
   If encoded Set child=savechild,childlist=savechildlist
   Set ..Age=data
   Goto XMLLOOP } }
 If tag="DOB" {
   If ($get(namespace)="")||$case($zwascii(childlist,19),0:1,nsIndex:1,:0) {
   If encoded Set savechild=child,savechildlist=childlist
   If encoded,$$XMLImportIdChild() {
     Set data=idlist(child)
   } Else { Goto:'sc XMLImportExit
     If $zboolean(+($zlascii(childlist,13)#16),+1,1) { Set data=""
     } Else {
             If (($length(childlist)-$zwascii(childlist,17)-3)\4)>1 {
               Set data="" Goto XMLImportErrchild
             } Else { Set descriptor=$zlascii(childlist,$zwascii(childlist,17)) Set data=($zlascii(@(tree)@($piece(child,",",1)),$piece(child,",",2))\16)_","_$zwascii(childlist,17) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set data=##class(%XML.ImportHandler).NextChild(tree,child,.childlist,data,.descriptor) } Else { Set data="" }}
               If data'="" { Goto:(descriptor#16)=0 XMLImportErrchild Set data=@(tree)@("d",(descriptor\16)) }}
             Set data=$zstrip(data,"<>W",$c(13,10)) If data'="" Set data=$s($tr(data,"Ee(),.")'=data:"",1:$number(data,"I")) Goto:data="" XMLImportErrchild Goto:('$select(data=$c(0)&&$zu(115,13):1,$isvalidnum(data,0):1,1:$$Error^%apiOBJ(7207,data))) XMLImportErrchild
     }
     If encoded Do XMLImportAttrchild() If $data(attributeList("id")) Set idlist(child)=data
   }
   If encoded Set child=savechild,childlist=savechildlist
   Set ..DOB=data
   Goto XMLLOOP } }
 If tag="Name" {
   If ($get(namespace)="")||$case($zwascii(childlist,19),0:1,nsIndex:1,:0) {
   If encoded Set savechild=child,savechildlist=childlist
   If encoded,$$XMLImportIdChild() {
     Set data=idlist(child)
   } Else { Goto:'sc XMLImportExit
     If $zboolean(+($zlascii(childlist,13)#16),+1,1) { Set data=""
     } Else {
             If (($length(childlist)-$zwascii(childlist,17)-3)\4)>1 {
               Set data="" If '##class(%XML.ImportHandler).SerializeNode(tree,child,0,0,.data,,,childlist) Goto XMLImportErrchild
             } Else { Set descriptor=$zlascii(childlist,$zwascii(childlist,17)) Set data=($zlascii(@(tree)@($piece(child,",",1)),$piece(child,",",2))\16)_","_$zwascii(childlist,17) If (descriptor#16)=3 { If (descriptor\16)'=0 { Set data=##class(%XML.ImportHandler).NextChild(tree,child,.childlist,data,.descriptor) } Else { Set data="" }}
               If data'="" { Goto:(descriptor#16)=0 XMLImportErrchild Set data=@(tree)@("d",(descriptor\16)) }}
             If data'="" Goto:('$s(($l(data)'>50):1,1:$$Error^%apiOBJ(7201,data,50))) XMLImportErrchild
     }
     If encoded Do XMLImportAttrchild() If $data(attributeList("id")) Set idlist(child)=data
   }
   If encoded Set child=savechild,childlist=savechildlist
   Set ..Name=data
   Goto XMLLOOP } }
 Goto XMLImportBadTagchild
XMLImportBadTagchild Set inner=child
XMLImportBadTag Quit $$Error^%apiOBJ(6237,tag_$$XMLImportLocation(inner))
XMLImportBadTypenode Set inner=node Goto XMLImportBadType
XMLImportBadTypechild Set inner=child
XMLImportBadType Quit $$Error^%apiOBJ(6277,class,$select(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))#16)=0:@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)),9)),1:@(tree)@("d",($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)))_$$XMLImportLocation(inner))
XMLImportErrnode Set inner=node Goto XMLImportErr
XMLImportErrchild Set inner=child
XMLImportErr
 Set data=##class(%XML.ImportHandler).GetNextChild(tree,inner,"")
 If (data'="") {
   If ($zlascii(@(tree)@($piece(data,",",1)),$piece(data,",",2))#16)'=0 {
     Quit $$Error^%apiOBJ(6232,@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)),9))_$$XMLImportLocation(inner),$extract(@(tree)@("d",($zlascii(@(tree)@($piece(data,",",1)),$piece(data,",",2))\16)),1,200))
   } Else {
     Quit $$Error^%apiOBJ(6253,@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)),9))_$$XMLImportLocation(inner),@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(data,",",1)),$piece(data,",",2))\16)),9)))
   }
 } Else {
   Quit $$Error^%apiOBJ(6252,@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)),9))_$$XMLImportLocation(inner))
 }
XMLImportIdErr Set sc=$$Error^%apiOBJ(6236,id,@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)),9))_$$XMLImportLocation(inner)) Quit sc
XMLImportMalformed Set sc=$$Error^%apiOBJ(6233,$select(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))#16)=0:@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)),9)),1:@(tree)@("d",($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)))_$$XMLImportLocation(inner)) Quit sc
XMLImportMalformedNoTag Set node=$select($piece(inner,",",1)<=0:0,1:$zlascii(@(tree)@($piece(inner,",",1)),1)_","_$zlascii(@(tree)@($piece(inner,",",1)),5)),sc=$$Error^%apiOBJ(6254,$select(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))#16)=0:@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)),9)),1:@(tree)@("d",($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16))),$select(($zlascii(@(tree)@($piece(node,",",1)),$piece(node,",",2))#16)=0:@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(node,",",1)),$piece(node,",",2))\16)),9)),1:@(tree)@("d",($zlascii(@(tree)@($piece(node,",",1)),$piece(node,",",2))\16)))_$$XMLImportLocation(node)) Quit sc
XMLImportNSchild Set inner=child
XMLImportNS Set sc=$$Error^%apiOBJ(6235,@(tree)@("d",$zlascii(@(tree)@(($zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2))\16)),9))_$$XMLImportLocation(inner)) Quit sc
XMLImportLocation(node) new msg,loc
 Set loc=$lb($zlascii(@(tree)@(($zlascii(@(tree)@($piece(node,",",1)),$piece(node,",",2))\16)),21),$zlascii(@(tree)@(($zlascii(@(tree)@($piece(node,",",1)),$piece(node,",",2))\16)),25))
 If loc="" Quit ""
 Set msg=$get(^%qMsg("%ObjectErrors",$s(""'="":$zcvt("","L"),1:$s($mvv(58)="":"en",1:$mvv(58))),"XMLImportLocation")," (%1,%2)")
 Quit $$FormatText^%occMessages(msg,$listget(loc,1),$listget(loc,2))
XMLImportInternalTrap Set $ztrap=""
 Set loc=$select($ZE["<CLASS DOES NOT EXIST>":" for element "_tag_$$XMLImportLocation(child),1:"")
 Quit $$Error^%apiOBJ(5002,$ZE_loc)
XMLImportIdChild() Set inner=child,innerlist=childlist,tmp=$$XMLImportId(),child=inner,childlist=innerlist Quit tmp
XMLImportId() ;
 Do XMLImportAttrinner()
 If $data(attributeList("href")) {
   Set id=$case($data(@(tree)@("d",$zlascii(attributeList("href"),13))),1:@(tree)@("d",$zlascii(attributeList("href"),13)),0:"",:##class(%XML.ImportHandler).GetAttribute(tree,attributeList("href")))
   If $extract(id)="#" {
     Set tmp=$select($get(@(tree)@("i",$extract(id,2,*)))="":"",1:$piece(@(tree)@("i",$extract(id,2,*)),",",1)_","_$piece(@(tree)@("i",$extract(id,2,*)),",",2)) If tmp="" Goto XMLImportIdErr
     Set inner=tmp
     Set descriptor=$zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2)) Set innerlist=@(tree)@((descriptor\16))
   }
 } ElseIf $data(attributeList("ref")),($get(@(tree)@("n",$zwascii(attributeList("ref"),9)))="http://www.w3.org/2003/05/soap-encoding") {
   Set id=$case($data(@(tree)@("d",$zlascii(attributeList("ref"),13))),1:@(tree)@("d",$zlascii(attributeList("ref"),13)),0:"",:##class(%XML.ImportHandler).GetAttribute(tree,attributeList("ref")))
   Set tmp=$select($get(@(tree)@("i",id))="":"",1:$piece(@(tree)@("i",id),",",1)_","_$piece(@(tree)@("i",id),",",2)) If tmp="" Goto XMLImportIdErr
   Set inner=tmp
   Set descriptor=$zlascii(@(tree)@($piece(inner,",",1)),$piece(inner,",",2)) Set innerlist=@(tree)@((descriptor\16))
 } ElseIf '$data(attributeList("id")) {
   Quit 0
 }
 Quit $data(idlist(inner))
XMLImportAttrnode()
 If $get(attributeList)=node Quit
 Kill attributeList
 Set attributeList=node
 Set offset=29 While offset<$zwascii(nodelist,17) { Set attribute=$extract(nodelist,offset,offset+15)
    Set attrname=@(tree)@("d",$zlascii(attribute,1))
    Set attributeList(attrname)=attribute
 Set offset=offset+16 }
 Quit
XMLImportAttrchild()
 If $get(attributeList)=child Quit
 Kill attributeList
 Set attributeList=child
 Set offset=29 While offset<$zwascii(childlist,17) { Set attribute=$extract(childlist,offset,offset+15)
    Set attrname=@(tree)@("d",$zlascii(attribute,1))
    Set attributeList(attrname)=attribute
 Set offset=offset+16 }
 Quit
XMLImportAttrinner()
 If $get(attributeList)=inner Quit
 Kill attributeList
 Set attributeList=inner
 Set offset=29 While offset<$zwascii(innerlist,17) { Set attribute=$extract(innerlist,offset,offset+15)
    Set attrname=@(tree)@("d",$zlascii(attribute,1))
    Set attributeList(attrname)=attribute
 Set offset=offset+16 }
 Quit
zXMLNew(document,node,containerOref="")
	Quit (##class(User.updateRequest).%New())
zXMLSchema(top="",format="",namespacePrefix="",input=0,refOnly=0,schema)
 Quit ##class(%XML.Implementation).XMLSchema("User.updateRequest",top,format,namespacePrefix,input,refOnly,.schema)
zAgeDisplayToLogical(%val) public {
	Q $select(%val="":"",%val=$c(0)&&$zu(115,13):"",1:$s($in(%val,"","")'="":+$in(%val,"",%val),1:%val)) }
zAgeGetStored(id) public {
	Quit $Select(id'="":$listget($g(^Ens.MessageBodyD(id,"updateRequest")),4),1:"") }
zAgeIsValid(%val) public {
	Quit $select(%val=$c(0)&&$zu(115,13):1,$isvalidnum(%val,0):1,1:$$Error^%apiOBJ(7207,%val)) }
zAgeNormalize(%val) public {
	Quit $select(%val=$c(0)&&$zu(115,13):"",1:%val\1) }
zAgeXSDToLogical(%val) public {
	Q $s($tr(%val,"Ee(),.")'=%val:"",1:$number(%val,"I")) }
zDOBGetStored(id) public {
	Quit $Select(id'="":$listget($g(^Ens.MessageBodyD(id,"updateRequest")),5),1:"") }
zGenderGetStored(id) public {
	Quit $Select(id'="":$listget($g(^Ens.MessageBodyD(id,"updateRequest")),2),1:"") }
zNameGetStored(id) public {
	Quit $Select(id'="":$listget($g(^Ens.MessageBodyD(id,"updateRequest")),6),1:"") }
zRaceGetStored(id) public {
	Quit $Select(id'="":$listget($g(^Ens.MessageBodyD(id,"updateRequest")),3),1:"") }
zSurnameGetStored(id) public {
	Quit $Select(id'="":$listget($g(^Ens.MessageBodyD(id,"updateRequest")),1),1:"") }
zExtentExecute(%qHandle) [ SQLCODE ] public { New %ROWCOUNT,%ROWID,%msg,SQLCODE 
	Set sc=1
	 ;---&sql(DECLARE QExtent CURSOR FOR
 	 ;---		 SELECT ID FROM SQLUser.updateRequest)
 	 ;--- ** SQL PUBLIC Variables: SQLCODE
	 
	 ;---&sql(OPEN QExtent)
	try { s %qHandle="",%qHandle=$classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xEwU4AmP6bphpigPdpCLpVNAoT7T","%New") if '$isobject(%qHandle) s %qHandle=$$%0dsqlL() } catch { if $ze["<CLASS DOES NOT EXIST>"&&($ze["%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xEwU4AmP6bphpigPdpCLpVNAoT7T")||($ze["<ZSQLU>") { s %qHandle=$$%0dsqlL() } else { throw } }
	If SQLCODE { Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.%Message=$g(%msg) Set sc=$$Error^%apiOBJ(5821,"SQLCODE = "_SQLCODE) } Else { Set sc=1 }
	Quit sc }
zExtentFetch(%qHandle,Row,AtEnd=0) [ SQLCODE ] public { New %ROWCOUNT,%ROWID,%msg,SQLCODE 
	Set Row="",AtEnd=0
	 ;---&sql(FETCH QExtent INTO :c1)
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE
	if $isobject($g(%qHandle))'=1 { s SQLCODE=-102 } else { do %qHandle.FET() if SQLCODE=0 { s c1=%qHandle.sqlcol1 } }
	If 'SQLCODE { Set Row=$lb(c1) Set sc=1 }
	ElseIf SQLCODE=100 { Set AtEnd=1,sc=1 Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.%ROWCOUNT=$g(%ROWCOUNT) }
	Else { Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.Message=$g(%msg) Set AtEnd=1,sc=$$Error^%apiOBJ(5540,SQLCODE,$get(%msg)) }
	QUIT sc }
zExtentFetchRows(%qHandle,FetchCount=0,RowSet,ReturnCount,AtEnd) [ SQLCODE ] public { New %ROWCOUNT,%ROWID,%msg,SQLCODE 
	Set RowSet="",ReturnCount=0,AtEnd=0
	For {
		 ;---&sql(FETCH QExtent INTO :c1)
 		 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE
		if $isobject($g(%qHandle))'=1 { s SQLCODE=-102 } else { do %qHandle.FET() if SQLCODE=0 { s c1=%qHandle.sqlcol1 } }
		If 'SQLCODE { Set RowSet=RowSet_$lb(c1),ReturnCount=ReturnCount+1 Quit:(ReturnCount=FetchCount)||(($l(RowSet)+($l(RowSet)\ReturnCount))>24000) } Else { Set AtEnd=1 Quit }
	}
	If 'SQLCODE { Set sc=1 } ElseIf SQLCODE=100 { Set sc=1 Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.%ROWCOUNT=$g(%ROWCOUNT) } Else { Set:$isobject($g(%sqlcontext)) %sqlcontext.%SQLCODE=SQLCODE,%sqlcontext.Message=$g(%msg) Set sc=$$Error^%apiOBJ(5540,SQLCODE,$get(%msg)) }
	Quit sc }
zExtentSendODBC(%qHandle,array,qacn,%qrc,piece,ColumnCount) [ SQLCODE ] public { New %ROWCOUNT,%ROWID,%msg,SQLCODE 
	set %qrc=0,piece=0
	for {
		set rc=..ExtentFetch(.%qHandle,.row,.atend)
		if ('rc) { set %qrc=-400 set:$isobject($get(%sqlcontext)) %sqlcontext.SQLCode=-400,%sqlcontext.Message=$g(%msg) do ProcessError^%ourProcedure(rc,$get(%sqlcontext),.%qrc,.%msg),Logerr^%SYS.SQLSRV(%qrc,"","SP",.%msg) RETURN  }
		if row="" { set %qrc=100 set:$isobject($get(%sqlcontext)) %sqlcontext.SQLCode=100 RETURN  }
		if $g(%protocol)>50 { RETURN:$zobjexport(row,60) }
		else {
			if %protocol>46 { for piece=1:1:ColumnCount { goto:$zobjexport($lg(row,piece),50) SPDone } }
			else { for piece=1:1:ColumnCount { goto:$zobjexport($lg(row,piece),7) SPDone } }
		}
	}
	QUIT
SPDone	set:%protocol>46 piece=piece+1
	kill array(qacn)
	for i=piece:1:ColumnCount { set array(qacn,i)=$lg(row,i) }
	QUIT }
 q
%0dsqlL()	n %xxsql
	s %xxsql("S",1)="DECLARE QExtent CURSOR FOR SELECT ID "
	s %xxsql("S",2)="INTO  :i%sqlcol1"
	s %xxsql("S",3)="FROM SQLUser . updateRequest"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","DEBUG")=$c(1),%xxsql("M","FORKNETDMN")=$c(1)
	s %xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","SOAP12ENCns")="0"_$c(1,1)_"0"_$c(1)_"""http://www.w3.org/2003/05/soap-encoding"""
	s %xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1),%xxsql("M","USELOST")=$c(1),%xxsql("M","ZVERSION")=$c(1)
	s %xxsql("I","%callout")="",%xxsql("I","%occErrors")="",%xxsql("I","%occSqlfunc")="",%xxsql("I","%sySite")="",%xxsql("I","%sySt")=""
	s %xxsql("I","%sySystem")="",%xxsql("I","%xmlMap")="",%xxsql("I","EnsConstants")="",%xxsql("I","EnsErrors")="",%xxsql("I","EnsUtil")=""
	s %xxsql("I","Ensemble")="",%xxsql("NS")="PROJECT1"
	return $$BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Runtime","","","User",0,"",),",1,QExtent,","User.updateRequest.CLS",1)
zExtentFunc() public {
	try {
		set tSchemaPath = ##class(%SQL.Statement).%ClassPath($classname())
			set tStatement = ##class(%SQL.Statement).%New(,tSchemaPath)
			do tStatement.prepare(" SELECT ID FROM SQLUser . updateRequest")
		set tResult = tStatement.%Execute()
	}
	catch tException { if '$Isobject($Get(tResult)) { set tResult = ##class(%SQL.StatementResult).%New() } set tResult.%SQLCODE=tException.AsSQLCODE(),tResult.%Message=tException.AsSQLMessage() }
	Quit tResult }
zExtentGetODBCInfo(colinfo,parminfo,qHandle) public {
	set version = $Select($Get(%protocol,41)>40:4,1:3)
	Set metadata=$lb(1,1,"ID",4,10,0,2,"ID","updateRequest","SQLUser","",$c(0,0,0,0,0,0,0,0,0,0,0,1),0)
	Set colcount=$li(metadata,2),cmdlen=colcount*10,parmcount=$li(metadata,3+cmdlen),pmdlen=parmcount*6,parminfo=$li(metadata,cmdlen+3,cmdlen+pmdlen+3)
	If version=4 {
		Set colinfo=$li(metadata,2,2+cmdlen)
	} Else {
		Set colinfo=$li(metadata,2,2)
		For i=0:1:colcount-1 Set colinfo=colinfo_$list(metadata,3+(i*10),11+(i*10))
	}
	Quit 1 }
zIDKEYSQLCheckUnique(pFromOrig=0,%pID,%pVals...)
	 ;---if pFromOrig &sql(SELECT ID FROM Ens.MessageBody WHERE  ID=:%pVals(1) AND (%ID <> :%pID OR :%pID IS NULL)) QUIT SQLCODE=100
 	 ;--- ** SQL PUBLIC Variables: %pID, %pVals, SQLCODE
	if pFromOrig try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xEgGNRXEAtIQtfPsbGhnksRxNMiQ","%New") } catch { if $ze["<CLASS DOES NOT EXIST>"&&($ze["%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xEgGNRXEAtIQtfPsbGhnksRxNMiQ")||($ze["<ZSQLU>") { d %0dsqlP } else { throw } } QUIT SQLCODE=100
	 ;---&sql(SELECT ID FROM SQLUser.updateRequest WHERE  ID=:%pVals(1) AND (%ID <> :%pID OR :%pID IS NULL)) QUIT SQLCODE=100
 	 ;--- ** SQL PUBLIC Variables: %pID, %pVals, SQLCODE
	try { d $classmethod("%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xEsfrOLhug3tOHYrtUFHcJ69YpYQ","%New") } catch { if $ze["<CLASS DOES NOT EXIST>"&&($ze["%sqlcq."_$tr($namespace,"%_-$@:/\[]^ ","pudsssssssss")_".xEsfrOLhug3tOHYrtUFHcJ69YpYQ")||($ze["<ZSQLU>") { d %0dsqlR } else { throw } } QUIT SQLCODE=100
 q
%0dsqlP	n %xxsql
	s %xxsql("S",1)="SELECT ID FROM Ens . MessageBody WHERE ID = :%pVals(1) AND ( %ID <> :%pID OR :%pID IS NULL )"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","DEBUG")=$c(1),%xxsql("M","FORKNETDMN")=$c(1)
	s %xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","SOAP12ENCns")="0"_$c(1,1)_"0"_$c(1)_"""http://www.w3.org/2003/05/soap-encoding"""
	s %xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1),%xxsql("M","USELOST")=$c(1),%xxsql("M","ZVERSION")=$c(1)
	s %xxsql("I","%callout")="",%xxsql("I","%occErrors")="",%xxsql("I","%occSqlfunc")="",%xxsql("I","%sySite")="",%xxsql("I","%sySt")=""
	s %xxsql("I","%sySystem")="",%xxsql("I","%xmlMap")="",%xxsql("I","EnsConstants")="",%xxsql("I","EnsErrors")="",%xxsql("I","EnsUtil")=""
	s %xxsql("I","Ensemble")="",%xxsql("NS")="PROJECT1"
	d BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","User",0,"",),,"User.updateRequest.CLS")
	q
%0dsqlR	n %xxsql
	s %xxsql("S",1)="SELECT ID FROM SQLUser . updateRequest WHERE ID = :%pVals(1) AND ( %ID <> :%pID OR :%pID IS NULL )"
	s %xxsql("M","%occSqlfuncinc")=$c(1),%xxsql("M","ALLOCGVEC")=$c(1),%xxsql("M","CACHENAMES")="",%xxsql("M","DEBUG")=$c(1),%xxsql("M","FORKNETDMN")=$c(1)
	s %xxsql("M","HASHLOCK")=$c(1),%xxsql("M","NETNEWHASH")=$c(1),%xxsql("M","SOAP12ENCns")="0"_$c(1,1)_"0"_$c(1)_"""http://www.w3.org/2003/05/soap-encoding"""
	s %xxsql("M","USEDIRCACHE")=$c(1),%xxsql("M","USEGCNT")=2,%xxsql("M","USEGOFF")=$c(1),%xxsql("M","USELOST")=$c(1),%xxsql("M","ZVERSION")=$c(1)
	s %xxsql("I","%callout")="",%xxsql("I","%occErrors")="",%xxsql("I","%occSqlfunc")="",%xxsql("I","%sySite")="",%xxsql("I","%sySt")=""
	s %xxsql("I","%sySystem")="",%xxsql("I","%xmlMap")="",%xxsql("I","EnsConstants")="",%xxsql("I","EnsErrors")="",%xxsql("I","EnsUtil")=""
	s %xxsql("I","Ensemble")="",%xxsql("NS")="PROJECT1"
	d BuildQuery^%SYS.SQLSRV(.%xxsql,$lb("Logical","","","User",0,"",),,"User.updateRequest.CLS")
	q
zIDKEYSQLExists(pLockOnly=0,pUnlockRef,%pVal...)
	// SQL Foreign Key validation entry point for Key IDKEY.  Called by FKeys that reference this Key to see if the row is defined
	new id set id=%pVal(1)
	if pLockOnly>=0 { if '..%SQLGetLock(id,1,.pUnlockRef) { set sqlcode=-114,%msg=$$FormatMessage^%occMessages(,"%SQL.Filer","SQLFiler39",,"SQLUser"_"."_"updateRequest"_":"_"IDKEY") QUIT 0 } }
	if pLockOnly<1 {
		new qv set qv='..IDKEYSQLCheckUnique(0,,%pVal(1)) QUIT:pLockOnly=-1 qv
		do:'$g(pUnlockRef) ..%SQLReleaseLock(id,1) quit qv
	}
	else { do:'$g(pUnlockRef) ..%SQLReleaseLock(id,1) QUIT 1 }
	Return
]]></Routine>


<Class name="User.updateRequest">
<Super>Ens.Request</Super>
<TimeChanged>65827,42434.288706</TimeChanged>
<TimeCreated>65827,42432.650875</TimeCreated>

<Property name="Surname">
<Type>%String</Type>
</Property>

<Property name="Gender">
<Type>%String</Type>
</Property>

<Property name="Race">
<Type>%String</Type>
</Property>

<Property name="Age">
<Type>%Integer</Type>
</Property>

<Property name="DOB">
<Type>%Integer</Type>
</Property>

<Property name="Name">
<Type>%String</Type>
</Property>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DefaultData>updateRequestDefaultData</DefaultData>
<Data name="updateRequestDefaultData">
<Structure>listnode</Structure>
<Subscript>"updateRequest"</Subscript>
<Value name="1">
<Value>Surname</Value>
</Value>
<Value name="2">
<Value>Gender</Value>
</Value>
<Value name="3">
<Value>Race</Value>
</Value>
<Value name="4">
<Value>Age</Value>
</Value>
<Value name="5">
<Value>DOB</Value>
</Value>
<Value name="6">
<Value>Name</Value>
</Value>
</Data>
</Storage>
</Class>
</Export>
